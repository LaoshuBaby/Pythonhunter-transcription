WEBVTT

00:00:30.000 --> 00:00:37.840
欢迎大家来到不舍者说

00:00:37.840 --> 00:00:41.080
这是我们的一期特别片

00:00:41.080 --> 00:00:44.080
像我们之前说的会录一期

00:00:44.080 --> 00:00:45.519
Ask me anything

00:00:45.519 --> 00:00:48.000
那么这期节目的话

00:00:48.000 --> 00:00:52.040
我们会回答之前听众们提出的一些问题

00:00:52.040 --> 00:00:56.560
我们也有一个网站是ama.pythonhunter.org

00:00:56.560 --> 00:00:59.360
如果你之前没有看过的话也可以去看

00:00:59.360 --> 00:01:01.920
然后我们这期会回答的问题在上面

00:01:01.920 --> 00:01:05.519
然后因为这期也是我们的春节特别片

00:01:05.519 --> 00:01:07.920
所以提前祝大家新春快乐

00:01:07.920 --> 00:01:12.080
下一年是什么年是猪年吗还是

00:01:12.080 --> 00:01:14.640
鼠年

00:01:14.640 --> 00:01:17.280
时间过得太快了感觉

00:01:17.280 --> 00:01:19.760
不舍者说也是走过了两个年头了

00:01:19.760 --> 00:01:21.280
没有吧一个吧

00:01:21.280 --> 00:01:23.520
我们是从19年开始的

00:01:23.520 --> 00:01:24.800
一个吗

00:01:24.800 --> 00:01:28.800
等到听众们听到的时候我们就两年了

00:01:28.800 --> 00:01:30.960
就算是两个年头了

00:01:30.960 --> 00:01:32.960
就是跨过了两年

00:01:32.960 --> 00:01:36.160
跨过了第二年我们现在是在第二年对

00:01:36.160 --> 00:01:37.280
对

00:01:37.280 --> 00:01:40.080
说实话我觉得感慨分多

00:01:40.080 --> 00:01:45.440
一年前的今天我的iRedis是commit了第一个

00:01:45.440 --> 00:01:46.479
就是git commit

00:01:46.479 --> 00:01:48.240
就是正好今天吗

00:01:48.240 --> 00:01:51.759
是的我本来要今天发布1.0的结果

00:01:51.759 --> 00:01:53.840
还要做的东西太多了根本发不了

00:01:53.840 --> 00:01:55.200
你不用急

00:01:55.200 --> 00:02:01.360
信涛你可以今天发1.0alpha版本

00:02:01.360 --> 00:02:05.440
这个离alpha还差得远

00:02:05.440 --> 00:02:07.280
然后我看一下

00:02:07.280 --> 00:02:08.960
一年前的今天

00:02:08.960 --> 00:02:11.840
一年前的今天我还在失业

00:02:11.840 --> 00:02:14.720
什么鬼

00:02:14.720 --> 00:02:16.480
你们看过那个文章吗

00:02:16.480 --> 00:02:17.280
哪个

00:02:17.280 --> 00:02:19.520
就叫zero version

00:02:19.520 --> 00:02:23.200
zero base version还是叫什么

00:02:23.200 --> 00:02:26.079
就是说就我今天发过的

00:02:26.079 --> 00:02:29.760
现在好像很多项目都是一直是0.0点几版本

00:02:29.760 --> 00:02:32.160
然后一直都是0.0点几

00:02:32.160 --> 00:02:34.399
是这样你用过Typewire没有

00:02:34.399 --> 00:02:37.280
就是那个markdown的工具

00:02:37.280 --> 00:02:39.839
我用我用

00:02:39.839 --> 00:02:43.040
对一直是0.99后面3.4 3.5 3.6

00:02:43.040 --> 00:02:44.560
然后最开始是0.9点几

00:02:44.560 --> 00:02:47.280
然后他觉得不够就打死不发1.0

00:02:47.280 --> 00:02:49.040
然后马上0.9.99

00:02:49.040 --> 00:02:53.280
现在是0.9.9.31.3

00:02:53.280 --> 00:02:56.720
对

00:02:56.720 --> 00:02:57.760
太夸张了

00:02:57.760 --> 00:02:58.799
来来来来来

00:02:58.799 --> 00:03:00.959
然后那我们正式开始

00:03:00.959 --> 00:03:02.480
好

00:03:02.480 --> 00:03:03.280
我们正式开始

00:03:03.280 --> 00:03:05.680
对我们就每个人读一个问题

00:03:05.680 --> 00:03:06.959
谁先来

00:03:06.959 --> 00:03:08.560
我先来吧

00:03:08.560 --> 00:03:09.760
话不多说

00:03:09.760 --> 00:03:14.720
来自这个aoc.lmv的问题

00:03:14.720 --> 00:03:18.399
能谈谈你们是怎么制定职业规划的吗

00:03:18.400 --> 00:03:21.840
OK谁先来说一下

00:03:21.840 --> 00:03:23.760
我来吧

00:03:23.760 --> 00:03:28.400
其实我觉得我是没有一个特别清晰的职业规划

00:03:28.400 --> 00:03:30.800
就是说我不太想给自己规定

00:03:30.800 --> 00:03:35.040
就是说我需要在要具体说是我要成为某一个方向

00:03:35.040 --> 00:03:36.480
或者说在某一个方向增进

00:03:36.480 --> 00:03:41.200
因为我觉得我至少我现在是在那个职业阶段前面三年

00:03:41.200 --> 00:03:44.400
前面三年就是还在要不断去尝试

00:03:44.400 --> 00:03:47.280
不断去玩的时候保证一定深度的情况下

00:03:47.280 --> 00:03:49.200
所以说我给我自己的定的

00:03:49.200 --> 00:03:51.040
就是说是我之前16年的时候

00:03:51.040 --> 00:03:53.200
我刚去Python的时候就之前也聊过

00:03:53.200 --> 00:03:55.760
我给我自己定的是几个具体的事项

00:03:55.760 --> 00:03:59.520
就比如说要去做要去分享什么东西

00:03:59.520 --> 00:04:00.960
然后要在Python上面分享

00:04:00.960 --> 00:04:02.880
然后要成为Python的核心开发者

00:04:02.880 --> 00:04:04.720
然后要各种各样的

00:04:04.720 --> 00:04:08.480
然后在这样一些拿到就是说是这样一些结果的路上

00:04:08.480 --> 00:04:10.560
然后你会去不断尝试新的东西

00:04:10.560 --> 00:04:13.760
但是如果说我给我自己定的太深的目标

00:04:13.760 --> 00:04:18.880
就比如说我要去做一个XXX领域的专家

00:04:18.880 --> 00:04:21.440
或者其他我觉得这个东西太限定死了

00:04:21.440 --> 00:04:24.800
然后就会失去很多很好玩的东西

00:04:24.800 --> 00:04:27.360
对这是我的一个想法

00:04:27.360 --> 00:04:30.719
我觉得就可能说你至少在前面几年里面

00:04:30.719 --> 00:04:32.800
如果说是在职业职生要初期里面

00:04:32.800 --> 00:04:34.800
可能说给自己定一个大致的目标

00:04:34.800 --> 00:04:36.320
然后你要拿到什么样的结果

00:04:36.320 --> 00:04:39.039
剩下的话等你有过足够的积累之后

00:04:39.039 --> 00:04:42.400
你再决定说我要在什么时间点

00:04:42.400 --> 00:04:44.239
成为什么样一个level的人

00:04:44.239 --> 00:04:47.039
或者说是要拿到一个什么样具体的高度

00:04:47.039 --> 00:04:48.960
然后这样子我觉得可能是比较好

00:04:48.960 --> 00:04:56.799
对其实感觉但很多时候你会发现网上有一些

00:04:56.799 --> 00:05:00.159
有一些同学情况就是说他觉得

00:05:00.159 --> 00:05:02.239
比如说他可能是在一个外包公司里面

00:05:02.239 --> 00:05:04.719
然后每天做的东西他觉得都是差不多的

00:05:04.719 --> 00:05:08.080
然后也没有去能够深挖某项技术

00:05:08.080 --> 00:05:12.400
那种情况下我觉得他们可能会比较迷惑一点

00:05:12.400 --> 00:05:13.599
对吧可能

00:05:13.599 --> 00:05:15.680
是这样是这样

00:05:15.680 --> 00:05:17.680
然后我就不知道

00:05:17.680 --> 00:05:21.919
其实这个东西对每个人我觉得就是很不同

00:05:21.919 --> 00:05:25.840
也是就没有一个一概而论的答案

00:05:25.840 --> 00:05:29.440
觉得要我说的话

00:05:29.440 --> 00:05:33.200
我觉得还是找到你最感兴趣的是哪个方向

00:05:33.200 --> 00:05:43.120
然后比如说你就是对做过的项目里的某一块

00:05:43.120 --> 00:05:44.000
比较感兴趣的话

00:05:44.000 --> 00:05:46.159
那你就可以去再多了解一点

00:05:46.159 --> 00:05:52.000
然后在这个路上你可能就会发现更多有意思的问题

00:05:52.000 --> 00:05:55.120
基本上我觉得还是要遵循自己的兴趣

00:05:55.120 --> 00:05:56.640
我一直是这样看的

00:05:56.640 --> 00:05:56.960
对

00:05:56.960 --> 00:06:00.800
嗯现在吴老师你们有没有什么看法

00:06:00.800 --> 00:06:04.480
我这边有一个小的经验

00:06:04.480 --> 00:06:09.520
就是我不能说对所有人都适用

00:06:09.520 --> 00:06:12.240
其实我觉得不是规划的问题了

00:06:12.240 --> 00:06:17.120
我觉得应该去思考

00:06:17.120 --> 00:06:20.000
就是说首先就是你感兴趣的方向是什么

00:06:20.000 --> 00:06:23.200
其次就是但是这个东西可能很范

00:06:23.200 --> 00:06:25.600
特别是很多同学在职业初期

00:06:25.600 --> 00:06:27.600
我对很多方面都感兴趣

00:06:27.600 --> 00:06:27.840
对吧

00:06:27.840 --> 00:06:29.040
因为刚工作的时候

00:06:29.040 --> 00:06:32.560
其实很多这种业界的生产的环境的东西

00:06:32.560 --> 00:06:34.160
大家都会很有兴趣

00:06:34.160 --> 00:06:37.600
我觉得就是保持兴趣去了解就好

00:06:37.600 --> 00:06:40.960
然后等到你工作工作了一段时间

00:06:40.960 --> 00:06:44.080
比如说三到五年的时候

00:06:44.080 --> 00:06:48.880
对其实我会觉得职业规划是一个很难做的事情

00:06:48.880 --> 00:06:53.360
因为你相当于是在预测未来吧

00:06:53.360 --> 00:06:57.200
然后我觉得可能有一个更简单的方案

00:06:57.200 --> 00:06:59.360
就是你可以看你周围的人

00:06:59.360 --> 00:07:02.560
或者是你知道的人也不一定是你身边的

00:07:02.560 --> 00:07:09.200
就是总有一个人是你觉得你未来想成为类似的这种人的

00:07:09.200 --> 00:07:13.120
这种这种可以给你一个简单的目标

00:07:13.120 --> 00:07:13.280
对

00:07:13.280 --> 00:07:16.960
然后你再去想说你打算怎么去做

00:07:16.960 --> 00:07:21.440
就是因为其实你去看很多的技术博客也好

00:07:21.440 --> 00:07:22.480
哪怕你去逛知乎

00:07:22.480 --> 00:07:24.880
你会看到各种各样的程序

00:07:24.880 --> 00:07:30.000
对那你倾向于你未来成为什么样的工程师

00:07:30.000 --> 00:07:32.159
但我比如说我看到轮子哥很强

00:07:32.159 --> 00:07:33.520
但是我已经成不了他了

00:07:33.520 --> 00:07:36.880
因为我没有办法从初中小学就开始写程序

00:07:36.880 --> 00:07:39.200
这个已经不可能了

00:07:39.200 --> 00:07:40.640
对吧怎么办

00:07:40.640 --> 00:07:44.640
我觉得就是我比如说我举个例子

00:07:44.640 --> 00:07:48.080
比如说我定的目标是我想成为griddle

00:07:48.080 --> 00:07:50.719
我不是说我只是举例子

00:07:50.719 --> 00:07:52.719
假如我要成为griddle的话

00:07:52.720 --> 00:07:55.040
那你要做什么呢

00:07:55.040 --> 00:08:00.160
那其实听起来你可能第一步

00:08:00.160 --> 00:08:06.160
你要去找他在你距离他最近的那个阶段是什么

00:08:06.160 --> 00:08:08.080
对你不可能一跃成为他的

00:08:08.080 --> 00:08:12.080
对甚至你确实是有可能一辈子都成不了他

00:08:12.080 --> 00:08:14.480
但是如果你真的确认你要这么做的话

00:08:14.480 --> 00:08:17.760
我觉得还是可以去朝某个方向去努力的

00:08:17.760 --> 00:08:22.480
对因为像griddle这种其实在拍摄界

00:08:22.480 --> 00:08:23.920
这就只有一个嘛

00:08:23.920 --> 00:08:26.720
不可能说我定一个目标就真的去能成为他

00:08:26.720 --> 00:08:29.840
但是你在朝着那个方向去走的时候

00:08:29.840 --> 00:08:33.280
你是可以不断的深入的

00:08:33.280 --> 00:08:35.760
但我觉得这个可能会偏大

00:08:35.760 --> 00:08:37.760
对但是对更多更多的同学来说

00:08:37.760 --> 00:08:40.080
比如说遇到第一个坎就是

00:08:40.080 --> 00:08:43.760
当我从一个经验轻的程序员

00:08:43.760 --> 00:08:49.760
成为一个在当前工作阶段经验比较成熟的程序员的时候

00:08:49.760 --> 00:08:51.840
我下一步要怎么选

00:08:51.840 --> 00:08:53.200
其实会有很多方向

00:08:53.200 --> 00:08:55.680
比如说有架构师有tech leader

00:08:55.680 --> 00:09:00.560
对这种不同的方向对你想怎么选

00:09:00.560 --> 00:09:03.520
对我觉得这个你可以去考虑一些大家

00:09:03.520 --> 00:09:06.800
比如说你看到的一些人对这种

00:09:06.800 --> 00:09:10.160
对我觉得这个其实是挺好的一个

00:09:10.160 --> 00:09:12.560
并且也比较现实的一个方案

00:09:12.560 --> 00:09:17.840
然后就你可能找一个周围比较强的同事也是可以的

00:09:17.840 --> 00:09:19.760
对吧

00:09:19.760 --> 00:09:24.240
对但是我觉得其实还是要就是说是

00:09:24.240 --> 00:09:28.240
但是我觉得可能说我觉得对比职业规划更重要的一点

00:09:28.240 --> 00:09:32.080
可能说是首先是要保证一些基本的就是数量

00:09:32.080 --> 00:09:36.720
然后就包括说你愿意去主动去探寻一些东西

00:09:36.720 --> 00:09:40.560
然后你有然后比如说你有一个很好的提问方式

00:09:40.560 --> 00:09:43.120
包括说这个提问的方式方法之类的

00:09:43.120 --> 00:09:46.640
然后我觉得很多时候就我觉得很多时候

00:09:46.640 --> 00:09:50.160
我觉得就是对于我就是我走过来的话

00:09:50.160 --> 00:09:52.240
我觉得可能说对于我们新人而言

00:09:52.240 --> 00:09:55.600
很多时候其实职业规划对于我们来说还是太level了一点

00:09:55.600 --> 00:09:59.680
但是他最重要的就是说是做事的态度和做事的方式

00:09:59.680 --> 00:10:04.880
在职业初期的话是我觉得可能说是比规划还要重要的一点东西

00:10:04.880 --> 00:10:08.160
对我觉得不过我觉得你说这个又是另外一个话题

00:10:08.160 --> 00:10:11.600
就是说一些程序员必备的素养之类的对吧

00:10:11.600 --> 00:10:14.960
对不过说一个题外话

00:10:14.960 --> 00:10:18.560
对我9m的话你算是我当时的引路人了

00:10:18.560 --> 00:10:21.200
然后对但是我刚开始学python的时候

00:10:21.200 --> 00:10:24.560
我是把你的知乎答案和你的博客翻了一遍的

00:10:24.560 --> 00:10:27.760
然后我当时然后认真要玩知乎之后

00:10:27.760 --> 00:10:31.360
我要立的一个flag就是我要成为和你互粉的男人

00:10:31.360 --> 00:10:35.440
好吧感觉有点惭愧

00:10:35.440 --> 00:10:38.000
信涛你有什么想说的没有

00:10:38.000 --> 00:10:45.040
我其实跟你们差不多

00:10:45.040 --> 00:10:47.600
就是我也没有什么特别明确的职业规划

00:10:47.600 --> 00:10:49.600
但是我跟老师一样

00:10:49.600 --> 00:10:53.120
我有一些就是特别想成为的人

00:10:53.120 --> 00:10:56.560
在现实生活中有在网上也有

00:10:56.560 --> 00:10:58.480
比如说那个redis的作者

00:10:58.480 --> 00:11:02.800
就是他的博客总是能给别人很多启发

00:11:02.800 --> 00:11:06.560
而且就是你看起来他的项目都是一些C语言的

00:11:06.560 --> 00:11:10.239
但是他可以用C语言写的非常优雅

00:11:10.239 --> 00:11:12.959
就是非常让别人一看就非常明白

00:11:12.959 --> 00:11:15.920
很多人跟我说过就是他们看redis的源代码

00:11:15.920 --> 00:11:18.880
都都就原来C语言都可以写成这样

00:11:18.880 --> 00:11:23.040
而且他可以把一件事情做的很简单

00:11:23.040 --> 00:11:24.640
就是把一件事情做的很简单

00:11:24.640 --> 00:11:25.920
这个看起来很简单

00:11:25.920 --> 00:11:27.359
但其实是一个很麻烦的事情

00:11:27.359 --> 00:11:29.439
就没有十几年的编程经验

00:11:29.439 --> 00:11:30.959
我觉得是很难做到的

00:11:30.959 --> 00:11:34.719
所以我是就是不会干几年编程再去转到管理

00:11:34.720 --> 00:11:38.560
然后再对后面的人说在现在的社会你必须转管理

00:11:38.560 --> 00:11:39.840
我一开始跟你是这么想的

00:11:39.840 --> 00:11:40.880
我想做一辈子编程

00:11:40.880 --> 00:11:42.000
但是后来必须转管理

00:11:42.000 --> 00:11:44.320
我不会说这样的话的

00:11:44.320 --> 00:11:47.680
但是就是我不明白为什么很多人都对我说过这样的话

00:11:47.680 --> 00:11:48.880
我一开始想法跟你一样

00:11:48.880 --> 00:11:52.320
但是还是得转管理啊什么的

00:11:52.320 --> 00:11:53.520
就很不理解

00:11:53.520 --> 00:11:58.000
而且其实除了一些很有名的项目

00:11:58.000 --> 00:12:02.000
Athenrys他甚至会一些积极学习什么的

00:12:02.000 --> 00:12:05.040
就因为他有一个Redis的module

00:12:05.040 --> 00:12:06.480
就是积极学习相关的

00:12:06.480 --> 00:12:08.560
我觉得这是一个很扎实的人

00:12:08.560 --> 00:12:10.320
我也想成为这样的人

00:12:11.760 --> 00:12:12.240
是的是的

00:12:12.240 --> 00:12:15.920
就是我想顺着你刚才话题说一下

00:12:15.920 --> 00:12:17.760
因为你提到的就是转管理这个事情

00:12:17.760 --> 00:12:23.680
我觉得这个也是对很多程序员都是一个疑问吧

00:12:23.680 --> 00:12:27.040
就是说是不是一定要转管理

00:12:27.040 --> 00:12:29.200
或者说我到底应不应该转管理

00:12:29.200 --> 00:12:34.000
尤其是现在你看很多大厂

00:12:34.000 --> 00:12:34.960
我就不点名了

00:12:34.960 --> 00:12:37.280
就是说到35岁

00:12:37.280 --> 00:12:39.440
然后你可能就要把你给裁了

00:12:39.440 --> 00:12:40.960
然后对吧

00:12:40.960 --> 00:12:43.280
这种情况下程序员就会比较有危机感

00:12:43.280 --> 00:12:46.800
那就觉得说我到那个时候还能不能继续写代码

00:12:46.800 --> 00:12:48.480
就即使说我想写代码的话

00:12:48.480 --> 00:12:49.360
对

00:12:49.360 --> 00:12:51.120
我不知道你们怎么看这个问题

00:12:51.120 --> 00:12:53.440
其实说实话

00:12:53.440 --> 00:12:54.800
我觉得你35岁

00:12:54.800 --> 00:12:56.800
如果我觉得这个东西随缘就好

00:12:56.800 --> 00:13:00.800
因为其实转管理之后你35岁该被裁的还是会被裁

00:13:00.800 --> 00:13:02.479
因为其实说实话

00:13:02.479 --> 00:13:03.280
对

00:13:03.280 --> 00:13:06.560
其实拍的时候其实就比如说某厂还有

00:13:06.560 --> 00:13:09.040
某就接某厂

00:13:09.040 --> 00:13:10.800
然后大家自行入座

00:13:10.800 --> 00:13:12.400
然后就所谓的35岁的

00:13:12.400 --> 00:13:15.120
就是说是underline的规则的话

00:13:15.120 --> 00:13:18.479
就说不管是你是不是技术

00:13:20.240 --> 00:13:21.680
就不管你是不是技术

00:13:21.680 --> 00:13:22.800
不管你是不是管理

00:13:22.800 --> 00:13:25.280
他其实是要裁的话是统一发条件

00:13:25.280 --> 00:13:27.439
然后一个业务线一个业务线的分人

00:13:27.439 --> 00:13:30.640
我觉得这个东西的话还是

00:13:30.640 --> 00:13:32.400
对于这个东西焦虑来讲的话

00:13:32.400 --> 00:13:33.920
可能说有很多种方法

00:13:33.920 --> 00:13:35.360
然后来抵抗

00:13:35.360 --> 00:13:39.839
就比如说在早年阶段合理的控制支出

00:13:39.839 --> 00:13:42.079
然后你才储备足够的风险

00:13:42.079 --> 00:13:43.439
抵抗风险的能力

00:13:43.439 --> 00:13:46.560
以及说然后你自己和家人的一个配合沟通

00:13:46.560 --> 00:13:48.880
因为重点危机一直不是个个人的事情

00:13:48.880 --> 00:13:51.040
然后是和家人一起的事情

00:13:51.040 --> 00:13:53.199
然后除了这方面以外

00:13:53.200 --> 00:13:55.440
然后对于个人而言更重要的

00:13:55.440 --> 00:13:57.440
就还是看你自己想干什么

00:13:57.440 --> 00:13:59.520
然后因为35岁这个阶段

00:13:59.520 --> 00:14:00.960
我其实还是那句话

00:14:00.960 --> 00:14:03.200
你该被裁的你不会不被裁

00:14:03.200 --> 00:14:04.320
你不会被裁的

00:14:04.320 --> 00:14:07.200
你转不转观你都不会被裁

00:14:09.520 --> 00:14:11.920
OK我觉得你说这个好现实

00:14:11.920 --> 00:14:13.920
但是可能就是这样子

00:14:13.920 --> 00:14:14.320
对

00:14:15.040 --> 00:14:16.080
对还有一个问题就是说

00:14:16.080 --> 00:14:17.760
可能在中国的话

00:14:18.880 --> 00:14:20.880
管理被认为地位更高

00:14:20.880 --> 00:14:23.600
或者说他就是能拿到更高的薪水

00:14:23.600 --> 00:14:26.400
所以导致就是说程序员还是觉得

00:14:26.400 --> 00:14:28.400
我要往一个更高的level发展的

00:14:28.400 --> 00:14:30.320
这个level就是管理

00:14:30.320 --> 00:14:31.439
也是有这样一个情况

00:14:33.200 --> 00:14:34.000
是这样对

00:14:34.000 --> 00:14:36.640
对这个是客观存在的事实

00:14:37.200 --> 00:14:40.800
但是我觉得可能更多人来说的话

00:14:40.800 --> 00:14:42.240
我觉得这还是那句话

00:14:42.240 --> 00:14:43.600
你看你自己想

00:14:43.600 --> 00:14:46.640
因为你我觉得要确保一点

00:14:46.640 --> 00:14:49.600
你是因为想去转管理而去转的

00:14:49.600 --> 00:14:50.720
就是说你想去做管理

00:14:50.720 --> 00:14:51.760
而去转的观点

00:14:51.760 --> 00:14:54.480
而不是说你在某一方面做不下去了

00:14:54.480 --> 00:14:55.920
然后再去转到另一方面

00:14:55.920 --> 00:14:57.600
我觉得这是两个不同的概念

00:14:58.560 --> 00:14:58.880
OK

00:15:02.000 --> 00:15:03.520
温老师你有没有什么要补充的

00:15:04.320 --> 00:15:05.440
我觉得有一点

00:15:06.640 --> 00:15:06.960
就是

00:15:10.320 --> 00:15:11.920
我觉得转管理这个事情

00:15:15.120 --> 00:15:16.720
一方面是被

00:15:16.720 --> 00:15:19.200
我觉得是同时被两拨人给妖魔化了

00:15:19.200 --> 00:15:20.480
就是一拨是

00:15:21.440 --> 00:15:24.320
在中国不转管理你就没有出路

00:15:24.320 --> 00:15:26.800
然后就把它给妖魔化了

00:15:26.800 --> 00:15:28.400
然后另外一个就是

00:15:29.440 --> 00:15:30.880
在中国比如说

00:15:31.840 --> 00:15:32.880
你只有转管理

00:15:32.880 --> 00:15:34.560
你才能拿更高的level

00:15:34.560 --> 00:15:36.240
才能拿到这个职级

00:15:36.240 --> 00:15:38.160
就是我觉得一边是既得利益者

00:15:38.160 --> 00:15:39.520
一边是危机感

00:15:39.520 --> 00:15:41.120
就是那种没有得到的人

00:15:41.120 --> 00:15:42.880
然后两边的极端的人

00:15:42.880 --> 00:15:46.560
其实都在妖魔化这件事情

00:15:46.560 --> 00:15:47.360
它不是妖魔化

00:15:47.360 --> 00:15:48.080
应该是

00:15:48.080 --> 00:15:49.600
把它应该是叫

00:15:50.800 --> 00:15:52.000
我也不知道应该怎么说

00:15:52.000 --> 00:15:53.040
应该不是妖魔化

00:15:53.040 --> 00:15:54.720
妖魔化是在说它不好

00:15:54.720 --> 00:15:57.840
对其实对我来说

00:15:57.840 --> 00:15:59.760
这应该是对所有人来说

00:15:59.760 --> 00:16:02.480
应该就是一个正常的职业选择

00:16:02.480 --> 00:16:04.720
对是一个正常职业选择

00:16:04.720 --> 00:16:07.520
因为其实我觉得管理

00:16:07.520 --> 00:16:09.840
就是对大家一个正常选择

00:16:09.840 --> 00:16:12.400
当然现状是其实在中国的话

00:16:13.280 --> 00:16:16.240
目前因为我们互联网

00:16:16.240 --> 00:16:19.520
其实也是清新的比较晚

00:16:19.520 --> 00:16:21.840
而且其实大家还是注重在

00:16:21.840 --> 00:16:24.240
这种业务的这种竞争上

00:16:24.240 --> 00:16:27.440
所以说很多人会觉得

00:16:27.440 --> 00:16:28.560
35岁被裁

00:16:28.560 --> 00:16:29.520
40岁被裁

00:16:29.520 --> 00:16:32.480
但是其实你也会发现

00:16:32.480 --> 00:16:34.080
直播上有很多人说

00:16:34.080 --> 00:16:34.960
我现在35

00:16:34.960 --> 00:16:35.760
我现在40

00:16:35.760 --> 00:16:36.720
我在写代码

00:16:36.720 --> 00:16:39.280
然后而且我可能还专门搞了一个公司

00:16:39.280 --> 00:16:40.880
然后招了一批和我差不多的

00:16:40.880 --> 00:16:42.480
然后我们配合的还是都很好

00:16:42.480 --> 00:16:43.760
因为都比较有经验

00:16:43.760 --> 00:16:51.040
我觉得这个还是看你的选择吧

00:16:51.040 --> 00:16:52.240
就是你想成为

00:16:52.240 --> 00:16:54.080
就是在职业上

00:16:54.080 --> 00:16:57.040
就是首先我们说做技术还是做管理

00:16:57.040 --> 00:16:59.840
你应该是把它先区分

00:16:59.840 --> 00:17:01.040
它是你的职业

00:17:01.040 --> 00:17:03.680
它可能和你本身的技术追求

00:17:03.680 --> 00:17:05.040
也没有太大的关系

00:17:05.040 --> 00:17:07.760
就是不是意味着这两方面

00:17:07.760 --> 00:17:09.359
你选择了哪一方面之后

00:17:09.359 --> 00:17:10.640
你就可以说

00:17:10.640 --> 00:17:12.960
我可以不再怎么选择了

00:17:12.960 --> 00:17:15.200
可以不再怎么学习技术之类的

00:17:15.200 --> 00:17:16.480
这个是肯定不行的

00:17:16.480 --> 00:17:18.960
然后其次就是

00:17:18.960 --> 00:17:21.920
那相对于比如说我们认为说有家国师

00:17:21.920 --> 00:17:27.120
或者是这种管理或者是

00:17:27.120 --> 00:17:28.800
或者其他的吧

00:17:28.800 --> 00:17:31.680
然后我觉得还是这个事情

00:17:31.680 --> 00:17:34.640
如果你想在职业上继续突破

00:17:34.640 --> 00:17:37.280
那你就要考虑说你

00:17:37.280 --> 00:17:39.840
你愿不愿意去解决什么样的问题

00:17:39.840 --> 00:17:42.000
然后选择什么样的道路

00:17:42.000 --> 00:17:47.360
比如说当你选择管理的时候

00:17:47.360 --> 00:17:49.760
就意味着其实你要解决很多的

00:17:49.760 --> 00:17:51.680
非技术问题

00:17:51.680 --> 00:17:54.480
其实你是要提升很多时间的

00:17:54.480 --> 00:17:56.400
那你的目标应该是说

00:17:56.400 --> 00:17:58.880
我能通过投身于管理

00:17:58.880 --> 00:18:02.640
然后使整个团队有更大的产出

00:18:02.640 --> 00:18:04.800
或更有效的产出

00:18:04.800 --> 00:18:08.480
或者说能够通过组织一个小的组织

00:18:08.480 --> 00:18:13.600
来让整个更大的组织有更突出的收益

00:18:13.600 --> 00:18:16.160
就是首先你要是否认可这个事情

00:18:16.160 --> 00:18:18.480
以及你是否愿意做这个事情

00:18:18.480 --> 00:18:19.680
然后你再去做

00:18:19.680 --> 00:18:23.200
不然的话你只是单纯的因为

00:18:23.200 --> 00:18:25.520
他们都说我如果继续写大法

00:18:25.520 --> 00:18:27.440
写到28岁写到30岁

00:18:27.440 --> 00:18:28.400
以后就写不动了

00:18:28.400 --> 00:18:30.640
然后你强行转移吧

00:18:30.640 --> 00:18:33.840
我觉得不是一个好的结果

00:18:33.840 --> 00:18:37.040
对特别是那种比如说技术本身特别突出的话

00:18:37.040 --> 00:18:39.360
那你的兴趣又不在于那方面

00:18:39.360 --> 00:18:40.879
就是我就是不想

00:18:40.879 --> 00:18:42.800
因为和人打交道就是很复杂嘛

00:18:42.800 --> 00:18:45.360
我就是不想说做太多的这种事情

00:18:45.360 --> 00:18:47.920
那我觉得也有驾过车啊

00:18:47.920 --> 00:18:50.960
对或者说其实不断的提升自己的技术

00:18:50.960 --> 00:18:52.720
其实是有很多路可以选的

00:18:52.720 --> 00:18:54.800
我身边也有一些同学就是

00:18:54.800 --> 00:18:56.399
我不喜欢做的那种事情

00:18:56.399 --> 00:18:58.960
那我就磨练自己的技术

00:18:58.960 --> 00:19:02.720
最后进大厂先进中国的大的外企

00:19:02.720 --> 00:19:03.920
然后transfer出去

00:19:03.920 --> 00:19:05.920
对然后可以持续的走这条路

00:19:05.920 --> 00:19:09.440
对就是选择还是很多的

00:19:09.440 --> 00:19:10.880
嗯ok

00:19:10.880 --> 00:19:13.120
对我其实很同意文老师就说

00:19:13.120 --> 00:19:16.560
就一句话就说是你要是认可这件事

00:19:16.560 --> 00:19:18.800
然后而且你愿意去做这件事

00:19:18.800 --> 00:19:19.920
然后你才去做

00:19:19.920 --> 00:19:21.520
而不是说被逼无奈说

00:19:21.520 --> 00:19:22.720
我是因为其他原因

00:19:22.720 --> 00:19:24.800
我被逼无奈来做一个backup

00:19:24.800 --> 00:19:26.480
然后我才来选这条路

00:19:26.480 --> 00:19:28.320
如果说你这样做了

00:19:28.320 --> 00:19:30.080
其实你转这条路之后

00:19:30.080 --> 00:19:33.600
你也不会拿到一个非常好的结果

00:19:33.600 --> 00:19:36.000
对我刚才想说其实

00:19:36.000 --> 00:19:38.000
就是决定要不要转管理

00:19:38.000 --> 00:19:41.280
应该这个事情首先你得对它有一个

00:19:41.280 --> 00:19:42.560
比较清醒的认识吧

00:19:42.560 --> 00:19:46.000
就说转和不转的利弊分别是怎么样的

00:19:46.000 --> 00:19:48.719
然后在我个人看来的话

00:19:48.719 --> 00:19:51.439
转管理的好处就是说

00:19:51.439 --> 00:19:55.760
嗯management这方面的经验以及技巧

00:19:55.760 --> 00:19:57.520
其实它是比较通用的

00:19:57.520 --> 00:20:00.639
就相当于你在一个小组里面

00:20:00.639 --> 00:20:02.800
然后管一些人和你在另外一个

00:20:02.800 --> 00:20:05.040
做不同项目的小组里管那么多人

00:20:05.040 --> 00:20:07.600
和你在这个小组里开发程序

00:20:07.600 --> 00:20:10.879
和在另外一个小组里开发程序的差别

00:20:10.879 --> 00:20:12.320
会比较小一些

00:20:12.320 --> 00:20:16.080
就是不知道你们有没有get到我这个意思

00:20:16.080 --> 00:20:18.240
就是说对对

00:20:18.240 --> 00:20:21.600
就说management的这些经验会比较通用一点

00:20:21.600 --> 00:20:24.000
然后它就会可能就是说

00:20:24.000 --> 00:20:26.399
当你想换到另一个领域

00:20:26.399 --> 00:20:29.520
甚至你说你不在互联网领域工作了

00:20:29.520 --> 00:20:33.040
然后它也能给你一定的这种竞争力

00:20:33.040 --> 00:20:35.280
然后但是我觉得它的劣势

00:20:35.280 --> 00:20:36.800
就是不好的地方就在于说

00:20:36.800 --> 00:20:38.400
你做了一段时间manager

00:20:38.400 --> 00:20:40.639
然后想转回来再去写代码

00:20:40.639 --> 00:20:43.120
这个事情会比较的困难

00:20:43.120 --> 00:20:45.600
就是一般大家都说做管理好几年

00:20:45.600 --> 00:20:47.680
代码就都忘了怎么怎么着

00:20:47.680 --> 00:20:49.200
确实是有这种情况

00:20:49.200 --> 00:20:51.040
对所以

00:20:52.320 --> 00:20:55.920
所以就像比如说你可能做一个架构师的话

00:20:55.920 --> 00:20:58.240
你可能还是会写一点代码

00:20:58.240 --> 00:21:00.560
然后你不至于说完全把这部分技能丢掉

00:21:00.560 --> 00:21:02.960
所以可能对就是

00:21:02.960 --> 00:21:04.720
我觉得大家都是要认清楚利弊

00:21:04.720 --> 00:21:06.000
这个是比较重要的

00:21:08.160 --> 00:21:10.480
对我其实很正好你刚才说

00:21:10.480 --> 00:21:12.800
就像我们上期在那个SP2行

00:21:12.800 --> 00:21:15.840
就是工作三年那一期我们聊过的

00:21:15.840 --> 00:21:18.080
就是说其实即便是你做好技术

00:21:18.080 --> 00:21:20.000
纯粹的就是说是你IC的职位

00:21:20.000 --> 00:21:22.000
就是说技术的一个岗位

00:21:22.000 --> 00:21:24.080
你要继续往上升下去

00:21:24.080 --> 00:21:28.240
你的一个management的一个技能

00:21:28.240 --> 00:21:29.439
肯定是不可少的

00:21:29.439 --> 00:21:33.679
不管说是你去manage一个项目

00:21:33.679 --> 00:21:35.439
或者说是去调动资源

00:21:35.439 --> 00:21:36.159
或者说其他的

00:21:36.159 --> 00:21:37.840
这个东西是肯定必不可少的

00:21:37.840 --> 00:21:41.120
因为现在早就已经过了那种

00:21:41.120 --> 00:21:43.120
就是说早期开放时代

00:21:43.120 --> 00:21:44.320
洪荒时代那种

00:21:44.320 --> 00:21:45.600
单枪匹马一个人

00:21:45.600 --> 00:21:48.080
我一个人就是一个军队的那种时期了

00:21:48.080 --> 00:21:50.480
但是我觉得可能说很多现在的技术人

00:21:50.480 --> 00:21:53.280
对于这方面还是有抱有很多的敌意

00:21:53.280 --> 00:21:55.280
就觉得说我天下第一

00:21:55.280 --> 00:21:58.399
然后我这边代码我写好了就没有问题了

00:21:58.399 --> 00:22:00.560
但是其实我觉得这个也是有问题的

00:22:00.560 --> 00:22:03.840
因为你做技术你要提升

00:22:03.840 --> 00:22:05.920
然后你要在一个公司长久的做下去

00:22:05.920 --> 00:22:07.760
或者说你要在业界做下去

00:22:07.760 --> 00:22:11.040
你肯定要想去想你自己做的事情

00:22:11.040 --> 00:22:12.639
对于公司的业务

00:22:12.639 --> 00:22:14.560
或者说会有什么样的产出

00:22:14.560 --> 00:22:15.520
会有什么样的价值

00:22:15.520 --> 00:22:17.440
其实这个东西其实已经就是说是

00:22:17.440 --> 00:22:19.920
不管是manager或者说是技术

00:22:19.920 --> 00:22:21.600
它都是通用的

00:22:21.600 --> 00:22:23.840
是的我要再强调一下

00:22:23.840 --> 00:22:25.840
我上次那期里面提出的观点

00:22:25.840 --> 00:22:28.320
就是说你的技术能力是决定了你能走多快

00:22:28.320 --> 00:22:30.639
然后你的软技能是决定了你走的方向

00:22:30.639 --> 00:22:31.040
对

00:22:31.040 --> 00:22:35.919
好关于这个问题我们有没有什么还要补充

00:22:35.919 --> 00:22:38.080
如果没有的话我们可以往下走

00:22:38.080 --> 00:22:39.600
下一个

00:22:39.600 --> 00:22:41.120
下一个我来吧

00:22:41.120 --> 00:22:44.320
然后对于一门编程语言来说

00:22:44.320 --> 00:22:46.159
掌握程度分为几个等级

00:22:46.159 --> 00:22:48.480
每一个等级是怎么定义的

00:22:48.480 --> 00:22:51.040
这个问题是张博洋同学提的

00:22:51.040 --> 00:22:51.760
对

00:22:51.760 --> 00:22:53.920
我觉得应该是这么念

00:22:53.920 --> 00:22:57.040
这个问题我觉得蛮有意思的

00:22:57.040 --> 00:22:59.280
我可以先抛砖引玉一下

00:22:59.280 --> 00:23:02.560
之前在知乎上有一个问题是说

00:23:02.560 --> 00:23:06.399
什么样掌握python

00:23:06.399 --> 00:23:11.360
还是说是掌握某一门语言到什么样才叫做精通

00:23:11.360 --> 00:23:13.840
然后我当时的回答就是说

00:23:13.840 --> 00:23:18.639
首先你得判断一下你到底需不需要精通这门语言

00:23:18.640 --> 00:23:21.520
就是比如说我当时举的一个例子

00:23:21.520 --> 00:23:23.920
就是一个python的核心开发者

00:23:23.920 --> 00:23:26.560
也是我们当时在上海聊过的paul

00:23:26.560 --> 00:23:28.400
他是python的核心开发者

00:23:28.400 --> 00:23:34.400
那你可能会认为他是世界上对python最了解的那么几个人之一

00:23:34.400 --> 00:23:40.720
但其实他说他对python vm的那些c代码基本完全都不懂

00:23:40.720 --> 00:23:44.560
因为他给python贡献的那部分用不到这些

00:23:44.560 --> 00:23:46.880
但是他还是一个python的核心开发者

00:23:46.880 --> 00:23:49.840
然后他把他的那部分工作做得非常好

00:23:49.840 --> 00:23:53.040
所以我觉得就是

00:23:53.040 --> 00:23:58.880
掌握程度分几个等级其实是取决于你要用这门语言来做什么

00:23:58.880 --> 00:24:02.080
然后单纯的就是说我想提升到最高等级

00:24:02.080 --> 00:24:05.280
就掌握这门语言的一切是意义不大的

00:24:05.280 --> 00:24:08.400
对我是这样看的

00:24:08.400 --> 00:24:13.520
是的我自己给我自己之前就说是定的话

00:24:13.520 --> 00:24:17.280
就是入门了解然后熟悉精通

00:24:17.280 --> 00:24:22.879
然后就入门的话其实就是说你过了一个系统的tutorial

00:24:22.879 --> 00:24:25.680
然后就是你大概能够正常使用

00:24:25.680 --> 00:24:26.960
就算是一个入门

00:24:26.960 --> 00:24:30.080
了解的话就是说你踩过一些语言的坑

00:24:30.080 --> 00:24:32.000
然后你知道去怎么样去解决

00:24:32.000 --> 00:24:36.800
以及你能够知道在什么样的场景下是去做过这个东西

00:24:36.800 --> 00:24:38.720
然后这个其实还有一个比较好的

00:24:38.720 --> 00:24:42.080
比较重要的一个标志就是说是你大概去阅读过

00:24:42.080 --> 00:24:46.560
这个语言的常用的相关的官方文档

00:24:46.560 --> 00:24:49.520
对然后以及对周边的库有一个不错的掌握度

00:24:49.520 --> 00:24:50.560
这算是了解

00:24:50.560 --> 00:24:55.040
然后熟悉的话熟悉我觉得就是说是你大概去系统的阅读过

00:24:55.040 --> 00:24:57.919
这个语言实现的一部分或是全部

00:24:57.919 --> 00:24:59.439
然后你遇到过一些问题

00:24:59.439 --> 00:25:03.679
你能够去常见或主要的问题你能够去解决它

00:25:03.679 --> 00:25:07.439
或者说是找到思路去解决它排查出问题

00:25:07.439 --> 00:25:09.280
然后的话我觉得这是熟悉

00:25:09.280 --> 00:25:12.720
然后精通的话就是刚才你说的了解这个语言的

00:25:12.720 --> 00:25:14.399
掌握这个语言的方方面面

00:25:14.399 --> 00:25:16.320
这是我的一个定义

00:25:16.320 --> 00:25:21.120
也说说我现在剪辑上我一般都是写了解或者说勉强熟悉

00:25:21.120 --> 00:25:24.160
勉强熟悉这个写上去不太好我感觉

00:25:24.160 --> 00:25:26.160
但总之不要写精通

00:25:26.160 --> 00:25:29.200
对对对对对对

00:25:29.200 --> 00:25:30.800
这个应该大家是有共识的

00:25:30.800 --> 00:25:34.480
对其实我觉得就是说常用

00:25:34.480 --> 00:25:38.639
如果说你要专注于这方面的话熟悉其实是一个很宽泛的概念

00:25:38.640 --> 00:25:41.200
就意思说你要去踩过很多坑

00:25:41.200 --> 00:25:44.640
踩过很多坑然后去了解我对你的坑的原理

00:25:44.640 --> 00:25:49.200
或者说你能够很清楚的明白它适用的地方和不适用的地方

00:25:49.200 --> 00:25:53.040
这样一套东西才能够算是熟悉整个一套

00:25:53.040 --> 00:25:56.800
OK 欣涛文老师你们来发表一下你们的意见

00:25:56.800 --> 00:26:00.720
我觉得了解这个无所谓

00:26:00.720 --> 00:26:02.960
反正了解基本上又没什么用

00:26:02.960 --> 00:26:04.880
你又不太会那个

00:26:04.880 --> 00:26:06.480
然后下一步

00:26:06.480 --> 00:26:10.000
就比如说就没有什么特别的用处

00:26:10.000 --> 00:26:14.320
比如说看一本书我觉得觉得可以算了解了

00:26:14.320 --> 00:26:16.080
知道这个语言是怎么回事

00:26:16.080 --> 00:26:20.080
下一个阶段就是你能在用这个语言工作

00:26:20.080 --> 00:26:23.120
比如说我觉得我现在的java就是这样

00:26:23.120 --> 00:26:26.640
但是很多东西我都要去stackoverload查

00:26:26.640 --> 00:26:31.680
比如说怎么计算一个double array的平均数

00:26:31.680 --> 00:26:34.080
这个不查我有点写不出来

00:26:34.080 --> 00:26:38.080
因为很复杂它竟然没有一个内置的函数

00:26:38.080 --> 00:26:41.280
就这样我现在写java都要每天去查很多东西

00:26:41.280 --> 00:26:44.320
然后下一个阶段是熟悉

00:26:44.320 --> 00:26:47.040
这是第三个阶段一共四个阶段熟悉就是

00:26:47.040 --> 00:26:52.720
你知道一个东西在这个语言里是要怎么写

00:26:52.720 --> 00:26:56.879
比如说log在java里面怎么做在panel里面怎么做

00:26:56.879 --> 00:27:00.480
然后一些做事情的方式

00:27:00.480 --> 00:27:05.280
比如说在jango里面是怎么做的

00:27:05.280 --> 00:27:08.480
就我见过很多程序员在写jango的时候

00:27:08.480 --> 00:27:11.440
用java的方式写他们搞了很多层

00:27:11.440 --> 00:27:14.960
因为jango就一个vue model就现实出来就可以了

00:27:14.960 --> 00:27:21.040
但是他们搞了一些DL层不是DO层

00:27:21.040 --> 00:27:24.240
service层就是controller

00:27:24.240 --> 00:27:29.760
integration还有一些反正搞得很复杂

00:27:29.760 --> 00:27:33.920
然后在java里面你要熟悉那种依赖注入的方式

00:27:33.920 --> 00:27:37.200
这个在其他语言里面可能没有这叫熟悉

00:27:37.200 --> 00:27:42.720
还有elixir要熟悉一种gen server的写法

00:27:42.720 --> 00:27:46.720
说白了就是一些最佳实践

00:27:46.720 --> 00:27:49.760
对在这个语言里你做这件事情应该怎么做

00:27:49.760 --> 00:27:53.440
但如果你其实你比较熟悉一门语言了

00:27:53.440 --> 00:27:55.120
你换到另一门语言的时候

00:27:55.120 --> 00:27:58.640
你就想一想我在这个语言是用对应原来语言的什么lib

00:27:58.640 --> 00:28:01.200
然后对应什么样的方式应该也比较快

00:28:01.200 --> 00:28:03.520
然后下一个阶段是最后一个阶段

00:28:03.520 --> 00:28:07.440
我觉得就是你要熟悉这个语言是怎么设计的

00:28:07.440 --> 00:28:09.280
他设计他的人是怎么想的

00:28:09.280 --> 00:28:11.280
未来有什么方向

00:28:11.280 --> 00:28:16.800
然后其实我觉得离能共写代码也不算太远了

00:28:16.800 --> 00:28:20.320
接下来你要做的就是根据这些思想再去看一下代码

00:28:20.320 --> 00:28:22.080
看一下具体是怎么写的

00:28:22.080 --> 00:28:25.040
然后你如果你有什么bug fix或者feature的话

00:28:25.040 --> 00:28:28.720
你就我觉得有能力去改了

00:28:28.720 --> 00:28:31.760
这里我要补充一点

00:28:31.760 --> 00:28:34.720
就是说是你其实给某一门语言共线代码

00:28:34.720 --> 00:28:37.200
其实并不是一个特别难的事情

00:28:37.200 --> 00:28:40.159
然后的话就还是说你要去发现问题

00:28:40.159 --> 00:28:41.360
然后你去解决问题

00:28:41.360 --> 00:28:42.560
然后对应的提patch

00:28:42.560 --> 00:28:44.639
因为其实你提代码分为两种

00:28:44.639 --> 00:28:46.080
一种就是bug的fetch

00:28:46.080 --> 00:28:47.360
一些简单bug的fetch

00:28:47.360 --> 00:28:50.399
还有一种就是说是比较重要的bug

00:28:50.399 --> 00:28:51.360
就是横跨多版本

00:28:51.360 --> 00:28:52.800
然后又比较难处理的

00:28:52.800 --> 00:28:54.720
但是bug的fetch还有patch

00:28:54.720 --> 00:28:59.200
还有就是比如说一个新的feature的引入之类的东西

00:28:59.200 --> 00:29:03.040
我觉得这是两种不同的难度

00:29:03.040 --> 00:29:04.880
对我补充一下第三点

00:29:04.880 --> 00:29:09.040
我觉得可以写在python里面就叫pythonic

00:29:09.040 --> 00:29:12.800
比如说你写一个无限循环

00:29:12.800 --> 00:29:14.640
123 123 123

00:29:14.640 --> 00:29:16.800
你可以写一个iterator

00:29:16.800 --> 00:29:17.840
但是有更好的方式

00:29:17.840 --> 00:29:20.320
是iterator里面有一个circle的方法

00:29:20.320 --> 00:29:21.600
就可以无限循环

00:29:21.600 --> 00:29:24.080
就对这些内置库比较熟悉

00:29:24.080 --> 00:29:25.760
而且就算你自己写iterator

00:29:25.760 --> 00:29:27.679
也能写的比较pythonic

00:29:27.679 --> 00:29:31.520
就这种在这个语言里面很舒服

00:29:31.520 --> 00:29:33.760
嗯是

00:29:33.760 --> 00:29:38.720
文老师你有什么要补充的没有

00:29:38.720 --> 00:29:44.560
嗯我其实看法和信涛类似了

00:29:44.560 --> 00:29:47.120
就是但是我觉得有一个前提

00:29:47.120 --> 00:29:49.600
就是掌握程度分几个等级

00:29:49.600 --> 00:29:53.520
这个事情我不确认它有没有一个横定的标准

00:29:53.520 --> 00:29:54.480
就是我前一段时间

00:29:54.480 --> 00:29:57.120
还在知乎写过一个回答

00:29:57.120 --> 00:29:59.040
就是我是一个普通人

00:29:59.040 --> 00:30:01.360
我想用python操作一些excel

00:30:01.360 --> 00:30:02.720
来完成我日常的工作

00:30:02.720 --> 00:30:03.840
和我是一个程序员

00:30:03.840 --> 00:30:07.040
我想用python完成我日常的工作

00:30:07.040 --> 00:30:10.879
其实它是完全不一样的

00:30:10.879 --> 00:30:12.400
对就是对普通人来说

00:30:12.400 --> 00:30:16.400
我觉得就是可能在程序员看来

00:30:16.400 --> 00:30:18.480
他的python程度很轻松

00:30:18.480 --> 00:30:20.160
对特别不行

00:30:20.160 --> 00:30:21.920
但是他只要完成了工作

00:30:21.920 --> 00:30:22.800
我觉得对他来说

00:30:22.800 --> 00:30:25.120
他已经算是熟练掌握python了

00:30:25.120 --> 00:30:27.600
他没必要再往后走了

00:30:27.600 --> 00:30:29.040
对这个也是我之前说的

00:30:29.040 --> 00:30:30.639
就是说你要根据你的需求

00:30:30.639 --> 00:30:32.000
你要做什么来决定

00:30:32.000 --> 00:30:33.440
你要掌握到什么程度

00:30:33.440 --> 00:30:36.320
我觉得对那我们的听众

00:30:36.320 --> 00:30:38.480
大部分还是工程师

00:30:38.480 --> 00:30:40.800
对如果让我来定义

00:30:40.800 --> 00:30:42.800
我不是说这个定义准确

00:30:42.800 --> 00:30:43.919
我只能简单的区分

00:30:43.919 --> 00:30:46.720
但我觉得了解就是

00:30:46.720 --> 00:30:51.280
你学会了一般语言的基础的控制流

00:30:51.280 --> 00:30:54.560
对然后了解了它的基本语法

00:30:54.560 --> 00:30:57.920
对我就基本上认为你可以去了解了

00:30:57.920 --> 00:31:00.160
就你简单的去用过了

00:31:00.160 --> 00:31:02.080
对那熟悉的话

00:31:02.080 --> 00:31:05.440
我认为就是你能把这个你想要的结果

00:31:05.440 --> 00:31:08.960
通过这本语言最后实现出来

00:31:08.960 --> 00:31:10.800
也算是勉强的熟悉

00:31:10.800 --> 00:31:13.920
就是你知道了一些常用的写法之类的

00:31:13.920 --> 00:31:17.520
但是精通我觉得没有定义

00:31:17.520 --> 00:31:19.280
那在熟悉之上

00:31:19.280 --> 00:31:22.160
或者说我觉得熟悉的定义应该更高一点

00:31:22.160 --> 00:31:26.320
就是你了解这门语言的最佳实践

00:31:26.320 --> 00:31:28.560
这门语言的生态规范

00:31:28.560 --> 00:31:32.080
以及这门语言的它自身的语言哲学

00:31:32.080 --> 00:31:37.040
就是你不能说我写python

00:31:37.040 --> 00:31:38.320
我raisearrow特别少

00:31:38.320 --> 00:31:40.480
我去写golang我就到处panic

00:31:40.480 --> 00:31:45.760
对当然其实我不喜欢returnarrow这种形式

00:31:45.760 --> 00:31:48.000
但是如果你想做一个工业级的

00:31:48.000 --> 00:31:49.840
这种生产环境的项目

00:31:49.840 --> 00:31:52.080
你肯定要跟着golang的生态环境走

00:31:52.080 --> 00:31:53.840
这样的话以后它的更新

00:31:53.840 --> 00:31:55.040
它的新的code出现

00:31:55.040 --> 00:31:58.560
它能让你去快速的进入进来

00:31:58.560 --> 00:32:00.560
对就是

00:32:00.560 --> 00:32:03.680
对我觉得你们刚才说的有一个共同点

00:32:03.680 --> 00:32:08.800
就是说了解可能是了解某一门语言的语法

00:32:08.800 --> 00:32:09.200
对吧

00:32:09.200 --> 00:32:13.840
然后就是说能写出在语法上正确的程序

00:32:13.840 --> 00:32:16.960
然后的话熟悉就是说能够写出

00:32:16.960 --> 00:32:20.560
在这个语言里是最优的写法

00:32:20.560 --> 00:32:24.160
就是你们刚才说其实可以总结成这样的一个

00:32:24.160 --> 00:32:24.880
我觉得

00:32:24.880 --> 00:32:26.960
对我觉得可以吧

00:32:26.960 --> 00:32:29.120
其实是这样我觉得就是说你了解

00:32:29.120 --> 00:32:30.560
只是说单纯了解语法的话

00:32:30.560 --> 00:32:32.480
其实你顶多能说入门

00:32:32.480 --> 00:32:34.240
就是说你能写出正确语法的东西

00:32:34.240 --> 00:32:35.440
我觉得你只是说入门

00:32:35.440 --> 00:32:36.240
你了解双串

00:32:36.240 --> 00:32:38.240
因为我自己觉得了解的话

00:32:38.240 --> 00:32:40.080
可能说你是要需要去了解

00:32:40.080 --> 00:32:41.760
就是说是去知道

00:32:41.760 --> 00:32:44.160
除了知道就正确语法怎么写以外

00:32:44.160 --> 00:32:46.960
你要去知道一门语言的一些

00:32:46.960 --> 00:32:48.760
就是说是实践一些排查

00:32:48.760 --> 00:32:50.320
就是说怎么去调试

00:32:50.320 --> 00:32:52.880
然后一些简单的问题的排查思路

00:32:52.880 --> 00:32:55.680
我觉得这是一个就觉得了解的一个定义

00:32:55.680 --> 00:32:58.720
而熟悉的话就像比如说刚才说正确的使用

00:32:58.720 --> 00:33:04.800
问题的排查还是主要是看你对于问题的排查和其他的能力

00:33:04.800 --> 00:33:10.240
但问题排查和其他能力并不是说好像和语言无关

00:33:10.240 --> 00:33:12.880
很多时候其实是和语言无关的

00:33:12.880 --> 00:33:14.320
我觉得对吧

00:33:14.320 --> 00:33:16.560
这倒也是

00:33:16.560 --> 00:33:19.200
但是我觉得就可能说你去排查一个关于语言相关的

00:33:19.200 --> 00:33:21.200
就是说是比如说你常见怎么调试

00:33:21.200 --> 00:33:22.720
就是说是你一个服务

00:33:22.720 --> 00:33:24.480
然后你怎么样去阅读它的代码

00:33:24.480 --> 00:33:26.880
然后比如说你线上服务处

00:33:26.880 --> 00:33:28.320
你这个是用什么写的

00:33:28.320 --> 00:33:30.000
然后你用什么工具去调试

00:33:30.000 --> 00:33:32.640
我觉得对于这样一些周边的生态的

00:33:32.640 --> 00:33:35.280
就是说是工具和调试方法的一个掌握程度

00:33:35.280 --> 00:33:38.880
是区分了解和熟悉的一个比较重要的一个分水岭

00:33:38.880 --> 00:33:40.320
这个我也同意

00:33:40.320 --> 00:33:40.800
对

00:33:40.800 --> 00:33:44.080
就是说你对于这个语言的生态一定要掌握

00:33:44.080 --> 00:33:48.080
就不光其实不光一门语言永远不光是这门语言本身

00:33:48.080 --> 00:33:48.480
对

00:33:48.480 --> 00:33:49.520
对对对

00:33:49.520 --> 00:33:53.600
我觉得可能说如果说你只是说我单纯的熟悉语法

00:33:53.600 --> 00:33:56.240
我觉得可能说那只是说一个入门或者其他的

00:33:56.240 --> 00:33:59.440
因为了解其实我觉得是要能够正常的去

00:33:59.440 --> 00:34:03.040
就是说是应该叫workable

00:34:03.040 --> 00:34:06.399
就是说是可以用来简单日常工作使用的

00:34:06.399 --> 00:34:08.000
就是说是叫做了解

00:34:08.000 --> 00:34:09.360
好的

00:34:09.360 --> 00:34:10.159
OK

00:34:10.159 --> 00:34:13.839
好我觉得这个问题我们讨论的已经比较充分了

00:34:13.839 --> 00:34:15.440
然后下一个问题我来吧

00:34:15.440 --> 00:34:18.239
是齐香阳同学提出的

00:34:18.239 --> 00:34:22.239
他的问题是说如果只会python的程序员

00:34:22.239 --> 00:34:25.040
应该选哪一门语言作为第二语言

00:34:25.040 --> 00:34:29.600
可以从技术投资和基本技能提升的角度来讲讲吗

00:34:29.600 --> 00:34:32.560
先推荐语言吧

00:34:32.560 --> 00:34:35.839
我想推荐英语

00:34:35.839 --> 00:34:39.040
哈哈哈哈哈

00:34:39.040 --> 00:34:42.239
我不太清楚这位同学

00:34:42.239 --> 00:34:45.679
他说他只会python是一个什么概念

00:34:45.679 --> 00:34:48.639
他应该是编程语言

00:34:48.639 --> 00:34:51.600
对对对

00:34:51.600 --> 00:34:54.159
好我先略过英语那个

00:34:54.159 --> 00:34:57.600
我会觉得从技术投资角度来讲的话

00:34:57.600 --> 00:35:00.800
我们假设如果真的存在技术投资这个概念的话

00:35:00.800 --> 00:35:05.680
那我觉得如果你已经掌握了一门语言

00:35:05.680 --> 00:35:10.399
然后我会觉得你投资某一个理论的方向

00:35:10.399 --> 00:35:14.399
会比你再去立刻学一门新的语言

00:35:14.399 --> 00:35:15.919
可能收益会大一些

00:35:15.919 --> 00:35:19.520
我说的方向可能指网络可能指操作系统

00:35:19.520 --> 00:35:24.640
可能说比如说我想去了解机器学习的入门

00:35:24.640 --> 00:35:26.399
对就是

00:35:26.399 --> 00:35:30.560
之后你会发现这些底层的知识总会

00:35:30.560 --> 00:35:33.600
在某一个时刻能够汇聚到你

00:35:33.600 --> 00:35:35.680
遇到了某个问题上

00:35:35.680 --> 00:35:39.360
然后去运用某些思想然后去解决掉它

00:35:39.360 --> 00:35:41.600
就是相比于我学会了一门语言

00:35:41.600 --> 00:35:48.319
我立刻去学会另一门语言去了解它的生态

00:35:48.319 --> 00:35:49.759
也许收益没有那么大

00:35:49.759 --> 00:35:54.240
特别是如果你没有一个真实的生产环境供你去做实践的话

00:35:54.240 --> 00:35:57.600
那你去了解一个生态其实

00:35:57.600 --> 00:35:59.520
它不是一个有驱动力的事情

00:35:59.520 --> 00:36:03.360
你只能漫无目的的去了解一下

00:36:03.360 --> 00:36:04.960
对

00:36:04.960 --> 00:36:06.560
对我很同意温老师说的

00:36:06.560 --> 00:36:09.840
其实就是说你学一门语言你要去用它

00:36:09.840 --> 00:36:13.440
对吧你要找到能够去用这门语言的场合

00:36:13.440 --> 00:36:16.160
不然的话你光是就是纯学的话

00:36:16.160 --> 00:36:19.600
好像也没有什么特别大的用处

00:36:19.600 --> 00:36:20.320
对吧

00:36:20.320 --> 00:36:24.240
这一点其实我比较持反对态度

00:36:24.240 --> 00:36:28.240
因为其实是对于我们相对Junior来讲的话

00:36:28.240 --> 00:36:32.640
因为Python其实在国内大家看到是市场份额是足够的

00:36:32.640 --> 00:36:36.480
然后的话其实如果说你想去换一个比较好的环境

00:36:36.480 --> 00:36:37.759
就简而言之

00:36:37.759 --> 00:36:39.680
你这个有数据支持吗

00:36:39.680 --> 00:36:41.600
是的因为其实你看国内公司

00:36:41.600 --> 00:36:42.879
就国内大型的公司

00:36:42.879 --> 00:36:44.799
就是说我们从职业发展的角度来讲

00:36:44.799 --> 00:36:46.960
就是说比如说我最开始在小厂工作

00:36:46.960 --> 00:36:48.319
可能是我们用Python的多

00:36:48.319 --> 00:36:49.600
然后我现在用大厂

00:36:49.600 --> 00:36:51.520
现在是没有用Python了

00:36:51.520 --> 00:36:53.839
然后的话头条现在是在用Golang

00:36:53.839 --> 00:36:56.720
之后现在也应该是Golang和Python并存

00:36:56.720 --> 00:37:00.640
对然后的话像其他的公司相对来说都是比较少的

00:37:00.640 --> 00:37:01.839
如果说你是

00:37:01.840 --> 00:37:03.200
但你只是指web

00:37:03.200 --> 00:37:05.280
你是指只是Python

00:37:05.280 --> 00:37:06.960
我们以工程的角度

00:37:06.960 --> 00:37:09.120
我就是从工程的角度来说

00:37:09.120 --> 00:37:12.720
你不能说机器学习和一些自动化运营就不是工程

00:37:12.720 --> 00:37:13.920
这个我是不同意的

00:37:13.920 --> 00:37:15.040
对还是挺

00:37:15.040 --> 00:37:20.080
而且一些大厂的平台应该也有比较多的用Python

00:37:20.080 --> 00:37:20.800
我知道

00:37:20.800 --> 00:37:22.480
我不是说写中间件

00:37:22.480 --> 00:37:24.880
我是说写一些系统之类的

00:37:24.880 --> 00:37:30.000
其实我这边是我们现在是相对较少的

00:37:30.000 --> 00:37:34.160
说实话就是就因为就是说如果说你要去跳个大厂

00:37:34.160 --> 00:37:35.600
或者说你想换一个方向的话

00:37:35.600 --> 00:37:39.440
我其实我觉得说你去掌握其他的语言还是有比较大的

00:37:39.440 --> 00:37:40.720
有比较大的必要性

00:37:40.720 --> 00:37:45.120
因为其实每个公司都有国内的话就以web为例

00:37:45.120 --> 00:37:49.360
就是说你是比如说我现在是一个Python后端开发工程师

00:37:49.360 --> 00:37:52.080
然后我现在想去跳个大厂换一个工作

00:37:52.080 --> 00:37:54.320
那么这个时候其实大家要么是go

00:37:54.320 --> 00:37:55.040
要么是加吧

00:37:55.040 --> 00:37:56.400
或者说是加为居多

00:37:56.400 --> 00:38:02.320
那么这个时候其实虽然说我们很多东西是跟语言无关的

00:38:02.320 --> 00:38:05.360
但是实际上你对于一个语言的时间来讲

00:38:05.360 --> 00:38:07.680
其实还是要有一定程度上的了解

00:38:07.680 --> 00:38:13.040
其实说实话我觉得说在职业早期阶段去多尝试一下其他的语言

00:38:13.040 --> 00:38:14.880
或者说我觉得还是挺有必要的

00:38:14.880 --> 00:38:16.640
还是挺重要的一件事

00:38:17.840 --> 00:38:19.440
那你推荐什么语言呢

00:38:20.480 --> 00:38:24.400
如果说只是说从那个暴力出奇迹

00:38:24.400 --> 00:38:27.120
就是说为了找工作角度来讲毫无疑问推荐Java

00:38:27.120 --> 00:38:34.160
然后因为其实对于就是说web或者说是整个开发这一块来讲的话

00:38:34.160 --> 00:38:37.840
Java无论是生态还是可以找到例子

00:38:37.840 --> 00:38:41.040
还是说整个学习的难易程度都是首选

00:38:41.040 --> 00:38:46.800
然后当然如果说你是要从就只是觉得个人自己觉得好玩

00:38:46.800 --> 00:38:50.000
然后想借着语言去学习一些比如说新的东西

00:38:50.000 --> 00:38:51.920
像各种语言的类型系统的设计

00:38:51.920 --> 00:38:55.440
或者说是东西那么就随你自己的爱好了

00:38:55.440 --> 00:38:58.640
然后的话就比如说Rust现在很火的Rust

00:38:58.640 --> 00:39:04.560
或者说是他们比较喜欢的List不怕Scale这个东西都是可以学的

00:39:04.560 --> 00:39:07.600
我觉得这个东西如果说你只是觉得自己爱好想

00:39:07.600 --> 00:39:10.560
借着某一方面的东西去学习另外一方面的话

00:39:10.560 --> 00:39:12.960
那么就凭着你自己的想法和规划来说了

00:39:15.280 --> 00:39:16.640
OK我来说一下吧

00:39:16.640 --> 00:39:21.440
我就是如果说只是从实用的角度

00:39:21.440 --> 00:39:23.920
就是说你想找工作或者说做出东西

00:39:23.920 --> 00:39:28.000
我觉得JavaScript和TypeScript是我会推荐的

00:39:28.000 --> 00:39:32.960
因为就相当于是说你有Python的话你可以写一个后段

00:39:32.960 --> 00:39:36.480
然后你会JS或者TS你就能写一个前段

00:39:36.480 --> 00:39:39.200
像你基本就能一个人完整写出一个App了

00:39:39.200 --> 00:39:42.320
这其实在很多时候是蛮必要的

00:39:42.320 --> 00:39:46.400
比如说你去一个小公司可能就没有几个人对吧

00:39:46.400 --> 00:39:50.080
其实我觉得而且JS现在也用的越来越广泛了

00:39:50.080 --> 00:39:54.640
不仅是可以写前段也可以去写一些移动端的东西对吧

00:39:54.640 --> 00:39:56.400
然后包括Electron现在对吧

00:39:56.400 --> 00:40:00.880
你们都知道Electron已经是Desktop UI的事实标准了

00:40:00.880 --> 00:40:04.000
所以其实这个用的是越来越广泛的

00:40:04.000 --> 00:40:10.319
然后如果从个人就是说去开阔视野的角度来讲

00:40:10.319 --> 00:40:14.160
我觉得一定要选一个和Python很不一样的

00:40:14.160 --> 00:40:16.319
就是很不一样的语言

00:40:16.320 --> 00:40:20.480
那这个不一样我觉得就没有一个什么

00:40:20.480 --> 00:40:24.640
就是我只能说去排除掉一些和Python比较一样

00:40:24.640 --> 00:40:28.160
比较类似的就像Java, C++

00:40:28.160 --> 00:40:33.120
然后像甚至JavaScript这种都是和Python没有那么大区别

00:40:33.120 --> 00:40:40.480
那你可能选不一样就会就需要去了解一下像函数式这种语言

00:40:40.480 --> 00:40:45.360
但是我其实是个人比较想推荐Smalltalk

00:40:45.360 --> 00:40:48.240
对这个是我目前在学的语言

00:40:48.240 --> 00:40:50.000
我觉得这个语言是很不一样的

00:40:50.000 --> 00:40:53.040
然后后面推荐是我们再详细聊吧

00:40:53.040 --> 00:40:55.200
对对对

00:40:55.200 --> 00:40:57.520
当然我其实很赞同王老师说的

00:40:57.520 --> 00:41:00.560
就是说你的基础底子一定要是打牢的

00:41:00.560 --> 00:41:03.360
就是说是我其实我觉得就是在学语言之前

00:41:03.360 --> 00:41:04.960
其实是我建议先看基础

00:41:04.960 --> 00:41:07.520
就不管是说是操作系统还是网络协议

00:41:07.520 --> 00:41:10.160
你最起码是要对它有个基础

00:41:10.160 --> 00:41:12.000
但是系统性的认识

00:41:12.000 --> 00:41:16.240
以及说是对它常见的一些东西是有最起码的认识

00:41:16.240 --> 00:41:19.440
我觉得这样是能够有助于职业的发展的

00:41:19.440 --> 00:41:20.960
嗯

00:41:20.960 --> 00:41:22.880
哎呀 新汤

00:41:22.880 --> 00:41:28.960
嗯 我之前在Pycon上问过那个Fluent Python的作者

00:41:28.960 --> 00:41:33.360
嗯 坏了叫什么名呢

00:41:33.360 --> 00:41:34.720
Luciano

00:41:34.720 --> 00:41:36.320
对对 帮我剪掉

00:41:36.320 --> 00:41:37.920
对 问过Luciano

00:41:37.920 --> 00:41:40.720
然后他其实推荐的也是JavaScript

00:41:40.720 --> 00:41:43.919
而且他说他接下来会去学一下Flutter

00:41:43.919 --> 00:41:47.040
嗯 就这点我比较赞同Nike GM

00:41:47.040 --> 00:41:48.480
因为除了小公司

00:41:48.480 --> 00:41:51.120
因为你发现在大公司一些团队

00:41:51.120 --> 00:41:53.200
你发现大家其实后天大家都会写

00:41:53.200 --> 00:41:56.399
但是你们团队如果要做一个系统的肯定要做前端

00:41:56.399 --> 00:41:56.959
是的

00:41:56.959 --> 00:41:59.120
如果这个时候你会做前端的话

00:41:59.120 --> 00:42:01.279
你在团队里非常那个了

00:42:01.279 --> 00:42:01.600
没错

00:42:01.600 --> 00:42:03.839
而且我之前面试的时候

00:42:03.839 --> 00:42:06.560
之前面试的时候有一些

00:42:06.560 --> 00:42:07.439
有些人很有意思

00:42:07.439 --> 00:42:09.680
他们看了我的那个一些一个项目

00:42:09.680 --> 00:42:11.680
说你会写前端是吧

00:42:11.680 --> 00:42:14.399
然后他们就很高兴

00:42:14.399 --> 00:42:16.160
对 我也同意

00:42:16.160 --> 00:42:17.440
其实学前端也很重要

00:42:17.440 --> 00:42:20.160
但是你得先学会写CSS

00:42:20.160 --> 00:42:22.960
哈哈哈

00:42:22.960 --> 00:42:25.359
我跑个题

00:42:25.359 --> 00:42:29.919
我觉得学前端对我来说最大的困扰就是

00:42:29.919 --> 00:42:32.080
做不出好的设计

00:42:32.080 --> 00:42:34.319
同意 赋意

00:42:34.319 --> 00:42:36.879
对对 我也有

00:42:36.879 --> 00:42:38.640
但你不需要做出特别好的设计

00:42:38.640 --> 00:42:42.160
你只需要能做出能用的设计就行了

00:42:42.160 --> 00:42:44.400
关键是能用的设计就做不出来

00:42:44.400 --> 00:42:47.200
为什么能用设计我觉得没有那么难

00:42:47.200 --> 00:42:48.879
可能还是写的少了吧

00:42:48.879 --> 00:42:51.279
CSS写的少了

00:42:51.279 --> 00:42:52.799
不 你不需要CSS

00:42:52.799 --> 00:42:54.960
我觉得你只能用对吧

00:42:54.960 --> 00:42:59.200
你像比如说你如果我就以Angular

00:42:59.200 --> 00:43:00.560
举例因为我只会Angular

00:43:00.560 --> 00:43:02.319
它里面的有固定的那种

00:43:02.319 --> 00:43:04.319
有默认的那种主题

00:43:04.319 --> 00:43:06.480
然后你完全可以不用写CSS

00:43:06.480 --> 00:43:09.680
它就会长得比较像一个正常的APP

00:43:09.680 --> 00:43:11.520
但主要是你那些布局

00:43:11.520 --> 00:43:13.120
主要是你那些布局

00:43:13.120 --> 00:43:14.720
然后你的那些button的布局

00:43:14.720 --> 00:43:16.880
这些最起码基本的设计

00:43:16.880 --> 00:43:20.880
那种东西我是觉得对于我来讲是很困难的

00:43:20.880 --> 00:43:22.560
在现代的前端框架里

00:43:22.560 --> 00:43:24.560
其实很多这些东西都不需要

00:43:24.560 --> 00:43:26.320
就是至少你不需要去写一个

00:43:26.320 --> 00:43:28.000
比如说多少pixel

00:43:28.000 --> 00:43:30.880
就是这种你应该是已经不太需要写了

00:43:30.880 --> 00:43:32.160
OK 明白了

00:43:32.160 --> 00:43:33.680
对 都不需要了

00:43:33.680 --> 00:43:38.240
假如说你用Underd这样的框架的话

00:43:38.240 --> 00:43:40.720
你基本上是一行CSS都不需要写

00:43:40.720 --> 00:43:41.200
对

00:43:41.200 --> 00:43:44.160
所以你只需要调整它内置的那些类

00:43:44.160 --> 00:43:46.480
就比如说这个占几行什么的

00:43:46.480 --> 00:43:48.720
对 就是说其实前端也是在发展的

00:43:48.720 --> 00:43:51.600
我觉得还是要了解一下比较好

00:43:51.600 --> 00:43:52.879
个人看法

00:43:52.879 --> 00:43:56.480
OK 好 今天下来就去了解

00:43:56.480 --> 00:43:59.919
然后我补充一下Like9M说

00:43:59.919 --> 00:44:02.480
就是前端能做的事情很多

00:44:02.480 --> 00:44:04.400
其实还有现在一个比较火的

00:44:04.400 --> 00:44:07.600
就是Node的WebAssembly

00:44:07.600 --> 00:44:09.280
就是很多其他语言的东西

00:44:09.280 --> 00:44:11.840
可以编译成WebAssembly

00:44:11.840 --> 00:44:13.360
就是WebAssembly就可以调

00:44:13.360 --> 00:44:15.120
对 我觉得我们之后一定要做一期

00:44:15.120 --> 00:44:16.960
专门讲WebAssembly的

00:44:16.960 --> 00:44:19.040
这个话题其实我也比较感兴趣的

00:44:19.040 --> 00:44:19.520
对

00:44:19.520 --> 00:44:21.840
但我不知道能不能找到合适的人来聊

00:44:21.840 --> 00:44:23.680
对 题外话

00:44:23.680 --> 00:44:25.360
对 我很感兴趣

00:44:27.040 --> 00:44:29.840
对 其实我觉得他们说得很对

00:44:29.840 --> 00:44:31.360
然后就说你如果说你作为一个

00:44:31.360 --> 00:44:33.760
Fullstack就是说是字面上意义的

00:44:33.760 --> 00:44:35.360
Fullstack的工程师的话

00:44:35.360 --> 00:44:37.520
其实不管你是去找工作

00:44:37.520 --> 00:44:39.680
还是其他都还是比较有竞争力的

00:44:39.680 --> 00:44:41.280
然后因为我之前

00:44:41.280 --> 00:44:42.640
其实我之前特别想找

00:44:42.640 --> 00:44:44.400
就是国外的全FullTime的

00:44:44.400 --> 00:44:45.840
Remote的工作

00:44:45.840 --> 00:44:47.520
然后结果清一色一看

00:44:47.520 --> 00:44:49.840
要求Fullstack

00:44:49.840 --> 00:44:51.040
啊我起胜

00:44:53.040 --> 00:44:54.720
是 对 像国外公司

00:44:54.720 --> 00:44:56.560
我感觉他们不会特别就是说

00:44:56.560 --> 00:44:58.320
只是找Java程序员

00:44:58.320 --> 00:44:59.200
或者C++程序员

00:44:59.200 --> 00:45:00.480
或者Python程序员

00:45:00.480 --> 00:45:02.720
像Google里就不会有限定的

00:45:02.720 --> 00:45:05.120
就是说你需要写什么你就写

00:45:05.120 --> 00:45:07.280
对 基本上都是这样子

00:45:07.280 --> 00:45:08.480
OK 好

00:45:09.120 --> 00:45:10.480
然后使用角度的话

00:45:10.480 --> 00:45:12.400
我会推荐大家去学一门

00:45:12.400 --> 00:45:13.840
可以编译的语言

00:45:13.840 --> 00:45:15.760
其实这样的也挺多的

00:45:15.760 --> 00:45:17.360
现在Rust比较火

00:45:17.360 --> 00:45:18.960
还有一些Zig

00:45:18.960 --> 00:45:20.160
Nim

00:45:20.160 --> 00:45:23.680
Go都可以直接编译成一个二进制

00:45:23.680 --> 00:45:25.920
比起Python直接扔到服务器上去

00:45:25.920 --> 00:45:27.520
就能跑还是挺爽的

00:45:27.520 --> 00:45:29.440
嗯哼 我还是推荐Java

00:45:29.440 --> 00:45:30.560
Yeah

00:45:30.560 --> 00:45:32.400
如果使用角度的话

00:45:32.400 --> 00:45:34.080
我可能会推荐一下Java吧

00:45:34.080 --> 00:45:38.880
因为Golang和Python还是有些类似的

00:45:38.880 --> 00:45:40.560
相似程度上来说

00:45:40.560 --> 00:45:43.040
我觉得Java还是比Python会差很多

00:45:43.040 --> 00:45:45.600
然后你会遇到很多不一样的东西

00:45:45.600 --> 00:45:46.640
可能你会觉得好

00:45:46.640 --> 00:45:48.000
或者觉得不好

00:45:48.000 --> 00:45:50.240
对 而且Java的生态

00:45:50.240 --> 00:45:52.640
然后的确就是很棒的

00:45:52.640 --> 00:45:54.400
就比如说到现在为

00:45:54.400 --> 00:45:55.600
昨天其实也和他们讨论过

00:45:55.600 --> 00:45:57.280
到现在为止Python能够

00:45:57.280 --> 00:45:59.760
比较好用的操纵Rookie一块的酷

00:45:59.760 --> 00:46:03.200
现在也就能打的也基本上是没有的

00:46:03.200 --> 00:46:05.040
然后的话我觉得这个东西

00:46:05.040 --> 00:46:06.880
如果说你想去了解

00:46:06.880 --> 00:46:08.400
从使用角度来讲的话

00:46:08.400 --> 00:46:09.920
我还是推荐Java

00:46:09.920 --> 00:46:11.280
OK 好

00:46:12.560 --> 00:46:14.560
我们再进到下一个问题吧

00:46:14.560 --> 00:46:15.840
应该是轮到谁了

00:46:16.960 --> 00:46:17.920
轮到是吧 对

00:46:17.920 --> 00:46:19.920
来 轮到谁了

00:46:21.120 --> 00:46:22.800
嗯

00:46:22.800 --> 00:46:25.600
这叫LittleCocker是吗

00:46:25.600 --> 00:46:27.520
这位同学

00:46:27.520 --> 00:46:30.400
他提问说怎样才能进大厂

00:46:31.839 --> 00:46:33.440
来 我们先邀请

00:46:33.440 --> 00:46:37.759
目前厂牌里最大的在Google的同学

00:46:37.759 --> 00:46:39.920
LuckGM回答一下

00:46:39.920 --> 00:46:42.240
OK 如何进大厂

00:46:42.240 --> 00:46:44.240
嗯

00:46:44.240 --> 00:46:47.440
其实我的观察就是说

00:46:47.440 --> 00:46:48.640
仅仅是我的观察

00:46:48.640 --> 00:46:51.120
不一定是就是普遍现象

00:46:51.120 --> 00:46:53.120
没有统计数据支持

00:46:53.120 --> 00:46:55.120
就是说在进Google的人

00:46:55.120 --> 00:46:58.720
直接效招进来的还是少一些

00:46:58.720 --> 00:47:01.920
就是可能大概三四成吧

00:47:01.920 --> 00:47:04.080
然后大部分的人还是就是说

00:47:04.080 --> 00:47:06.400
先在一个别的公司工作

00:47:06.400 --> 00:47:08.000
然后跳槽过来

00:47:08.000 --> 00:47:11.440
嗯 我觉得其实

00:47:11.440 --> 00:47:14.240
这可能是更实际的一个路径吧

00:47:14.240 --> 00:47:17.200
就是说毕竟效招想去大厂

00:47:17.200 --> 00:47:19.600
还是有一定难度的

00:47:19.600 --> 00:47:22.480
然后你工作两三年再跳

00:47:22.480 --> 00:47:23.680
应该还是

00:47:23.680 --> 00:47:25.600
应该会简单一点我觉得

00:47:25.600 --> 00:47:28.399
就是比较实际的角度是这样

00:47:28.399 --> 00:47:30.399
嗯

00:47:30.399 --> 00:47:32.399
然后

00:47:32.399 --> 00:47:33.919
对 然后我觉得说

00:47:33.919 --> 00:47:36.000
如果说我们非要谈怎么准备的话

00:47:36.000 --> 00:47:38.000
这个就太多了

00:47:38.000 --> 00:47:40.480
就是不同的公司要求也不一样

00:47:40.480 --> 00:47:41.759
所以我觉得就

00:47:41.759 --> 00:47:43.279
嗯

00:47:43.279 --> 00:47:46.080
但是一句话就是不要觉得

00:47:46.080 --> 00:47:49.279
大厂就是特别的高高在上

00:47:49.279 --> 00:47:50.480
并不是这样子

00:47:50.480 --> 00:47:51.759
就其实

00:47:51.760 --> 00:47:54.160
其实很多大厂人

00:47:54.160 --> 00:47:55.840
也都是从小厂跳过来的

00:47:55.840 --> 00:47:56.880
然后对

00:47:56.880 --> 00:47:58.080
所以就不要

00:47:58.080 --> 00:48:00.080
还是放平心态

00:48:00.080 --> 00:48:01.040
想进大厂

00:48:01.040 --> 00:48:03.040
我觉得好好准备是一定可以进的

00:48:03.040 --> 00:48:05.040
嗯

00:48:05.040 --> 00:48:05.680
对

00:48:05.680 --> 00:48:06.960
其实我觉得这个问题的话

00:48:06.960 --> 00:48:10.880
可以和下面有一个ERUDEV的那个朋友

00:48:10.880 --> 00:48:12.560
他们的一个学历低的情况下

00:48:12.560 --> 00:48:16.080
专客有机会去技术范围相对较好的公司吗

00:48:16.080 --> 00:48:17.280
不奢望进大厂

00:48:17.280 --> 00:48:19.520
我觉得这两个问题其实可以一起聊一下

00:48:19.520 --> 00:48:20.960
我说一下吧

00:48:20.960 --> 00:48:22.960
我其实是我

00:48:22.960 --> 00:48:24.480
算是就是小厂中

00:48:24.480 --> 00:48:26.240
小小厂

00:48:26.240 --> 00:48:27.040
小厂

00:48:27.040 --> 00:48:28.160
然后中厂

00:48:28.160 --> 00:48:29.440
然后大厂的一个经验

00:48:29.440 --> 00:48:30.880
我是16年工作

00:48:30.880 --> 00:48:33.040
然后最开始去了一个爬虫的小厂

00:48:33.040 --> 00:48:34.000
然后17年

00:48:34.000 --> 00:48:35.680
然后来了一个选取独角兽的

00:48:35.680 --> 00:48:37.440
我前就是老公家

00:48:37.440 --> 00:48:38.080
老公家

00:48:38.080 --> 00:48:40.080
然后是在那个放贷的

00:48:40.080 --> 00:48:40.880
放贷的

00:48:40.880 --> 00:48:42.880
然后做了两年

00:48:42.880 --> 00:48:45.520
然后19年年初的时候来了饿了

00:48:45.520 --> 00:48:47.360
然后应该算一个中厂

00:48:47.360 --> 00:48:47.840
对

00:48:47.840 --> 00:48:48.880
然后的话

00:48:48.880 --> 00:48:50.240
后面下半年

00:48:50.240 --> 00:48:52.000
然后我就是转转

00:48:52.000 --> 00:48:54.080
然后掉到了阿里云

00:48:54.080 --> 00:48:56.560
其实我觉得如果说

00:48:56.560 --> 00:48:58.799
就我自己的体感来看的话

00:48:58.799 --> 00:49:00.640
其实我觉得进大厂

00:49:00.640 --> 00:49:03.839
它并不是一个很需要去扣一强球的事情

00:49:03.839 --> 00:49:05.439
而是一个水到渠成的事情

00:49:05.439 --> 00:49:08.640
因为对于大厂来讲的话

00:49:08.640 --> 00:49:10.160
各大厂的要求不一样

00:49:10.160 --> 00:49:13.040
但是它其中核心的数据要求就是说是

00:49:13.040 --> 00:49:16.640
你在你之前的岗位上有做出一些东西

00:49:16.640 --> 00:49:19.600
然后或者说是在你之前的经历里面

00:49:19.600 --> 00:49:24.240
是有过足够的就是说积累

00:49:24.240 --> 00:49:27.600
然后有足够的积累

00:49:27.600 --> 00:49:30.480
因为大厂它其实是还有一个是能力的角度

00:49:30.480 --> 00:49:32.560
还有一个是权力的角度

00:49:32.560 --> 00:49:34.640
就比如说是像新涛应该是知道

00:49:34.640 --> 00:49:37.759
然后在阿里招聘有个专门的术语叫做高前

00:49:37.759 --> 00:49:41.279
就比如说我一下觉得我说我给你p6

00:49:41.279 --> 00:49:41.759
p不到

00:49:41.759 --> 00:49:44.080
但是我觉得你这个能力非常

00:49:44.080 --> 00:49:45.360
就是说是能力够了

00:49:45.360 --> 00:49:47.920
但是可能说因为hc或其他关系给你p6

00:49:47.920 --> 00:49:48.720
p不到

00:49:48.720 --> 00:49:50.399
但是的话你的潜力很棒

00:49:50.399 --> 00:49:54.000
那么我会给一个高前p5的hc把你招进来

00:49:54.000 --> 00:49:59.759
然后的话就说你要在面试上就表现出你之前的积累

00:49:59.759 --> 00:50:01.040
至于说学历的话

00:50:01.040 --> 00:50:02.879
其实我觉得很多人焦虑学历

00:50:02.879 --> 00:50:06.959
其实我觉得学历它只是一个间接性证明的东西

00:50:06.959 --> 00:50:09.680
它间接性的证明你这个人的智商

00:50:09.680 --> 00:50:12.560
或者说之前的学习方式学习态度是在线的

00:50:12.560 --> 00:50:15.279
但是其实证明不了其他的东西

00:50:15.280 --> 00:50:19.680
如果说你之前的积累和就是说是展现出来的东西能够证明

00:50:19.680 --> 00:50:22.880
能够证明你在其他方面上有足够的东西

00:50:22.880 --> 00:50:29.040
那么我觉得其实学历并不是一个会卡住你职业上升道路的一个情况

00:50:29.040 --> 00:50:35.440
对我觉得互联网公司真的我是没有见过说一定要卡学校或者卡学历的

00:50:35.440 --> 00:50:37.680
对我没见过的

00:50:37.680 --> 00:50:42.240
其实是有菊花厂其实相对比较卡

00:50:42.240 --> 00:50:44.880
就是说老厂相对比较卡

00:50:44.880 --> 00:50:47.360
然后的话对像他们校招的话

00:50:47.360 --> 00:50:49.920
你一本二本是不招的

00:50:49.920 --> 00:50:52.320
对基本上是要211985起的

00:50:52.320 --> 00:50:55.120
然后社招其实也有间接性的卡

00:50:55.120 --> 00:51:00.080
但是如果说包括的阿里其实它都是有一些就明面上的要求

00:51:00.080 --> 00:51:01.200
我要求你本科

00:51:01.200 --> 00:51:03.120
但这个东西都是可以谈的

00:51:03.120 --> 00:51:07.680
就是说如果说你之前的能力和其他展现出足够匹配的能力了

00:51:07.680 --> 00:51:13.200
那么其实找上找一家或者是找你部门老板签个字批一下就行了

00:51:13.200 --> 00:51:14.560
找个特批就可以了

00:51:14.560 --> 00:51:18.400
对这也是为什么我说就是可能你先在别的公司工作一两年

00:51:18.400 --> 00:51:19.520
然后再跳回好一点

00:51:19.520 --> 00:51:23.040
因为那个时候你的就不太会有人看你的学校了

00:51:23.040 --> 00:51:25.759
而更多的是看你之前的经验

00:51:25.759 --> 00:51:30.080
就是说学校可能确实在校招的时候还是会看一下的

00:51:32.080 --> 00:51:33.920
对校招的时候的确没办法

00:51:33.920 --> 00:51:37.520
因为是就说这个东西就是一个现实

00:51:37.520 --> 00:51:40.160
就包括就像刚才我说的老厂的话

00:51:40.160 --> 00:51:45.279
对他们好像就只是招985 RLL可能都一般有点不太招

00:51:47.839 --> 00:51:52.240
其实大厂这个东西我觉得就怎么叫大厂

00:51:52.240 --> 00:51:53.839
这个也没有一个统一标准了

00:51:53.839 --> 00:51:54.480
反正

00:51:57.200 --> 00:51:58.160
对我觉得是

00:51:58.160 --> 00:52:02.720
对反正我觉得这个东西的话就看自己吧

00:52:02.720 --> 00:52:04.960
然后看自己的想法吧

00:52:04.960 --> 00:52:07.440
其实我觉得也不是不一定要去大厂

00:52:07.440 --> 00:52:10.320
嗯剑刀有什么补充一下

00:52:10.320 --> 00:52:11.680
我补充一下

00:52:11.680 --> 00:52:16.400
其实在大厂就跟你们说的一样

00:52:16.400 --> 00:52:18.080
不一定是有那么好

00:52:18.080 --> 00:52:21.040
也不一定能真的比小厂能学到多东西

00:52:21.040 --> 00:52:25.600
觉得就看你是不是能学到东西了

00:52:25.600 --> 00:52:28.240
对我来说是这样

00:52:28.240 --> 00:52:30.560
然后如果你真的想去大厂的话

00:52:30.560 --> 00:52:33.600
像阿里巴巴吧

00:52:33.600 --> 00:52:36.080
面试题都在网上有很多

00:52:36.080 --> 00:52:38.880
就刻意的准备一下的话

00:52:38.880 --> 00:52:41.840
我觉得问题不大

00:52:41.840 --> 00:52:43.120
我也是这样觉得

00:52:43.120 --> 00:52:45.279
其实没有那么难

00:52:45.279 --> 00:52:47.440
对对对其实是相对来说

00:52:47.440 --> 00:52:49.120
其实你我就像刚才说的

00:52:49.120 --> 00:52:51.040
这个东西是一个水到渠成的东西

00:52:51.040 --> 00:52:54.240
而不是没必要去刻意强求

00:52:54.240 --> 00:52:56.720
对而且我就发现很多那种

00:52:56.720 --> 00:52:59.279
尤其在开源界很活跃的这种大佬

00:52:59.279 --> 00:53:01.040
他都不是大厂的

00:53:01.040 --> 00:53:04.560
就是一个你没有听说过的小公司

00:53:04.560 --> 00:53:06.799
但是你能说他们技术不强吗

00:53:06.799 --> 00:53:09.840
他们技术比大厂的90%的人都要强

00:53:09.840 --> 00:53:11.440
但是他们也没有在大厂

00:53:11.440 --> 00:53:14.400
就其实并不是说一定要去大厂才牛逼

00:53:14.400 --> 00:53:16.720
就对

00:53:16.720 --> 00:53:18.480
其实大厂直击吧

00:53:18.480 --> 00:53:22.000
然后直击其实就是说你要说大厂直击

00:53:22.000 --> 00:53:24.080
其实很多时候也是有相对的

00:53:24.080 --> 00:53:27.440
他可能更看重的并不是你技术方面

00:53:27.440 --> 00:53:30.799
其实大家如果说我要去大厂里面学技术

00:53:30.799 --> 00:53:32.400
或其他可能说你来的话

00:53:32.400 --> 00:53:33.680
可能会有一些轻微的失望

00:53:33.680 --> 00:53:36.640
而且可能说你会看到身边

00:53:36.640 --> 00:53:39.440
你会见到很多你不太理解的现象

00:53:39.440 --> 00:53:43.759
比如说之前知乎上有一个问题叫做强如死月

00:53:43.759 --> 00:53:45.839
然后怎么在阿里才P6

00:53:45.839 --> 00:53:47.440
是的对

00:53:47.440 --> 00:53:50.240
对因为时候介绍一下死月是

00:53:50.240 --> 00:53:53.040
那个NodeJS的核心开发者

00:53:53.040 --> 00:53:56.000
然后之前是在大手的时候有我带团队的经验

00:53:56.000 --> 00:53:59.919
然后对然后的话具体信息就不透露了

00:53:59.919 --> 00:54:02.160
对然后大家可以去搜一下那个问题

00:54:02.160 --> 00:54:05.200
对其实很多东西的话大厂有大厂的弊端

00:54:05.200 --> 00:54:07.920
然后我觉得很没必要去强求进大厂

00:54:07.920 --> 00:54:12.879
就我的看法是说大厂只是一个选择

00:54:12.879 --> 00:54:15.600
就是对大厂只是一种选择

00:54:15.600 --> 00:54:19.200
是的并不是说就比小厂高一头

00:54:19.200 --> 00:54:21.520
对但是但是话又说回来

00:54:21.520 --> 00:54:25.680
我觉得在你的职业生涯中

00:54:25.680 --> 00:54:28.000
去体验一下大厂是怎么工作

00:54:28.000 --> 00:54:29.520
这个还是很必要的

00:54:29.520 --> 00:54:34.640
就相当于是说你知道不同的在不同

00:54:34.640 --> 00:54:37.840
不同的这种组织里面

00:54:37.840 --> 00:54:40.640
它的这种做事的方式有什么不同

00:54:40.640 --> 00:54:44.880
这个应该不论你之后是在大厂还是在小厂工作

00:54:44.880 --> 00:54:48.320
有这样一个对比其实都会对你有一定的帮助

00:54:48.320 --> 00:54:49.200
我觉得

00:54:49.200 --> 00:54:53.200
是我觉得这个是真的

00:54:53.200 --> 00:54:56.400
但是我觉得反正就一切就这种东西没必要强求

00:54:56.400 --> 00:54:59.760
没必要就是说把自己搞得很焦虑这种东西的话

00:54:59.760 --> 00:55:01.520
就你今天到了水到渠成

00:55:01.520 --> 00:55:03.040
然后想换个环境看一看

00:55:03.040 --> 00:55:04.560
水到渠成跳过去就ok了

00:55:04.560 --> 00:55:06.400
没什么必要特别强求的

00:55:06.400 --> 00:55:07.280
ok

00:55:09.040 --> 00:55:10.720
好温老师你要不要补充一下

00:55:13.680 --> 00:55:15.840
我就针对这个回答

00:55:15.840 --> 00:55:17.360
提问的这个同学吧

00:55:17.360 --> 00:55:19.120
他问怎么能进大厂

00:55:19.120 --> 00:55:20.720
其实我不太清楚

00:55:21.600 --> 00:55:25.120
他是在校学生还是已经毕业工作的人

00:55:25.120 --> 00:55:26.880
如果在校学生的话

00:55:26.880 --> 00:55:30.160
那如果你能找到大厂的实习

00:55:30.160 --> 00:55:33.120
那肯定校招的时候

00:55:33.120 --> 00:55:35.120
然后会更有优势一些

00:55:36.000 --> 00:55:36.960
对

00:55:36.960 --> 00:55:40.000
然后就是我说的是同等水平下

00:55:40.000 --> 00:55:43.279
大家可能比如说招聘的面试官

00:55:43.279 --> 00:55:46.080
可能会倾向于说有过经验的同学

00:55:46.080 --> 00:55:47.359
对

00:55:47.359 --> 00:55:52.560
以及说如果你是已经工作的人的话

00:55:52.560 --> 00:55:55.520
那就准备准备念进去就好

00:55:55.520 --> 00:55:57.680
对其实我会觉得

00:55:57.680 --> 00:55:59.920
大厂的招聘标准还蛮透明的

00:55:59.920 --> 00:56:02.320
就是以及网上有N多人在说

00:56:02.320 --> 00:56:04.320
我想去什么岗位

00:56:04.320 --> 00:56:06.240
然后一般都要经历什么样的面试

00:56:06.240 --> 00:56:08.240
那你把那个作为参考

00:56:08.240 --> 00:56:10.640
去学习那方面的知识就ok了

00:56:10.640 --> 00:56:14.080
对越大的厂网上的题越多

00:56:14.960 --> 00:56:16.960
然后我给个建议

00:56:16.960 --> 00:56:19.040
就是去大厂之前如果有能力的话

00:56:19.040 --> 00:56:20.400
你最好能够

00:56:20.400 --> 00:56:22.400
提前知道

00:56:22.400 --> 00:56:25.360
提前去了解你要去的那个部门在做什么

00:56:25.360 --> 00:56:27.760
部门内的情况是什么样的

00:56:27.760 --> 00:56:30.960
就是因为大厂本身特别大

00:56:30.960 --> 00:56:33.440
不同的部门可能差异也会特别大

00:56:33.440 --> 00:56:35.680
但是这个方面可能还

00:56:35.680 --> 00:56:38.080
这个方面可能要注意一下防水防水法

00:56:38.080 --> 00:56:39.280
因为对于有些公司来讲

00:56:39.280 --> 00:56:41.280
你去了解他具体做什么东西的话

00:56:41.280 --> 00:56:43.520
可能会涉及数据泄露和违规

00:56:43.520 --> 00:56:45.520
所以这方面可能还是要注意一下

00:56:48.240 --> 00:56:50.240
你找工作你怕什么

00:56:50.240 --> 00:56:52.240
对啊

00:56:52.240 --> 00:56:55.359
就比如说工作内容啊

00:56:55.359 --> 00:56:57.359
团队氛围啊

00:56:57.359 --> 00:56:59.359
对啊这种

00:56:59.359 --> 00:57:01.359
对这方面是可以的

00:57:01.359 --> 00:57:03.359
但是的话可能说如果说你要去打听一下

00:57:03.359 --> 00:57:05.359
面试关系信息这种东西的话

00:57:05.359 --> 00:57:07.359
那么就毫无疑问是违规了

00:57:07.359 --> 00:57:10.080
对这种你也打听不到我觉得

00:57:10.080 --> 00:57:13.759
其实有可能会打听到的

00:57:13.759 --> 00:57:16.879
如果你能打听到说明你这个厂不够大

00:57:16.879 --> 00:57:18.879
我觉得

00:57:18.880 --> 00:57:20.880
这倒也是

00:57:20.880 --> 00:57:22.880
OK好那么我们往下吧

00:57:22.880 --> 00:57:24.880
这个我来说吧

00:57:24.880 --> 00:57:26.880
这个问题是

00:57:26.880 --> 00:57:28.880
我也不知道怎么念

00:57:28.880 --> 00:57:30.880
反正是某个同学提的

00:57:30.880 --> 00:57:34.880
说你们平时会积累自己设计的一些代码案例吗

00:57:34.880 --> 00:57:36.880
以什么样的方式

00:57:36.880 --> 00:57:38.880
说实话这个问题我不是特别懂

00:57:38.880 --> 00:57:40.880
然后我就交给你们来回答吧

00:57:40.880 --> 00:57:46.880
我觉得他的名字好像是Ubuntu改过来的

00:57:46.880 --> 00:57:48.880
名字不重要

00:57:48.880 --> 00:57:50.880
我觉得他可能是想问

00:57:50.880 --> 00:57:52.880
他可能是想问吧

00:57:52.880 --> 00:57:54.880
你们会把平时日常自己工作中的

00:57:54.880 --> 00:57:56.880
写的觉得自己比较满意的代码

00:57:56.880 --> 00:57:58.880
或者说一些常见的代码

00:57:58.880 --> 00:58:00.880
比如说日志或者说

00:58:00.880 --> 00:58:02.880
使用频率比较高的代码把它积累下来吗

00:58:02.880 --> 00:58:04.880
如果是积累的话会用什么方式去积累

00:58:04.880 --> 00:58:06.880
我先来吧

00:58:06.880 --> 00:58:08.880
我不会积累

00:58:08.880 --> 00:58:10.880
就是

00:58:10.880 --> 00:58:12.880
我会用

00:58:12.880 --> 00:58:16.880
我不会积累

00:58:16.880 --> 00:58:18.880
我先说就是

00:58:18.880 --> 00:58:20.880
我可能

00:58:20.880 --> 00:58:22.880
比如说我有的时候去改

00:58:22.880 --> 00:58:24.880
自己原有的代码的时候会突然

00:58:24.880 --> 00:58:26.880
这样写很好

00:58:26.880 --> 00:58:28.880
这样写是最佳实践

00:58:28.880 --> 00:58:30.880
但是我不会专门记下来

00:58:30.880 --> 00:58:32.880
因为我觉得当你意识到的时候

00:58:32.880 --> 00:58:34.880
其实你就已经理解了这个为什么好

00:58:34.880 --> 00:58:36.880
为什么不好

00:58:36.880 --> 00:58:38.880
其实它就自然而然的

00:58:38.880 --> 00:58:40.880
就会印在你的脑海里

00:58:40.880 --> 00:58:42.880
对所以

00:58:42.880 --> 00:58:44.880
我没有这种说积累自己代码的习惯

00:58:44.880 --> 00:58:46.880
我确实有一些

00:58:46.880 --> 00:58:48.880
积累的代码都是说

00:58:48.880 --> 00:58:50.880
我在做一些小的side project

00:58:50.880 --> 00:58:52.880
可能做黄了或者是

00:58:52.880 --> 00:58:54.880
也做出来了就扔在那

00:58:54.880 --> 00:58:56.880
我不知道算不算积累

00:58:56.880 --> 00:58:58.880
然后

00:58:58.880 --> 00:59:00.880
对就是

00:59:00.880 --> 00:59:02.880
没有专门积累过

00:59:02.880 --> 00:59:04.880
但是会有一些

00:59:04.880 --> 00:59:06.880
会有一些你比如说如果

00:59:06.880 --> 00:59:08.880
我做的一些layer code的题的话

00:59:08.880 --> 00:59:10.880
我会算积累吗

00:59:10.880 --> 00:59:12.880
但是因为那个本来我就要写完存在那

00:59:12.880 --> 00:59:14.880
对我应该没有所谓的代码案例

00:59:14.880 --> 00:59:16.880
之类的

00:59:16.880 --> 00:59:18.880
对我觉得他问的应该不是那个

00:59:18.880 --> 00:59:20.880
对

00:59:20.880 --> 00:59:22.880
我也没有

00:59:22.880 --> 00:59:24.880
所以就是没有

00:59:24.880 --> 00:59:26.880
我自己会积累一些工具

00:59:26.880 --> 00:59:28.880
工具类的代码

00:59:28.880 --> 00:59:30.880
然后就比如说我之前

00:59:30.880 --> 00:59:32.880
做一些side project的时候

00:59:32.880 --> 00:59:34.880
比如说ELK比如说NGINX

00:59:34.880 --> 00:59:36.880
或者说一些网关的定制的

00:59:36.880 --> 00:59:38.880
工具类的东西

00:59:38.880 --> 00:59:40.880
用为脚本之类的我会把它积累下来

00:59:40.880 --> 00:59:42.880
然后以及一些

00:59:42.880 --> 00:59:44.880
常用的就比如说

00:59:44.880 --> 00:59:46.880
Goldaunt里面的就说日志的处理

00:59:46.880 --> 00:59:48.880
就说比如说日志的初始化或者是

00:59:48.880 --> 00:59:50.880
其他的东西我这些东西没有必要再重新写

00:59:50.880 --> 00:59:52.880
然后因为我把它通用化了以后

00:59:52.880 --> 00:59:54.880
做成一个包也会积累下来

00:59:54.880 --> 00:59:56.880
当然我的积累方式就是用到GitHub上面

00:59:56.880 --> 00:59:58.880
对

00:59:58.880 --> 01:00:00.880
我也没有但是我

01:00:00.880 --> 01:00:02.880
像Vimrc, GSHRC

01:00:02.880 --> 01:00:04.880
等一堆的Tmax, Conv

01:00:04.880 --> 01:00:06.880
我都会放到一个

01:00:06.880 --> 01:00:08.880
GitHub的公开仓库里面

01:00:08.880 --> 01:00:10.880
然后我自己的一些

01:00:10.880 --> 01:00:12.880
安装NGINX的一些东西

01:00:12.880 --> 01:00:14.880
有一个

01:00:14.880 --> 01:00:16.880
MyAnsible的仓库

01:00:16.880 --> 01:00:18.880
叫MyAnsible是一个私密的仓库

01:00:18.880 --> 01:00:20.880
然后

01:00:20.880 --> 01:00:22.880
之前是有一些

01:00:22.880 --> 01:00:24.880
需要那个积累的

01:00:24.880 --> 01:00:26.880
像python的setup.py

01:00:26.880 --> 01:00:28.880
我写了十几次都不会写

01:00:28.880 --> 01:00:30.880
就每次去

01:00:30.880 --> 01:00:32.880
找一个python的库抄一下

01:00:32.880 --> 01:00:34.880
找request的库

01:00:34.880 --> 01:00:36.880
抄一下

01:00:36.880 --> 01:00:38.880
其实你们说的这些都是配置

01:00:38.880 --> 01:00:40.880
我觉得和一般代码

01:00:40.880 --> 01:00:42.880
还是有点区别可能就是说

01:00:42.880 --> 01:00:44.880
配置它的通用性更强而代码

01:00:44.880 --> 01:00:46.880
它的在每一个project

01:00:46.880 --> 01:00:48.880
里面它的独特性更强

01:00:48.880 --> 01:00:50.880
也不是那么好积累下来

01:00:50.880 --> 01:00:52.880
再重用

01:00:52.880 --> 01:00:54.880
对

01:00:54.880 --> 01:00:56.880
假如说一个编程语言

01:00:56.880 --> 01:00:58.880
需要让你自己去

01:00:58.880 --> 01:01:00.880
背过一些代码的话

01:01:00.880 --> 01:01:02.880
应该就有问题

01:01:02.880 --> 01:01:04.880
Golang不服

01:01:04.880 --> 01:01:06.880
JavaGolang不服

01:01:06.880 --> 01:01:08.880
因为很多东西其实是通用的

01:01:08.880 --> 01:01:10.880
我说说我会把它收成包

01:01:10.880 --> 01:01:12.880
Java吧

01:01:12.880 --> 01:01:14.880
对

01:01:14.880 --> 01:01:16.880
然后就包括Golang

01:01:16.880 --> 01:01:18.880
刚才我们不是聊到Golang的日志

01:01:18.880 --> 01:01:20.880
然后Golang的话

01:01:20.880 --> 01:01:22.880
你用什么日志库

01:01:22.880 --> 01:01:24.880
比如说我要在里面去做一些初始化

01:01:24.880 --> 01:01:26.880
比如说我要让它在

01:01:26.880 --> 01:01:28.880
打印日志信息的时候

01:01:28.880 --> 01:01:30.880
然后我会把一些东西

01:01:30.880 --> 01:01:32.880
它是跟具体业务无关的代码

01:01:32.880 --> 01:01:34.880
那么我毫无疑问会把它抽出来

01:01:34.880 --> 01:01:36.880
积累下来

01:01:36.880 --> 01:01:38.880
你是怎么积累的

01:01:38.880 --> 01:01:40.880
你是用什么写在笔记里面吗

01:01:40.880 --> 01:01:42.880
还是怎么

01:01:42.880 --> 01:01:44.880
我就直接抽成包了

01:01:44.880 --> 01:01:46.880
我把这些能够用的东西抽成包了

01:01:46.880 --> 01:01:48.880
然后抽成包我就直接会

01:01:48.880 --> 01:01:50.880
把它扔到Github的私人仓库里面

01:01:50.880 --> 01:01:52.880
但是像比如说你刚才说的

01:01:52.880 --> 01:01:54.880
Ansemble那种东西

01:01:54.880 --> 01:01:56.880
我觉得它也不是配置

01:01:56.880 --> 01:01:58.880
作为一条但是它很多东西是通用的

01:01:58.880 --> 01:02:00.880
然后的话那么这部分东西

01:02:00.880 --> 01:02:02.880
也是可以积累下来的

01:02:02.880 --> 01:02:04.880
其实

01:02:04.880 --> 01:02:06.880
感觉这个好像我们可以聊的

01:02:06.880 --> 01:02:08.880
也不是特别多那么就下一题吧

01:02:08.880 --> 01:02:10.880
对然后的话

01:02:10.880 --> 01:02:12.880
凭

01:02:12.880 --> 01:02:14.880
那个几位主创人

01:02:14.880 --> 01:02:16.880
19年学了哪些技术

01:02:16.880 --> 01:02:18.880
20年计划学了哪些新技术

01:02:18.880 --> 01:02:20.880
那我先说我的

01:02:20.880 --> 01:02:22.880
你说吧你说

01:02:22.880 --> 01:02:24.880
对然后我19年其实

01:02:24.880 --> 01:02:26.880
soft skill可能说是

01:02:26.880 --> 01:02:28.880
多一些就像上期来过的

01:02:28.880 --> 01:02:30.880
soft skill可能会多一些

01:02:30.880 --> 01:02:32.880
如果说要硬技术的话

01:02:32.880 --> 01:02:34.880
可能就是去系统的

01:02:34.880 --> 01:02:36.880
把Golang和Java录了一遍

01:02:36.880 --> 01:02:38.880
然后现在在那个

01:02:38.880 --> 01:02:40.880
去了解一些容器

01:02:40.880 --> 01:02:42.880
和K8S

01:02:42.880 --> 01:02:44.880
因为工作需要去做一些容器

01:02:44.880 --> 01:02:46.880
和K8S相关的工作也需要去了解这方面

01:02:46.880 --> 01:02:48.880
这算是19年学的

01:02:48.880 --> 01:02:50.880
然后的话

01:02:50.880 --> 01:02:52.880
还有就是把那个

01:02:52.880 --> 01:02:54.880
就是一些网络协议

01:02:54.880 --> 01:02:56.880
Linux相关的就比如说

01:02:56.880 --> 01:02:58.880
那个UNIX

01:02:58.880 --> 01:03:00.880
Network Programming这种书也系统的

01:03:00.880 --> 01:03:02.880
刷了一遍

01:03:02.880 --> 01:03:04.880
然后网络协议相关的书也刷了一遍

01:03:04.880 --> 01:03:06.880
如果是软技能的话可能就

01:03:06.880 --> 01:03:08.880
比较多然后就比如说

01:03:08.880 --> 01:03:10.880
怎么样去在一个新的环境里面

01:03:10.880 --> 01:03:12.880
去推进一套SOP

01:03:12.880 --> 01:03:14.880
就是说是怎么样去

01:03:14.880 --> 01:03:16.880
做一些架构类的工作

01:03:16.880 --> 01:03:18.880
然后怎么样去保证一个线上系统的

01:03:18.880 --> 01:03:20.880
稳定性这样一些

01:03:20.880 --> 01:03:22.880
就是Design和其他Manage

01:03:22.880 --> 01:03:24.880
的一些Soft Skill的东西

01:03:26.880 --> 01:03:28.880
我感觉你学的东西还是挺多的

01:03:28.880 --> 01:03:30.880
对

01:03:30.880 --> 01:03:32.880
我其实今天

01:03:32.880 --> 01:03:34.880
一直在很焦虑

01:03:34.880 --> 01:03:36.880
因为我其实今天我在

01:03:36.880 --> 01:03:38.880
也在刷一些Paper就比如说

01:03:38.880 --> 01:03:40.880
Rapt的大论文之类的

01:03:40.880 --> 01:03:42.880
其实到现在虽然刷完了

01:03:42.880 --> 01:03:44.880
但是我一直因为你刷完并不刷完

01:03:44.880 --> 01:03:46.880
你其实要写一个要系统

01:03:46.880 --> 01:03:48.880
自己写出来才是OK

01:03:48.880 --> 01:03:50.880
但是到现在一直没时间写

01:03:50.880 --> 01:03:52.880
然后看的书也少

01:03:52.880 --> 01:03:54.880
然后博客也少我觉得有些时候还是很焦虑的

01:03:54.880 --> 01:03:56.880
觉得去年一年

01:03:56.880 --> 01:03:58.880
手滑水滑过去了

01:03:58.880 --> 01:04:00.880
我觉得其实可能更重要

01:04:00.880 --> 01:04:02.880
就是说

01:04:02.880 --> 01:04:04.880
就是学技术的动机

01:04:04.880 --> 01:04:06.880
是怎么样的

01:04:06.880 --> 01:04:08.880
然后我不知道你们是

01:04:08.880 --> 01:04:10.880
怎么样反正就

01:04:10.880 --> 01:04:12.880
我基本上也就是

01:04:12.880 --> 01:04:14.880
我都是靠兴趣了

01:04:14.880 --> 01:04:16.880
所以像只要刚才说的

01:04:16.880 --> 01:04:18.880
一些很多比较流行的技术

01:04:18.880 --> 01:04:20.880
我都不是特别了解

01:04:20.880 --> 01:04:22.880
比如说容器这方面

01:04:22.880 --> 01:04:24.880
因为当然也有说

01:04:24.880 --> 01:04:26.880
就是

01:04:26.880 --> 01:04:28.880
工作中用不到的关系

01:04:28.880 --> 01:04:30.880
或者说用的东西是叫另外一个名字

01:04:30.880 --> 01:04:32.880
But anyway我觉得

01:04:32.880 --> 01:04:34.880
其实还是追随你的兴趣就好了

01:04:34.880 --> 01:04:36.880
就是你对哪里感兴趣

01:04:36.880 --> 01:04:38.880
你就多了解一点

01:04:38.880 --> 01:04:40.880
这样子

01:04:40.880 --> 01:04:42.880
那你一直学了什么

01:04:42.880 --> 01:04:44.880
感觉就是了解了一下Python的

01:04:44.880 --> 01:04:46.880
可能字节码这方面吧

01:04:46.880 --> 01:04:48.880
然后

01:04:48.880 --> 01:04:50.880
它的调试

01:04:50.880 --> 01:04:52.880
因为也是自己要做Cyberbrain嘛

01:04:52.880 --> 01:04:54.880
所以我都是要做什么

01:04:54.880 --> 01:04:56.880
才去学什么基本上

01:04:56.880 --> 01:04:58.880
我说一下

01:04:58.880 --> 01:05:00.880
来

01:05:00.880 --> 01:05:02.880
我在19年

01:05:02.880 --> 01:05:04.880
Linux更加了解了一些

01:05:04.880 --> 01:05:06.880
我看了那本书

01:05:06.880 --> 01:05:08.880
我看了那个Robert Lau的Linux System Programming

01:05:08.880 --> 01:05:10.880
看得非常慢

01:05:10.880 --> 01:05:12.880
我好像看了半年

01:05:12.880 --> 01:05:14.880
可能我读的比较慢吧

01:05:14.880 --> 01:05:16.880
然后有一些我特别感兴趣的东西

01:05:16.880 --> 01:05:18.880
我会再去查很多相关的资料

01:05:18.880 --> 01:05:20.880
然后写一篇博客

01:05:20.880 --> 01:05:22.880
去年写跟Linux相关的博客

01:05:22.880 --> 01:05:24.880
估计写了将近十篇

01:05:24.880 --> 01:05:26.880
所以看得比较慢

01:05:26.880 --> 01:05:28.880
但是

01:05:28.880 --> 01:05:30.880
之前我很多自己不了解

01:05:30.880 --> 01:05:32.880
但是很感兴趣的东西

01:05:32.880 --> 01:05:34.880
去年感觉终于明白了

01:05:34.880 --> 01:05:36.880
比如说分区文件系统

01:05:36.880 --> 01:05:38.880
怎么工作的那些东西

01:05:38.880 --> 01:05:40.880
嗯

01:05:40.880 --> 01:05:42.880
然后编程语言

01:05:42.880 --> 01:05:44.880
看着玩的

01:05:44.880 --> 01:05:46.880
看了一个Skim一个Elixir

01:05:46.880 --> 01:05:48.880
然后

01:05:48.880 --> 01:05:50.880
学了还有其他的

01:05:50.880 --> 01:05:52.880
像Redis

01:05:52.880 --> 01:05:54.880
游泳

01:05:54.880 --> 01:05:56.880
游泳

01:05:56.880 --> 01:05:58.880
对

01:05:58.880 --> 01:06:00.880
什么意思

01:06:00.880 --> 01:06:02.880
你说学这个也算技术吗

01:06:02.880 --> 01:06:04.880
我一下没反应过来

01:06:06.880 --> 01:06:08.880
Literally

01:06:08.880 --> 01:06:10.880
哇

01:06:10.880 --> 01:06:12.880
对而且我的游泳

01:06:12.880 --> 01:06:14.880
是在YouTube上看视频学会的

01:06:14.880 --> 01:06:16.880
计划

01:06:16.880 --> 01:06:18.880
2020年学习自游泳

01:06:18.880 --> 01:06:20.880
我现在只会挖泳

01:06:20.880 --> 01:06:22.880
哇很强

01:06:22.880 --> 01:06:24.880
我们以后来聊一些程序员健身的话题

01:06:24.880 --> 01:06:26.880
你可以聊一下怎么学游泳

01:06:26.880 --> 01:06:28.880
哇

01:06:28.880 --> 01:06:30.880
哈哈

01:06:30.880 --> 01:06:32.880
对我可以说

01:06:32.880 --> 01:06:34.880
我之前我本来认识同事来

01:06:34.880 --> 01:06:36.880
然后他是之前在FB

01:06:36.880 --> 01:06:38.880
然后现在转行做产品经理

01:06:38.880 --> 01:06:40.880
然后的话他在夜里时间

01:06:40.880 --> 01:06:42.880
做的那个打拳击

01:06:42.880 --> 01:06:44.880
我觉得可以找他来聊一聊

01:06:44.880 --> 01:06:46.880
嗯好

01:06:46.880 --> 01:06:48.880
然后Linux

01:06:48.880 --> 01:06:50.880
2020年

01:06:50.880 --> 01:06:52.880
还有Linux

01:06:52.880 --> 01:06:54.880
有一些书像

01:06:54.880 --> 01:06:56.880
Unix环境高级编程

01:06:56.880 --> 01:06:58.880
那些书我打算2020年看一下

01:06:58.880 --> 01:07:00.880
还有Unix

01:07:00.880 --> 01:07:02.880
跟网络这两个方面

01:07:02.880 --> 01:07:04.880
再继续了解一下

01:07:04.880 --> 01:07:06.880
嗯

01:07:06.880 --> 01:07:08.880
对我觉得因为毕竟

01:07:08.880 --> 01:07:10.880
可能就是因为你是

01:07:10.880 --> 01:07:12.880
韵味所以这方面会

01:07:12.880 --> 01:07:14.880
了解的比较深入一些

01:07:14.880 --> 01:07:16.880
像你说的好多我都不了解

01:07:16.880 --> 01:07:18.880
也是就是因为

01:07:18.880 --> 01:07:20.880
工作中要用的关系吧

01:07:20.880 --> 01:07:22.880
嗯

01:07:22.880 --> 01:07:24.880
其实工作中用不到

01:07:24.880 --> 01:07:26.880
因为工作中都用平台

01:07:26.880 --> 01:07:28.880
都是平台去点一下

01:07:28.880 --> 01:07:30.880
就是

01:07:30.880 --> 01:07:32.880
就比较感兴趣

01:07:32.880 --> 01:07:34.880
尤其是网络

01:07:34.880 --> 01:07:36.880
我2020年的话我想想

01:07:36.880 --> 01:07:38.880
我2020年的话我估计会去

01:07:38.880 --> 01:07:40.880
看一下Airway

01:07:40.880 --> 01:07:42.880
或者说是其他就是说是现在云言声

01:07:42.880 --> 01:07:44.880
就是Mesh化里面一些

01:07:44.880 --> 01:07:46.880
比较常用的组件的实现

01:07:46.880 --> 01:07:48.880
然后当然最重要的是要把

01:07:48.880 --> 01:07:50.880
我自己拖了很久的raft的大

01:07:50.880 --> 01:07:52.880
就是库给写完

01:07:52.880 --> 01:07:54.880
然后的话剩下的话就还是

01:07:54.880 --> 01:07:56.880
继续去刷一些基础课吧

01:07:56.880 --> 01:07:58.880
然后刷书的刷书的刷课的

01:07:58.880 --> 01:08:00.880
对

01:08:00.880 --> 01:08:02.880
文老师

01:08:02.880 --> 01:08:04.880
我这边我大概回顾了

01:08:04.880 --> 01:08:06.880
一下2019年我好像没有说

01:08:06.880 --> 01:08:08.880
很直接的

01:08:08.880 --> 01:08:10.880
这种我只能说我看

01:08:10.880 --> 01:08:12.880
完了一些书对然后

01:08:12.880 --> 01:08:14.880
但是看的

01:08:14.880 --> 01:08:16.880
有一部分是纯技术的但

01:08:16.880 --> 01:08:18.880
更多的是和架构以及设计

01:08:18.880 --> 01:08:20.880
有关的

01:08:20.880 --> 01:08:22.880
一本是

01:08:22.880 --> 01:08:24.880
这个Google的那个SIE

01:08:24.880 --> 01:08:26.880
那本书

01:08:26.880 --> 01:08:28.880
然后还有就是那个

01:08:28.880 --> 01:08:30.880
The philosopher of software design

01:08:30.880 --> 01:08:32.880
那本书特别好强烈推荐

01:08:32.880 --> 01:08:34.880
是关于你的

01:08:34.880 --> 01:08:36.880
系统设计的

01:08:36.880 --> 01:08:38.880
这个我还挺感兴趣

01:08:38.880 --> 01:08:40.880
是谁写的

01:08:40.880 --> 01:08:42.880
然后

01:08:42.880 --> 01:08:44.880
作者叫啥我忘记了

01:08:44.880 --> 01:08:46.880
他在YouTube上

01:08:46.880 --> 01:08:48.880
还有一个同样的演讲但是那本书

01:08:48.880 --> 01:08:50.880
真的讲的特别好而且特别薄的一本

01:08:50.880 --> 01:08:52.880
书对然后

01:08:52.880 --> 01:08:54.880
还有一本书是clean architecture

01:08:54.880 --> 01:08:56.880
对是讲

01:08:56.880 --> 01:08:58.880
如何设计架构的

01:08:58.880 --> 01:09:00.880
这个蛮有名的

01:09:00.880 --> 01:09:02.880
但是理论上我刚才说的那本书

01:09:02.880 --> 01:09:04.880
要比这个还有名

01:09:04.880 --> 01:09:06.880
但是那本书可能是18年的

01:09:06.880 --> 01:09:08.880
对然后

01:09:08.880 --> 01:09:10.880
然后还

01:09:10.880 --> 01:09:12.880
看了什么呢还有

01:09:12.880 --> 01:09:14.880
税库相关的因为其实之前

01:09:14.880 --> 01:09:16.880
经常用税库嘛但是对于税库

01:09:16.880 --> 01:09:18.880
底层的一些比如说

01:09:18.880 --> 01:09:20.880
所以油画是怎么做的呀

01:09:20.880 --> 01:09:22.880
其实没有特别多的了解

01:09:22.880 --> 01:09:24.880
然后当时看了一篇很长的博文

01:09:24.880 --> 01:09:26.880
啃了好久

01:09:26.880 --> 01:09:28.880
叫啥来的叫

01:09:28.880 --> 01:09:30.880
叫

01:09:30.880 --> 01:09:32.880
how does a relational database work

01:09:32.880 --> 01:09:34.880
就是一个关系型

01:09:34.880 --> 01:09:36.880
税库是如何工作的

01:09:36.880 --> 01:09:38.880
当然如果你配上

01:09:38.880 --> 01:09:40.880
你之前那个

01:09:40.880 --> 01:09:42.880
很有名的那个DDRA

01:09:42.880 --> 01:09:44.880
那本书

01:09:44.880 --> 01:09:46.880
设计数据密集型应用的

01:09:46.880 --> 01:09:48.880
那本书对

01:09:48.880 --> 01:09:50.880
这两个配合看会好一些

01:09:50.880 --> 01:09:52.880
会讲对

01:09:52.880 --> 01:09:54.880
这两本书我觉得好处都是说

01:09:54.880 --> 01:09:56.880
不是很告诉你

01:09:56.880 --> 01:09:58.880
特别细的点

01:09:58.880 --> 01:10:00.880
而是告诉你这种说

01:10:00.880 --> 01:10:02.880
原理就是我们基于什么样的

01:10:02.880 --> 01:10:04.880
场景选择什么样的

01:10:04.880 --> 01:10:06.880
结构然后在此基础之上

01:10:06.880 --> 01:10:08.880
然后拥有了哪些特性

01:10:08.880 --> 01:10:10.880
丢失了哪些特性对

01:10:10.880 --> 01:10:12.880
我觉得还是一本

01:10:12.880 --> 01:10:14.880
很不错的

01:10:14.880 --> 01:10:16.880
我觉得DDRA这本书非常好

01:10:16.880 --> 01:10:18.880
就是因为作者就

01:10:18.880 --> 01:10:20.880
告诉你你需要知道的一些

01:10:20.880 --> 01:10:22.880
原理就够了就不是

01:10:22.880 --> 01:10:24.880
非常细完全没有抄什么

01:10:24.880 --> 01:10:26.880
文档啊什么的

01:10:26.880 --> 01:10:28.880
对我觉得这本书其实是和

01:10:28.880 --> 01:10:30.880
所有在用

01:10:30.880 --> 01:10:32.880
数据库的人去看的

01:10:32.880 --> 01:10:34.880
对你可能不是DBA你可能不是

01:10:34.880 --> 01:10:36.880
专门做数据库开发的

01:10:36.880 --> 01:10:38.880
可能不是做数据库运维的

01:10:38.880 --> 01:10:40.880
但是你看了之后

01:10:40.880 --> 01:10:42.880
我觉得你已经

01:10:42.880 --> 01:10:44.880
知道

01:10:44.880 --> 01:10:46.880
知道了你需要知道的

01:10:46.880 --> 01:10:48.880
大部分东西对而且你随着

01:10:48.880 --> 01:10:50.880
开发的时候你可以深入就是

01:10:50.880 --> 01:10:52.880
他会告诉你就像文档型

01:10:52.880 --> 01:10:54.880
数据库跟各种索引是

01:10:54.880 --> 01:10:56.880
怎么工作的我印象比较深的

01:10:56.880 --> 01:10:58.880
就是他介绍KV的时候

01:10:58.880 --> 01:11:00.880
他只用两行shell就

01:11:00.880 --> 01:11:02.880
实现了一个

01:11:02.880 --> 01:11:04.880
KV的数据库就是一个

01:11:04.880 --> 01:11:06.880
set一个get

01:11:06.880 --> 01:11:08.880
对特别特别就是看完

01:11:08.880 --> 01:11:10.880
特别那个清楚

01:11:10.880 --> 01:11:12.880
而且我觉得这个人

01:11:12.880 --> 01:11:14.880
真的写的是一本好书就是假如说

01:11:14.880 --> 01:11:16.880
他写的再细一点你读完了那本书

01:11:16.880 --> 01:11:18.880
基本上能知道的就这么多

01:11:18.880 --> 01:11:20.880
你记住的那么多但是他这本书

01:11:20.880 --> 01:11:22.880
就写的恰到好处

01:11:22.880 --> 01:11:24.880
嗯不过我感觉

01:11:24.880 --> 01:11:26.880
我很多时候读这个

01:11:26.880 --> 01:11:28.880
这种比较厚的技术书就很难

01:11:28.880 --> 01:11:30.880
记住他里面讲的东西这个我也是

01:11:30.880 --> 01:11:32.880
比较可能因为我记忆不太好

01:11:32.880 --> 01:11:34.880
所以我不知道你们能不能

01:11:36.880 --> 01:11:38.880
对很正常

01:11:38.880 --> 01:11:40.880
很正常我读完一本书

01:11:40.880 --> 01:11:42.880
可能最后只能记住

01:11:42.880 --> 01:11:44.880
五分之一甚至还不到

01:11:44.880 --> 01:11:46.880
五分之一很高了我觉得我可能

01:11:46.880 --> 01:11:48.880
十分之一吧

01:11:48.880 --> 01:11:50.880
就是就是

01:11:50.880 --> 01:11:52.880
就是你看完之后你当时

01:11:52.880 --> 01:11:54.880
哇讲的好厉害然后之后你就

01:11:54.880 --> 01:11:56.880
可能只对某个名词有印象了

01:11:56.880 --> 01:11:58.880
然后你就忘记了但是

01:11:58.880 --> 01:12:00.880
但是总有一部分你能记住的

01:12:00.880 --> 01:12:02.880
对确实好难

01:12:02.880 --> 01:12:04.880
都记住我觉得还是很难的

01:12:04.880 --> 01:12:06.880
我记得在推特上看

01:12:06.880 --> 01:12:08.880
家源老师说过一句他说如果

01:12:08.880 --> 01:12:10.880
开一本书能有一句话

01:12:10.880 --> 01:12:12.880
就是你觉得讲的特别好或者说

01:12:12.880 --> 01:12:14.880
让你学到一些东西就是值得看

01:12:14.880 --> 01:12:16.880
对我就是突然想到

01:12:16.880 --> 01:12:18.880
对然后19年还学了

01:12:18.880 --> 01:12:20.880
我觉得不少确实是

01:12:20.880 --> 01:12:22.880
软技能的书

01:12:22.880 --> 01:12:24.880
看了很多

01:12:24.880 --> 01:12:26.880
如果推荐

01:12:26.880 --> 01:12:28.880
我就只推荐一本吧

01:12:28.880 --> 01:12:30.880
那本书可能是在前年特别火叫

01:12:30.880 --> 01:12:32.880
原则

01:12:32.880 --> 01:12:34.880
我觉得还是一本不错的

01:12:34.880 --> 01:12:36.880
书的然后

01:12:36.880 --> 01:12:38.880
其他的

01:12:38.880 --> 01:12:40.880
我19年也在学游泳也是

01:12:40.880 --> 01:12:42.880
通过YouTube学的

01:12:42.880 --> 01:12:44.880
但是我和谢涛不一样的是

01:12:44.880 --> 01:12:46.880
我没坚持下来因为

01:12:46.880 --> 01:12:48.880
学到一半的时候那个游泳馆装修

01:12:48.880 --> 01:12:50.880
然后

01:12:50.880 --> 01:12:52.880
我的学习进程被迫中断

01:12:52.880 --> 01:12:54.880
然后就没有持续下去

01:12:54.880 --> 01:12:56.880
对他好像装修了三个月还是多久

01:12:56.880 --> 01:12:58.880
对然后20年

01:12:58.880 --> 01:13:00.880
我打算

01:13:00.880 --> 01:13:02.880
学的话其实有

01:13:02.880 --> 01:13:04.880
我很难说我不是那种

01:13:04.880 --> 01:13:06.880
直接定目标说我20年要学什么的

01:13:06.880 --> 01:13:08.880
我目前有一个很明确的

01:13:08.880 --> 01:13:10.880
很明显的目标是我打算再去了解

01:13:10.880 --> 01:13:12.880
一些和

01:13:12.880 --> 01:13:14.880
ST相关的东西出现与法术相关的

01:13:14.880 --> 01:13:16.880
因为我

01:13:16.880 --> 01:13:18.880
最近其实会

01:13:18.880 --> 01:13:20.880
发现

01:13:20.880 --> 01:13:22.880
我换了一家新公司

01:13:22.880 --> 01:13:24.880
对然后新公司

01:13:24.880 --> 01:13:26.880
有一些东西是可以通过工具

01:13:26.880 --> 01:13:28.880
去解决的对比如说一些

01:13:28.880 --> 01:13:30.880
检查一些什么的那这个时候

01:13:30.880 --> 01:13:32.880
其实可以自己去写写工具

01:13:32.880 --> 01:13:34.880
我已经写了一个类似的工具

01:13:34.880 --> 01:13:36.880
但是感觉还

01:13:36.880 --> 01:13:38.880
写的过程中发现还是有很多

01:13:38.880 --> 01:13:40.880
不太清晰的地方对因为我对

01:13:40.880 --> 01:13:42.880
编译原理这块车不太熟

01:13:42.880 --> 01:13:44.880
然后我可能会再了解了解

01:13:44.880 --> 01:13:46.880
我推荐你看一下那个

01:13:46.880 --> 01:13:48.880
graphvis的那个dota语言的

01:13:48.880 --> 01:13:50.880
语法书那个比较简单

01:13:50.880 --> 01:13:52.880
因为我看过嘛

01:13:52.880 --> 01:13:54.880
就看完了你不光

01:13:54.880 --> 01:13:56.880
能知道他语法怎么设计的你还能

01:13:56.880 --> 01:13:58.880
学会那个语言画图

01:13:58.880 --> 01:14:00.880
觉得性价比非常高

01:14:02.880 --> 01:14:04.880
信涛是dota语言大佬

01:14:04.880 --> 01:14:06.880
我当年就是和信涛学习dota语言

01:14:06.880 --> 01:14:08.880
教了我好多东西

01:14:10.880 --> 01:14:12.880
好我可以看一下

01:14:12.880 --> 01:14:14.880
当时

01:14:14.880 --> 01:14:16.880
当时我在寻找一个

01:14:16.880 --> 01:14:18.880
万能的

01:14:18.880 --> 01:14:20.880
画图工具然后我研究了一下

01:14:20.880 --> 01:14:22.880
那个其实后来也

01:14:22.880 --> 01:14:24.880
他那个布局只能通过算法生成

01:14:24.880 --> 01:14:26.880
也有一定的

01:14:26.880 --> 01:14:28.880
限制这个真的有很多

01:14:28.880 --> 01:14:30.880
我前段时间调研了特别多工具

01:14:30.880 --> 01:14:32.880
就是要列的话

01:14:32.880 --> 01:14:34.880
特别多但是

01:14:34.880 --> 01:14:36.880
就我觉得很多大部分工具还是

01:14:36.880 --> 01:14:38.880
比较同质化吧

01:14:38.880 --> 01:14:40.880
不过我就是

01:14:40.880 --> 01:14:42.880
觉得我我看了一些

01:14:42.880 --> 01:14:44.880
一叉子的宣传我觉得他们好像

01:14:44.880 --> 01:14:46.880
还比较有前途

01:14:46.880 --> 01:14:48.880
就是对

01:14:48.880 --> 01:14:50.880
我是打算试一下一叉子

01:14:50.880 --> 01:14:52.880
但这个有点跑题

01:14:52.880 --> 01:14:54.880
了就

01:14:54.880 --> 01:14:56.880
就

01:14:56.880 --> 01:14:58.880
然后我突然想起

01:14:58.880 --> 01:15:00.880
说到信涛然后我突然想起

01:15:00.880 --> 01:15:02.880
我们之前在群里说到那句话

01:15:02.880 --> 01:15:04.880
蚂蚁SRE强横如斯

01:15:04.880 --> 01:15:06.880
这就是蚂蚁SRE

01:15:06.880 --> 01:15:08.880
强者的能力吗

01:15:10.880 --> 01:15:12.880
对因为上次信涛

01:15:12.880 --> 01:15:14.880
说的是那个你可以通过一个

01:15:14.880 --> 01:15:16.880
在你的Github那个

01:15:16.880 --> 01:15:18.880
URL后面加一个keys

01:15:18.880 --> 01:15:20.880
对吧对用户名

01:15:20.880 --> 01:15:22.880
用户名加keys

01:15:22.880 --> 01:15:24.880
点keys你就可以拿到你的

01:15:24.880 --> 01:15:26.880
就可以看到你的public key

01:15:26.880 --> 01:15:28.880
对吧对

01:15:28.880 --> 01:15:30.880
这个我们都不知道

01:15:30.880 --> 01:15:32.880
然后信涛一说

01:15:32.880 --> 01:15:34.880
还可以这样用

01:15:34.880 --> 01:15:36.880
对

01:15:36.880 --> 01:15:38.880
嗯

01:15:38.880 --> 01:15:40.880
好那我们就往下吧

01:15:40.880 --> 01:15:42.880
下面我就直接念了吧

01:15:42.880 --> 01:15:44.880
就也

01:15:44.880 --> 01:15:46.880
节省一下时间

01:15:46.880 --> 01:15:48.880
然后文老师说这个AMA站点

01:15:48.880 --> 01:15:50.880
是Python写的吗

01:15:50.880 --> 01:15:52.880
对这个

01:15:52.880 --> 01:15:54.880
是Python写的

01:15:54.880 --> 01:15:56.880
然后

01:15:56.880 --> 01:15:58.880
A132

01:15:58.880 --> 01:16:00.880
同学问有肉身翻墙的经验

01:16:00.880 --> 01:16:02.880
分享吗

01:16:02.880 --> 01:16:04.880
这个只能我来说了吧

01:16:04.880 --> 01:16:06.880
嗯

01:16:06.880 --> 01:16:08.880
我觉得就两条路吧

01:16:08.880 --> 01:16:10.880
第一条是出国读书

01:16:10.880 --> 01:16:12.880
第二条是你进一个外企

01:16:12.880 --> 01:16:14.880
然后拿

01:16:14.880 --> 01:16:16.880
工作签证出去

01:16:16.880 --> 01:16:18.880
对但是其实还有第三条路

01:16:18.880 --> 01:16:20.880
就是像日本新加坡

01:16:20.880 --> 01:16:22.880
这种离中国比较近的地方

01:16:22.880 --> 01:16:24.880
其实他们招中国的

01:16:24.880 --> 01:16:26.880
的程序员过去

01:16:26.880 --> 01:16:28.880
直接工作还是挺多的

01:16:28.880 --> 01:16:30.880
我觉得差不多就是三条路

01:16:30.880 --> 01:16:32.880
对

01:16:32.880 --> 01:16:34.880
不能直接去外面工作吗

01:16:34.880 --> 01:16:36.880
取决于你去哪里

01:16:36.880 --> 01:16:38.880
就说你要去日本新加坡

01:16:38.880 --> 01:16:40.880
还是很容易的

01:16:40.880 --> 01:16:42.880
其实澳大利亚澳大利亚加拿大之类的

01:16:42.880 --> 01:16:44.880
也是可以的

01:16:44.880 --> 01:16:46.880
去美国比较难

01:16:46.880 --> 01:16:48.880
去美国很难

01:16:48.880 --> 01:16:50.880
去美国很难

01:16:50.880 --> 01:16:52.880
对

01:16:52.880 --> 01:16:54.880
去美国很难

01:16:54.880 --> 01:16:56.880
澳大利亚和新西兰是有专门的签证类型

01:16:56.880 --> 01:16:58.880
叫做WHV

01:16:58.880 --> 01:17:00.880
就是Worker and Holiday Visa

01:17:00.880 --> 01:17:02.880
就是说你拿着签证

01:17:02.880 --> 01:17:04.880
可以一年之内在那边

01:17:04.880 --> 01:17:06.880
边打工边旅游

01:17:06.880 --> 01:17:08.880
然后同时你拿了对应的

01:17:08.880 --> 01:17:10.880
比如说你就直接拿着WHV

01:17:10.880 --> 01:17:12.880
登录

01:17:12.880 --> 01:17:14.880
登录拿offer之后

01:17:14.880 --> 01:17:16.880
然后让雇主给你提对应的

01:17:16.880 --> 01:17:18.880
担保

01:17:18.880 --> 01:17:20.880
然后做其他的

01:17:20.880 --> 01:17:22.880
然后就OK了

01:17:22.880 --> 01:17:24.880
对这里我想推荐一下

01:17:24.880 --> 01:17:26.880
友台GDTALK的一系列访谈

01:17:26.880 --> 01:17:28.880
就是他们采访了很多在世界各地工作的人

01:17:28.880 --> 01:17:30.880
然后在他们那些访谈里

01:17:30.880 --> 01:17:32.880
你就会了解到

01:17:32.880 --> 01:17:34.880
怎么去

01:17:34.880 --> 01:17:36.880
比如说去日本

01:17:36.880 --> 01:17:38.880
然后怎么去美国

01:17:38.880 --> 01:17:40.880
怎么去加拿大工作

01:17:40.880 --> 01:17:42.880
然后都有很详细的一些指南

01:17:42.880 --> 01:17:44.880
所以我们就不在这里说特别多

01:17:44.880 --> 01:17:46.880
然后大家可以去听一下

01:17:46.880 --> 01:17:48.880
对他们还有去德国的

01:17:48.880 --> 01:17:50.880
然后推荐GDTALK

01:17:52.880 --> 01:17:54.880
对德国

01:17:56.880 --> 01:17:58.880
好然后下一个问题

01:18:00.880 --> 01:18:02.880
还是这个

01:18:02.880 --> 01:18:04.880
UBUHUO

01:18:04.880 --> 01:18:06.880
我们不会读名字的同学提的

01:18:06.880 --> 01:18:08.880
一个问题吧

01:18:08.880 --> 01:18:10.880
你为什么加班就在做什么

01:18:10.880 --> 01:18:12.880
怎么定义加班

01:18:12.880 --> 01:18:14.880
我会晚上在家里工作

01:18:14.880 --> 01:18:16.880
这个算加班肯定也算加班

01:18:16.880 --> 01:18:18.880
但是我们没有强制加班

01:18:20.880 --> 01:18:22.880
就我觉得这个还是给人心理上

01:18:22.880 --> 01:18:24.880
感觉就是差别比较大一点

01:18:28.880 --> 01:18:30.880
首先我们这四个里面不加班的举个手

01:18:32.880 --> 01:18:34.880
你们好回答吗

01:18:34.880 --> 01:18:36.880
我突然发现这个问题是个送命题

01:18:38.880 --> 01:18:40.880
这个问题我和信涛规避一下吧

01:18:40.880 --> 01:18:42.880
那文老师你来说一下吧

01:18:44.880 --> 01:18:46.880
我觉得这个就没有固定的事情

01:18:48.880 --> 01:18:50.880
就是你如果加班

01:18:50.880 --> 01:18:52.880
基本上就是突发很紧急的事情

01:18:52.880 --> 01:18:54.880
我觉得我一般结合过去的经验

01:18:54.880 --> 01:18:56.880
只有两种加班

01:18:56.880 --> 01:18:58.880
一种是很紧急的事情

01:18:58.880 --> 01:19:00.880
比如说故障处理

01:19:02.880 --> 01:19:04.880
另外一种就是

01:19:04.880 --> 01:19:06.880
这个紧急事情也有可能包括说

01:19:06.880 --> 01:19:08.880
这个是一个很重要的事情

01:19:08.880 --> 01:19:10.880
这个紧急事情也有可能包括说

01:19:10.880 --> 01:19:12.880
真的时间突然插入了某一个很急的事情

01:19:12.880 --> 01:19:14.880
要做上去然后要加班

01:19:14.880 --> 01:19:16.880
还有一种就是

01:19:18.880 --> 01:19:20.880
因为很多不可抗力的原因

01:19:22.880 --> 01:19:24.880
你承诺的时间可能无法

01:19:24.880 --> 01:19:26.880
交付之前的承诺的交付物

01:19:28.880 --> 01:19:30.880
但是这个代代烂烂又不能往后推

01:19:30.880 --> 01:19:32.880
那就要加班了

01:19:32.880 --> 01:19:34.880
就这两种情况吧

01:19:34.880 --> 01:19:36.880
但是你说事情的话

01:19:36.880 --> 01:19:38.880
肯定是不一样的

01:19:38.880 --> 01:19:40.880
如果每次都是同一个事

01:19:40.880 --> 01:19:42.880
那好像就叫常规工作

01:19:48.880 --> 01:19:50.880
我其实和温老师情况是比较像的

01:19:50.880 --> 01:19:52.880
基本上就是两种情况

01:19:54.880 --> 01:19:56.880
加班这个问题

01:19:56.880 --> 01:19:58.880
还是比较头疼

01:19:58.880 --> 01:20:00.880
但是就怎么说呢

01:20:00.880 --> 01:20:02.880
感觉也是不可抗力吧

01:20:02.880 --> 01:20:04.880
就是

01:20:04.880 --> 01:20:06.880
你在大环境都是在加班的情况下

01:20:06.880 --> 01:20:08.880
你可能也很难去

01:20:08.880 --> 01:20:10.880
独善其身这样子

01:20:10.880 --> 01:20:12.880
说起来是一个比较规章的话题

01:20:12.880 --> 01:20:14.880
对然后

01:20:14.880 --> 01:20:16.880
我觉得加班这个事情太惨了

01:20:16.880 --> 01:20:18.880
说到安库

01:20:18.880 --> 01:20:20.880
我不知道你们安库规定是什么

01:20:20.880 --> 01:20:22.880
我们之前的安库是

01:20:22.880 --> 01:20:24.880
提前24小时必须

01:20:24.880 --> 01:20:26.880
待命然后接到电话三分钟之内

01:20:26.880 --> 01:20:28.880
必须上线

01:20:28.880 --> 01:20:30.880
上线做backup

01:20:30.880 --> 01:20:32.880
然后如果是

01:20:32.880 --> 01:20:34.880
三分钟之内找不到人的话

01:20:34.880 --> 01:20:36.880
那么你必须要三分钟之内

01:20:36.880 --> 01:20:38.880
找到你的backup

01:20:38.880 --> 01:20:40.880
哇你们三分钟

01:20:40.880 --> 01:20:42.880
几分钟要求这个好严格

01:20:42.880 --> 01:20:44.880
我们是平常是会有抽查的

01:20:44.880 --> 01:20:46.880
就可能说周六晚上

01:20:46.880 --> 01:20:48.880
或周六

01:20:48.880 --> 01:20:50.880
然后平时给你打个电话

01:20:50.880 --> 01:20:52.880
然后确认你在不在线

01:20:52.880 --> 01:20:54.880
确认你能不能接电话

01:20:54.880 --> 01:20:56.880
老人压力很大

01:20:56.880 --> 01:20:58.880
就是时刻都要想着这个事情

01:20:58.880 --> 01:21:00.880
没办法因为我们

01:21:00.880 --> 01:21:02.880
像我们之前组的服务一挂了

01:21:02.880 --> 01:21:04.880
然后整体全部服务全挂了

01:21:04.880 --> 01:21:06.880
那你们这种应该会有止班机制吧

01:21:06.880 --> 01:21:08.880
应该不会说给全组人都打电话

01:21:08.880 --> 01:21:10.880
对啊这种不合理

01:21:10.880 --> 01:21:12.880
是会有轮班的

01:21:12.880 --> 01:21:14.880
但是实际上的话

01:21:14.880 --> 01:21:16.880
但是实际上就是说

01:21:16.880 --> 01:21:18.880
因为我们主

01:21:18.880 --> 01:21:20.880
其实像之前沃勒芒组我们主其实只有四个人

01:21:20.880 --> 01:21:22.880
你再这么轮的话

01:21:22.880 --> 01:21:24.880
其实基本上是

01:21:24.880 --> 01:21:26.880
大家都处于待命的模式

01:21:26.880 --> 01:21:28.880
特别是骚的事

01:21:28.880 --> 01:21:30.880
可能周六给打电话

01:21:30.880 --> 01:21:32.880
你行事好吗

01:21:32.880 --> 01:21:34.880
这边的老妈妈抽查一下

01:21:34.880 --> 01:21:36.880
没事了

01:21:36.880 --> 01:21:38.880
该uncall

01:21:38.880 --> 01:21:40.880
其实大厂都有uncall

01:21:40.880 --> 01:21:42.880
这个

01:21:42.880 --> 01:21:44.880
还是比较

01:21:44.880 --> 01:21:46.880
我也不知道应该怎么说uncall

01:21:46.880 --> 01:21:48.880
因为我其实没有uncall过

01:21:48.880 --> 01:21:50.880
因为我们组不是那种生产

01:21:50.880 --> 01:21:52.880
不是对外的组

01:21:52.880 --> 01:21:54.880
所以我们都是做内部工具

01:21:54.880 --> 01:21:56.880
因为uncall的组拿钱会非常多

01:21:56.880 --> 01:21:58.880
就是你uncall算是加班嘛

01:21:58.880 --> 01:22:00.880
那个时候工资会很多

01:22:00.880 --> 01:22:02.880
所以

01:22:02.880 --> 01:22:04.880
钱是什么

01:22:10.880 --> 01:22:12.880
突然问了一个很悲伤的问题

01:22:12.880 --> 01:22:14.880
钱是什么

01:22:14.880 --> 01:22:16.880
好吧我们不聊悲伤的话题了我们继续

01:22:18.880 --> 01:22:20.880
下面一个问题是

01:22:20.880 --> 01:22:22.880
请问捕蛇者说的编辑小姐姐结婚了吗

01:22:22.880 --> 01:22:24.880
没有编辑小姐姐

01:22:26.880 --> 01:22:28.880
你看我们谁像编辑小姐姐

01:22:30.880 --> 01:22:32.880
我们这里面的编辑

01:22:32.880 --> 01:22:34.880
编辑大叔吗好像也没有结婚吧

01:22:36.880 --> 01:22:38.880
我不知道他这个问题是什么情况

01:22:38.880 --> 01:22:40.880
反正就比较诡异

01:22:42.880 --> 01:22:44.880
我们还挺好奇的为什么会提这个问题

01:22:48.880 --> 01:22:50.880
下一个问题

01:22:50.880 --> 01:22:52.880
万刘志同学说

01:22:52.880 --> 01:22:54.880
这个问题好长啊

01:22:54.880 --> 01:22:56.880
简单概括一下吧

01:22:58.880 --> 01:23:00.880
他说python深入很难

01:23:00.880 --> 01:23:02.880
不像java运用太成熟

01:23:04.880 --> 01:23:06.880
网上各种资料可以找到一大堆

01:23:06.880 --> 01:23:08.880
然后python只能靠自己探索

01:23:12.880 --> 01:23:14.880
这是否说明python虽然优秀

01:23:14.880 --> 01:23:16.880
但是对新手不友好呢

01:23:16.880 --> 01:23:18.880
这个问题

01:23:20.880 --> 01:23:22.880
你们谁来说一下

01:23:24.880 --> 01:23:26.880
我其实挺同意的

01:23:30.880 --> 01:23:32.880
我其实挺同意

01:23:32.880 --> 01:23:34.880
如果说你要是做web的话

01:23:34.880 --> 01:23:36.880
我毫无疑问首先强推java

01:23:38.880 --> 01:23:40.880
因为你其实用python的话

01:23:40.880 --> 01:23:46.880
你其实意味着是要去造不少轮子

01:23:46.880 --> 01:23:50.880
虽然说python现在web东西也多

01:23:50.880 --> 01:23:52.880
但是web东西是够用的

01:23:54.880 --> 01:23:56.880
但是如果说你作为一个大型企业来讲的话

01:23:56.880 --> 01:23:58.880
做web这方面的话

01:23:58.880 --> 01:24:00.880
意味着你是要去造很多轮子

01:24:00.880 --> 01:24:02.880
就比如说还是刚才的例子

01:24:04.880 --> 01:24:06.880
比如说我们之前有操作Rookieper的经验

01:24:06.880 --> 01:24:08.880
就是要有一个需求

01:24:08.880 --> 01:24:10.880
然后我们突然发现

01:24:10.880 --> 01:24:14.880
python默认的操作Rookieper的库叫做Kazoo

01:24:14.880 --> 01:24:18.880
现在算是python里面最好用的库Kazoo

01:24:18.880 --> 01:24:20.880
但是它里面的功能太缺乏了

01:24:20.880 --> 01:24:22.880
很多系统性的比如说我要做一个treecake

01:24:22.880 --> 01:24:24.880
或者是其他类型的

01:24:24.880 --> 01:24:26.880
然后原子索或者是其他的

01:24:26.880 --> 01:24:28.880
分布式索这样的东西

01:24:28.880 --> 01:24:30.880
就是一整套的方案recipe

01:24:30.880 --> 01:24:32.880
它其实都是没有的

01:24:32.880 --> 01:24:34.880
相比于java对应的creator来讲

01:24:34.880 --> 01:24:36.880
它是很缺的

01:24:36.880 --> 01:24:38.880
可能说有些人比较高尚的

01:24:38.880 --> 01:24:40.880
会把这个轮子回馈给社区

01:24:40.880 --> 01:24:42.880
但是整体来讲的话相对比较频繁

01:24:42.880 --> 01:24:44.880
所以说我倒是觉得

01:24:44.880 --> 01:24:46.880
如果说是要做web的话

01:24:46.880 --> 01:24:50.880
是用java是个挺不错的切入点

01:24:50.880 --> 01:24:54.880
我不知道为什么python没有特别好的组keyframe

01:24:54.880 --> 01:24:58.880
但是我总感觉python的生态还是挺丰富的

01:24:58.880 --> 01:25:00.880
就说就这位同学提到

01:25:00.880 --> 01:25:02.880
他说python的中间键很薄弱

01:25:02.880 --> 01:25:04.880
对这个方面确实是

01:25:04.880 --> 01:25:06.880
但是现在比较新的潮流

01:25:06.880 --> 01:25:08.880
就是说也不算潮流吧

01:25:08.880 --> 01:25:10.880
就是更好的一种方式

01:25:10.880 --> 01:25:12.880
就是不依赖中间键

01:25:12.880 --> 01:25:16.880
而是直接把数据库做成分布式的

01:25:16.880 --> 01:25:18.880
所以中间键这块java确实有很多工具

01:25:18.880 --> 01:25:22.880
但是其实你也可以不依赖中间键

01:25:22.880 --> 01:25:24.880
并且它是比用中间键更好

01:25:24.880 --> 01:25:26.880
但是比如说有个需求

01:25:26.880 --> 01:25:28.880
我现在就是我要分库分表

01:25:28.880 --> 01:25:30.880
我现在要分库分表

01:25:30.880 --> 01:25:32.880
对啊你就用分布式数据库

01:25:32.880 --> 01:25:34.880
对啊你就用分布式数据库

01:25:34.880 --> 01:25:38.880
现在但是开源的分布式数据库也是有的

01:25:38.880 --> 01:25:43.880
其实你中间键只是为了弥补当年mysql

01:25:43.880 --> 01:25:48.880
只是单机比较强的一个temporary的solution吧

01:25:48.880 --> 01:25:52.880
我比较赞同Live2m这个想法

01:25:52.880 --> 01:25:56.880
就是因为之前很多的这种底层撑不住

01:25:56.880 --> 01:25:58.880
所以说我们会加入中间键一层

01:25:58.880 --> 01:26:00.880
但是其实引入的就是

01:26:00.880 --> 01:26:02.880
其实处罚度特别高

01:26:02.880 --> 01:26:06.880
一个是代码要真实的被分发到各个应用上

01:26:06.880 --> 01:26:09.880
就是它可能是以库的形式引入

01:26:09.880 --> 01:26:12.880
另外一个就是随着现在微服务的潮流

01:26:12.880 --> 01:26:15.880
就意味着你每套中间键可能要做多语言支持

01:26:15.880 --> 01:26:19.880
多语言并行的这种推进演进

01:26:19.880 --> 01:26:23.880
所以说现在的趋势就是会做得很饱满

01:26:23.880 --> 01:26:25.880
就是让应用只做应用的事情

01:26:25.880 --> 01:26:27.880
然后我们重新把这些职责收拢回来

01:26:27.880 --> 01:26:29.880
比如说数据库做分布式

01:26:29.880 --> 01:26:32.880
比如说包括ServiceMatch也是这种思想

01:26:32.880 --> 01:26:34.880
就是我之前搞服务框架

01:26:34.880 --> 01:26:35.880
我也收拢回来

01:26:35.880 --> 01:26:38.880
不然的话我跨语言也特别难搞

01:26:38.880 --> 01:26:41.880
对就是说不该用户

01:26:41.880 --> 01:26:43.880
就不该你的业务逻辑处理的事情

01:26:43.880 --> 01:26:46.880
就还是不应该放在业务逻辑去处理

01:26:46.880 --> 01:26:47.880
我觉得

01:26:47.880 --> 01:26:53.880
对现在是有一些数据库是直接跑在你的服务器上

01:26:53.880 --> 01:26:55.880
一个相当于proxy

01:26:55.880 --> 01:26:57.880
你只需要用MySQL原生的客户端

01:26:57.880 --> 01:27:00.880
去跟这个proxy来交流就好了

01:27:00.880 --> 01:27:05.880
然后proxy后面给你处理了各种路由分布式分表的东西

01:27:07.880 --> 01:27:09.880
是就这个东西其实有个经典的话

01:27:09.880 --> 01:27:11.880
也叫中间件下沉嘛

01:27:11.880 --> 01:27:14.880
就是说是就就是说是叫做下沉到具体的东西

01:27:14.880 --> 01:27:17.880
然后让业务方无感之无情入嘛

01:27:17.880 --> 01:27:18.880
但是其实这个对

01:27:18.880 --> 01:27:19.880
其实这个东西

01:27:19.880 --> 01:27:23.880
不管你是说我去做分布式的数据库也好

01:27:23.880 --> 01:27:24.880
我还是去做

01:27:24.880 --> 01:27:27.880
就是说是就是刚才我们先很火的

01:27:27.880 --> 01:27:29.880
就是我们是也提到mesh化的概念也好

01:27:29.880 --> 01:27:34.880
再比如说新淘说的这种我我基础设施再进一步下沉

01:27:34.880 --> 01:27:36.880
然后让用户去无感知

01:27:36.880 --> 01:27:39.880
这个东西是对于你整个厂的

01:27:39.880 --> 01:27:41.880
你对对于你整个厂的技术能力

01:27:41.880 --> 01:27:43.880
其实要求也是很高的

01:27:43.880 --> 01:27:44.880
但是我现在对这倒是

01:27:44.880 --> 01:27:47.880
但是比如说我现在有个东西

01:27:47.880 --> 01:27:49.880
我数据量其实说大也不大

01:27:49.880 --> 01:27:50.880
说小也不小

01:27:50.880 --> 01:27:51.880
比如说我现在几条数据

01:27:51.880 --> 01:27:52.880
对吧几亿条数据

01:27:52.880 --> 01:27:54.880
那么这个东西我为了保证性能

01:27:54.880 --> 01:27:56.880
我可能要做个分库分表操作

01:27:56.880 --> 01:27:57.880
但是我现在整体的业务

01:27:57.880 --> 01:28:00.880
或是我团队的规模并没有那么大的时候

01:28:00.880 --> 01:28:03.880
你要再让我去系统的运营化一套mesh化

01:28:03.880 --> 01:28:06.880
或说我再去做一些底层协议的这些轮子

01:28:06.880 --> 01:28:08.880
我觉得这个事其实是不现实的

01:28:08.880 --> 01:28:09.880
而在家外里面

01:28:09.880 --> 01:28:12.880
就是说是对于中间就是数据库中间建这套东西

01:28:12.880 --> 01:28:15.880
我觉得它是生态就是说是开箱机用的

01:28:15.880 --> 01:28:19.880
我觉得这一套可能说是对于中小厂来说是比较重要的一点

01:28:19.880 --> 01:28:22.880
直接上TIDV吧

01:28:22.880 --> 01:28:25.880
直接上TIDV就行了

01:28:25.880 --> 01:28:30.880
或者直接上

01:28:30.880 --> 01:28:33.880
我说觉得这样可以直接上AWS

01:28:33.880 --> 01:28:37.880
你多交一些钱比一个人应该要便宜一些吧

01:28:37.880 --> 01:28:39.880
这也是一种方式

01:28:39.880 --> 01:28:40.880
对

01:28:40.880 --> 01:28:41.880
也不一定

01:28:41.880 --> 01:28:42.880
也不一定

01:28:42.880 --> 01:28:44.880
有可能比人工费要贵

01:28:44.880 --> 01:28:45.880
但是是这样

01:28:45.880 --> 01:28:47.880
不管你是AWS还是ZOO

01:28:47.880 --> 01:28:49.880
还是阿里云或者是其他的

01:28:49.880 --> 01:28:52.880
就是说你基础设施这一块你是可以交给东西的

01:28:52.880 --> 01:28:54.880
但是你有一些就是说是能

01:28:54.880 --> 01:28:55.880
你就比如说我表怎么分

01:28:55.880 --> 01:28:56.880
我库怎么分

01:28:56.880 --> 01:28:57.880
然后怎么样

01:28:57.880 --> 01:29:00.880
我数据怎么样才算是最终一致了

01:29:00.880 --> 01:29:02.880
这些东西是要你贴近业务

01:29:02.880 --> 01:29:04.880
是业务具体来做的

01:29:04.880 --> 01:29:05.880
而在Pattern做这方面

01:29:05.880 --> 01:29:08.880
我觉得可能说是处于相对薄弱一个状态

01:29:08.880 --> 01:29:12.880
我觉得只要刚刚提出来的

01:29:12.880 --> 01:29:14.880
比如说中小厂问题

01:29:14.880 --> 01:29:17.880
有点像具体例子具体判断

01:29:17.880 --> 01:29:21.880
就是比如说你可以选择上网存对吧

01:29:21.880 --> 01:29:22.880
对

01:29:21.880 --> 01:29:23.880
你也可以选择分不分表

01:29:23.880 --> 01:29:25.880
你也可以就是不同的公司

01:29:25.880 --> 01:29:26.880
根据自己不同的人

01:29:26.880 --> 01:29:28.880
以及这些人的技能是什么样的

01:29:28.880 --> 01:29:30.880
可能会选不同的方案

01:29:30.880 --> 01:29:31.880
对是是是

01:29:31.880 --> 01:29:32.880
对我只是举个例子

01:29:32.880 --> 01:29:34.880
就可能说这个东西来讲的话

01:29:34.880 --> 01:29:37.880
可能说就是说对大厂当然玩法很多了

01:29:37.880 --> 01:29:38.880
你随便怎么写

01:29:38.880 --> 01:29:40.880
对如果如果是基于这种场景的话

01:29:40.880 --> 01:29:43.880
其实确实拍摄很少有这种所谓的开源的中间件方案

01:29:43.880 --> 01:29:46.880
因为我会发现好像拍摄大家都是

01:29:46.880 --> 01:29:49.880
好像确实很多项目就直接假设

01:29:49.880 --> 01:29:53.880
我后后面的这个存储是个云上存储

01:29:53.880 --> 01:29:54.880
或者是是一个分布式的

01:29:54.880 --> 01:29:55.880
或者怎么样

01:29:55.880 --> 01:29:57.880
就是他会认为那个是

01:29:57.880 --> 01:30:00.880
对是数据库存储内存

01:30:00.880 --> 01:30:04.880
或者说是那个系统需要他自己去解决的问题

01:30:04.880 --> 01:30:09.880
对而且显不出中间件吧

01:30:09.880 --> 01:30:10.880
对显不出中间件吧

01:30:10.880 --> 01:30:12.880
就比如说一些基础设施

01:30:12.880 --> 01:30:14.880
就比如说GRPC

01:30:14.880 --> 01:30:18.880
RPC框架这种东西就在早期的就是GRPC

01:30:18.880 --> 01:30:21.880
就我记得是在19年之前还是18年的时候

01:30:21.880 --> 01:30:22.880
当时GRPC的话

01:30:22.880 --> 01:30:25.880
他的Python的Server端和客户端

01:30:25.880 --> 01:30:27.880
他是对GeVent是不兼容的

01:30:27.880 --> 01:30:32.880
他是靠就是说是Python原生的线程逻辑来达到一个必发

01:30:32.880 --> 01:30:36.880
但是但是我们现在的在Python的web服务里面

01:30:36.880 --> 01:30:37.880
对吧

01:30:37.880 --> 01:30:40.880
他很多时候GeVent实际上是一个写成的事实标准

01:30:40.880 --> 01:30:42.880
很多是默认写了写成

01:30:42.880 --> 01:30:44.880
但是如果说直接打进去的话

01:30:44.880 --> 01:30:46.880
会引起一些就是说是

01:30:46.880 --> 01:30:49.880
就是说是未定义的错

01:30:49.880 --> 01:30:53.880
就是说是预期之外的异常或错误之类的

01:30:53.880 --> 01:30:55.880
像这样一些排查处理和其他的方案

01:30:55.880 --> 01:30:57.880
我觉得就是比较麻烦

01:30:57.880 --> 01:30:59.880
而且他的功能也不完善

01:30:59.880 --> 01:31:02.880
所以说我觉得就这一块就是很头痛的一件事

01:31:02.880 --> 01:31:04.880
这是个例吧

01:31:04.880 --> 01:31:06.880
GRPC现在支持GeVent了吗

01:31:06.880 --> 01:31:08.880
好像有支持

01:31:08.880 --> 01:31:11.880
因为我们最早做服务选行的时候

01:31:11.880 --> 01:31:14.880
确实也是因为GRPC不支持GeVent

01:31:14.880 --> 01:31:16.880
然后就被迫使用了Thrift

01:31:16.880 --> 01:31:19.880
因为确实是其他的feature特别好

01:31:19.880 --> 01:31:20.880
但这只是一个个例

01:31:20.880 --> 01:31:21.880
但是看着是个例

01:31:21.880 --> 01:31:23.880
但是其实这样的例子要举的话

01:31:23.880 --> 01:31:24.880
其实也是蛮多的

01:31:24.880 --> 01:31:26.880
比如说至少在web这一块的话

01:31:26.880 --> 01:31:29.880
我觉得说从家做一个切入点倒是挺不错的

01:31:29.880 --> 01:31:32.880
我能补充一下我的观点吗

01:31:32.880 --> 01:31:35.880
我觉得其实在web这块Python还是挺好的

01:31:35.880 --> 01:31:40.880
就刚刚举的例子其实严格来说都不太属于web这块

01:31:40.880 --> 01:31:43.880
更多的是属于服务治理

01:31:43.880 --> 01:31:48.880
对 然后还有就是比如说我和ETCD的连接这种

01:31:48.880 --> 01:31:52.880
就是如果单纯是web我还挺推荐Python的

01:31:52.880 --> 01:31:54.880
然后但是我其实对于这个问题

01:31:54.880 --> 01:31:56.880
我有一个问题

01:31:56.880 --> 01:31:59.880
就是他说他想先通过Java深入整个web体系

01:31:59.880 --> 01:32:03.880
我不太清楚这个web体系是这啥

01:32:03.880 --> 01:32:07.880
对 这可能要再想一想

01:32:07.880 --> 01:32:12.880
我个人觉得你用Python也是能了解整个web体系的

01:32:12.880 --> 01:32:14.880
不同语言确实

01:32:14.880 --> 01:32:17.880
就是生态上也有一些就不同的地方

01:32:17.880 --> 01:32:18.880
不同的侧重点

01:32:18.880 --> 01:32:19.880
也是跟历史有关

01:32:19.880 --> 01:32:24.880
你像就Java它可能就是企业应用起来的

01:32:24.880 --> 01:32:27.880
然后它就会有比较多中间件这种应用

01:32:27.880 --> 01:32:28.880
然后Python的话

01:32:28.880 --> 01:32:32.880
它一开始毕竟也是一个就是个人项目这种

01:32:32.880 --> 01:32:36.880
所以可能就是这种小工具什么的会比较多一点

01:32:36.880 --> 01:32:38.880
但是像Python的话

01:32:38.880 --> 01:32:41.880
它的强项像就是基于学习这种生态

01:32:41.880 --> 01:32:43.880
Java也是没有的

01:32:43.880 --> 01:32:47.880
就是说就是还是你根据你的需求来确定吧

01:32:47.880 --> 01:32:49.880
确定要选择什么语言吧

01:32:49.880 --> 01:32:50.880
但我真的觉得在web这块

01:32:50.880 --> 01:32:54.880
其实Python的生态并不能说比Java差

01:32:54.880 --> 01:32:56.880
我是这样觉得

01:32:56.880 --> 01:32:59.880
对 如果说只是从狭义的web来讲的话

01:32:59.880 --> 01:33:01.880
这一点我是非常认同的

01:33:01.880 --> 01:33:04.880
但是如果说你要说是做一个web体系

01:33:04.880 --> 01:33:06.880
就是说是一个广义要扩展一下的话

01:33:06.880 --> 01:33:09.880
我觉得这一块还是有待商榷的

01:33:09.880 --> 01:33:11.880
好

01:33:13.880 --> 01:33:18.880
然后我还想再回答一下这个问题

01:33:18.880 --> 01:33:21.880
他说JVM GMM各种原理

01:33:21.880 --> 01:33:22.880
网上一找一大堆

01:33:22.880 --> 01:33:25.880
Python只能靠自己探索

01:33:25.880 --> 01:33:28.880
我不太清楚它这个具体的对比是什么

01:33:28.880 --> 01:33:32.880
一个就是确实Python在这底层相关的中文资料会少一些

01:33:32.880 --> 01:33:36.880
如果想看的话可能需要去看一些英语的

01:33:36.880 --> 01:33:38.880
另外一个就是Python有的地方

01:33:38.880 --> 01:33:39.880
确实实现的很简单

01:33:39.880 --> 01:33:41.880
没有什么能讲的资料

01:33:41.880 --> 01:33:44.880
就比如说GC这种东西

01:33:44.880 --> 01:33:46.880
它就是本身很简单也没什么能讲的

01:33:46.880 --> 01:33:48.880
就是在Python这一点上

01:33:48.880 --> 01:33:55.880
所以我觉得这个不像Java运用太成熟

01:33:55.880 --> 01:33:58.880
JVM GMM各种原理之类的

01:33:58.880 --> 01:34:00.880
我觉得自己做个对比吧

01:34:00.880 --> 01:34:03.880
你有好奇心去了解它

01:34:03.880 --> 01:34:04.880
我觉得就挺好

01:34:04.880 --> 01:34:06.880
其实我要更正一点

01:34:06.880 --> 01:34:08.880
其实Java现在迭代速度很快的

01:34:08.880 --> 01:34:11.880
如果说你要去看JVM或者这些东西

01:34:11.880 --> 01:34:12.880
底层原理之类的话

01:34:12.880 --> 01:34:14.880
很多资料是过时的

01:34:14.880 --> 01:34:17.880
你还是只能自己去参照官方的文档

01:34:17.880 --> 01:34:19.880
然后自己去实现的

01:34:19.880 --> 01:34:20.880
这个东西是没办法的

01:34:20.880 --> 01:34:22.880
它其实很多东西

01:34:22.880 --> 01:34:24.880
还是要你贴近自己的东西

01:34:24.880 --> 01:34:27.880
自己去琢磨网上资料

01:34:27.880 --> 01:34:29.880
CSDN上的资料

01:34:29.880 --> 01:34:32.880
当个小说看一下吧

01:34:32.880 --> 01:34:35.880
又黑CSDN

01:34:35.880 --> 01:34:36.880
OK

01:34:36.880 --> 01:34:40.880
那我们就剩下问题

01:34:40.880 --> 01:34:43.880
你们就要不挑着回答一下

01:34:43.880 --> 01:34:44.880
比如说你想回答哪个问题

01:34:44.880 --> 01:34:45.880
然后就挑一下吧

01:34:45.880 --> 01:34:48.880
因为我们考虑到时间也录了一个半小时了

01:34:48.880 --> 01:34:49.880
然后对

01:34:49.880 --> 01:34:52.880
对你们就大家就挑着回答一下

01:34:52.880 --> 01:34:55.880
学Python有助于找到女朋友吗

01:34:55.880 --> 01:34:59.880
有下一题

01:34:59.880 --> 01:35:02.880
怎么聊不说只说的编辑小姐姐

01:35:02.880 --> 01:35:04.880
为什么又是这个哥们问了一个问题

01:35:04.880 --> 01:35:06.880
没有编辑小姐姐

01:35:06.880 --> 01:35:09.880
这和刚才那个问小姐姐的是同一个人

01:35:09.880 --> 01:35:10.880
对同一个人

01:35:10.880 --> 01:35:12.880
我真的有点服

01:35:12.880 --> 01:35:16.880
我们有一个帮我们编辑的朋友

01:35:16.880 --> 01:35:19.880
但是我们之后也可以考虑让他出镜一下

01:35:19.880 --> 01:35:21.880
但是他好像不是小姐姐

01:35:21.880 --> 01:35:24.880
他是个汉子

01:35:24.880 --> 01:35:25.880
OK

01:35:25.880 --> 01:35:27.880
然后下一个问题

01:35:27.880 --> 01:35:28.880
学历低的情况下

01:35:28.880 --> 01:35:31.880
专科有机会去技术分析相对好的公司吗

01:35:31.880 --> 01:35:34.880
这个刚才已经回答过了

01:35:34.880 --> 01:35:35.880
技术分析好的话

01:35:35.880 --> 01:35:37.880
不会在意学历的

01:35:37.880 --> 01:35:38.880
如果是在意学历的话

01:35:38.880 --> 01:35:40.880
技术分析可能不怎么样

01:35:40.880 --> 01:35:42.880
比如老厂

01:35:42.880 --> 01:35:44.880
其实这个东西就一句话就说是

01:35:44.880 --> 01:35:46.880
其实老厂也还好

01:35:46.880 --> 01:35:47.880
然后其实一句话就说

01:35:47.880 --> 01:35:50.880
你自己能够在其他方面证明你的能力

01:35:50.880 --> 01:35:52.880
如果说你家方面证明不了你的能力

01:35:52.880 --> 01:35:54.880
那么你的学历可能会是一个最好的证明

01:35:54.880 --> 01:35:56.880
但这个时候就没办法了

01:35:56.880 --> 01:35:58.880
好然后下一题能解释一下

01:35:58.880 --> 01:36:00.880
归斗在搞的PEG Passer是什么吗

01:36:00.880 --> 01:36:01.880
有什么作用

01:36:01.880 --> 01:36:02.880
这个我确实了解不多

01:36:02.880 --> 01:36:05.880
但是我听就是大概上他的意思就是说

01:36:05.880 --> 01:36:08.880
现在的这个passer

01:36:08.880 --> 01:36:10.880
如果你想给Pathen加一个新的语法

01:36:10.880 --> 01:36:11.880
它比较麻烦

01:36:11.880 --> 01:36:14.880
然后如果用换PEG Passer的话会简单一点

01:36:14.880 --> 01:36:15.880
但是具体的原理

01:36:15.880 --> 01:36:18.880
我确实不是特别了解

01:36:18.880 --> 01:36:20.880
OK 大家都如果都没有什么补充

01:36:20.880 --> 01:36:21.880
我们继续往下

01:36:21.880 --> 01:36:24.880
然后Python编写Wim插件的相关经验

01:36:24.880 --> 01:36:26.880
这个是我们要放出来的一期

01:36:26.880 --> 01:36:28.880
然后我们有专门的一期讲

01:36:28.880 --> 01:36:30.880
就是讲Wim插件

01:36:30.880 --> 01:36:32.880
然后里面也提到用Python写Wim插件

01:36:32.880 --> 01:36:33.880
要怎么写

01:36:33.880 --> 01:36:35.880
可以期待一下

01:36:35.880 --> 01:36:38.880
然后如何挽救发机器

01:36:41.880 --> 01:36:43.880
这个好像有办法

01:36:43.880 --> 01:36:45.880
我建议你可以去知乎搜一下

01:36:45.880 --> 01:36:46.880
不是搜那种广告

01:36:46.880 --> 01:36:52.880
就是你可以通过控制你的激素分泌来延缓

01:36:52.880 --> 01:36:55.880
或者是稍微改善这个情况

01:36:55.880 --> 01:36:56.880
应该是这个样子

01:36:56.880 --> 01:36:57.880
但是我没有去研究过

01:36:57.880 --> 01:37:00.880
因为我家应该我没有这个家族遗传史

01:37:00.880 --> 01:37:03.880
对还没有担心过

01:37:03.880 --> 01:37:06.880
但是王老师我看你的发迹线也比较高

01:37:06.880 --> 01:37:07.880
还好吧

01:37:07.880 --> 01:37:08.880
我觉得还好

01:37:11.880 --> 01:37:12.880
这个没有办法

01:37:12.880 --> 01:37:14.880
下一题

01:37:14.880 --> 01:37:16.880
不是不是有一个那个图吗

01:37:16.880 --> 01:37:18.880
就是各个语言的创始人的那个图

01:37:18.880 --> 01:37:20.880
然后就是各个语言创始人大佬

01:37:20.880 --> 01:37:22.880
基本头发都非常稀疏

01:37:22.880 --> 01:37:23.880
然后转到Griddle

01:37:23.880 --> 01:37:26.880
就是一头茂密的秀发

01:37:26.880 --> 01:37:30.880
所以就是大家可以考虑写一下Python

01:37:30.880 --> 01:37:33.880
然后就可以挽救你的发机器

01:37:35.880 --> 01:37:36.880
好

01:37:36.880 --> 01:37:37.880
然后下一题

01:37:37.880 --> 01:37:41.880
能否介绍一下海象算子的使用场景

01:37:41.880 --> 01:37:45.880
我怎么记得我们有聊过这个话题

01:37:45.880 --> 01:37:48.880
这个在那个PPP572里面

01:37:48.880 --> 01:37:51.880
对PPP572里面就写了很多

01:37:51.880 --> 01:37:53.880
比如说WOW的时候

01:37:53.880 --> 01:37:55.880
你可以直接拿到那个反馈直接利用

01:37:55.880 --> 01:37:58.880
这个好像常用的场景

01:37:58.880 --> 01:38:00.880
那个PPP572里面都写了

01:38:00.880 --> 01:38:05.880
对建议你可以去读一下这个PPP572的Pipe

01:38:05.880 --> 01:38:07.880
你直接搜Pipe572

01:38:07.880 --> 01:38:08.880
然后就可以在网上找到

01:38:08.880 --> 01:38:10.880
它里面有很多这种实际的例子

01:38:10.880 --> 01:38:12.880
但基本上来说

01:38:12.880 --> 01:38:14.880
你就是没有什么场景

01:38:14.880 --> 01:38:16.880
是你必须用海象操作服的

01:38:16.880 --> 01:38:17.880
你能用海象操作服的地方

01:38:17.880 --> 01:38:19.880
原来也都可以写出来

01:38:19.880 --> 01:38:22.880
它只是帮你去节省了一些几行代码

01:38:22.880 --> 01:38:23.880
这样子

01:38:23.880 --> 01:38:24.880
是的

01:38:24.880 --> 01:38:25.880
然后这点同意

01:38:25.880 --> 01:38:28.880
就它好像就其实这个东西就是一个糖

01:38:28.880 --> 01:38:30.880
然后你不一定要去强制使用

01:38:30.880 --> 01:38:33.880
然后群主单身吗

01:38:33.880 --> 01:38:34.880
我不知道群主是谁

01:38:34.880 --> 01:38:37.880
我们有我们都是群主

01:38:37.880 --> 01:38:40.880
然后这个问题的话

01:38:40.880 --> 01:38:42.880
之前我们跳过

01:38:42.880 --> 01:38:43.880
这个问题我们就对

01:38:43.880 --> 01:38:44.880
你要是想了解的话

01:38:44.880 --> 01:38:47.880
你可以私下问我们中的任何一个人

01:38:47.880 --> 01:38:49.880
对我不知道你这个在问的是谁

01:38:49.880 --> 01:38:52.880
然后对对对

01:38:52.880 --> 01:38:54.880
那当然大家like9m10号

01:38:54.880 --> 01:38:55.880
无疑是单身的

01:38:55.880 --> 01:38:57.880
有漂亮妹子可以介绍一下

01:38:57.880 --> 01:38:59.880
然后下一个问题

01:38:59.880 --> 01:39:03.880
什么时候某个什么时候最最有效率

01:39:03.880 --> 01:39:04.880
最有产出原因是什么

01:39:04.880 --> 01:39:06.880
以及反向问题

01:39:06.880 --> 01:39:10.880
不是不是不是特别理解他在问什么

01:39:10.880 --> 01:39:12.880
这个我可以回答一下

01:39:12.880 --> 01:39:14.880
那你说

01:39:14.880 --> 01:39:17.880
我是当我休息

01:39:17.880 --> 01:39:18.880
睡眠质量好的时候

01:39:18.880 --> 01:39:21.880
并且身体健康的时候是最有效率的

01:39:21.880 --> 01:39:23.880
反过来就是我如果我没睡好

01:39:23.880 --> 01:39:25.880
或者说我脖子难受之类的时候

01:39:25.880 --> 01:39:26.880
我的效率就会下降

01:39:26.880 --> 01:39:27.880
对

01:39:27.880 --> 01:39:29.880
然后我一般是我是一般是那个喜欢

01:39:29.880 --> 01:39:32.880
晚上晚上夜深人静的时候是最有效率

01:39:32.880 --> 01:39:33.880
然后最有灵感的

01:39:33.880 --> 01:39:36.880
然后然后如果说是以长时间来计算的话

01:39:36.880 --> 01:39:37.880
一般在年底的时候

01:39:37.880 --> 01:39:39.880
因为上半年滑水了

01:39:39.880 --> 01:39:40.880
滑水了之后到年底之后

01:39:40.880 --> 01:39:42.880
突然觉得这一年要水过去了

01:39:42.880 --> 01:39:43.880
然后对对对

01:39:43.880 --> 01:39:44.880
然后对对对

01:39:44.880 --> 01:39:45.880
那个就是说驱动

01:39:45.880 --> 01:39:48.880
然后就赶紧效率很渣

01:39:48.880 --> 01:39:51.880
我我是有兴趣的时候

01:39:51.880 --> 01:39:53.880
就是有某个东西特别想做出来

01:39:53.880 --> 01:39:55.880
而且觉得能做出来的时候

01:39:55.880 --> 01:39:58.880
特别写得特别快

01:39:58.880 --> 01:40:00.880
对我基本也是这样子

01:40:00.880 --> 01:40:03.880
嗯好

01:40:03.880 --> 01:40:07.880
然后为什么学习python

01:40:07.880 --> 01:40:08.880
为了吃饭

01:40:08.880 --> 01:40:11.880
我当时学python就是为了找多工作

01:40:11.880 --> 01:40:13.880
我们以前好像也聊过

01:40:13.880 --> 01:40:18.880
我当时是为了写一个就是下载漫画的工具吧

01:40:18.880 --> 01:40:20.880
也是对

01:40:20.880 --> 01:40:22.880
对你个死

01:40:22.880 --> 01:40:24.880
你们实在真恶心

01:40:24.880 --> 01:40:25.880
点这批鸡

01:40:25.880 --> 01:40:27.880
对这个这个其实不重要

01:40:27.880 --> 01:40:29.880
你学就学了

01:40:29.880 --> 01:40:30.880
然后对吧

01:40:30.880 --> 01:40:33.880
也反正你学了肯定不会后悔

01:40:33.880 --> 01:40:35.880
嗯

01:40:35.880 --> 01:40:39.880
然后如何评价pyqt5

01:40:39.880 --> 01:40:42.880
有人用过吗

01:40:42.880 --> 01:40:43.880
没用过

01:40:43.880 --> 01:40:44.880
没用过

01:40:44.880 --> 01:40:45.880
无法评价

01:40:45.880 --> 01:40:46.880
没用过

01:40:46.880 --> 01:40:49.880
我不知道怎么评价

01:40:49.880 --> 01:40:51.880
好吧

01:40:51.880 --> 01:40:54.880
对也好

01:40:54.880 --> 01:40:58.880
下一题如何持续有效的学习一门新语言

01:40:58.880 --> 01:41:01.880
技术知识

01:41:01.880 --> 01:41:02.880
用

01:41:02.880 --> 01:41:03.880
我觉得其实对

01:41:03.880 --> 01:41:04.880
兴趣驱动加一

01:41:04.880 --> 01:41:06.880
其实就是你需要找个场景去落地

01:41:06.880 --> 01:41:08.880
我觉得就是兴趣驱动

01:41:08.880 --> 01:41:10.880
对要用不用不行

01:41:10.880 --> 01:41:14.880
我们之前是不是有一期讲过如何新人如何入门啊

01:41:14.880 --> 01:41:15.880
巴拉巴拉的类似的

01:41:15.880 --> 01:41:17.880
我觉得可以借鉴一下经验

01:41:17.880 --> 01:41:19.880
ep01

01:41:19.880 --> 01:41:21.880
对不说只说第一期

01:41:21.880 --> 01:41:23.880
然后如何应对面试

01:41:23.880 --> 01:41:26.880
怎样准备面试会问到常见的问题

01:41:26.880 --> 01:41:28.880
如何选择offer

01:41:28.880 --> 01:41:29.880
心思怎么谈

01:41:29.880 --> 01:41:32.880
我从最后就可以开个专题了

01:41:32.880 --> 01:41:34.880
我靠这个

01:41:34.880 --> 01:41:39.880
这个我们绝对不是一期播可能聊完的

01:41:39.880 --> 01:41:43.880
我这个可以我可以找个hr来一起聊一聊

01:41:43.880 --> 01:41:46.880
而且这个真的是每个每个公司也不一样

01:41:46.880 --> 01:41:49.880
就没有一个统一的说法

01:41:49.880 --> 01:41:52.880
但但我觉得general来讲的话

01:41:52.880 --> 01:41:55.880
你就是去多收集信息

01:41:55.880 --> 01:41:57.880
然后好好准备这样子

01:41:57.880 --> 01:41:58.880
对

01:41:58.880 --> 01:41:58.880
然后的话

01:41:58.880 --> 01:42:01.880
其实你的那个薪资的话就一般是你

01:42:01.880 --> 01:42:05.880
如果说你自己是现在是在主流业界主流水位的话

01:42:05.880 --> 01:42:09.880
那么然后你自己按照那个20%到50%的这样一个level

01:42:09.880 --> 01:42:10.880
你看公司吧

01:42:10.880 --> 01:42:11.880
如果是创业公司

01:42:11.880 --> 01:42:12.880
你可以多要点大厂

01:42:12.880 --> 01:42:13.880
你可以少要点

01:42:13.880 --> 01:42:15.880
然后20%到50%的一个up

01:42:15.880 --> 01:42:17.880
然后来去要

01:42:19.880 --> 01:42:21.880
谈薪资确实也是一门技术

01:42:21.880 --> 01:42:22.880
我觉得这个对

01:42:22.880 --> 01:42:24.880
其实其实也可以专门来聊一下

01:42:24.880 --> 01:42:28.880
一般一般hr会问你现在的工资有多少

01:42:28.880 --> 01:42:29.880
对吧

01:42:29.880 --> 01:42:33.880
你可以问hr那个一面的面试官工资是多少

01:42:33.880 --> 01:42:34.880
我觉得我跟他差不多

01:42:34.880 --> 01:42:35.880
你给我开他的工资就行了

01:42:35.880 --> 01:42:36.880
我操不你这个不行

01:42:36.880 --> 01:42:37.880
你这个你这个不行

01:42:37.880 --> 01:42:40.880
因为因为因为因为实际上面你的面

01:42:40.880 --> 01:42:42.880
你的会比较高

01:42:42.880 --> 01:42:44.880
然后你要是跟他工资一样的话

01:42:44.880 --> 01:42:45.880
我操

01:42:47.880 --> 01:42:49.880
那你觉得你比他技术差的话

01:42:49.880 --> 01:42:52.880
你就跟他说我要一面面试官的80%的工资

01:42:52.880 --> 01:42:54.880
这个问题我建议别这么问

01:42:54.880 --> 01:42:55.880
因为因为说实话

01:42:55.880 --> 01:42:58.880
这个东西的话可能会涉及到一些公司明点点

01:42:58.880 --> 01:43:00.880
比如说我和新涛的话薪资是

01:43:00.880 --> 01:43:03.880
然后员工之间就明面上规定是员工之间

01:43:03.880 --> 01:43:05.880
互相透露薪资是一类违规

01:43:05.880 --> 01:43:07.880
然后的话一类对

01:43:07.880 --> 01:43:10.880
假如说假如说hr自己知道这个事情的话

01:43:10.880 --> 01:43:13.880
他就不应该再去问你的薪资是多少

01:43:13.880 --> 01:43:14.880
他如果这么问你的话

01:43:14.880 --> 01:43:16.880
你又可以这么问他

01:43:16.880 --> 01:43:18.880
对对对对对对对对可以可以

01:43:18.880 --> 01:43:20.880
对这个这个其实是可以

01:43:20.880 --> 01:43:21.880
你可以说保密

01:43:21.880 --> 01:43:22.880
你可以说个大概的数额

01:43:22.880 --> 01:43:24.880
然后但是详细是没必要输了

01:43:26.880 --> 01:43:27.880
或者说你去面一下公司

01:43:27.880 --> 01:43:29.880
对方的hr问你现在的薪资

01:43:31.880 --> 01:43:33.880
其实谈薪资

01:43:33.880 --> 01:43:34.880
这个我之前也和我老板聊过

01:43:34.880 --> 01:43:36.880
然后他还给我讲了一下

01:43:36.880 --> 01:43:38.880
他当时进Google的时候是怎么谈薪资的

01:43:38.880 --> 01:43:42.880
反正就是大体上来说就是你要坚决吧

01:43:43.880 --> 01:43:46.880
就他当时有一个就是hr跟他发过一封邮件

01:43:46.880 --> 01:43:49.880
是说这就是我们能给你的薪资

01:43:49.880 --> 01:43:52.880
然后你已经没有谈判的余地了

01:43:52.880 --> 01:43:55.880
然后他当时就回的很坚决说

01:43:55.880 --> 01:43:57.880
OK如果你不和我谈

01:43:57.880 --> 01:43:58.880
那我也不和你谈了

01:43:58.880 --> 01:44:00.880
就是你这个给这个薪资我是不会来的

01:44:00.880 --> 01:44:03.880
后来hr就又把他薪资提了一点

01:44:04.880 --> 01:44:07.880
就是就其实这个东西还蛮tricky的

01:44:07.880 --> 01:44:11.880
我感觉就我不知道

01:44:11.880 --> 01:44:13.880
我能不能做到像他那么坚决

01:44:13.880 --> 01:44:15.880
对这个是case

01:44:15.880 --> 01:44:17.880
这个case by case的去谈吧

01:44:17.880 --> 01:44:21.880
因为比如说你这些公司是很需要你的

01:44:21.880 --> 01:44:23.880
然后是很需要你的面试结果很好

01:44:23.880 --> 01:44:27.880
那么这个时候你谈其实涨息会很大

01:44:27.880 --> 01:44:29.880
然后就是说是

01:44:29.880 --> 01:44:32.880
然后就但是如果说你的面试结果一般

01:44:32.880 --> 01:44:34.880
然后或者说是现在就只是说一般性的

01:44:34.880 --> 01:44:36.880
照人欲望并不强烈的话

01:44:36.880 --> 01:44:38.880
可能说你要太高的薪资的话

01:44:38.880 --> 01:44:40.880
可能就会是一个比较失败的一个东西

01:44:40.880 --> 01:44:43.880
所以我觉得就是case by case的去谈吧

01:44:43.880 --> 01:44:46.880
嗯 那我们下一题吧

01:44:46.880 --> 01:44:48.880
然后对于纯外行零基础

01:44:48.880 --> 01:44:51.880
各位主播推荐的Python学习路径是什么

01:44:51.880 --> 01:44:53.880
EPP01

01:44:53.880 --> 01:44:56.880
可以看一下我们第一期的播客节目

01:44:57.880 --> 01:44:59.880
对EP01

01:45:01.880 --> 01:45:05.880
对第一期播客专门就是讲新人应该注意哪些东西

01:45:05.880 --> 01:45:07.880
但是如果说要再强调一点的话

01:45:07.880 --> 01:45:09.880
就是Python它有一个官方的tutorial

01:45:09.880 --> 01:45:11.880
官方写的学习文档

01:45:11.880 --> 01:45:13.880
你去找那个入门应该是最有效的

01:45:16.880 --> 01:45:20.880
好 然后非科班出身的程序员如何获得大厂工作机会

01:45:20.880 --> 01:45:22.880
这个我们已经聊过了

01:45:23.880 --> 01:45:27.880
下一题 各位如何在一般工作中积累自己

01:45:27.880 --> 01:45:32.880
积累自己的视野和掌握编程工业界的流行趋势

01:45:32.880 --> 01:45:38.880
每天会预留出来阅读RSS各类科技新闻和浏览Github Trend吗

01:45:38.880 --> 01:45:39.880
会

01:45:39.880 --> 01:45:42.880
但是我自己的话主要还是依赖看书

01:45:42.880 --> 01:45:48.880
其实我觉得很多新的东西其实是一些已有的概念衍生出来的

01:45:48.880 --> 01:45:50.880
我觉得我自己目前阶段还是先看书

01:45:50.880 --> 01:45:52.880
然后其实就是通过大家聊天

01:45:52.880 --> 01:45:55.880
以及订阅邮件组和新闻组的形式来看的

01:45:55.880 --> 01:45:58.880
我觉得应该就是结合起来

01:45:58.880 --> 01:46:04.880
然后应该订阅一些邮件列表会帮助你了解一些新的趋势

01:46:04.880 --> 01:46:08.880
但是看书的话能帮助你深入掌握某一门技术

01:46:08.880 --> 01:46:13.880
其实还是应该都看我觉得

01:46:13.880 --> 01:46:14.880
对同意

01:46:14.880 --> 01:46:17.880
以看书为主

01:46:17.880 --> 01:46:21.880
区别信息跟知识区别一下

01:46:21.880 --> 01:46:26.880
我这边基本上是会就是关注的话

01:46:26.880 --> 01:46:30.880
基本上就是RSS然后邮件

01:46:30.880 --> 01:46:32.880
但是科技新闻

01:46:32.880 --> 01:46:35.880
Hacker News算科技新闻吧

01:46:35.880 --> 01:46:39.880
科技新闻我觉得真的没有什么特别大意思

01:46:39.880 --> 01:46:40.880
我个人觉得

01:46:40.880 --> 01:46:43.880
对比如说新智源的科技新闻

01:46:43.880 --> 01:46:45.880
然后机器之心的科技新闻

01:46:45.880 --> 01:46:50.880
没有我的科技新闻应该只有Hacker News算是科技新闻

01:46:50.880 --> 01:46:52.880
算科技新闻吧

01:46:52.880 --> 01:46:55.880
然后其他的不会看

01:46:55.880 --> 01:46:57.880
对Hacker News的确还不错

01:46:57.880 --> 01:47:01.880
我自己有些时候还会去逛逛Reddit之类的东西

01:47:01.880 --> 01:47:03.880
看看大家在讨论什么

01:47:03.880 --> 01:47:10.880
然后如何积累视野和流程趋势

01:47:10.880 --> 01:47:13.880
我有一个小的算是小技巧吗

01:47:13.880 --> 01:47:16.880
就是你可以去订阅RSS的时候

01:47:16.880 --> 01:47:19.880
你去订阅各个大厂的他们的那个技术博客

01:47:19.880 --> 01:47:21.880
他们的工程博客

01:47:21.880 --> 01:47:23.880
其实还会有不少收获

01:47:23.880 --> 01:47:24.880
看大家都在搞啥

01:47:24.880 --> 01:47:25.880
对

01:47:25.880 --> 01:47:29.880
Netflix跟Airbnb

01:47:29.880 --> 01:47:30.880
Uber

01:47:30.880 --> 01:47:31.880
Airbnb

01:47:31.880 --> 01:47:32.880
对Uber

01:47:32.880 --> 01:47:33.880
对Uber

01:47:33.880 --> 01:47:34.880
都听那个的

01:47:34.880 --> 01:47:35.880
对

01:47:35.880 --> 01:47:37.880
然后还有Google的那个测试博客

01:47:37.880 --> 01:47:38.880
对

01:47:38.880 --> 01:47:42.880
就是各种大厂的这种各种博客都可以去关注一把

01:47:42.880 --> 01:47:44.880
还有比如说打个广告

01:47:44.880 --> 01:47:47.880
还比如说我厂的那个比如说数据库约报之类的

01:47:47.880 --> 01:47:49.880
那个还不错

01:47:49.880 --> 01:47:50.880
对

01:47:50.880 --> 01:47:52.880
mysoco.taobao.org特别好

01:47:52.880 --> 01:47:53.880
对

01:47:53.880 --> 01:47:53.880
是的

01:47:53.880 --> 01:47:54.880
那个很棒

01:47:54.880 --> 01:47:55.880
那个很硬核的

01:47:55.880 --> 01:47:57.880
每一期都会有对应的数据库的原码解析

01:47:57.880 --> 01:47:58.880
各种原理性的分析

01:47:58.880 --> 01:47:59.880
很棒

01:47:59.880 --> 01:48:00.880
而且那个搞了很多年了

01:48:00.880 --> 01:48:02.880
我不知道是哪个团队在搞

01:48:02.880 --> 01:48:03.880
坚持下来真不容易

01:48:03.880 --> 01:48:05.880
RDS哪边在搞

01:48:05.880 --> 01:48:06.880
但是具体不太清楚

01:48:06.880 --> 01:48:08.880
还有就是如果你Google搜索

01:48:08.880 --> 01:48:11.880
发现某个人写的blog特别好

01:48:11.880 --> 01:48:12.880
就加到你的RSS源里

01:48:12.880 --> 01:48:18.880
基本上就是这样来来聚合你要关注的信息

01:48:18.880 --> 01:48:19.880
是的

01:48:19.880 --> 01:48:20.880
我也有这个习惯

01:48:20.880 --> 01:48:21.880
对

01:48:21.880 --> 01:48:22.880
OK

01:48:22.880 --> 01:48:25.880
然后下一个题

01:48:25.880 --> 01:48:28.880
你在面试中有什么特意的考察点

01:48:28.880 --> 01:48:31.880
然后有没有情况就是忽略了这些点

01:48:31.880 --> 01:48:33.880
会导致人面试失败

01:48:33.880 --> 01:48:36.880
然后这个我觉得我真没话说

01:48:36.880 --> 01:48:37.880
因为这个东西

01:48:37.880 --> 01:48:38.880
每个人面试观的套路

01:48:38.880 --> 01:48:40.880
风格和各个团队的要求都不一样

01:48:40.880 --> 01:48:44.880
我觉得这个是真的是一个不太好聊的话题

01:48:44.880 --> 01:48:45.880
对

01:48:45.880 --> 01:48:46.880
我觉得这个不要紧

01:48:46.880 --> 01:48:47.880
如果基础很好

01:48:47.880 --> 01:48:48.880
因为某一点缺陷

01:48:48.880 --> 01:48:49.880
结果不理想

01:48:49.880 --> 01:48:51.880
那这个是公司的损失

01:48:51.880 --> 01:48:53.880
不是你的损失

01:48:53.880 --> 01:48:55.880
可以

01:48:55.880 --> 01:48:59.880
就我觉得可能就是这位同学

01:48:59.880 --> 01:49:00.880
他提了好几个问题

01:49:00.880 --> 01:49:05.880
我觉得他如果你就是比较想匿名的

01:49:05.880 --> 01:49:06.880
或者是实名的

01:49:06.880 --> 01:49:07.880
把你的案例分享给我们的话

01:49:07.880 --> 01:49:08.880
你可以写邮件

01:49:08.880 --> 01:49:10.880
然后发到我们任何一个人邮箱

01:49:10.880 --> 01:49:12.880
然后我们可以专门的帮你具体的分析一下

01:49:12.880 --> 01:49:16.880
因为我觉得你可能有一些更具体的事情想问

01:49:16.880 --> 01:49:17.880
对吧

01:49:17.880 --> 01:49:18.880
就是这个事情没有办法宽泛的聊

01:49:18.880 --> 01:49:21.880
因为case by case差别真的很大

01:49:21.880 --> 01:49:22.880
对

01:49:22.880 --> 01:49:23.880
对

01:49:23.880 --> 01:49:24.880
因为因为每个人其实就

01:49:24.880 --> 01:49:26.880
即便是你同样要求情况下

01:49:26.880 --> 01:49:28.880
然后每个面试官考察方式和考察

01:49:28.880 --> 01:49:29.880
重点都是不一样的

01:49:29.880 --> 01:49:31.880
这个东西是真的没法泛化的去聊

01:49:31.880 --> 01:49:33.880
如果说有人说我给你给你个套路

01:49:33.880 --> 01:49:34.880
让你去了解这些东西

01:49:34.880 --> 01:49:39.880
那么我觉得大概率是会坑了你的一些东西的

01:49:39.880 --> 01:49:40.880
好

01:49:40.880 --> 01:49:42.880
然后下一题是问

01:49:42.880 --> 01:49:43.880
Unbound method

01:49:43.880 --> 01:49:45.880
为什么在python3中会取消

01:49:45.880 --> 01:49:46.880
不知道

01:49:46.880 --> 01:49:47.880
我只知道我取消

01:49:47.880 --> 01:49:48.880
不知道

01:49:48.880 --> 01:49:50.880
我连取消都不知道

01:49:50.880 --> 01:49:52.880
这个取消吗

01:49:52.880 --> 01:49:54.880
我怎么觉得是取消了

01:49:54.880 --> 01:49:55.880
在python3的时候

01:49:55.880 --> 01:49:56.880
取消了

01:49:56.880 --> 01:49:58.880
python3是取消了

01:49:58.880 --> 01:49:59.880
对

01:49:58.880 --> 01:50:00.880
所以你不需要用那个static method

01:50:00.880 --> 01:50:01.880
对

01:50:01.880 --> 01:50:03.880
他会他如果说你直接使用的话

01:50:03.880 --> 01:50:04.880
他会做一个generic的

01:50:04.880 --> 01:50:06.880
那个generic function

01:50:06.880 --> 01:50:09.880
然后就是说是你的第一个self之类的

01:50:09.880 --> 01:50:11.880
就是智能传输器之类的就ok了

01:50:11.880 --> 01:50:15.880
但是比较诡异的是static method并没有被取消

01:50:15.880 --> 01:50:19.880
其实static method还是有作用的

01:50:19.880 --> 01:50:20.880
就相当于你的一个class

01:50:20.880 --> 01:50:22.880
是你的一个namespace

01:50:22.880 --> 01:50:23.880
对吧

01:50:23.880 --> 01:50:29.880
你对他是帮助你去归类这个方法的一个

01:50:29.880 --> 01:50:31.880
就这样一个namespace

01:50:31.880 --> 01:50:35.880
所以他虽然他和你的一个free function

01:50:35.880 --> 01:50:36.880
理论上是等价的

01:50:36.880 --> 01:50:40.880
但是还是在可读性上有一定区别

01:50:40.880 --> 01:50:41.880
我觉得

01:50:41.880 --> 01:50:43.880
但是因为他取消了这个unbound

01:50:43.880 --> 01:50:46.880
其实我可以对吧

01:50:46.880 --> 01:50:47.880
不需要修饰

01:50:47.880 --> 01:50:52.880
也可以通过这个class这个namespace来把它约束进去

01:50:52.880 --> 01:50:56.880
你的意思是直接在一个class里面定义一个方法吗

01:50:56.880 --> 01:50:59.880
然后就不写static

01:50:59.880 --> 01:51:00.880
对对对

01:51:00.880 --> 01:51:01.880
就可以直接使用了

01:51:01.880 --> 01:51:02.880
之前你不能直接使用

01:51:02.880 --> 01:51:04.880
就是因为他是unbound的

01:51:04.880 --> 01:51:09.880
然后会要求你传那个self

01:51:09.880 --> 01:51:11.880
我还真没这么用过

01:51:11.880 --> 01:51:12.880
对

01:51:12.880 --> 01:51:13.880
但是我知道

01:51:13.880 --> 01:51:15.880
就是我知道那个python3里面

01:51:15.880 --> 01:51:18.880
是用了那种叫new class

01:51:18.880 --> 01:51:19.880
叫什么

01:51:19.880 --> 01:51:23.880
就是新式新式类代替了新式类

01:51:23.880 --> 01:51:26.880
他这跟新式类没什么关系

01:51:26.880 --> 01:51:29.880
新式类其实2.7就已经backport了

01:51:29.880 --> 01:51:31.880
他就是那个在3.7里面

01:51:31.880 --> 01:51:34.880
他就正式的取消这个bound和unbound的这个概念

01:51:34.880 --> 01:51:36.880
在那个what's new python3.0里面

01:51:36.880 --> 01:51:38.880
好这个我们可以最后了解一下

01:51:38.880 --> 01:51:40.880
看能不能再深入解答吧

01:51:40.880 --> 01:51:41.880
对

01:51:41.880 --> 01:51:42.880
好

01:51:42.880 --> 01:51:45.880
但至于为什么要这么知道

01:51:45.880 --> 01:51:47.880
对为什么这个确实

01:51:47.880 --> 01:51:49.880
我我们都不是特别了解

01:51:49.880 --> 01:51:51.880
可以我觉得应该看

01:51:51.880 --> 01:51:53.880
我记得好像有一篇文章讲

01:51:53.880 --> 01:51:55.880
好像还是归陋写的

01:51:55.880 --> 01:51:58.880
就是讲这个python里的新式类的这个历史

01:51:58.880 --> 01:52:01.880
我觉得那篇文章里应该应该会有一些

01:52:01.880 --> 01:52:04.880
他这他这不他这跟新式类没有关系

01:52:04.880 --> 01:52:06.880
没有关系吗

01:52:06.880 --> 01:52:07.880
你确定

01:52:07.880 --> 01:52:09.880
对因为你python2里面

01:52:09.880 --> 01:52:10.880
其实你python2里面

01:52:10.880 --> 01:52:12.880
你用新式类还是会

01:52:12.880 --> 01:52:16.880
你用新式类还是会有unbound和那个

01:52:16.880 --> 01:52:19.880
就是bound的这个区别

01:52:19.880 --> 01:52:22.880
好吧那这个话题我之后也会查一下

01:52:22.880 --> 01:52:25.880
然后看能不能在这个notes里面

01:52:25.880 --> 01:52:26.880
来有一个更好的答案

01:52:26.880 --> 01:52:27.880
ok

01:52:27.880 --> 01:52:29.880
这都是测试问题

01:52:29.880 --> 01:52:32.880
文老师问题我们就不说了吧

01:52:32.880 --> 01:52:34.880
这个

01:52:34.880 --> 01:52:36.880
然后最后还有一个问题是说

01:52:36.880 --> 01:52:39.880
补舌者说第一期一小时20分钟左右的时候

01:52:39.880 --> 01:52:41.880
提到python中有很多文档未记录

01:52:41.880 --> 01:52:44.880
影视操作能举些具体的例子吗

01:52:44.880 --> 01:52:46.880
我觉得这个是主要说

01:52:46.880 --> 01:52:47.880
unbound

01:52:47.880 --> 01:52:48.880
unbound的问题

01:52:48.880 --> 01:52:50.880
unbound它其实就是文档未记录

01:52:50.880 --> 01:52:53.880
它只是在python3.0里面有过记录

01:52:53.880 --> 01:52:56.880
但是在后面的官方文档里面是没有过记录的

01:52:56.880 --> 01:52:58.880
还有个比如说很典型的例子是

01:52:58.880 --> 01:52:59.880
在python3.6里面

01:52:59.880 --> 01:53:02.880
它的dict变成有序了

01:53:02.880 --> 01:53:05.880
哦他那个文档

01:53:05.880 --> 01:53:08.880
dict的文档未记录应该是故意设计的

01:53:08.880 --> 01:53:10.880
因为它那个只是内部结构

01:53:10.880 --> 01:53:13.880
它不承诺给一个有序字典

01:53:13.880 --> 01:53:16.880
对3.6的时候是没有的

01:53:16.880 --> 01:53:19.880
这个文档里是有的呀

01:53:19.880 --> 01:53:21.880
它应该是做一个backport的

01:53:21.880 --> 01:53:23.880
就是说最开始版本是没有的

01:53:23.880 --> 01:53:26.880
然后3.7里已经在文档里承诺了

01:53:26.880 --> 01:53:30.880
对但是3.6承诺了

01:53:30.880 --> 01:53:33.880
3.6承诺了它应该写进去了

01:53:33.880 --> 01:53:35.880
不是不是是这样的

01:53:35.880 --> 01:53:37.880
就是3.6里它是事实上已经存在

01:53:37.880 --> 01:53:41.880
但是它就没有说你能够做一个feature来使用

01:53:41.880 --> 01:53:42.880
然后3.7的时候

01:53:42.880 --> 01:53:46.880
它是明确的说你可以把这个当做一个feature来依赖它

01:53:46.880 --> 01:53:48.880
哦对3.7对

01:53:48.880 --> 01:53:51.880
哦行那我再举个例子

01:53:51.880 --> 01:53:54.880
就是比如说你用正则表达式

01:53:54.880 --> 01:53:56.880
research就直接research

01:53:56.880 --> 01:53:57.880
refindall之类的

01:53:57.880 --> 01:54:00.880
它是会kick它的编译结果的

01:54:00.880 --> 01:54:04.880
然后它各个版本之间的那个编译的结果

01:54:04.880 --> 01:54:07.880
编译的就是说是存储的key是不一样的

01:54:07.880 --> 01:54:10.880
然后存储的数量也是不一样的

01:54:10.880 --> 01:54:12.880
对对对这个我觉得是一个特别好的例子

01:54:12.880 --> 01:54:14.880
就是之前智库上有过一个讨论

01:54:14.880 --> 01:54:17.880
就是说那个关于python正则表达式的性能

01:54:17.880 --> 01:54:19.880
就是说到底要不要compile

01:54:19.880 --> 01:54:21.880
然后那篇文章是说不compile

01:54:21.880 --> 01:54:24.880
因为python内部它已经会帮你compile了

01:54:24.880 --> 01:54:27.880
然后事实上也是的确是像他说的这样子

01:54:27.880 --> 01:54:29.880
然后我觉得这个就是一个

01:54:29.880 --> 01:54:31.880
就是一个很好的文档维基录的例子

01:54:31.880 --> 01:54:32.880
对对对

01:54:32.880 --> 01:54:35.880
然后的话但是它compile它每一个版本

01:54:35.880 --> 01:54:38.880
包括它小版本之间可能都会发生变化

01:54:38.880 --> 01:54:41.880
比如说我记得3.2还是3.2

01:54:41.880 --> 01:54:43.880
我一下忘了我得回去看我写的那篇文章

01:54:43.880 --> 01:54:44.880
我写的它不会

01:54:44.880 --> 01:54:47.880
就是它3.2.1它是compile

01:54:47.880 --> 01:54:49.880
它是用了一个arru kick

01:54:49.880 --> 01:54:51.880
我500个就淘汰

01:54:51.880 --> 01:54:53.880
但到了3.3.3之后

01:54:53.880 --> 01:54:55.880
它把这个arru kick给取消了

01:54:55.880 --> 01:54:56.880
又恢复了100个

01:54:56.880 --> 01:54:58.880
然后包括最开始的key

01:54:58.880 --> 01:55:00.880
你后面的flag之类的

01:55:00.880 --> 01:55:01.880
最开始早期版本

01:55:01.880 --> 01:55:02.880
你后面的那个re的flag

01:55:02.880 --> 01:55:03.880
它是不参与到

01:55:03.880 --> 01:55:06.880
就是作为你key来标志你的东西

01:55:06.880 --> 01:55:08.880
也就是说你编一个政则

01:55:08.880 --> 01:55:10.880
只要是不管你后面flag一不一样

01:55:10.880 --> 01:55:12.880
都是以第一次的为准

01:55:15.880 --> 01:55:18.880
对我觉得确实Pantheon里有蛮多这种东西的

01:55:22.880 --> 01:55:26.880
好然后目前我们就把所有的问题都回答完了

01:55:26.880 --> 01:55:29.880
然后也是希望大家能够

01:55:29.880 --> 01:55:31.880
还是能够取到一些东西吧

01:55:31.880 --> 01:55:32.880
其实我们在回答过程中

01:55:32.880 --> 01:55:35.880
也是发现自己有很多东西还是不知道的

01:55:35.880 --> 01:55:37.880
也是互相学习的一个过程

01:55:38.880 --> 01:55:41.880
OK那我们就进入今天推荐环节吧

01:55:41.880 --> 01:55:43.880
因为我们还是之前说要推荐一下的

01:55:44.880 --> 01:55:45.880
谁先来

01:55:47.880 --> 01:55:48.880
我可以我先来吧

01:55:48.880 --> 01:55:50.880
我推荐我推荐一本书吧

01:55:50.880 --> 01:55:51.880
然后我就不推荐酷了

01:55:51.880 --> 01:55:53.880
我可以只推荐一本书吗

01:55:53.880 --> 01:55:54.880
好啊

01:55:55.880 --> 01:55:56.880
这本书其实是两本

01:55:56.880 --> 01:55:58.880
一本是叫做Git Pro

01:55:58.880 --> 01:56:01.880
Pro Git Pro Git的话是那个

01:56:01.880 --> 01:56:03.880
Aurelie下面的那本书

01:56:03.880 --> 01:56:05.880
大家可能说日常使用Git的时候

01:56:05.880 --> 01:56:07.880
会有会有很多东西不太了解

01:56:07.880 --> 01:56:10.880
然后我推荐还是作为一个常用的生产工具

01:56:10.880 --> 01:56:11.880
还是去系统的看一下

01:56:11.880 --> 01:56:14.880
这本书会绝合具体的case去给你讲

01:56:14.880 --> 01:56:16.880
就是你怎样去合理的使用Git

01:56:16.880 --> 01:56:19.880
然后第二本是说是第二本是那个

01:56:20.880 --> 01:56:24.880
英文名叫做Design Data Intensive Applications

01:56:24.880 --> 01:56:26.880
然后中文名翻译叫做那个

01:56:26.880 --> 01:56:28.880
对那个设计数据密集型应用

01:56:28.880 --> 01:56:30.880
这本书的话我只是强烈推荐的

01:56:31.880 --> 01:56:33.880
DDIA用我们刚才也说了

01:56:34.880 --> 01:56:35.880
这个我也在看

01:56:37.880 --> 01:56:40.880
是基本上这种大家都说好的时候

01:56:40.880 --> 01:56:42.880
还是应该确实是很好的

01:56:43.880 --> 01:56:44.880
对然后然后这个地方

01:56:44.880 --> 01:56:46.880
我在推荐一个好货啊

01:56:46.880 --> 01:56:49.880
然后现在的话在中国去去购买ACM的会员

01:56:49.880 --> 01:56:51.880
他依旧还是15美元

01:56:51.880 --> 01:56:54.880
然后可以看Sephora全家桶的那个电子

01:56:54.880 --> 01:56:57.880
就是all ready全家桶的电子书

01:56:57.880 --> 01:56:59.880
然后我建议大家有

01:56:59.880 --> 01:57:02.880
如果说对英文有一定的阅读能力的话

01:57:02.880 --> 01:57:03.880
还是可以去看一下

01:57:04.880 --> 01:57:05.880
不是all ready吧

01:57:05.880 --> 01:57:06.880
是是是Sephora吧

01:57:06.880 --> 01:57:08.880
Sephora

01:57:09.880 --> 01:57:11.880
对但是他不是all ready的所有书吧

01:57:12.880 --> 01:57:14.880
就Sephora就是all ready的品牌

01:57:15.880 --> 01:57:17.880
好像好像是都能找到

01:57:19.880 --> 01:57:20.880
基本上就是大部分

01:57:20.880 --> 01:57:24.880
你就是市面上的都是能找到的

01:57:24.880 --> 01:57:26.880
是的而且还有很多的教程

01:57:28.880 --> 01:57:30.880
对我之前还以为只是一部分

01:57:31.880 --> 01:57:32.880
他大部分基本上都能找到

01:57:32.880 --> 01:57:35.880
而且还有很多的教程视频各种各样的东西

01:57:35.880 --> 01:57:36.880
反正我很推荐

01:57:37.880 --> 01:57:39.880
然后我来说一下吧

01:57:39.880 --> 01:57:43.880
酷的话我推荐一个酷叫做better之呼

01:57:45.880 --> 01:57:47.880
这是一个Chrome的插件

01:57:47.880 --> 01:57:48.880
然后他能做的事情呢

01:57:48.880 --> 01:57:52.880
就是能够帮助你快速的去屏蔽

01:57:52.880 --> 01:57:54.880
给某个回答点赞的用户

01:57:54.880 --> 01:57:57.880
然后屏蔽某个用户的关注者

01:57:57.880 --> 01:58:00.880
然后屏蔽给某篇文章点赞的用户

01:58:00.880 --> 01:58:03.880
其中这个给拉黑文章点赞用户功能是我家的

01:58:04.880 --> 01:58:05.880
对然后

01:58:07.880 --> 01:58:10.880
就是如果你想真的有这种需求的话

01:58:10.880 --> 01:58:11.880
可以考虑一下

01:58:12.880 --> 01:58:14.880
然后另外一个推荐的东西就是

01:58:15.880 --> 01:58:16.880
英文语言叫做small talk

01:58:16.880 --> 01:58:18.880
这个是我最近在学的

01:58:18.880 --> 01:58:20.880
我觉得这门语言非常有意思吧

01:58:20.880 --> 01:58:23.880
然后他的有很多设计的思想

01:58:23.880 --> 01:58:24.880
其实

01:58:25.880 --> 01:58:27.880
嗯影响了很多后来的语言

01:58:27.880 --> 01:58:28.880
然后后来的技术的发展

01:58:28.880 --> 01:58:29.880
比如说

01:58:30.880 --> 01:58:33.880
就是OO是就object oriented programming

01:58:33.880 --> 01:58:34.880
是这门语言

01:58:35.880 --> 01:58:36.880
提出的吧

01:58:37.880 --> 01:58:42.880
然后虽然来讲现在的OO已经偏离了当初

01:58:42.880 --> 01:58:45.880
small talk里面OO的这种形式

01:58:45.880 --> 01:58:46.880
但是呢

01:58:46.880 --> 01:58:48.880
有很多人都觉得

01:58:49.880 --> 01:58:52.880
small talk里的OO才是最纯粹的OO

01:58:52.880 --> 01:58:53.880
对

01:58:53.880 --> 01:58:54.880
然后我今天

01:58:55.880 --> 01:58:56.880
又听了一些

01:58:56.880 --> 01:58:57.880
别人的博客

01:58:57.880 --> 01:58:59.880
然后他们还提到就是说

01:58:59.880 --> 01:59:02.880
像最早的这种鼠标操作的图形界面

01:59:02.880 --> 01:59:05.880
是由发明small talk的公司

01:59:06.880 --> 01:59:07.880
创造的

01:59:06.880 --> 01:59:09.880
然后乔布斯去他们这个公司参观

01:59:09.880 --> 01:59:12.880
然后把这个GUI图形界面给偷过去了

01:59:12.880 --> 01:59:14.880
就像一会儿说启发了乔布斯吧

01:59:14.880 --> 01:59:16.880
这个也是我之前不知道的

01:59:16.880 --> 01:59:17.880
反正就是对

01:59:17.880 --> 01:59:18.880
small talk这门语言真的

01:59:18.880 --> 01:59:19.880
真的很有意思

01:59:19.880 --> 01:59:20.880
大家可以去了解一下

01:59:22.880 --> 01:59:23.880
我来推荐

01:59:23.880 --> 01:59:25.880
那个一个面向

01:59:25.880 --> 01:59:26.880
开发者的

01:59:26.880 --> 01:59:27.880
就是不是面向DVA的

01:59:27.880 --> 01:59:30.880
是面向开发者的一个索引教程

01:59:30.880 --> 01:59:33.880
叫use the index look

01:59:33.880 --> 01:59:34.880
这是在星球大战

01:59:34.880 --> 01:59:35.880
你们看星球大战吧

01:59:35.880 --> 01:59:37.880
星球大战里面经常有人喊

01:59:37.880 --> 01:59:38.880
use the false look

01:59:39.880 --> 01:59:40.880
对这个我这跟我知道

01:59:41.880 --> 01:59:42.880
use the index look

01:59:42.880 --> 01:59:44.880
这个是我同事推荐给我的

01:59:44.880 --> 01:59:46.880
看着下还挺好的

01:59:46.880 --> 01:59:47.880
就是会讲什么的

01:59:47.880 --> 01:59:49.880
就是你怎么建索引

01:59:49.880 --> 01:59:50.880
怎么用索引

01:59:50.880 --> 01:59:51.880
你查的数据怎么样

01:59:51.880 --> 01:59:53.880
才能命中索引

01:59:53.880 --> 01:59:55.880
它是针对某一种数据库吗

01:59:55.880 --> 01:59:58.880
还是因为每种数据库索引是不一样的

01:59:59.880 --> 02:00:00.880
不是

02:00:01.880 --> 02:00:01.880
是的

02:00:01.880 --> 02:00:03.880
这就是它有一点好的地方

02:00:03.880 --> 02:00:04.880
就是你在第一页的时候

02:00:04.880 --> 02:00:06.880
你可以选择mySQL

02:00:06.880 --> 02:00:08.880
Postgres跟Oracle

02:00:08.880 --> 02:00:10.880
它会相应的修改一部分内容

02:00:10.880 --> 02:00:11.880
哦

02:00:12.880 --> 02:00:13.880
这个是应该

02:00:13.880 --> 02:00:15.880
每一位开发者都应该读的

02:00:15.880 --> 02:00:16.880
就是它会告诉你

02:00:16.880 --> 02:00:19.880
联合索引怎么建才能命中

02:00:19.880 --> 02:00:21.880
为什么你建了这个索引

02:00:21.880 --> 02:00:22.880
然后你这么查数据

02:00:22.880 --> 02:00:24.880
其实是不会用到这些索引的

02:00:24.880 --> 02:00:27.880
还支持DB2跟SQL Server

02:00:27.880 --> 02:00:29.880
五种数据库

02:00:31.880 --> 02:00:33.880
然后对有一些实践

02:00:33.880 --> 02:00:35.880
比如说它那个网站右边写了

02:00:35.880 --> 02:00:38.880
do not use offset for pagination

02:00:38.880 --> 02:00:40.880
分页不要用offset

02:00:40.880 --> 02:00:42.880
虽然这一个文章我还没读

02:00:42.880 --> 02:00:44.880
但是我感觉干货挺多的

02:00:45.880 --> 02:00:46.880
听起来就很不错

02:00:48.880 --> 02:00:51.880
我分页一般都是offset暴力一把数

02:00:53.880 --> 02:00:55.880
对limit加offset一起吧

02:00:55.880 --> 02:00:57.880
金导你还有什么别的推荐的吗

02:00:59.880 --> 02:01:00.880
就推荐这个

02:01:00.880 --> 02:01:02.880
然后结合DDIA一起看吧

02:01:02.880 --> 02:01:06.880
这个只跟你讲索引

02:01:06.880 --> 02:01:08.880
DDIA还有其他的一些内容

02:01:08.880 --> 02:01:11.880
但是这个索引讲得非常

02:01:11.880 --> 02:01:13.880
比DDIA更细节一些

02:01:14.880 --> 02:01:17.880
DDIA里面它也有讲索引的数据结构

02:01:17.880 --> 02:01:21.880
比如说B-Tree还是SS-table

02:01:21.880 --> 02:01:22.880
是叫SS-table吗

02:01:23.880 --> 02:01:24.880
有讲

02:01:26.880 --> 02:01:28.880
第一部分的时候讲了

02:01:28.880 --> 02:01:30.880
但是它倾向于讲他们的原理

02:01:30.880 --> 02:01:33.880
就是为什么这个table擅长于做这些事情

02:01:33.880 --> 02:01:36.880
为什么B-Tree擅长于做那些事情

02:01:36.880 --> 02:01:38.880
就是主要讲原理

02:01:39.880 --> 02:01:42.880
就相对更偏你的实际应用一些

02:01:48.880 --> 02:01:50.880
这本书我之后应该也会去读一下

02:01:50.880 --> 02:01:52.880
好 温老师

02:01:53.880 --> 02:01:56.880
我这边其实也想推荐一个数据库的

02:01:56.880 --> 02:01:59.880
就是我前面在提到的

02:01:59.880 --> 02:02:03.880
是一篇很长很长的blog

02:02:03.880 --> 02:02:06.880
叫How does a relational database work

02:02:07.880 --> 02:02:11.880
它会从你的Server进来

02:02:11.880 --> 02:02:14.880
然后它都会经历一个数据库的哪些模块

02:02:14.880 --> 02:02:16.880
然后怎么被优化器优化

02:02:16.880 --> 02:02:20.880
然后它的时间复杂度是什么样的

02:02:20.880 --> 02:02:24.880
就是想从你的Server里就进来

02:02:24.880 --> 02:02:25.880
到它如何找到数据

02:02:25.880 --> 02:02:27.880
然后再返回给你

02:02:27.880 --> 02:02:30.880
对 把中间的每一个环节都讲得特别清楚

02:02:30.880 --> 02:02:32.880
我刚看了一下这篇

02:02:32.880 --> 02:02:34.880
一直在我印象笔记里

02:02:34.880 --> 02:02:37.880
然后我但是我忘了之前读没读过

02:02:39.880 --> 02:02:41.880
就是超级长

02:02:41.880 --> 02:02:44.880
我一开始只是以为这是一个普通的

02:02:44.880 --> 02:02:46.880
我想一下我读完

02:02:46.880 --> 02:02:47.880
太长了

02:02:47.880 --> 02:02:49.880
结果读啊读啊读啊读

02:02:50.880 --> 02:02:52.880
对 我就推荐这一篇嘛

02:02:52.880 --> 02:02:53.880
大家认真读一下

02:02:53.880 --> 02:02:55.880
还是很不错的

02:02:55.880 --> 02:02:57.880
是

02:02:58.880 --> 02:02:59.880
好

02:02:59.880 --> 02:03:02.880
那如果大家都没有什么推荐的话

02:03:02.880 --> 02:03:04.880
那我们今天就差不多这样

02:03:05.880 --> 02:03:08.880
OK 我觉得差不多

02:03:08.880 --> 02:03:09.880
要不然大家的话

02:03:09.880 --> 02:03:10.880
我觉得现在今天

02:03:10.880 --> 02:03:12.880
我感觉今天聊的信息量也是挺大的了

02:03:13.880 --> 02:03:14.880
对 信息量超大

02:03:14.880 --> 02:03:17.880
我感觉我们好多话题

02:03:17.880 --> 02:03:20.880
那个都是怎么说

02:03:20.880 --> 02:03:23.880
都是可以单独用来做一起的

02:03:23.880 --> 02:03:26.880
是的 是的 是这样的

02:03:26.880 --> 02:03:28.880
对 很多东西都还是可以展开的

02:03:28.880 --> 02:03:30.880
然后我们之后也是会

02:03:30.880 --> 02:03:34.880
尽量把更新频率提高一点吧

02:03:34.880 --> 02:03:35.880
然后希望能这样

02:03:35.880 --> 02:03:36.880
好

02:03:36.880 --> 02:03:37.880
神奇量吧

02:03:37.880 --> 02:03:40.880
我们2020年的第一个Flag

02:03:40.880 --> 02:03:43.880
好 那各位听众我们就下期再见

02:03:43.880 --> 02:03:45.880
好 我们下期再见

02:03:45.880 --> 02:03:48.880
好 本期捕蛇说的播客就到这里

02:03:48.880 --> 02:03:49.880
感谢您的收听

02:03:49.880 --> 02:03:51.880
本期内容中提到的资料链接

02:03:51.880 --> 02:03:53.880
都会放到我们的网站上

02:03:53.880 --> 02:03:56.880
我们的网址是pythonhunter.org

02:03:56.880 --> 02:03:59.880
由于我们主播的直呼账号被禁

02:03:59.880 --> 02:04:02.880
所以以后的更新都不会再发布到直呼上

02:04:02.880 --> 02:04:03.880
请您留意

02:04:03.880 --> 02:04:06.880
推荐您使用泛用型客户单订阅我们的播客

02:04:06.880 --> 02:04:08.880
也欢迎您关注我们的推特

02:04:08.880 --> 02:04:10.880
加入我们的Telegram群组

02:04:10.880 --> 02:04:11.880
和其他听众一起聊天

02:04:11.880 --> 02:04:15.880
我们的推特是pythonhunter加一个下滑线

02:04:15.880 --> 02:04:17.880
Telegram群组的链接

02:04:17.880 --> 02:04:18.880
可以在我们的网站上找到

02:04:18.880 --> 02:04:20.880
我们下期再见

02:04:20.880 --> 02:04:23.880
提前祝大家春节快乐

02:04:23.880 --> 02:04:24.880
提前给大家拜个早年

02:04:24.880 --> 02:04:52.880
大哥大嫂过年好

02:04:55.880 --> 02:04:56.880
嗯

02:05:00.880 --> 02:05:01.880
嗯

02:05:08.880 --> 02:05:09.880
嗯

02:05:12.880 --> 02:05:13.880
嗯

