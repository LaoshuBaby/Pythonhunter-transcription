[00:00.000 --> 00:22.720] 欢迎大家收听补舌者说
[00:22.720 --> 00:24.640] 我们播客的主题是编程
[00:24.640 --> 00:26.720] 程序员以及Python
[00:26.720 --> 00:33.920] 希望各位听众能够喜欢
[00:33.920 --> 00:37.280] 好的欢迎大家来到第三期补舌者说
[00:37.280 --> 00:39.080] 今天我们终于有嘉宾了
[00:39.080 --> 00:43.680] 然后我们的嘉宾是来自爱奇艺的张嘉元同学
[00:43.680 --> 00:46.879] 我们请嘉宾来做个自我介绍吧
[00:46.879 --> 00:48.480] 大家好
[00:48.480 --> 00:51.400] 我叫张嘉元
[00:51.400 --> 00:57.519] 我现在在爱奇艺主要是做Python方面的开发
[00:57.519 --> 01:02.080] 非常高兴来到补舌者说
[01:02.080 --> 01:04.360] 大家好我是曼珠萨卡
[01:04.360 --> 01:05.759] 我们今天两个主持
[01:05.759 --> 01:06.880] 我是Like9M
[01:06.880 --> 01:10.560] 另外是曼珠萨卡
[01:10.560 --> 01:14.200] 今天是我们两个人来作为主持
[01:14.200 --> 01:17.080] 感觉你的自我介绍有点少
[01:17.080 --> 01:18.000] 我说嘉元
[01:18.000 --> 01:22.280] 嘉元其实应该是我们老朋友
[01:22.280 --> 01:26.960] 我记得嘉元去年是PyCon上海的讲师对吧
[01:26.960 --> 01:30.040] 对的我当时在现场有听
[01:30.040 --> 01:34.920] 你要不先跟我们讲一下你去年PyCon讲了些什么
[01:34.920 --> 01:40.160] 去年PyCon其实做的是一个关于Python语言方面的分享
[01:40.160 --> 01:45.039] 主要讲的是Python出的type hint
[01:45.039 --> 01:47.240] 应该大家都用过吧
[01:47.240 --> 01:54.199] 如果是用3.6之后版本的应该大家都用过这个特性
[01:54.199 --> 01:56.880] 主要就是介绍一下这个type hint
[01:56.880 --> 01:57.839] 我之前老公家的时候
[01:57.839 --> 01:59.479] 他在我公司的一些应用
[01:59.479 --> 02:03.560] 新的主要服务都是全部type hint化的
[02:03.560 --> 02:04.679] 对对对
[02:04.679 --> 02:09.079] 这个其实虽然Python它没有静态检查
[02:09.079 --> 02:14.200] 但是这个一定程度上它也防止了一些类型错误
[02:14.200 --> 02:17.280] 我觉得还是蛮有必要的
[02:17.280 --> 02:21.920] 你们原来你们IC现在是type hint使用的多吗
[02:21.920 --> 02:23.040] 挺多的
[02:23.040 --> 02:28.839] 一般我们部门的项目基本上都是type hint
[02:28.839 --> 02:33.280] 就是基本代码都是做了类型的
[02:33.280 --> 02:35.640] 那你们是已经是全
[02:35.640 --> 02:39.399] 就是说是还会介入线上的CI检查对吧
[02:39.399 --> 02:41.239] 对对对
[02:41.239 --> 02:43.200] 那还是很棒
[02:43.200 --> 02:46.280] 对就不仅仅是自己在用
[02:46.280 --> 02:50.560] 是会CI会对你的代码做检查的
[02:50.560 --> 02:52.920] 应该的
[02:52.920 --> 02:56.880] 对这也是type hint的一个很重要的意义吧
[02:56.880 --> 02:58.480] 嗯对
[02:58.480 --> 03:02.399] 行那好我们我们先聊一下
[03:02.399 --> 03:05.799] 就是关于关于你的一些经历之类的吧
[03:05.799 --> 03:09.160] 对因为我们第一次有嘉宾嘛对吧
[03:09.160 --> 03:14.600] 然后主要就是想对了解一下你是怎么接触和学习python的
[03:14.600 --> 03:18.519] 对就比如说是写了几年啊
[03:18.519 --> 03:22.240] 或者是一开始是因为什么这样子对你随便聊
[03:22.240 --> 03:25.440] 那python大概写了我想想看写了蛮多年了
[03:25.440 --> 03:31.079] 写了大概我大概是14年15年的时候开始写python的
[03:31.079 --> 03:32.040] 对挺早的
[03:32.040 --> 03:34.040] 嗯因为我学编程比较早嘛
[03:34.040 --> 03:37.240] 我大概大概初中的时候就开始学编程了
[03:37.240 --> 03:42.120] 所以说python是大学里面接触的语言
[03:42.120 --> 03:45.960] 之前也没有写过主要是看那本
[03:45.960 --> 03:50.440] 不知道你们知不知道那个计算机程序的构造语和解释
[03:50.440 --> 03:51.600] SISAP那本书
[03:51.600 --> 03:54.760] 嗯SISAP对我们第一期有介绍过对
[03:54.760 --> 03:57.880] 对我主要是就是大一的时候看那本书嘛
[03:57.880 --> 04:00.800] 然后搜一些相关的资料
[04:00.800 --> 04:04.200] 然后发现了就是MIT
[04:04.200 --> 04:09.200] 他是MIT他有一门课叫6.001吧好像是
[04:09.200 --> 04:12.079] 他是拿SCHEME讲这门课的
[04:12.079 --> 04:14.359] 然后后来他把它换成python了
[04:14.359 --> 04:16.120] 然后网上就有一些python的资源
[04:16.120 --> 04:17.000] 然后我就看了
[04:17.000 --> 04:18.320] 然后觉得这门语言还不错
[04:18.320 --> 04:20.800] 然后就学了一下对
[04:20.800 --> 04:25.039] 嗯所以是大一开始接触python了是吧
[04:25.039 --> 04:31.919] 对对对所以说python的话也是机缘巧合的学习到python
[04:31.920 --> 04:37.800] 本来是看那本SISAP那本书应该是用SCHEME的对吧
[04:37.800 --> 04:41.440] 然后就借此机会把python学了一下
[04:41.440 --> 04:44.040] 然后发现这门语言其实写东西还比较快
[04:44.040 --> 04:48.480] 然后就慢慢的就一直用到现在
[04:48.480 --> 04:52.720] 那你之前是就是你初中的时候是搞算法定赛是吧
[04:52.720 --> 04:55.240] 那时候对对对对对对对对嗯
[04:55.240 --> 04:59.320] 主要是用c对c和c++是的
[04:59.320 --> 05:02.320] 是會用c的嗎?我一直還以為
[05:02.320 --> 05:05.320] 還有就是最開始的時候其實是用PASCO
[05:05.320 --> 05:06.320] 但是我寫不多
[05:06.320 --> 05:09.320] 然後就是c和c++
[05:09.320 --> 05:11.320] 但其實c++我也很久沒寫了
[05:11.320 --> 05:16.320] 那個不知道你們有沒有用過一個叫
[05:16.320 --> 05:18.320] 步步高學一技
[05:18.320 --> 05:19.320] 知道
[05:19.320 --> 05:20.320] 我沒用過
[05:20.320 --> 05:22.320] 那是文字型的東西嗎?
[05:22.320 --> 05:24.320] 最開始他
[05:24.320 --> 05:25.320] 對差不多
[05:25.320 --> 05:27.320] 最開始他提供一個編程環境的
[05:27.320 --> 05:31.320] 然後最開始的時候就是在上面寫代碼
[05:31.320 --> 05:34.320] 就是為那個上面寫一些東西
[05:34.320 --> 05:36.320] 他上面不是提供是微幣嗎?
[05:36.320 --> 05:37.320] 好像是
[05:37.320 --> 05:38.320] 對對對
[05:38.320 --> 05:42.320] 好像是那個BASIC的一個
[05:42.320 --> 05:43.320] 字跡
[05:43.320 --> 05:45.320] 對他好像是提供一個BASIC
[05:45.320 --> 05:49.320] 我記得我當時用的那個洛亞洲你應該也有點印象
[05:49.320 --> 05:51.320] 然後他好像也有提過
[05:51.320 --> 05:52.320] 對對對
[05:52.320 --> 05:53.320] 你們都這麼硬核
[05:53.320 --> 05:55.320] 我都沒有寫過這種東西
[05:55.320 --> 05:57.320] 我當時沒有這麼寫過遊戲
[05:57.320 --> 06:00.320] 我去折騰了玩了一下
[06:00.320 --> 06:02.320] 但是沒加元老師
[06:04.320 --> 06:05.320] 沒有沒有
[06:05.320 --> 06:07.320] 我當時寫了些什麼遊戲
[06:07.320 --> 06:08.320] 就是
[06:10.320 --> 06:12.320] 像就是一些小遊戲
[06:12.320 --> 06:14.320] 像什麼
[06:16.320 --> 06:19.320] 貪吃蛇之類的一些小遊戲而已
[06:19.320 --> 06:22.320] 有一個叫仙劍的
[06:22.320 --> 06:23.320] 仙劍我不知道
[06:23.320 --> 06:25.320] 我不太清楚就是有一個人
[06:25.320 --> 06:29.320] 他把那個仙劍移植到那個
[06:29.320 --> 06:31.320] 好像是有聽說過
[06:31.320 --> 06:33.320] 但我覺得這個真的有點厲害
[06:33.320 --> 06:34.320] 對對對
[06:34.320 --> 06:35.320] 他那個是很厲害
[06:35.320 --> 06:39.320] 他好像拿BASIC寫了一個底層的那個圖形庫
[06:39.320 --> 06:41.320] 真的很厲害
[06:41.320 --> 06:44.320] 他那個顯示的都是那種
[06:44.320 --> 06:46.320] 要麼是黑色的方塊
[06:46.320 --> 06:48.320] 要麼是黑色的方塊是吧
[06:48.320 --> 06:50.320] 對對對是像像素點
[06:50.320 --> 06:54.320] 對那我有個問題想問一下加元老師
[06:54.320 --> 06:58.320] 就是你不是從初中開始寫代碼了對吧
[06:58.320 --> 07:01.320] 然後到現在也差不多是有十多年時間了對吧
[07:01.320 --> 07:03.320] 我想問的就是說
[07:03.320 --> 07:06.320] 你有沒有時候會有一些覺得很厭煩的事
[07:06.320 --> 07:08.320] 嗯肯定也有的呀
[07:08.320 --> 07:11.320] 就是就比如說有時候業務代碼寫多了
[07:11.320 --> 07:13.320] 就肯定會很比較厭煩
[07:13.320 --> 07:15.320] 對對因為因為是這樣
[07:15.320 --> 07:17.320] 我們就是說是
[07:17.320 --> 07:19.320] 因為最近我也在處於一個地步
[07:19.320 --> 07:21.320] 就是說是覺得很蛋疼的
[07:21.320 --> 07:23.320] 就這段寫著寫著就覺得
[07:23.320 --> 07:24.320] 就像是不想寫
[07:24.320 --> 07:27.320] 我就想像加元老師這種寫了十多年了
[07:27.320 --> 07:29.320] 應該比我這種時候更多吧
[07:29.320 --> 07:32.320] 真的這種次數好像不是特別多
[07:33.320 --> 07:36.320] 就有時候你如果不想寫那就別寫了唄
[07:36.320 --> 07:37.320] 對啊
[07:37.320 --> 07:40.320] 那你就幹點別的事情我覺得就可以了
[07:41.320 --> 07:44.320] 對因為我就想來問一下像你們這些老前輩
[07:44.320 --> 07:46.320] 也不叫老前輩是前輩
[07:46.320 --> 07:48.320] 然後對於這種事你們一般會怎麼樣去處理
[07:48.320 --> 07:50.320] 我覺得一直寫會累的
[07:50.320 --> 07:55.320] 我一般如果比較就寫代碼比較厭煩的時候
[07:55.320 --> 07:57.320] 我可能就換點別的事情做
[07:57.320 --> 07:59.320] 就看看劇啊什麼的
[07:59.320 --> 08:01.320] 就不去想它了對
[08:01.320 --> 08:03.320] 然後轉換一下心態嘛
[08:04.320 --> 08:06.320] 感覺你的心態就非常
[08:06.320 --> 08:09.320] 沒有沒有其實還比較迷茫的
[08:10.320 --> 08:12.320] 好吧大家都是在迷茫中的人
[08:12.320 --> 08:14.320] 那聽說老加元老師你剛才說到
[08:14.320 --> 08:15.320] 平時你喜歡看劇對吧
[08:15.320 --> 08:16.320] 對對對
[08:16.320 --> 08:20.320] 那你有什麼劇可以推薦給我們
[08:20.320 --> 08:22.320] 就是大家怎麼樣
[08:22.320 --> 08:26.320] 最近嗎最近我看一部那個
[08:26.320 --> 08:27.320] 切爾諾貝利還不錯
[08:27.320 --> 08:29.320] 就是HBO新出的
[08:29.320 --> 08:30.320] 我還沒看
[08:30.320 --> 08:31.320] 對對對
[08:31.320 --> 08:34.319] 當然像那個什麼GOT
[08:34.319 --> 08:36.319] 我就不說已經爛尾了對吧
[08:36.319 --> 08:38.319] 全有已經爛尾了
[08:38.319 --> 08:42.319] 然後我最近還看一部國產劇
[08:42.319 --> 08:45.319] 我私處在這邊打個廣告
[08:45.320 --> 08:48.320] 就破冰行動我覺得還可以
[08:49.320 --> 08:51.320] 就真的還可以
[08:51.320 --> 08:52.320] 犯罪類型的
[08:52.320 --> 08:53.320] 聽起來就是
[08:53.320 --> 08:56.320] 對對對犯罪類型的
[08:56.320 --> 08:59.320] 那我就回去可以試試
[08:59.320 --> 09:01.320] 請貴司將五毛錢的廣告費
[09:01.320 --> 09:03.320] 打到老師的賬戶上
[09:03.320 --> 09:05.320] 好好好可以可以
[09:05.320 --> 09:09.320] 那所以你是Python寫了也大概有
[09:09.320 --> 09:12.320] 從14 15年寫到現在是吧
[09:12.320 --> 09:15.320] 就是也五年左右
[09:15.320 --> 09:18.320] 大概是從差不多15年開始寫
[09:18.320 --> 09:21.320] 你覺得就是那你是
[09:21.320 --> 09:23.320] 比如說你大一時候學了Python之後
[09:23.320 --> 09:25.320] 那你本科時候其他的項目
[09:25.320 --> 09:27.320] 是一般用什麼語言來寫的
[09:27.320 --> 09:30.320] 會用Python嗎還是也是用C這樣子
[09:30.320 --> 09:33.320] 大部分都是用Python寫的
[09:33.320 --> 09:35.320] 對因為簡單嘛
[09:35.320 --> 09:37.320] 實現起來比較快
[09:37.320 --> 09:42.320] 就就是像那種
[09:42.320 --> 09:45.320] 對對對像什麼算法數據結構的課
[09:45.320 --> 09:47.320] 我也是拿Python寫的作業
[09:47.320 --> 09:49.320] 然後跟老師講這個
[09:49.320 --> 09:52.320] Python跟C寫起來其實也差不太多
[09:52.320 --> 09:54.320] 然後我就直接拿Python寫了
[09:54.320 --> 09:56.320] 然後他也沒說什麼
[09:56.320 --> 09:57.320] 可以的可以的
[09:57.320 --> 09:59.320] 老師懂嗎
[09:59.320 --> 10:01.320] 老師應該懂的啊
[10:01.320 --> 10:03.320] Python肯定懂的
[10:03.320 --> 10:05.320] 我覺得用那個Python來寫
[10:05.320 --> 10:07.320] 數據結構的題我要報警
[10:07.320 --> 10:08.320] 確實很方便
[10:08.320 --> 10:10.320] 我當時面試就是
[10:10.320 --> 10:13.320] 至少Google的面試是拿Python寫的
[10:13.320 --> 10:15.320] 然後我覺得Python寫數據結構題
[10:15.320 --> 10:16.320] 好像的確挺方便
[10:16.320 --> 10:19.320] 我自己刷Leak Code也是主要以Python
[10:19.320 --> 10:21.320] 對對對是比較方便
[10:21.320 --> 10:22.320] 但是我覺得Python有些時候
[10:22.320 --> 10:24.320] 寫著寫著有點彆扭
[10:24.320 --> 10:25.320] 不知道你們有沒有一些感覺
[10:25.320 --> 10:27.320] 在特別是寫一些需要指針的題的時候
[10:27.320 --> 10:30.320] 對對對是因為Python沒有那個指針嘛
[10:30.320 --> 10:33.320] 所以說有一些題確實比較彆扭
[10:33.320 --> 10:36.320] 但是其實可以在循環外面
[10:36.320 --> 10:38.320] 手動指定一個指針
[10:38.320 --> 10:39.320] 這樣其實也可以
[10:39.320 --> 10:42.320] 我其實剛才我聽你說
[10:42.320 --> 10:45.320] 你的老師懂Python我覺得還挺不錯
[10:45.320 --> 10:47.320] 因為我當時的
[10:47.320 --> 10:49.320] 就是做畢業設計的時候
[10:49.320 --> 10:50.320] 老師他就不懂
[10:50.320 --> 10:53.320] 然後我還跟他推薦了學Python的書
[10:53.320 --> 10:55.320] 就他其實是搞語音識別的嘛
[10:55.320 --> 10:57.320] 之前他一直是用CR++寫代碼的
[10:57.320 --> 10:59.320] 所以當時也正好是
[10:59.320 --> 11:01.320] 就基本是Python剛開始
[11:01.320 --> 11:03.320] 就被大眾接受嘛
[11:03.320 --> 11:06.320] 然後變得正在變得流行起來
[11:06.320 --> 11:07.320] 所以他也想學一學
[11:07.320 --> 11:08.320] 所以就這樣
[11:08.320 --> 11:14.320] 那其實Python火應該也是最近兩年才火的
[11:14.320 --> 11:17.320] 應該沒有早幾年吧
[11:17.320 --> 11:18.320] 16年就開始了
[11:18.320 --> 11:20.320] 我當時教他是13年的時候
[11:20.320 --> 11:22.320] 對差不多
[11:22.320 --> 11:24.320] 我覺得13年可能都沒怎麼火
[11:24.320 --> 11:26.320] 但是我自己接觸的話
[11:26.320 --> 11:29.320] 對於我一個轉行的身份來看的話
[11:29.320 --> 11:31.320] 差不多在15年的時候就可以聽到
[11:31.320 --> 11:33.320] 然後我是16年學
[11:33.320 --> 11:35.320] 那個時候就差不多看到Python開始火
[11:35.320 --> 11:37.320] 甚至火不起來了
[11:37.320 --> 11:40.320] 對現在這麼火
[11:40.320 --> 11:42.320] 因為它差不多是成為
[11:42.320 --> 11:45.320] 那個機器學習的主要語言了嘛
[11:45.320 --> 11:48.320] 所以說現在各種搞機器學習
[11:48.320 --> 11:50.320] 基本都是使用Python
[11:53.320 --> 11:55.320] 家源最近在推特上
[11:55.320 --> 11:58.320] 一直在分享他配置Emacs的經驗嘛
[11:58.320 --> 12:00.320] 你要不聊一下這方面
[12:02.320 --> 12:04.320] 你為什麼會選擇Emacs
[12:04.320 --> 12:08.320] 因為其實接觸Emacs
[12:08.320 --> 12:11.320] 也是看SICP那本書嘛
[12:11.320 --> 12:13.320] 它其實裡面是
[12:13.320 --> 12:16.320] SICP那本書用的語言是Schem
[12:16.320 --> 12:18.320] 它是Lisp的一個子集
[12:18.320 --> 12:23.320] 然後Emacs又是由Emacs Lisp寫的
[12:23.320 --> 12:26.320] 所以說這之間就淵源很深
[12:26.320 --> 12:29.320] 所以說就用Emacs來寫代碼了
[12:29.320 --> 12:31.320] 最開始的時候
[12:31.320 --> 12:36.320] 所以具體你覺得你的生產力是變高了呢
[12:36.320 --> 12:38.320] 還是肯定是變高的
[12:38.320 --> 12:40.320] 不然你也不會用
[12:40.320 --> 12:44.320] 生產力變高
[12:44.320 --> 12:46.320] 應該跟之前差不多
[12:46.320 --> 12:48.320] 因為其實Emacs我用了挺久的
[12:48.320 --> 12:51.320] 但是工作之後
[12:51.320 --> 12:53.320] 我其實一直在用Python寫代碼
[12:53.320 --> 12:56.320] 因為工程上的代碼
[12:56.320 --> 12:58.320] 其實用Python寫還是比較好的
[12:58.320 --> 13:01.320] 因為設計的代碼量比較大嘛
[13:01.320 --> 13:04.320] Python提供的一系列工具鏈都比較全
[13:04.320 --> 13:06.320] 所以說我之前都是用Python來寫
[13:06.320 --> 13:10.320] 但是最近因為我看那個DOOM Emacs
[13:10.320 --> 13:12.320] 就是一個Emacs的
[13:12.320 --> 13:16.320] 相當於是一個Emacs的配置吧
[13:16.320 --> 13:19.320] 然後就拿下來折騰了一下
[13:19.320 --> 13:23.320] 它這個配置具體特別在哪裡呢
[13:23.320 --> 13:25.320] 因為有很多這種配置嘛
[13:25.320 --> 13:29.320] 像Emacs裡面最出名的一個配置
[13:29.320 --> 13:31.320] 叫Space Emacs
[13:31.320 --> 13:33.320] 不知道你們有沒有聽說過
[13:33.320 --> 13:36.320] 我用過我還一直在用
[13:36.320 --> 13:44.320] 它其實就是把Vim跟Emacs結合起來
[13:44.320 --> 13:46.320] 你如果用Space Emacs的話
[13:46.320 --> 13:49.320] 你就可以Vim和Emacs雙修
[13:49.320 --> 13:50.320] 它結合是怎麼結合
[13:50.320 --> 13:52.320] 結合快捷鍵嗎還是結合了什麼
[13:52.320 --> 13:54.320] 我怎麼感覺
[13:54.320 --> 13:57.320] 它就是快捷鍵它的
[13:57.320 --> 14:03.320] 它就是通過Evil那個package
[14:03.320 --> 14:07.320] 那為啥不直接用Vim呢
[14:07.320 --> 14:11.320] 因為其實Emacs跟Vim來比的話
[14:11.320 --> 14:14.320] 就是Emacs的功能還是更加強一點
[14:14.320 --> 14:17.320] 當然我這邊不是要挑起什麼戰爭
[14:17.320 --> 14:18.320] 已經被挑起了
[14:18.320 --> 14:21.320] 就是就我個人使用情況來看
[14:21.320 --> 14:23.320] 能舉幾個例子嗎
[14:23.320 --> 14:25.320] 比如說因為我確實還挺好奇的
[14:25.320 --> 14:30.320] 就舉一些我平常使用Vim的一些經驗吧
[14:30.320 --> 14:33.320] 就比如說我使用Vim
[14:33.320 --> 14:37.320] 我之前使用除開Python代碼
[14:37.320 --> 14:39.320] 我在那個PyCharm上寫
[14:39.320 --> 14:41.320] 其他基本上的操作
[14:41.320 --> 14:43.320] 我都是在那個Emacs上的
[14:43.320 --> 14:47.320] Emacs有幾個非常厲害的插件
[14:47.320 --> 14:49.320] 一個是叫Ogmode
[14:49.320 --> 14:51.320] 不知道你們有沒有聽說過
[14:51.320 --> 14:53.320] 那個Manjuseka你有沒有用過
[14:53.320 --> 14:55.320] 我用過
[14:55.320 --> 14:57.320] 我之前用過一段時間來做Todo
[14:57.320 --> 15:01.320] 對它的拘留功能是非常強的
[15:01.320 --> 15:05.320] 然後它還可以用來寫各種
[15:05.320 --> 15:06.320] 比如說像LiteX
[15:06.320 --> 15:10.320] 它可以把LiteX結合到裡面進行寫
[15:10.320 --> 15:14.320] 就是MacDON你們應該都知道吧
[15:14.320 --> 15:18.320] 它可以說是一個加強版的MacDON
[15:18.320 --> 15:21.320] 它可以在裡面進行文學編程
[15:21.320 --> 15:23.320] 就比如說你在裡面寫了一段Python代碼
[15:23.320 --> 15:24.320] 它可以直接在裡面執行
[15:24.320 --> 15:26.320] 然後顯示結果
[15:26.320 --> 15:28.320] 它這個是很強大的
[15:28.320 --> 15:31.320] 所以之前不是聽說那句話嗎
[15:31.320 --> 15:34.320] 說Emacs是一個操作系統
[15:34.320 --> 15:37.320] 然後也就是說它實際上
[15:37.320 --> 15:40.320] 可以完成很多這種
[15:40.320 --> 15:42.320] 僅僅是在一個編輯器裡面
[15:42.320 --> 15:43.320] 完成不了的事情
[15:43.320 --> 15:46.320] 對 可以說
[15:46.320 --> 15:48.320] 有句話不是說
[15:48.320 --> 15:51.320] 你甚至可以用Emacs來煮一杯咖啡嗎
[15:51.320 --> 15:54.320] 在你們谷歌的傳言
[15:54.320 --> 15:58.320] 其實我覺得這個用VSCode也可以煮
[15:58.320 --> 16:01.320] 只要那個咖啡機支持編程的話
[16:01.320 --> 16:03.320] 那個咖啡機是有一個RFC的
[16:03.320 --> 16:04.320] 是真的
[16:04.320 --> 16:07.320] 我去看了一個RFC是教
[16:07.320 --> 16:09.320] 我不知道那個是惡搞
[16:09.320 --> 16:10.320] 但是還是怎麼樣
[16:10.320 --> 16:12.320] 但是那個RFC是存在的
[16:12.320 --> 16:15.320] 就是咖啡機編程的接口
[16:15.320 --> 16:18.320] 反正還挺有意思
[16:18.320 --> 16:21.320] 我聽說你們咖啡機都出在RPC
[16:21.320 --> 16:25.320] 之前Github有個非常火的項目
[16:25.320 --> 16:26.320] 就一個人
[16:26.320 --> 16:27.320] 他的一些腳本
[16:27.320 --> 16:30.320] 他就給咖啡機編程
[16:30.320 --> 16:32.320] 說他到公司十分鐘
[16:32.320 --> 16:35.320] 之前咖啡機就幫他煮好了一杯咖啡
[16:35.320 --> 16:36.320] 他到公司
[16:36.320 --> 16:37.320] 那個項目很有名
[16:37.320 --> 16:39.320] 但是我從來沒有看過他的代碼
[16:39.320 --> 16:40.320] 對
[16:40.320 --> 16:45.320] 關於Emacs其實我還
[16:45.320 --> 16:47.320] 就是想問一些別的
[16:47.320 --> 16:49.320] 比如說你在裡面要調試的話
[16:49.320 --> 16:50.320] 那要怎麼做
[16:50.320 --> 16:52.320] 也是支持的嗎
[16:52.320 --> 16:53.320] 調試嗎
[16:53.320 --> 16:55.320] 比如說PDB之類的
[16:55.320 --> 16:56.320] 對
[16:56.320 --> 16:57.320] Debug
[16:57.320 --> 17:02.320] 其實我用IPDB比較多
[17:02.320 --> 17:05.320] 就是直接import IPDB
[17:05.320 --> 17:07.320] 然後settrace就可以了
[17:07.320 --> 17:08.320] 尾班
[17:08.320 --> 17:11.320] 尾班是這樣用
[17:11.320 --> 17:14.320] 實行的時候是IPDB的那個介面嗎
[17:14.320 --> 17:15.320] 還是怎麼樣
[17:15.320 --> 17:17.320] 就是它是一個什麼效果
[17:17.320 --> 17:21.320] IPDB我主要是在命令行裡面用的
[17:21.320 --> 17:26.320] Emacs如果要配置一個比較完善的python
[17:26.319 --> 17:29.320] debug的話還是比較困難的
[17:29.320 --> 17:32.320] 因為它就我具體沒有配
[17:32.320 --> 17:35.320] 因為我在命令行用那個IPDB比較多
[17:35.320 --> 17:36.320] 所以說我主要
[17:36.320 --> 17:39.320] 我就沒有配那個python debug
[17:39.320 --> 17:43.320] 那個Emacs裡面debug python這個東西
[17:43.320 --> 17:45.320] 我就沒有配
[17:45.320 --> 17:46.320] 對
[17:46.320 --> 17:49.320] 他那個其實還是可以用的
[17:49.320 --> 17:50.320] 那個我之前用過
[17:50.320 --> 17:54.320] 就是我之前用短暫的用spacemap的時間
[17:54.320 --> 17:57.320] 來全部寫業務上的代碼
[17:57.320 --> 17:59.320] 然後他那個地方可以配IPDB
[17:59.320 --> 18:03.320] 然後就是說是直接那個快捷鍵是消網
[18:03.320 --> 18:04.320] 然後就是直接運行的時候
[18:04.320 --> 18:09.320] 他就會進入到那個spacemap裡面的repo裡面去
[18:09.320 --> 18:12.320] 然後就可以像中端裡面一樣操作
[18:12.320 --> 18:14.320] 當然本質上還是像中端
[18:14.320 --> 18:15.320] 對
[18:15.320 --> 18:16.320] 應該是可以的
[18:16.320 --> 18:20.320] 但是debug的話應該是沒有pycharm這麼好用
[18:20.320 --> 18:21.320] 我覺得
[18:21.320 --> 18:24.320] pycharm debug太好用了
[18:24.320 --> 18:26.320] 對pycharm debug是很好用
[18:26.320 --> 18:28.320] 那我這邊有個問題
[18:28.320 --> 18:31.320] 然後像你就是說是用spacemaps裡面
[18:31.320 --> 18:35.320] 比如說你怎麼樣去做一些那些
[18:35.320 --> 18:36.320] 比如說重構的操作
[18:36.320 --> 18:37.320] 重構的場景很簡單
[18:37.320 --> 18:38.320] 就比如說第一個
[18:38.320 --> 18:41.320] 你在A文件裡面定義了一個
[18:41.320 --> 18:42.320] 定義了一個函數
[18:42.320 --> 18:43.320] 一個method
[18:43.320 --> 18:45.320] 然後的話你在B C D裡面
[18:45.320 --> 18:48.320] 三個文件裡面都去import了這個地方
[18:48.320 --> 18:51.320] 那麼你現在比如說你要把這個method重命名
[18:51.320 --> 18:54.320] 然後重新命名或者說是給它加一個參數
[18:54.320 --> 18:57.320] 比如說在spacemaps裡面
[18:57.320 --> 18:59.320] 有什麼比較好的操作去做這樣
[18:59.320 --> 19:02.320] 有個插件叫ivy
[19:02.320 --> 19:04.320] 然後它可以就是搜索
[19:04.320 --> 19:07.320] 然後比如說像pycharm裡面
[19:07.320 --> 19:09.320] 它有個全局搜索
[19:09.320 --> 19:12.320] 比如說你搜索一個關鍵字
[19:12.320 --> 19:16.320] 它會給你展示一個就是搜索到的結果
[19:16.320 --> 19:19.320] 在emacs裡面它可以把這個結果集
[19:19.320 --> 19:21.320] 就是它會彈出一個窗口
[19:21.320 --> 19:23.320] 這裡面展示它所有結果集
[19:23.320 --> 19:25.320] 然後直接在那個搜索窗口裡面
[19:25.320 --> 19:27.320] 直接把這些全部改掉
[19:27.320 --> 19:33.320] 然後你就可以直接應用到那個相關的文件裡面
[19:33.320 --> 19:35.320] 就是它在搜索那個
[19:35.320 --> 19:38.320] 我記得pycharm以及jetbrain
[19:38.320 --> 19:39.320] 其他的ID裡面
[19:39.320 --> 19:41.320] 它是可以直接refactor的
[19:41.320 --> 19:43.320] 就是你直接去改
[19:43.320 --> 19:45.320] 它就會把你相應的那個地方都改掉
[19:45.320 --> 19:47.320] 根本不需要搜索好像
[19:47.320 --> 19:52.320] 對pycharm是支持這種refactor的
[19:52.320 --> 19:54.320] 對它是有shift16
[19:54.320 --> 19:56.320] shift加f6
[19:56.320 --> 19:58.320] 對就是叫做redim
[19:58.320 --> 20:00.320] 就是refactor裡面的
[20:00.320 --> 20:02.320] 對它會搜索相關的應用
[20:02.320 --> 20:07.320] 那個就是所有引用到這個東西的地方
[20:07.320 --> 20:09.320] 然後進行出命名
[20:09.320 --> 20:13.320] 對然後我就是看起來
[20:13.320 --> 20:15.320] 可能在這一方面的話
[20:15.320 --> 20:16.320] 還是沒有一些IDE
[20:16.320 --> 20:17.320] 舒服一些
[20:17.320 --> 20:19.320] 但是我感覺還是已經夠用了
[20:19.320 --> 20:21.320] 對夠用肯定是夠用
[20:21.320 --> 20:24.320] 主要是它的一些操作就比較統一
[20:24.320 --> 20:26.320] 它寫各種東西都比較統一
[20:26.320 --> 20:30.320] 就比如說我有時候要寫一些golang或者一些C的話
[20:30.320 --> 20:35.320] 在那個pycharm它現在沒有C和golang的插件
[20:35.320 --> 20:37.320] 所以說我就要換到別的工具
[20:37.320 --> 20:39.320] 比如說像vscode來寫
[20:39.320 --> 20:44.320] 行那我覺得我們下面聊一下python在i7的應用吧
[20:44.320 --> 20:46.320] 因為工具鏈這方面也聊了不少
[20:46.320 --> 20:48.320] 對然後
[20:48.320 --> 20:50.320] 對其實我挺好奇的
[20:50.320 --> 20:56.320] 其實python在i7也不算一門主流語
[20:56.320 --> 20:57.320] 是嗎
[20:57.320 --> 21:01.320] 對python不是i7的主流語
[21:01.320 --> 21:05.320] 在i7用的最多還是c++跟java
[21:05.320 --> 21:06.320] 用的最多
[21:06.320 --> 21:08.320] 那你們這個技術戰跟google好像
[21:08.320 --> 21:12.320] 是嗎
[21:12.320 --> 21:14.320] 也是這樣基本上
[21:14.320 --> 21:17.320] 谷歌應該是c++
[21:17.320 --> 21:19.320] 谷歌java也很多嗎
[21:19.320 --> 21:20.320] 很多對
[21:20.320 --> 21:21.320] 我其實挺好奇的
[21:21.320 --> 21:24.320] 因為i7e的話其實你去年也來報
[21:24.320 --> 21:26.320] 參加分享的時候我就挺好奇的
[21:26.320 --> 21:30.320] i7e的話我記得python好像在i7e
[21:30.320 --> 21:32.320] 基本上用的很少的
[21:32.320 --> 21:34.320] 然後我就其實我今天也想正好
[21:34.320 --> 21:39.320] 我也想想python在i7主要是用來做一些什麼事情
[21:39.320 --> 21:42.320] 我想大家也可能會非常好奇
[21:42.320 --> 21:46.320] 就我們部門其實是做直播的嗎
[21:46.320 --> 21:51.320] python在這邊主要是做直播的一個介入
[21:51.320 --> 21:52.320] 介入的工作
[21:52.320 --> 21:54.320] 介入是指什麼
[21:54.320 --> 21:55.320] 介入
[21:55.320 --> 22:00.320] 就是把核心數據介入到不同的端
[22:00.320 --> 22:05.320] 比如說像iOS安卓啊然後PC端之類的
[22:05.320 --> 22:08.320] 做這樣一個中間的介入的工作
[22:08.320 --> 22:13.320] 類似於一個就是最外層的api的server嗎
[22:13.320 --> 22:17.320] 還是怎麼樣
[22:17.320 --> 22:18.320] 差不多
[22:18.320 --> 22:22.320] 相當於是一個對各端的一個api的一個包裝
[22:22.320 --> 22:24.320] 所以它裡面還是c++對吧
[22:24.320 --> 22:25.320] 或者是java
[22:25.320 --> 22:28.320] 對最底層是java的
[22:28.320 --> 22:30.320] 那就是為什麼是選用python
[22:30.320 --> 22:34.320] 而不是比如說統一的一門語言來去把它都實現完呢
[22:34.320 --> 22:42.320] 其實這個其實我們這個這個這個這個項目
[22:42.320 --> 22:44.320] 其實有點有點年代了
[22:44.320 --> 22:47.320] 然後他最開始其實用php寫的
[22:47.320 --> 22:53.320] 然後因為php有各種各種原因嘛
[22:53.320 --> 22:56.320] php後來就是打算重構一下
[22:56.320 --> 23:02.320] 後來一部分就是把一部分核心的核心的內容拆分成java
[23:02.320 --> 23:05.320] 然後另外一部分就拆分成python了
[23:05.320 --> 23:08.320] 就python主要做業務層的包裝這方面
[23:08.320 --> 23:10.320] 因為python寫起來也很快嘛
[23:10.320 --> 23:13.320] 所以說其實寫業務還很方便的
[23:13.320 --> 23:15.320] 是那這邊我正好有個問題了
[23:15.320 --> 23:17.320] 像你做介入層的話
[23:17.320 --> 23:22.320] 其實我在我這邊看來就可能說是偏那個偏
[23:22.320 --> 23:24.320] 就是說是基礎服務這塊
[23:24.320 --> 23:26.320] 就是他會承擔很多流量這塊
[23:26.320 --> 23:30.320] 而在你們的場景裡面python他的性能會是這塊的瓶頸嗎
[23:30.320 --> 23:37.320] python其實性能應該還行
[23:37.320 --> 23:42.320] 因為我們現在我們現在其實用的是given的方式的部署形式嘛
[23:42.320 --> 23:49.320] 然後而且我們這個業務其實流量也不是特別大
[23:49.320 --> 23:57.320] 所以說python在這一塊其實還能扛得住
[23:57.320 --> 24:01.320] 但是跟跟golang相比的話
[24:01.320 --> 24:06.320] 我覺得其實還是用golang來寫這種服務端的比較好
[24:06.320 --> 24:13.320] 那會不會有一些就是比如說基於python的dsl之類的東西呢
[24:13.320 --> 24:17.320] 比如說做配置文件你們有沒有這樣在用
[24:17.320 --> 24:19.320] dsl倒倒是沒有
[24:19.320 --> 24:23.320] 我們主要配置其實現在用的比較多的是yaml
[24:23.320 --> 24:27.320] 因為這個是之前之前用的遺留下來的
[24:27.320 --> 24:32.320] 還是還沒有進行就是可能改進嘛
[24:32.320 --> 24:36.320] 就yaml的解析速度並不是特別快
[24:36.320 --> 24:40.320] 就做配置這一塊其實yaml速度並不是特別快
[24:40.320 --> 24:44.320] 對因為我就是python在google裡面
[24:44.320 --> 24:47.320] 一大部分就是也不是一大部分
[24:47.320 --> 24:52.320] 反正就是有一個應用就是它會有一些dsl是基於python的
[24:52.320 --> 24:54.320] 它是用了python語法的一個子集
[24:54.320 --> 24:57.320] 然後會去寫一些配置文件這樣子
[24:57.320 --> 25:02.320] 所以我就想不知道你們可能你們沒有這樣去用
[25:02.320 --> 25:08.320] 我問一個問題就是你們python用那個python dsl來寫這些配置文件
[25:08.320 --> 25:11.320] 那它是就比如說跨語言可以調用嗎
[25:11.320 --> 25:15.320] 就比如說像java它如果要調用這個dsl
[25:15.320 --> 25:19.320] 它是自己要實現一套它的解析器嗎
[25:19.320 --> 25:25.320] 就是你可以理解為這個dsl是build file
[25:25.320 --> 25:29.320] 就是類似於make file之類的這種東西
[25:29.320 --> 25:32.320] 所以它並不會說被其他語言調用
[25:32.320 --> 25:37.320] 它只是在去編譯的時候去用這樣子
[25:37.320 --> 25:41.320] ok
[25:41.320 --> 25:45.320] 我其實我看到那個你們好像很多構建系統都會是
[25:45.320 --> 25:49.320] 對我說就是這套就是basal
[25:49.320 --> 25:55.320] 對之前編譯tensorflow的時候簡直要死
[25:55.320 --> 26:01.320] 其實我在想問一下
[26:01.320 --> 26:08.320] 你自己覺得python有沒有什麼用的不太爽的地方
[26:08.320 --> 26:12.320] 你每次都要問這個問題
[26:12.320 --> 26:16.320] 因為我覺得請嘉賓來嘛
[26:16.320 --> 26:18.320] 我們覺得好難得請嘉賓來
[26:18.320 --> 26:20.320] 我們覺得當然好的要問壞的要問
[26:20.320 --> 26:25.320] 這個其實這要看寫的不爽的地方
[26:25.320 --> 26:28.320] 可能就是每個人的風格都不太一樣
[26:28.320 --> 26:31.320] 都不太一致
[26:31.320 --> 26:36.320] 就可能你可能看不慣別人寫的風格之類的
[26:36.320 --> 26:39.320] 這個對是有這樣的問題
[26:39.320 --> 26:44.320] 因為對於提供feature比較多的語言就是會這樣
[26:44.320 --> 26:48.320] 對對對因為不像java它這種結構性比較強
[26:48.320 --> 26:51.320] 你怎麼寫都是那種方式來寫
[26:51.320 --> 26:54.320] 但python不一樣它你可以用各種方式來寫
[26:54.320 --> 26:57.320] 就比如說像我們寫service
[26:57.320 --> 27:01.320] 你可以把幾個api都包裝在class裡面
[27:01.320 --> 27:07.320] 也可以直接把api都寫在一個module裡面
[27:07.320 --> 27:11.320] 就這兩種方式如果你剛開始不做統一的話
[27:11.320 --> 27:14.320] 那就有可能有的人那樣寫有的人這樣寫
[27:14.320 --> 27:17.320] 那造成代碼就風格很不統一
[27:17.320 --> 27:21.320] 就是一般比如說你們團隊裡面應該是有這種
[27:21.320 --> 27:24.320] 一個規定之類的吧會有嗎
[27:24.320 --> 27:27.320] 對對對這個規定肯定是有的
[27:27.320 --> 27:34.320] 但是目前的話就沒有特別好的像lint工具來做這方面的
[27:34.320 --> 27:40.320] 就是這種風格的lint就是其實沒有一個特別好的工具
[27:40.320 --> 27:44.320] 這種其實確實比較好做因為它不是語言層面
[27:44.320 --> 27:47.320] 它只是說你怎麼去用就是
[27:47.320 --> 27:51.320] 適應到一些結構感覺很難去lint
[27:51.320 --> 27:58.320] 那你們其實會也有一些code reveal對吧
[27:58.320 --> 28:01.320] code reveal裡應該會去比如說你如果不喜歡它的代碼風格
[28:01.320 --> 28:04.320] 你會去就說你這樣寫不行
[28:04.320 --> 28:08.320] 對對對code reveal會提出一些改進的意見
[28:08.320 --> 28:15.320] 所以改進意見是就是你會去就是你的基準是什麼呢
[28:15.320 --> 28:20.320] 比如說如果沒有一個統一的這種比如接口的封裝形式的話
[28:20.320 --> 28:26.320] 這方面就看這個項目最開始的時候用的是哪個嘛
[28:26.320 --> 28:28.320] 然後就統一就用那個方法寫
[28:28.320 --> 28:29.320] 一般也是這樣
[28:29.320 --> 28:35.320] 然後後面就差不多就都根據那種方式來寫
[28:35.320 --> 28:43.320] 因為這種東西不太可能一開始就定義出一種特別的規範來做這個
[28:43.320 --> 28:50.320] 像我們的話很多時候你就會看到一種
[28:50.320 --> 28:53.320] 它的說法就是說你有兩種寫法都可以
[28:53.320 --> 28:58.320] 然後你要選擇哪一種就是看你的項目的已有代碼是怎麼寫的
[28:58.320 --> 29:00.320] 然後你就遵循它的convention
[29:00.320 --> 29:05.320] 對對對感覺這方面都差不多
[29:05.320 --> 29:09.320] 張陽老師其實我在想因為大家可能我不太清楚
[29:09.320 --> 29:13.320] 就是其實大家可能想關心一下像愛奇藝這邊的code reveal
[29:13.320 --> 29:15.320] 是怎麼樣一個實踐的方式
[29:15.320 --> 29:19.320] 因為大家可能就覺得很多時候都覺得code reveal
[29:19.320 --> 29:21.320] 是一種流於形式上的東西
[29:21.320 --> 29:24.320] 不知道在愛奇藝這邊這種情況
[29:24.320 --> 29:29.320] 你們是怎麼去處理就是說是去實踐code reveal這件事
[29:29.320 --> 29:33.320] 其實我說一下我們這邊的一個開發流程
[29:33.320 --> 29:37.320] 首先就是一般你接到一個需求之後
[29:37.320 --> 29:40.320] 你首先是切出一個feature分支
[29:40.320 --> 29:42.320] 然後做一些開發
[29:42.320 --> 29:47.320] 然後開發完之後你會直接就提交到test分支進行測試
[29:47.320 --> 29:53.320] 這部分測試就相當於是提交給QA團隊的測試
[29:53.320 --> 29:59.320] 然後測試當然在這個merge到那個test分支之前
[29:59.320 --> 30:00.320] 會有一個code reveal
[30:00.320 --> 30:05.320] 但是它那個code reveal是和master分支進行code reveal的
[30:05.320 --> 30:10.320] 就相當於它是跟那個穩定分支進行一下一次code reveal
[30:10.320 --> 30:14.320] 因為你不能保證你每次核到test的代碼不會再修改
[30:14.320 --> 30:17.320] 你可能這個需求就上了test環境之後
[30:17.320 --> 30:19.320] 你可能還會修一些bug之類的
[30:19.320 --> 30:21.320] 所以說它是不會
[30:21.320 --> 30:27.320] 而且你的test環境有可能是就是你幾個人同時開發不同的需求
[30:27.320 --> 30:30.320] 那你核到test環境代碼其實不一樣的
[30:30.320 --> 30:34.320] 所以說我們這邊做code reveal是跟master進行差分的
[30:34.320 --> 30:36.320] 然後code reveal的話
[30:36.320 --> 30:40.320] 這邊其實也沒有一個特別強硬的一個流程
[30:40.320 --> 30:43.320] 就比如說你提交了一個pool request之後
[30:43.320 --> 30:47.320] 你必須要某某某某某人通過
[30:47.320 --> 30:50.320] 就某幾個人通過code reveal之後才能merge
[30:50.320 --> 30:53.320] 它其實就是我們有一個就是交流群的嘛
[30:53.320 --> 30:56.320] 大家把這個你提的pool request提上去
[30:56.320 --> 31:01.320] 然後大家會在那個pool request底下就是發表一些評論
[31:01.320 --> 31:06.320] 然後項目組leader就會就是差不多
[31:06.320 --> 31:10.320] 大家已經review過之後項目組leader就會把這個代碼合上去
[31:10.320 --> 31:14.320] 這樣就沒有一個特別強硬的規範來做這個code reveal
[31:14.320 --> 31:16.320] 剛才說到有一點我很好奇
[31:16.320 --> 31:21.320] 就是你說是和master去對比
[31:21.320 --> 31:26.320] 就是我沒有太弄明白這個到底是什麼意思
[31:26.320 --> 31:28.320] 因為code reveal的話
[31:28.320 --> 31:31.320] 它肯定不是應該是就是你修改前後修改後對吧
[31:31.320 --> 31:34.320] 那你修改如果是在test分支的話
[31:34.320 --> 31:40.320] 你去跟master對比不就會有很多其實並不是你修改的東西嗎
[31:40.320 --> 31:42.320] 其實不會啊
[31:42.320 --> 31:47.320] 因為那個我們的master分支是穩定代碼分支
[31:47.320 --> 31:49.320] 因為test分支嘛
[31:49.320 --> 31:53.320] 它其實是有很多其他人的代碼的
[31:53.320 --> 31:55.320] 因為我們其實
[31:55.320 --> 31:59.320] 我們是比如說三個人同時也不是同時開發
[31:59.320 --> 32:01.320] 就不是同時開發一個需求
[32:01.320 --> 32:03.320] 比如三個人開發三個需求
[32:03.320 --> 32:07.320] 那三個人的代碼同時都合到test分支
[32:07.320 --> 32:15.320] 那我們這個test分支代碼就是被qq團隊測試通過之後
[32:15.320 --> 32:18.320] 它是會把你分支的代碼合到master
[32:18.320 --> 32:21.320] 不是把test分支代碼合到master
[32:21.320 --> 32:24.320] git的工作流其實可以聊很多
[32:24.320 --> 32:28.320] 因為我們這個git的工作流其實也不是特別完善
[32:28.320 --> 32:31.320] 之前也改過很多次
[32:31.320 --> 32:35.320] 我覺得這個要深入的聊下去也可以聊很多
[32:36.320 --> 32:39.320] 然後對了正好嘉然老師我們這邊還有一個問題想問一下
[32:39.320 --> 32:41.320] 你應該聽了我們上期節目對吧
[32:41.320 --> 32:45.320] 然後我們上期節目裡面是有一個topic叫做
[32:45.320 --> 32:48.320] 你遇到過最有意思的坑是什麼
[32:48.320 --> 32:50.320] 其實我今天也想來問問嘉然老師
[32:50.320 --> 32:53.320] 你遇到過最有意思的坑是什麼
[32:53.320 --> 32:56.320] 或者說給你印象最深的坑是什麼
[32:56.320 --> 32:58.320] 就我說一個最近遇到的坑
[32:58.320 --> 33:01.320] 就是我最近其實也不是我遇到坑
[33:01.320 --> 33:03.320] 是我一個同事遇到坑
[33:03.320 --> 33:05.320] 然後他一直沒有找到問題
[33:05.320 --> 33:07.320] 然後我就幫他找了一下
[33:07.320 --> 33:09.320] 就是場景是這樣的
[33:09.320 --> 33:11.320] 就是前端發過來一個請求
[33:11.320 --> 33:15.320] 然後在那個header裡面有一個version字段
[33:15.320 --> 33:18.320] 然後發到後端這邊
[33:18.320 --> 33:22.320] 那個version字段就是被flex接收
[33:22.320 --> 33:25.320] 然後這個version字段就丟失了
[33:25.320 --> 33:27.320] 然後就一直沒有找到這個原因是什麼
[33:27.320 --> 33:30.320] 然後後來我看了一下那個flex
[33:30.320 --> 33:34.320] 他用的是workzooge來處理這個headers的
[33:34.320 --> 33:36.320] 然後workzooge裡面他有個bug
[33:36.320 --> 33:41.320] 他會把set header裡面的一些保留字
[33:41.320 --> 33:45.320] 在那個request header裡面把它去除掉
[33:45.320 --> 33:47.320] 像什麼version啊之類的
[33:47.320 --> 33:52.320] 他會把這些保留字在那個request headers裡面
[33:52.320 --> 33:53.320] 把這些保留字去除掉
[33:53.320 --> 33:57.320] 所以說請求到flex這邊
[33:57.320 --> 34:01.320] 那個version字段就直接被框架給吞掉了
[34:01.320 --> 34:04.320] 啊,這個是bug
[34:04.320 --> 34:06.320] 不是feature
[34:06.320 --> 34:08.319] 這是bug
[34:08.319 --> 34:12.319] 這是bug
[34:12.319 --> 34:14.319] 我覺得可能在他寫的時候
[34:14.320 --> 34:17.320] 可能會故意這麼寫的還是
[34:17.320 --> 34:20.320] 他應該是在那個set headers裡面
[34:20.320 --> 34:23.320] 他是那個RFC裡面指定set headers
[34:23.320 --> 34:26.320] 是有一些就是保留字
[34:26.320 --> 34:28.320] 相當於是保留字的嘛
[34:28.320 --> 34:31.320] 但是他應該是在response headers裡面
[34:31.320 --> 34:32.320] 他搞錯了
[34:32.320 --> 34:35.320] 把他放到那個request headers裡面
[34:35.320 --> 34:37.320] 哦,明白了
[34:37.320 --> 34:38.320] 對,然後
[34:38.320 --> 34:40.320] 那你們覺得這個問題怎麼解決
[34:40.320 --> 34:43.320] 然後我們PR我提了
[34:43.320 --> 34:45.320] 那個workzoo已經合併了
[34:45.320 --> 34:48.320] 但是他好像是在1.0版本才會發佈
[34:48.320 --> 34:50.320] 後來我們就換了一個關鍵字
[34:50.320 --> 34:53.320] 哈哈哈哈
[34:53.320 --> 34:56.320] 這種還是比較好fix
[34:56.320 --> 35:02.320] 我覺得這種坑有些時候特別噁心啊
[35:02.320 --> 35:03.320] 對,對,對
[35:03.320 --> 35:07.320] 你永遠不知道你用過的哪個會跳出來坑你一把水
[35:07.320 --> 35:10.320] 所以說就是為什麼要選擇人用的比較多的庫
[35:10.320 --> 35:14.320] 就是大家把坑都踩完了就比較好
[35:14.320 --> 35:17.320] 嗯,對
[35:17.320 --> 35:21.320] 那我們就聊一下就是你之前說到
[35:21.320 --> 35:24.320] 提到最近在讀的一本書
[35:24.320 --> 35:27.320] 就是inside the python virtual machine
[35:27.320 --> 35:28.320] 這本書
[35:28.320 --> 35:33.320] 對,這本書我也是最近剛看到
[35:33.320 --> 35:37.320] 我是之前也就稍微去看過
[35:37.320 --> 35:41.320] 就很簡單的看過一點python virtual machine是怎麼工作的嘛
[35:41.320 --> 35:43.320] 然後他網上有很多
[35:43.320 --> 35:44.320] 也不是說很多吧
[35:44.320 --> 35:45.320] 就有一些這種教程
[35:45.320 --> 35:48.320] 然後包括有一個是Griddle自己寫的
[35:48.320 --> 35:50.320] 然後就會
[35:50.320 --> 35:51.320] 哦,對對對
[35:51.320 --> 35:53.320] 你也看過那個是吧
[35:53.320 --> 35:54.320] drawbox
[35:54.320 --> 35:55.320] 對,drawbox那個
[35:55.320 --> 35:57.320] 對,但他那個並沒有寫完
[35:57.320 --> 35:59.320] 他寫了一點點
[35:59.320 --> 36:00.320] 對,沒有寫完
[36:00.320 --> 36:03.320] 然後我就想知道這個這本有什麼
[36:03.320 --> 36:04.320] 比如特別支持我
[36:04.320 --> 36:07.320] 或你覺得他寫的比較好的地方
[36:07.320 --> 36:10.320] 我其實也沒有看特別多
[36:10.320 --> 36:13.320] 具體評論我也不能夠特別評論
[36:13.320 --> 36:15.320] 但是我覺得他其實寫的挺好
[36:15.320 --> 36:18.320] 因為他是基於python3來寫的
[36:18.320 --> 36:22.320] 之前有一本叫python原代碼分析吧
[36:22.320 --> 36:24.320] 好像是國內一個人寫的
[36:24.320 --> 36:25.320] 對對對
[36:25.320 --> 36:28.320] 那本是2.5的
[36:28.320 --> 36:33.320] 對,因為python3其實跟python2差別還是蠻大的
[36:33.320 --> 36:38.320] 所以說這本書至少是基於python3的
[36:38.320 --> 36:45.320] 然後他把一些python從底層到上面
[36:45.320 --> 36:47.320] 他是怎麼運行的也講的比較清楚
[36:47.320 --> 36:51.320] 我覺得還是就有想要看python原代碼
[36:51.320 --> 36:54.320] 或者想給cpython修bug的都可以看一下這本書
[36:54.320 --> 36:57.320] 對,我其實還可以推薦一個
[36:57.320 --> 37:02.320] 也是講python內部實現的教程吧
[37:02.320 --> 37:07.320] 他是一個視頻差不多有10小時
[37:07.320 --> 37:09.320] 那個我應該也知道
[37:09.320 --> 37:13.320] 不過他的不好的地方就是針對python2.7.8
[37:13.320 --> 37:15.320] 所以我去看他原碼的時候
[37:15.320 --> 37:17.320] 很多東西都跟python3不一樣了
[37:17.320 --> 37:18.320] 就有點蛋疼
[37:18.320 --> 37:20.320] 對對對
[37:20.320 --> 37:21.320] 是
[37:21.320 --> 37:24.320] 突然想起他能基於python這個小書
[37:24.320 --> 37:27.320] 能基於python3來寫簡直非常棒
[37:27.320 --> 37:30.320] 那個JM和家園老師你們知道有個梗叫
[37:30.320 --> 37:32.320] 那個我知道
[37:32.320 --> 37:34.320] 聖誕節
[37:34.320 --> 37:35.320] 對,是這樣
[37:35.320 --> 37:38.320] 因為華文社區裡面當時一直是在流傳
[37:38.320 --> 37:40.320] 就是剛才你說的那本python原碼解析的書
[37:40.320 --> 37:42.320] 會出3.6的版本
[37:42.320 --> 37:44.320] 然後的話大家每一年問的時候
[37:44.320 --> 37:47.320] 大家每一年都說3.6的版本什麼時候出
[37:47.320 --> 37:49.320] 大家每一年都會回答說聖誕節前夕出
[37:49.320 --> 37:51.320] 聖誕節前夕出的動畫
[37:51.320 --> 37:54.320] 每一年的聖誕節前夕
[37:54.320 --> 37:57.320] 對,所以我覺得現在有python3的這種小書
[37:57.320 --> 38:00.320] 那麼你覺得主要是
[38:00.320 --> 38:02.320] 就是通過讀
[38:02.320 --> 38:04.320] 或者你可能雖然沒有讀完
[38:04.320 --> 38:06.320] 但是就是你讀到的這部分
[38:06.320 --> 38:08.320] 對於比如說你平時寫代碼
[38:08.320 --> 38:11.320] 然後幫助有沒有
[38:11.320 --> 38:13.320] 就主要體現在什麼地方
[38:13.320 --> 38:19.320] 感覺其實對平時寫代碼並沒有什麼特別的幫助
[38:23.320 --> 38:25.320] 我覺得查問題有幫助
[38:25.320 --> 38:27.320] 查問題的話
[38:27.320 --> 38:29.320] 你讀cpython代碼
[38:29.320 --> 38:32.320] 我覺得對查問題幫助其實也不是特別大
[38:32.320 --> 38:35.320] 如果你讀一些標準庫的代碼其實還行
[38:35.320 --> 38:41.320] 我去學主要是因為我自己會去做一些個人項目
[38:41.320 --> 38:45.320] 然後需要用到一些內部的那種東西
[38:45.320 --> 38:47.320] 所以我會去學
[38:47.320 --> 38:49.320] 但是我總覺得對業務代碼
[38:49.320 --> 38:52.320] 好像其實幫助並不是特別大
[38:52.320 --> 38:56.320] 是,你剛才是說你覺得有幫助
[38:56.320 --> 38:58.320] 可以聊一下
[38:58.320 --> 39:00.320] 我覺得會有一些幫助
[39:00.320 --> 39:02.320] 不過我自己沒有去做
[39:02.320 --> 39:04.320] 我自己平時做的就是
[39:04.320 --> 39:07.320] 可能就是說是沒有太多虛擬機的東西
[39:07.320 --> 39:08.320] 沒有太靠虛擬機
[39:08.320 --> 39:10.320] 我主要是去做他周邊的
[39:10.320 --> 39:12.320] 我現在修bug
[39:12.320 --> 39:14.320] 就是給cpython修bug
[39:14.320 --> 39:16.320] 也是在修周邊的這些東西
[39:16.320 --> 39:19.320] 但是我覺得的話你寫這個對你的好處
[39:19.320 --> 39:20.320] 你去對周邊比較熟悉
[39:20.320 --> 39:23.320] 你對你業務的好處就是說
[39:23.320 --> 39:25.320] 當出現什麼坑的時候
[39:25.320 --> 39:26.320] 你能大概懷疑一個地方
[39:26.320 --> 39:28.320] 而且就是說是最終能找到一些問題
[39:28.320 --> 39:30.320] 然後這個可能是一些好處
[39:30.320 --> 39:31.320] 就快速查錯
[39:31.320 --> 39:34.320] 但是我記得你上次是提到一個觀點
[39:34.320 --> 39:38.320] 就是說你有些時候你查了自己的代碼沒有問題
[39:38.320 --> 39:42.320] 那就去懷疑是不是比如說操作系統的問題
[39:42.320 --> 39:44.320] 所以你的意思是說
[39:44.320 --> 39:47.320] 可能你會也會去懷疑一下python虛擬機的問題
[39:47.320 --> 39:49.320] 還是怎麼樣
[39:49.320 --> 39:55.320] 對就是其實我最近剛好遇到一個bpa
[39:55.320 --> 39:58.320] 就是比較正在看的一個patch
[39:58.320 --> 39:59.320] 就是比較有意思
[39:59.320 --> 40:02.320] 就是說是它是在Windows上面特定的一個情況
[40:02.320 --> 40:06.320] 就是說是特定的那個Windows特定的local year
[40:06.320 --> 40:10.320] 然後local的話設定會導致它的time
[40:10.320 --> 40:13.320] 那個get當前的時區出現錯誤
[40:13.320 --> 40:16.320] 當前時區出現錯誤又會連鎖引發zip
[40:16.320 --> 40:17.320] 這個錯誤
[40:17.320 --> 40:20.320] 然後最後導致上不到時區會引發zip
[40:20.320 --> 40:21.320] 如果你去對
[40:22.320 --> 40:25.320] 對就是這一套一套念下來的
[40:25.320 --> 40:29.320] 所以說如果說是你自己去有讀過一些
[40:29.320 --> 40:31.320] 就是你自己大概去讀過一些代碼
[40:31.320 --> 40:32.320] 然後有過一些經驗
[40:32.320 --> 40:35.320] 然後你去發現你去定位這個錯的時候
[40:35.320 --> 40:36.320] 再配合code dump
[40:36.320 --> 40:38.320] 就code dump文件這些東西
[40:38.320 --> 40:43.320] 不過我感覺就是你這個太specific了吧
[40:43.320 --> 40:44.320] 就是你可能研究過代碼
[40:44.320 --> 40:47.320] 但你也沒有去看過這部分呢對吧
[40:49.320 --> 40:50.320] 對是你研究過代碼
[40:50.320 --> 40:51.320] 你沒看過這部分
[40:51.320 --> 40:54.320] 但是你去研究那些其他代碼的經驗
[40:54.320 --> 40:56.320] 可以移植到這一部分來
[40:57.320 --> 40:59.320] 說到去看原代碼嘛
[40:59.320 --> 41:01.320] 對吧不知道你們有沒有什麼經驗
[41:01.320 --> 41:05.320] 就是在閱讀原碼的時候
[41:05.320 --> 41:08.320] 怎麼去就是快速的掌握它的一套邏輯啊
[41:08.320 --> 41:09.320] 或者怎麼樣
[41:09.320 --> 41:11.320] 就經驗可以分享一下嗎
[41:11.320 --> 41:16.320] 我這邊先講我一般我這邊
[41:16.320 --> 41:19.320] 我這邊如果是要比如說像cpython嘛
[41:19.320 --> 41:22.320] 其實像cpython這種大型項目
[41:22.320 --> 41:25.320] 最好還是找一本指導手冊來讀比較好
[41:25.320 --> 41:28.320] 我覺得是但如果是一些比較小的
[41:28.320 --> 41:30.320] 像什麼標準庫的一些代碼
[41:30.320 --> 41:31.320] 你完全可以用的時候
[41:31.320 --> 41:34.320] 然後點直接點進點進原碼
[41:34.320 --> 41:35.320] 像比如說像那個pycharm
[41:35.320 --> 41:39.320] 它可以直接進入到那個function裡面
[41:39.320 --> 41:42.320] 就是定義裡面函數定義裡面
[41:42.320 --> 41:45.320] 就我經常會比如說用到一些功能
[41:45.320 --> 41:46.320] 用到一些函數
[41:46.320 --> 41:48.320] 我都會進到那函數裡面看一看
[41:48.320 --> 41:51.320] 然後順便把這個模塊瀏覽一下
[41:51.320 --> 41:57.320] 對那那比如說你的業務代碼的話
[41:57.320 --> 42:01.320] 也是也是這個這套流程嗎
[42:01.320 --> 42:02.320] 還是怎麼樣
[42:02.320 --> 42:05.320] 業務代碼業務代碼更多的是搜索
[42:05.320 --> 42:07.320] 別人寫過的主要是用搜索
[42:07.320 --> 42:10.320] 我覺得這個是一個真的是非常好的方法
[42:10.320 --> 42:12.320] 對對對你寫業務代碼
[42:12.320 --> 42:15.320] 其實就是看人家以前是怎麼寫的
[42:15.320 --> 42:16.320] 然後你看一看
[42:16.320 --> 42:18.320] 如果人家寫的還可以
[42:18.320 --> 42:19.320] 那你就抄過來
[42:19.320 --> 42:20.320] 人家寫的有一些缺陷
[42:20.320 --> 42:21.320] 你就改一改
[42:21.320 --> 42:22.320] 然後再抄過來
[42:22.320 --> 42:24.320] 我覺得這樣挺好的
[42:24.320 --> 42:28.320] 對其實我之前有看到一篇文章
[42:28.320 --> 42:32.320] 它就是這篇文章標題就是叫how to read code
[42:32.320 --> 42:34.320] 然後它總結了幾個步驟
[42:34.320 --> 42:39.320] 然後我覺得其實它第一個步驟就是說
[42:39.320 --> 42:41.320] 你一定要去把這套程序給run起來
[42:41.320 --> 42:43.320] 我覺得是其實還是挺重要的
[42:43.320 --> 42:48.320] 對因為我覺得如果就很多時候
[42:48.320 --> 42:51.320] 你直接去看的話就會比較迷茫
[42:51.320 --> 42:53.320] 但是如果run起來的話
[42:53.320 --> 42:57.320] 首先你可以去去設斷點去追蹤
[42:57.320 --> 43:01.320] 然後其次就是你有一個你有一個感性的認識
[43:01.320 --> 43:03.320] 就是說它這個程序到底在幹什麼
[43:03.320 --> 43:08.320] 然後我覺得這個對於閱讀原碼是也是很關鍵的一步
[43:08.320 --> 43:09.320] 我有個觀點
[43:09.320 --> 43:11.320] 我其實我不知道你們贊同不贊同
[43:11.320 --> 43:14.320] 然後我覺得的話其實閱讀原碼的話
[43:14.320 --> 43:16.320] 就是說是第一步
[43:16.320 --> 43:17.320] 一般一個大項目
[43:17.320 --> 43:19.320] 也就是說是開源項目而言都會有DV guide
[43:19.320 --> 43:24.320] 我覺得你然後你的第一步是去看一下DV guide
[43:24.320 --> 43:26.320] 然後去了解一下它的人體的結構
[43:26.320 --> 43:29.320] 然後後面的話我自己的一個習慣是
[43:29.320 --> 43:35.320] 我比較喜歡去找找它的就是就不管是社區的代碼
[43:35.320 --> 43:37.320] 還是業務的代碼
[43:37.320 --> 43:42.320] 我想我會去找一些它的那個PR來讀
[43:42.320 --> 43:44.320] 去讀一下他們之前的提交的PR
[43:44.320 --> 43:47.320] 這樣我覺得這樣可能會更有所幫助一些
[43:47.320 --> 43:50.320] 我不知道你們會不會有這種感覺
[43:50.320 --> 43:53.320] 對對對我就是讀那種commit log
[43:53.320 --> 43:55.320] 我覺得也是一個很好的方法
[43:55.320 --> 43:58.320] 就是你比如說這個文件它有哪些log提交
[43:58.320 --> 44:02.320] 你可以看一下它某一次log到底改了什麼內容
[44:02.320 --> 44:05.320] 然後針對它那個commit提交信息
[44:05.320 --> 44:07.320] 然後來參考來看
[44:07.320 --> 44:09.320] 我覺得這也是一個很好方法
[44:11.320 --> 44:14.320] 我自己是習慣去讀它一些
[44:14.320 --> 44:17.320] 去找一些它的歷史提交和它的討論來看一下
[44:17.320 --> 44:19.320] 我覺得這個可能會對我幫助一些
[44:19.320 --> 44:23.320] 那你會去OK
[44:23.320 --> 44:27.320] 但你怎麼知道你讀的這次
[44:27.320 --> 44:31.320] 比如說這個PR是你想了解那部分的
[44:31.320 --> 44:35.320] 還是說你去就是你想你找你想了解那部分的feature
[44:35.320 --> 44:37.320] 看它的PR
[44:37.320 --> 44:39.320] 關鍵字搜索吧
[44:39.320 --> 44:42.320] 因為你最開始的話肯定是你要熟悉一下代碼結構
[44:42.320 --> 44:44.320] 這就是我說的你前面的說的那部分
[44:44.320 --> 44:47.320] dvget的那個就是說是目的
[44:47.320 --> 44:50.320] 然後你有一個大概了解之後
[44:50.320 --> 44:52.320] 你就可以根據裡面搜索關鍵字
[44:52.320 --> 44:54.320] 或者說最簡單的
[44:54.320 --> 44:57.320] 直接看一下最近的PR它在幹什麼
[44:57.320 --> 45:01.320] 對其實我自己是
[45:01.320 --> 45:03.320] 我對我自己是這樣
[45:03.320 --> 45:06.320] 然後我才知道你們會對你們有沒有什麼特別
[45:06.320 --> 45:08.320] 就我之前提到那篇文章裡
[45:08.320 --> 45:13.320] 它的第一步是去run原代碼
[45:13.320 --> 45:17.320] 然後第二步它就是比較類似於你說的
[45:17.320 --> 45:20.320] 就是去搞清楚代碼結構
[45:20.320 --> 45:22.320] 然後比如說他去看他的文檔
[45:22.320 --> 45:26.320] 或者就是自己去瀏覽一下這樣子
[45:26.320 --> 45:29.320] 對我覺得其實是有這樣一步
[45:29.320 --> 45:32.320] 但他還提到就是說如果能找到一個
[45:32.320 --> 45:34.320] 比如說原作者去讓他給你介紹一下
[45:34.320 --> 45:36.320] 那這是最好的
[45:36.320 --> 45:38.320] 對吧
[45:38.320 --> 45:41.320] 就是你們有沒有接觸過那樣的
[45:41.320 --> 45:44.320] 就是就比如說你寫這個代碼人
[45:44.320 --> 45:45.320] 他其實已經離職了
[45:45.320 --> 45:49.320] 然後就沒有人能看到他寫代碼了
[45:49.320 --> 45:51.320] 離職是很常見
[45:51.320 --> 45:53.320] 但是沒有看不懂代碼
[45:53.320 --> 45:55.320] 暫時還沒遇到過
[45:55.320 --> 46:00.320] 我是不太懂設計思路遇到過
[46:00.320 --> 46:02.320] 沒有看不懂代碼
[46:02.320 --> 46:05.320] 但是我不知道當時為什麼會這麼設計
[46:05.320 --> 46:09.320] 這種就是必須要他要手把手的講給你
[46:09.320 --> 46:11.320] 當時為什麼要這麼寫
[46:11.320 --> 46:14.320] 就有一些特別奇怪的設計
[46:14.320 --> 46:18.320] 對然後我之前在老東家接受過一個項目
[46:18.320 --> 46:21.320] 然後後面我把這個項目帶給新人
[46:21.320 --> 46:23.320] 然後拿給新人去做
[46:23.320 --> 46:27.320] 然後新人說你能不能找一下你的EX
[46:27.320 --> 46:29.320] 然後他說我這個地方有些實在不懂
[46:29.320 --> 46:30.320] 他為什麼會這麼設計
[46:30.320 --> 46:32.320] 我當時跟他說我都還想找他聊
[46:32.320 --> 46:34.320] 結果還是他已經走了
[46:34.320 --> 46:37.320] 那你沒把這個代碼重寫一遍
[46:37.320 --> 46:40.320] 當時那個就是重寫的代價太大
[46:40.320 --> 46:42.320] 當時那個其實是有規模的
[46:42.320 --> 46:45.320] 而且是不願意背鍋吧
[46:45.320 --> 46:48.320] 對我覺得重構代碼真的很困難
[46:48.320 --> 46:51.320] 如果是個人名義你想重構人家寫代碼真的很困難
[46:51.320 --> 46:54.320] 因為萬一改錯什麼東西對吧
[46:54.320 --> 46:57.320] 對我覺得特別是線上的一些生產項目
[46:57.320 --> 46:59.320] 畢竟還是求穩
[46:59.320 --> 47:04.320] 有的時候他代碼雖然寫的就可能結構不是特別新
[47:04.320 --> 47:06.320] 但他跑的就特別穩
[47:06.320 --> 47:08.320] 我們就進入推薦環節吧
[47:08.320 --> 47:11.320] 對家源你應該知道我們每期都有一個推薦吧
[47:11.320 --> 47:13.320] 如果你聽了前兩期的話
[47:13.320 --> 47:16.320] 然後是的是的
[47:16.320 --> 47:22.320] 我這邊首先推薦一篇文章
[47:22.320 --> 47:26.320] 叫hashtgpython.jr.bin.slan
[47:26.320 --> 47:29.320] 他是最近那個我可以發下這個鏈接
[47:29.320 --> 47:31.320] hashtgpython什麼
[47:31.320 --> 47:34.320] 哦jr
[47:36.320 --> 47:38.320] 我發一下鏈接給你們
[47:38.320 --> 47:45.320] 這篇文章是講那個python3.8裡面可能出的一個新特性
[47:45.320 --> 47:48.320] 我知道你要說什麼multi interpreter
[47:48.320 --> 47:53.320] 我在PyCon去聽了那個人的演講
[47:53.320 --> 47:55.320] 他就講這個東西
[47:55.320 --> 48:00.320] 這個我覺得還是挺不錯的
[48:00.320 --> 48:06.320] 因為畢竟那個async io感覺現在確實應用場景不是特別多
[48:06.320 --> 48:10.320] 我其實有個問題我沒有詳細讀他那個python
[48:10.320 --> 48:16.320] 但是他multi interpreter和multiprocessing的本質區別到底是啥呢
[48:16.320 --> 48:21.320] 他其實是在一個進程裡面
[48:21.320 --> 48:25.320] 他是相當於是有多個interpreter
[48:25.320 --> 48:28.320] 然後每個interpreter有各自的jr
[48:28.320 --> 48:32.320] 他這樣就是相當於是不是用多進程
[48:32.320 --> 48:37.320] 因為python多進程對那個消耗開銷特別大
[48:37.320 --> 48:39.320] 其實是得不償失的
[48:39.320 --> 48:42.320] 然後他這樣其實是實現了一個單進程的
[48:42.320 --> 48:45.320] 但是python之前的單進程
[48:45.320 --> 48:46.320] 他是用那個多線程
[48:46.320 --> 48:48.320] 但python多線程他有jr
[48:48.320 --> 48:51.320] 他其實也是只能用到單個核
[48:51.320 --> 48:57.320] 然後我記得他的多個解釋器之間就是去用消息來通信的
[48:57.320 --> 49:02.320] 他好像也是基於csp那套東西來用ipc來做的
[49:02.320 --> 49:06.320] 他idea是好就是有點奇怪
[49:06.320 --> 49:13.320] 對吧但是jr畢竟是一個python的一個單程的東西
[49:13.320 --> 49:19.320] 是我覺得jr一直是不大仇深的
[49:19.320 --> 49:23.320] 反正我是反正就看這個這個到底最後會怎麼走吧
[49:23.320 --> 49:26.320] 然後如果真的是進了3.8或者3.9
[49:26.320 --> 49:28.320] 然後也可以到時候來嘗試一下
[49:28.320 --> 49:30.320] 對然後來嘉仁老師
[49:30.320 --> 49:32.320] 然後來你文章推薦了
[49:32.320 --> 49:35.320] 然後你應該知道我們還要是還想請嘉賓來推薦一個庫
[49:35.320 --> 49:36.320] 你推薦什麼
[49:36.320 --> 49:41.320] 庫其實我最近沒有發現特別就是跟python
[49:41.320 --> 49:44.320] 沒有不一定要是python的
[49:44.320 --> 49:46.320] 不一定要是python的
[49:46.320 --> 49:52.320] 我看一下我看一下我最近start的一些庫
[49:52.320 --> 49:54.320] 對就是很多時候start太多
[49:54.320 --> 49:58.320] 我先推薦一個網站叫realpython
[49:58.320 --> 50:00.320] realpython我知道
[50:00.320 --> 50:02.320] realpython
[50:02.320 --> 50:06.320] 對這是一個python教程的一個網站
[50:06.320 --> 50:08.320] 我覺得上面文章其實寫的蠻系統的
[50:08.320 --> 50:10.320] 就是比較適合新手
[50:10.320 --> 50:12.320] realpythonok
[50:12.320 --> 50:16.320] 他好像是就是他應該不是完全針對新手吧
[50:16.320 --> 50:20.320] 是比較intermediate的類似於
[50:20.320 --> 50:24.320] 對他也有完全針對新手的
[50:24.320 --> 50:27.320] 就是他每篇文章都是有一個從底
[50:27.320 --> 50:31.320] 就是從非常基礎慢慢講起的這樣一個過程
[50:31.320 --> 50:34.320] 我覺得這個其實還蠻好的
[50:34.320 --> 50:38.320] 庫的話我覺得如果你是一個
[50:38.320 --> 50:42.320] 就是剛學python我推薦你去看一下那個awesomepython
[50:42.320 --> 50:45.320] 那個那個github那個
[50:45.320 --> 50:48.320] 也不能說庫吧
[50:48.320 --> 50:51.320] awesomepython我覺得那個比較好
[50:51.320 --> 50:54.320] 裡面基本就所有跟python相關的
[50:54.320 --> 50:56.320] 倉庫裡面都有
[50:56.320 --> 50:58.320] 我再推薦一個
[50:58.320 --> 51:05.320] 這個是那個一個也是一個github的一個repo
[51:05.320 --> 51:09.320] 我把鏈接叫計算機科學學習指南
[51:09.320 --> 51:15.320] 對對對他主要就是相當於是把列了一個
[51:15.320 --> 51:19.320] 相當於是一個課程表
[51:19.320 --> 51:21.320] 就把你如果想自學的話
[51:21.320 --> 51:23.320] 你可以從哪個地方開始
[51:23.320 --> 51:27.320] 然後他會把一些就國外知名的一些課程
[51:27.320 --> 51:29.320] 鏈接放在上面
[51:29.320 --> 51:32.320] 像什麼麻省理工啊斯坦福啊之類的
[51:32.320 --> 51:35.320] 就是你可以如果自學的話可以參照這個來
[51:35.320 --> 51:38.320] 我覺得挺好的
[51:38.320 --> 51:41.320] 對現在網上這種資源也是比較豐富
[51:41.320 --> 51:45.320] 我覺得反正比我當時要去學的時候要好很多
[51:45.320 --> 51:47.320] 現在的ok
[51:47.320 --> 51:49.320] 那我說既然你沒有什麼推薦
[51:49.320 --> 51:51.320] 我來說一個好了
[51:51.320 --> 51:54.320] 就是一個小工具叫那個tldr
[51:54.320 --> 51:56.320] 不知道你們聽過沒有
[51:56.320 --> 51:58.320] 知道知道那我知道
[51:58.320 --> 52:00.320] 就是他名字叫tldr
[52:00.320 --> 52:03.320] tldr就是那個縮寫的那個tldr
[52:03.320 --> 52:06.320] 然後他有很多
[52:06.320 --> 52:08.320] 就相當於他支持很多終端吧
[52:08.320 --> 52:11.320] 比如說你可以在命令行裡面去
[52:11.320 --> 52:13.320] 就敲一個tldr
[52:13.320 --> 52:15.320] 然後後面跟一個命令的名字
[52:15.320 --> 52:18.320] 他就給你這個命令的很多很多例子
[52:18.320 --> 52:20.320] 比如說那個最經典的就是
[52:20.320 --> 52:23.320] 就是link不知道是source放在前面
[52:23.320 --> 52:26.320] 還是destination放在前面
[52:26.320 --> 52:29.320] 然後你tldr然後link
[52:29.320 --> 52:33.320] 他就會去給你寫出來怎麼用
[52:33.320 --> 52:35.320] 就是很直觀的一個工具
[52:35.320 --> 52:38.320] 我覺得很好用
[52:38.320 --> 52:41.320] 一般我用這個工具是跟那個afraid
[52:41.320 --> 52:44.320] afraid和dash結合起來用的
[52:44.320 --> 52:47.320] 就直接呼出afraid
[52:47.320 --> 52:50.320] 然後打上tldr你要查的東西就可以了
[52:50.320 --> 52:54.320] 那我們今天差不多就聊到這
[52:54.320 --> 52:58.320] ok行那我們就還是感謝一下
[52:58.320 --> 53:01.320] 感謝一下嘉研老師來參與我們節目
[53:01.320 --> 53:05.320] 今天玩一點也是比較舒服
