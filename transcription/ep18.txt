[00:00.000 --> 00:04.500] 欢迎来到这个节目的正式开箱
[00:04.500 --> 00:07.000] 我们先来看一下这个新的版本
[00:07.000 --> 00:09.400] 这次新版本的主题是
[00:09.400 --> 00:11.100] 《本土的世界》
[00:11.100 --> 00:13.000] 本土的世界
[00:13.000 --> 00:14.500] 本土的世界
[00:14.500 --> 00:16.000] 本土的世界
[00:16.000 --> 00:17.500] 本土的世界
[00:17.500 --> 00:19.000] 本土的世界
[00:19.000 --> 00:20.500] 本土的世界
[00:20.500 --> 00:22.000] 本土的世界
[00:22.000 --> 00:23.500] 本土的世界
[00:23.500 --> 00:25.000] 本土的世界
[00:25.000 --> 00:26.500] 本土的世界
[00:26.500 --> 00:28.000] 本土的世界
[00:28.000 --> 00:31.500] 大家好,欢迎来到新一期的捕手者说
[00:31.500 --> 00:33.000] 我是Like9M
[00:33.000 --> 00:36.000] 今天和我一起主持这期节目的是
[00:36.000 --> 00:37.500] 赖清涛和小白
[00:37.500 --> 00:39.000] 来给大家打个招呼吧
[00:39.000 --> 00:40.000] 大家好,我是清涛
[00:40.000 --> 00:41.500] 大家好,我是小白
[00:41.500 --> 00:46.500] 然后今天我们有一位非常非常特别的嘉宾
[00:46.500 --> 00:47.500] 特别在哪里呢?
[00:47.500 --> 00:51.000] 因为我们以前请的嘉宾一般都是像程序员
[00:51.000 --> 00:53.500] 或者说是一些研究者
[00:53.500 --> 00:55.500] 那么今天我们请到的嘉宾是一位
[00:55.500 --> 00:59.000] 中国传统语音的传统曲艺的表演者
[00:59.000 --> 01:01.000] 让我们来欢迎力挡老师
[01:01.000 --> 01:02.500] 大家好,我是力挡
[01:02.500 --> 01:05.000] 我是从小到大看你们节目长大的
[01:05.000 --> 01:07.500] 然后非常荣幸参加你们的节目
[01:07.500 --> 01:09.500] 谢谢,谢谢,我太荣幸了
[01:09.500 --> 01:11.500] 我感动哭了
[01:11.500 --> 01:12.500] 然后按照规矩
[01:12.500 --> 01:15.500] 我给大家唱这么一个开场板
[01:15.500 --> 01:26.500] 你太自觉了,来来来
[01:26.500 --> 01:28.500] 小白兔白又白
[01:28.500 --> 01:30.500] 两只耳朵竖起来
[01:30.500 --> 01:32.500] 爱吃萝卜爱吃菜
[01:32.500 --> 01:34.500] 蹦蹦跳跳真可爱
[01:34.500 --> 01:36.000] 谢谢大家,谢谢大家
[01:36.000 --> 01:37.000] 不挣大家太多的时间了
[01:37.000 --> 01:39.500] 就是一个小段
[01:39.500 --> 01:41.500] 好好好
[01:41.500 --> 01:44.500] 捕蛇者说游士一来的第一段快板
[01:44.500 --> 01:45.500] 很荣幸,很荣幸
[01:45.500 --> 01:46.500] 挺好挺好
[01:46.500 --> 01:47.500] 然后我的另一个身份
[01:47.500 --> 01:49.500] 就是Hedgehog Lab的创作者
[01:49.500 --> 01:51.500] 以及主要贡献者之一吧现在
[01:51.500 --> 01:56.500] 是的,Hedgehog Lab也是我们今天要聊的主题
[01:56.500 --> 02:00.500] 那么我们就事不宜迟把时间交给力挡吧
[02:00.500 --> 02:02.500] 来先给大家介绍一下什么是Hedgehog Lab
[02:02.500 --> 02:04.500] Hedgehog Lab就是一个
[02:04.500 --> 02:07.500] 用官方的描述来说就是一个开源的
[02:07.500 --> 02:09.500] 完全跑在浏览器里面的
[02:09.500 --> 02:11.500] 支持矩阵和符号运算
[02:11.500 --> 02:12.500] 并且有GPU加速
[02:12.500 --> 02:15.500] 并且支持LATAC,支持Markdown
[02:15.500 --> 02:17.500] 还支持数据可知化的
[02:17.500 --> 02:18.500] 这么一个科学计算的工具
[02:18.500 --> 02:20.500] 而且是完全在浏览器里面的
[02:20.500 --> 02:21.500] 而且是完全开源的
[02:21.500 --> 02:22.500] 就是大家如果喜欢用的话
[02:22.500 --> 02:25.500] 可以就直接上我的GitHub
[02:25.500 --> 02:26.500] 可以看到就是那个
[02:26.500 --> 02:28.500] 有一千多信儿的那个就是Hedgehog Lab
[02:28.500 --> 02:29.500] 然后你点进去之后
[02:29.500 --> 02:30.500] 里面会有个链接
[02:30.500 --> 02:31.500] 点进去就可以直接用了
[02:31.500 --> 02:33.500] 然后感兴趣的朋友可以
[02:33.500 --> 02:36.500] 现在打开下方的链接赶紧先去用一用哦
[02:36.500 --> 02:38.500] 对,我们的链接是在Show Notes里
[02:38.500 --> 02:40.500] 大家现在其实就可以点开用
[02:40.500 --> 02:43.500] 然后它里面有非常好的Tutorial
[02:43.500 --> 02:45.500] 所以就是包括功能介绍啊
[02:45.500 --> 02:47.500] 然后你一步一步跟着它这个来
[02:47.500 --> 02:48.500] 基本上就会用了
[02:48.500 --> 02:50.500] 并且它这个我刚刚知道
[02:50.500 --> 02:53.500] 其实是一个TypeScript的超级
[02:53.500 --> 02:55.500] 所以JavaScript里面的
[02:55.500 --> 02:56.500] 和TypeScript里面的东西
[02:56.500 --> 02:58.500] 你都可以用,对吧?
[02:58.500 --> 02:59.500] 对
[02:59.500 --> 03:02.500] 实际上语法就是完全的就是
[03:02.500 --> 03:05.500] Babel支持的JavaScript
[03:05.500 --> 03:08.500] 加上那个Stage 0, Stage 1, Stage 2
[03:08.500 --> 03:10.500] 就是那个所有的一个Preset
[03:10.500 --> 03:11.500] 加上TypeScript
[03:11.500 --> 03:13.500] 再加上一个Operator Overload
[03:13.500 --> 03:14.500] 那个Operator Overload怎么用呢?
[03:14.500 --> 03:16.500] 大家可以直接在教程里面看到
[03:16.500 --> 03:18.500] 一个是支持矩阵的Operator Overload
[03:18.500 --> 03:20.500] 再一个是支持Symbolic Computing的
[03:20.500 --> 03:21.500] 一个Operator Overload
[03:21.500 --> 03:24.500] 就是前者可以用来进行一些
[03:24.500 --> 03:26.500] 矩阵的分解啊,矩阵的运算啊
[03:26.500 --> 03:28.500] 或者搭建一些就是北达式
[03:28.500 --> 03:30.500] 后者就是直接可以用作符号运算
[03:30.500 --> 03:33.500] 包括微积分啊都是支持的
[03:33.500 --> 03:35.500] 第一次用在JavaScript里面
[03:35.500 --> 03:36.500] 支持了微积分
[03:36.500 --> 03:39.500] 我觉得这个是一个挺值得说的一件事
[03:39.500 --> 03:41.500] 我觉得符号运算那个功能
[03:41.500 --> 03:42.500] 确实挺厉害的
[03:42.500 --> 03:44.500] 我可以跟大家说一说
[03:44.500 --> 03:47.500] 就是我的这个想法是怎么来的吧
[03:47.500 --> 03:51.500] 就是一方面是我发现JavaScript生态里面
[03:51.500 --> 03:53.500] 并没有一个给大家
[03:53.500 --> 03:56.500] 夫妇用的这么一个科学计算的
[03:56.500 --> 03:58.500] 一个工具,一个环境
[03:58.500 --> 04:00.500] 就是可能大家会觉得就是
[04:00.500 --> 04:03.500] 我要在比如说我要搭建一个
[04:03.500 --> 04:05.500] 神经网络,Neural Network
[04:05.500 --> 04:07.500] 我可以用一堆函数
[04:07.500 --> 04:09.500] 就把那个矩阵啊,什么卷迹啊
[04:09.500 --> 04:11.500] 还有加减乘除就可以表达出来了
[04:11.500 --> 04:13.500] 大家觉得那个就已经很方便了
[04:13.500 --> 04:15.500] 但是那个并不是舒舒服服的
[04:15.500 --> 04:17.500] 我的舒舒服服的意思就是说
[04:17.500 --> 04:20.500] 像MathLab或者是像Python
[04:20.500 --> 04:22.500] 或者像C++的一些封装研究
[04:22.500 --> 04:24.500] 支持一些Operator Overload
[04:24.500 --> 04:25.500] 就是你写一行
[04:25.500 --> 04:27.500] 比如说你Matrix A加B乘以C
[04:27.500 --> 04:28.500] 加上D的转制
[04:28.500 --> 04:31.500] 加上比如说加上E的这个逆矩阵
[04:31.500 --> 04:33.500] 你就这么写出来
[04:33.500 --> 04:35.500] 支持Operator Overload
[04:35.500 --> 04:36.500] 这个是一个很基本的一个需求
[04:36.500 --> 04:37.500] 但是JavaScript里面并没有
[04:37.500 --> 04:39.500] 就是导致很多人不喜欢
[04:39.500 --> 04:41.500] 在JavaScript里面做这些运算
[04:41.500 --> 04:43.500] 那么我给大家提供的是一个环境
[04:43.500 --> 04:45.500] 就是你可以用在JavaScript里面
[04:45.500 --> 04:47.500] 做这个运算在浏览器里面
[04:47.500 --> 04:51.500] 这个是一个舒舒服服的一个前提吧
[04:51.500 --> 04:52.500] 有了这个之后呢
[04:52.500 --> 04:55.500] 很多以前在MathLab里面的工作
[04:55.500 --> 04:57.500] 可以在用很相似的一法
[04:57.500 --> 05:00.500] 在JavaScript里面就可以实现了
[05:00.500 --> 05:01.500] 这个是我的一个初衷吧
[05:01.500 --> 05:03.500] 再有一个就是我希望大家有一个就是
[05:03.500 --> 05:05.500] 像MathLab和Mathematica这种东西
[05:05.500 --> 05:07.500] 安装起来是实际上非常巨大的
[05:07.500 --> 05:09.500] 然后他们也很昂贵
[05:09.500 --> 05:11.500] 然后Python这些东西呢
[05:11.500 --> 05:13.500] 配置起来有的时候又很麻烦
[05:13.500 --> 05:14.500] 所以我希望给大家一个
[05:14.500 --> 05:16.500] 就是一个傻瓜开箱机用的一个
[05:16.500 --> 05:17.500] 打开浏览器
[05:17.500 --> 05:19.500] 然后就可以直接输入代码
[05:19.500 --> 05:20.500] 然后运行了这么一个
[05:20.500 --> 05:21.500] 科学计算的一个环境
[05:21.500 --> 05:23.500] 这个其实是目前看起来是
[05:23.500 --> 05:24.500] 有一些替代品
[05:24.500 --> 05:26.500] 不过那些替代品的那个做法都是
[05:26.500 --> 05:29.500] 在后端有一个Docker或者是有Container
[05:29.500 --> 05:31.500] 就是帮你完成这些运算
[05:31.500 --> 05:32.500] 然后再给你传输过来
[05:32.500 --> 05:34.500] 那么在浏览器里直接运行的这个
[05:34.500 --> 05:37.500] 目前是有一些吧
[05:37.500 --> 05:38.500] 但是那些都不好用
[05:38.500 --> 05:39.500] 而且用起来非常麻烦
[05:39.500 --> 05:43.500] 比如说有一些人试图把Python或者Julia
[05:43.500 --> 05:46.500] 然后编译到这个WebAssembly上面
[05:46.500 --> 05:47.500] 然后在你的浏览器里运行
[05:47.500 --> 05:49.500] 那个实际上是
[05:49.500 --> 05:50.500] 那个是可以用的
[05:50.500 --> 05:51.500] 但那个东西你绝对不是
[05:51.500 --> 05:53.500] 不想多用那个东西
[05:53.500 --> 05:54.500] 所以我要给大家一个
[05:54.500 --> 05:55.500] 另外一个选择就是
[05:55.500 --> 05:58.500] 出发点就是思考如何让大家
[05:58.500 --> 06:01.500] 舒舒服服地用JavaScript
[06:01.500 --> 06:03.500] 在浏览器里运行
[06:03.500 --> 06:06.500] 这个是我的两个初衷吧基本上是
[06:06.500 --> 06:09.500] 对 然后其实立党刚才也差不多
[06:09.500 --> 06:10.500] 稍微聊了一下
[06:10.500 --> 06:13.500] 就是他为什么要写这个Hedgehog Lab
[06:13.500 --> 06:16.500] 我们是在提纲里列的是
[06:16.500 --> 06:19.500] 先打算从Python和科学计算
[06:19.500 --> 06:21.500] 这方面来聊起
[06:21.500 --> 06:23.500] 因为我们毕竟是一个Python的节目
[06:23.500 --> 06:25.500] 然后Hedgehog Lab从某种程度上
[06:25.500 --> 06:27.500] 也可以说是Metalab
[06:27.500 --> 06:29.500] 和像Python里的NumPy
[06:29.500 --> 06:31.500] 这些酷的一个竞争者对吧
[06:31.500 --> 06:33.500] 所以可以请立党先介绍一下
[06:33.500 --> 06:35.500] Metalab以及Python在科学计算领域
[06:35.500 --> 06:37.500] 是如何走向成功的
[06:37.500 --> 06:39.500] 好的
[06:39.500 --> 06:43.500] 实际上最近很多人看到Metalab
[06:43.500 --> 06:45.500] 对于哈固大的一个制裁
[06:45.500 --> 06:46.500] 就是注意到这个问题
[06:46.500 --> 06:47.500] 就是Metalab实际上
[06:47.500 --> 06:50.500] 它的发展是一个很偶然的情况
[06:50.500 --> 06:52.500] 就是它的主要作者
[06:52.500 --> 06:53.500] 就包括Metalab
[06:53.500 --> 06:54.500] 包括Mathematica
[06:54.500 --> 06:57.500] 都是大概是上个世纪七八十年代的时候
[06:57.500 --> 06:59.500] 然后他们自己做的一些东西
[06:59.500 --> 07:01.500] Metalab最早是用在教学里用的
[07:01.500 --> 07:02.500] 一个矩阵运算工具
[07:02.500 --> 07:05.500] 因为当时大部分人都是用一些
[07:05.500 --> 07:07.500] 类似于Bless、Lepak
[07:07.500 --> 07:09.500] 就是主要是用Fortune和C语言
[07:09.500 --> 07:11.500] 来进行一些科学运算
[07:11.500 --> 07:13.500] 那Metalab给大家一个环境就是说
[07:13.500 --> 07:14.500] 你不用安装不用编译
[07:14.500 --> 07:16.500] 然后打开就可以运行
[07:16.500 --> 07:20.500] 这个是一个对于学生和科研工作者来说
[07:20.500 --> 07:21.500] 是一个特别好的一个东西
[07:21.500 --> 07:23.500] 那他们看到了商业价值
[07:23.500 --> 07:24.500] 然后就把Metalab越做越大
[07:24.500 --> 07:25.500] 越做越大
[07:25.500 --> 07:27.500] 加入了其他很多Engineering领域里面的
[07:27.500 --> 07:28.500] 一些Core包之类的
[07:28.500 --> 07:30.500] 就是现在做得非常成功
[07:30.500 --> 07:31.500] Metalab和Mathematica
[07:31.500 --> 07:33.500] 还有一些Maple
[07:33.500 --> 07:34.500] 在上个世纪的时候
[07:34.500 --> 07:35.500] 基本上是
[07:35.500 --> 07:37.500] 我印象里是没有什么竞争对手的
[07:37.500 --> 07:39.500] 然后在2000年左右的时候
[07:39.500 --> 07:41.500] 应该是1990年的时候
[07:41.500 --> 07:42.500] Numpy出现了
[07:42.500 --> 07:46.500] 然后逐渐因为社区越来越倾向于Numpy
[07:46.500 --> 07:48.500] 越来越倾向于Scipy这些工具
[07:48.500 --> 07:50.500] 所以现在也看起来
[07:50.500 --> 07:52.500] Numpy基本上成为一个
[07:52.500 --> 07:54.500] Python中的一个
[07:54.500 --> 07:55.500] 科学计算的一个
[07:55.500 --> 07:56.500] 事实上的一个标准了吧
[07:56.500 --> 07:57.500] 基本上
[07:57.500 --> 07:58.500] 就是无论你用什么库
[07:58.500 --> 08:00.500] 都是绕不开Numpy的
[08:00.500 --> 08:01.500] 对,基本上是这样
[08:01.500 --> 08:04.500] 然后如果再多说一点就是
[08:04.500 --> 08:06.500] 其实我也是OpenCV的一个长期的用户
[08:06.500 --> 08:08.500] 然后我用OpenCV的最早的时候
[08:08.500 --> 08:10.500] 差不多就是2.x的一个时代
[08:10.500 --> 08:12.500] 但是我也知道OpenCV1.x的时代
[08:12.500 --> 08:13.500] 是一个什么样子的
[08:13.500 --> 08:15.500] 就是它那个时候好像是
[08:15.500 --> 08:18.500] 完全是用纯Seed的一堆函数
[08:18.500 --> 08:19.500] 然后输出都是纸针
[08:19.500 --> 08:21.500] 那个时候非常的
[08:21.500 --> 08:23.500] 不舒服不好用
[08:23.500 --> 08:24.500] 然后OpenCV2.0的时候
[08:24.500 --> 08:27.500] 就支持很多OOP的一些设计
[08:27.500 --> 08:29.500] 包括矩阵
[08:29.500 --> 08:32.500] 包括常用的一些工具都是OOP的
[08:32.500 --> 08:33.500] 就开始就非常舒服了
[08:33.500 --> 08:35.500] 然后那些以前的Seed API
[08:35.500 --> 08:37.500] 就逐渐的Deprecated
[08:37.500 --> 08:38.500] 就逐渐的不用了
[08:38.500 --> 08:39.500] 然后我印象里
[08:39.500 --> 08:40.500] 我不知道对不对
[08:40.500 --> 08:42.500] 但是OpenCV3.0的
[08:42.500 --> 08:43.500] 那个Alpha发布的时候
[08:43.500 --> 08:45.500] 是它首次支持了Python
[08:45.500 --> 08:47.500] 然后支持了Numpy
[08:47.500 --> 08:49.500] 然后那个也是我第一次知道
[08:49.500 --> 08:51.500] 原来还有Numpy这么好用的东西
[08:51.500 --> 08:54.500] 然后在OpenCV3.0之后
[08:54.500 --> 08:55.500] 就越来越多的人
[08:55.500 --> 08:57.500] 把自己的Image Processing
[08:57.500 --> 08:59.500] 就是传统的Image Processing的工作
[08:59.500 --> 09:01.500] 逐渐转移到了Python中
[09:01.500 --> 09:03.500] 因为Python和Numpy实在是太像了
[09:03.500 --> 09:05.500] 大家不想写C++了
[09:05.500 --> 09:06.500] 因为大家知道OpenCV
[09:06.500 --> 09:08.500] 每次的pre-build binary
[09:08.500 --> 09:11.500] 都是一堆的DLL或者是Library
[09:11.500 --> 09:13.500] 如果你在Visual Studio里面
[09:13.500 --> 09:14.500] 用这些东西真的是特别麻烦
[09:14.500 --> 09:16.500] 你就要一个一个把那些Header File
[09:16.500 --> 09:18.500] 一个一个Copy到某个地方
[09:18.500 --> 09:20.500] 然后用手把那个Lib文件
[09:20.500 --> 09:21.500] 把DLL文件
[09:21.500 --> 09:23.500] 一个一个放到他们需要的地方
[09:23.500 --> 09:25.500] 就很麻烦那个东西实际上
[09:25.500 --> 09:26.500] 然后你自己编译又很麻烦
[09:26.500 --> 09:29.500] 所以实际上我觉得就是
[09:29.500 --> 09:30.500] OpenCV是一个例子吧
[09:30.500 --> 09:32.500] 就是说大家越来越愿意
[09:32.500 --> 09:33.500] 用Python来进行科学计算
[09:33.500 --> 09:36.500] 而且真的是太像了
[09:36.500 --> 09:38.500] 然后我印象里
[09:38.500 --> 09:40.500] 我读到的
[09:40.500 --> 09:41.500] 有一篇Numpy的paper
[09:41.500 --> 09:42.500] 就是好像是说
[09:42.500 --> 09:44.500] 他们是在2000年左右吧
[09:44.500 --> 09:45.500] 好像是1.0的版本
[09:45.500 --> 09:46.500] 这个我记得不太清楚
[09:46.500 --> 09:47.500] 但是确实是
[09:47.500 --> 09:48.500] MathLab和Mathematica
[09:48.500 --> 09:49.500] 要差不多晚
[09:49.500 --> 09:50.500] 二三十年的时间吧
[09:50.500 --> 09:52.500] 然后直到Python变得火了以后
[09:52.500 --> 09:54.500] 然后Numpy这些
[09:54.500 --> 09:56.500] 这些库才变得特别火了起来
[09:56.500 --> 09:57.500] 然后
[09:57.500 --> 09:58.500] 它的因果关系
[09:58.500 --> 09:59.500] 不好意思打断
[09:59.500 --> 10:00.500] 它因果关系是这样的吗
[10:00.500 --> 10:02.500] 就是因为Python先火起来
[10:02.500 --> 10:03.500] 才带动Numpy的吗
[10:03.500 --> 10:06.500] 我怎么感觉是因为Numpy和
[10:06.500 --> 10:07.500] 就是Scipy
[10:07.500 --> 10:08.500] 这些东西的存在
[10:08.500 --> 10:10.500] 给Python续命了呢
[10:10.500 --> 10:11.500] 我觉得相辅相成吧
[10:11.500 --> 10:12.500] 相辅相成
[10:12.500 --> 10:14.500] 因为本来其实Python
[10:14.500 --> 10:16.500] 只在外部和一些
[10:16.500 --> 10:18.500] 就是韵味领域用的比较多嘛
[10:18.500 --> 10:21.500] 然后后来就是这两方面
[10:21.500 --> 10:22.500] 尤其是外部领域
[10:22.500 --> 10:24.500] 可能其他一些语言进来
[10:24.500 --> 10:25.500] 然后Python的氛围
[10:25.500 --> 10:26.500] 就受到了一些影响嘛
[10:26.500 --> 10:27.500] 然后但是
[10:27.500 --> 10:28.500] 后来机器学习逐渐火了之后
[10:28.500 --> 10:29.500] 大家发现
[10:29.500 --> 10:30.500] Python里还已经有
[10:30.500 --> 10:32.500] 这么完善的一个
[10:32.500 --> 10:34.500] 就是数值计算的生态了
[10:34.500 --> 10:35.500] 然后在上面
[10:35.500 --> 10:36.500] 构建各种机器学习的工具
[10:36.500 --> 10:37.500] 都非常方便
[10:37.500 --> 10:38.500] 所以我觉得
[10:38.500 --> 10:39.500] 就某种程度上
[10:39.500 --> 10:40.500] 我认为是
[10:40.500 --> 10:42.500] 算是给Python续了一命
[10:42.500 --> 10:43.500] 嗯对
[10:43.500 --> 10:45.500] 我也很认同这个看法
[10:45.500 --> 10:46.500] 相辅相成吧
[10:46.500 --> 10:47.500] 我觉得就是
[10:47.500 --> 10:48.500] 嗯
[10:48.500 --> 10:50.500] 然后其实现在的南派
[10:50.500 --> 10:51.500] 也并不是说
[10:51.500 --> 10:53.500] 我觉得连MATLAB的一个
[10:53.500 --> 10:54.500] 10%可能都取代不了
[10:54.500 --> 10:56.500] 因为MATLAB毕竟和Mathematica
[10:56.500 --> 10:57.500] 积累这么多年
[10:57.500 --> 10:58.500] 他们有很多很好的东西啊
[10:58.500 --> 11:00.500] 就是如果你安装MATLAB的话
[11:00.500 --> 11:02.500] 你会看到有一大堆的Toolbox
[11:02.500 --> 11:04.500] 有一大堆的Simulink可以用的
[11:04.500 --> 11:05.500] 然后你看到那个MATLAB的
[11:05.500 --> 11:06.500] 官方的文档
[11:06.500 --> 11:08.500] 有多如浩瀚的那些工具啊
[11:08.500 --> 11:09.500] 书啊之类的
[11:09.500 --> 11:10.500] 就是那些函数可以用的
[11:10.500 --> 11:12.500] 这个目前
[11:12.500 --> 11:13.500] 这也是一个商业主导
[11:13.500 --> 11:14.500] 和一个社区主导的
[11:14.500 --> 11:15.500] 一个区别吧
[11:15.500 --> 11:16.500] 就是商业主导的东西
[11:16.500 --> 11:17.500] 它会给你一个完全的
[11:17.500 --> 11:18.500] 好用的开箱机用的
[11:18.500 --> 11:19.500] 所有东西都在里面的
[11:19.500 --> 11:20.500] 一个东西
[11:20.500 --> 11:21.500] 然后你只要翻书
[11:21.500 --> 11:22.500] 翻文档就可以了
[11:22.500 --> 11:24.500] 但是南派Python的社区
[11:24.500 --> 11:25.500] 就是完全开源的
[11:25.500 --> 11:26.500] 那么你就需要自己去找
[11:26.500 --> 11:27.500] 自己去看
[11:27.500 --> 11:28.500] 然后自己去采坑
[11:28.500 --> 11:29.500] 然后没有人像这个东西
[11:29.500 --> 11:30.500] 对你负责
[11:30.500 --> 11:31.500] 就这个东西就是
[11:31.500 --> 11:32.500] 我觉得是两种风格吧
[11:32.500 --> 11:34.500] 就各有利弊了
[11:34.500 --> 11:35.500] 对
[11:35.500 --> 11:36.500] 包括最近两年看到的
[11:36.500 --> 11:37.500] 就是MATLAB
[11:37.500 --> 11:38.500] 支持了很多
[11:38.500 --> 11:39.500] 嵌入式的一些东西
[11:39.500 --> 11:40.500] 这个当然是很早支持了
[11:40.500 --> 11:41.500] 但是最近我发现MATLAB
[11:41.500 --> 11:42.500] 非常扯的一个事情
[11:42.500 --> 11:44.500] 就是非常牛逼的
[11:44.500 --> 11:45.500] 牛逼哄哄的一件事情
[11:45.500 --> 11:46.500] 就是它支持了一个
[11:46.500 --> 11:47.500] HDR CodeGen
[11:47.500 --> 11:48.500] 就是Code Generator
[11:48.500 --> 11:50.500] 就是给FPGA上的那些
[11:50.500 --> 11:53.500] 生成那些Verilog和VHDL
[11:53.500 --> 11:55.500] 就是以前人们要手写
[11:55.500 --> 11:57.500] FPGA上的Verilog或者VHDL
[11:57.500 --> 12:00.500] 然后现在有了很多的
[12:00.500 --> 12:02.500] 更高级的一些
[12:02.500 --> 12:03.500] High Level Synthesis
[12:03.500 --> 12:04.500] 或者是一些
[12:04.500 --> 12:05.500] 就生成这些东西的工具吧
[12:05.500 --> 12:06.500] 然后你们也知道
[12:06.500 --> 12:08.500] Risk5里面
[12:08.500 --> 12:09.500] 最近就是国科大
[12:09.500 --> 12:11.500] 他们用GSL和Scalar
[12:11.500 --> 12:13.500] 在写那些Risk5的工具
[12:13.500 --> 12:14.500] 但是MATLAB
[12:14.500 --> 12:15.500] 它已经支持把MATLAB
[12:15.500 --> 12:16.500] 那些所有的数值预测的工具
[12:16.500 --> 12:18.500] 直接生成Verilog和VHDL
[12:18.500 --> 12:19.500] 就是我觉得MATLAB
[12:19.500 --> 12:20.500] 已经今天是一个
[12:20.500 --> 12:21.500] 庞然大物的一个
[12:21.500 --> 12:22.500] 局外的一个东西
[12:22.500 --> 12:24.500] 就是力量几乎不可战胜
[12:24.500 --> 12:25.500] 是 对
[12:25.500 --> 12:26.500] 但它就是
[12:26.500 --> 12:27.500] 毕竟是一个商业软件
[12:27.500 --> 12:29.500] 所以它不是免费的
[12:29.500 --> 12:32.500] 然后可能对于某些人来说的话
[12:32.500 --> 12:33.500] 还是会略贵一点
[12:33.500 --> 12:35.500] 而且就是它这种
[12:35.500 --> 12:36.500] 我不知道你同不同意
[12:36.500 --> 12:37.500] 就是它算是一个
[12:37.500 --> 12:39.500] 比较封闭的生态吧
[12:39.500 --> 12:41.500] 不是特别容易和
[12:41.500 --> 12:42.500] 其他的一些东西
[12:42.500 --> 12:45.500] 比如说云上面的一些基础架构
[12:45.500 --> 12:47.500] 来结合起来
[12:47.500 --> 12:49.500] 所以 对
[12:49.500 --> 12:51.500] 实际上不只是这样
[12:51.500 --> 12:53.500] 就是开源社区的那些短板
[12:53.500 --> 12:55.500] 可能商业社区上都没有
[12:55.500 --> 12:56.500] 但是开源社区那些长处
[12:56.500 --> 12:57.500] 商业社区
[12:57.500 --> 12:58.500] 封闭的商业社区也没有
[12:58.500 --> 12:59.500] 比如说Machine Learning
[12:59.500 --> 13:00.500] 现在大家都在
[13:00.500 --> 13:02.500] 大家基本上都用Tensorflow
[13:02.500 --> 13:03.500] 或者PyTorch
[13:03.500 --> 13:04.500] 或者Queries这些工具来写
[13:04.500 --> 13:05.500] 那MATLAB实际上
[13:05.500 --> 13:07.500] 比他们要差一大截
[13:07.500 --> 13:09.500] 比如说
[13:09.500 --> 13:11.500] 他们那些库都支持ONNX
[13:11.500 --> 13:13.500] 但是MATLAB连ONNX
[13:13.500 --> 13:15.500] 在前几个版本里
[13:15.500 --> 13:16.500] 都支持的不完全
[13:16.500 --> 13:18.500] 就是你要是用
[13:18.500 --> 13:19.500] 做Deep Learning的话
[13:19.500 --> 13:21.500] MATLAB是很多很多最新的东西
[13:21.500 --> 13:22.500] 就不支持了
[13:22.500 --> 13:25.500] 这个东西真是让人很难受
[13:25.500 --> 13:27.500] 像星涛和小白
[13:27.500 --> 13:28.500] 我不知道你们做不做
[13:28.500 --> 13:29.500] 这方面的工作
[13:29.500 --> 13:32.500] 因为我做的比较少 其实
[13:32.500 --> 13:34.500] 我其实做的也比较少
[13:34.500 --> 13:36.500] 那个MATLAB跟Mathematica
[13:36.500 --> 13:39.500] 是不是都是自己的语言
[13:39.500 --> 13:41.500] 实际上是这样的
[13:41.500 --> 13:45.500] 就是MATLAB是一个更倾向于工程的
[13:45.500 --> 13:47.500] 然后Mathematica更倾向于符号计算
[13:47.500 --> 13:49.500] 和这个数学的版本
[13:49.500 --> 13:50.500] 这是我的这么理解
[13:50.500 --> 13:52.500] 实际上他们很多东西都是重叠的
[13:52.500 --> 13:53.500] 但是实际上用户群体
[13:53.500 --> 13:55.500] 是有一些不同的
[13:55.500 --> 13:58.500] 所以说你要是去用MATLAB的话
[13:58.500 --> 14:00.500] 你得去学习那个语言
[14:00.500 --> 14:01.500] 然后这个东西
[14:01.500 --> 14:02.500] 是可以跑在生产上的吗
[14:02.500 --> 14:05.500] 就是你可以把你的MATLAB的代码
[14:05.500 --> 14:07.500] 编译到比如说一个binary
[14:07.500 --> 14:08.500] 丢到机器上去跑
[14:08.500 --> 14:09.500] 可以的
[14:09.500 --> 14:10.500] 是可以的
[14:10.500 --> 14:12.500] 然后MATLAB还支持一些
[14:12.500 --> 14:14.500] 就是GUI的一些handler
[14:14.500 --> 14:17.500] 就是你可以生成一些在Windows
[14:17.500 --> 14:18.500] 或者是什么的一个
[14:18.500 --> 14:20.500] 有界面的一个东西可以跑
[14:20.500 --> 14:21.500] 对 我之前看过
[14:21.500 --> 14:24.500] 其实MATLAB是能够和
[14:24.500 --> 14:25.500] 其他一些东西集成起来
[14:25.500 --> 14:27.500] 比如说它可以生成DLL
[14:27.500 --> 14:28.500] 然后也可以生成
[14:28.500 --> 14:30.500] 能给Python调用的接口
[14:30.500 --> 14:32.500] 这些都是可以做到的
[14:32.500 --> 14:35.500] 而且MATLAB也可以调用其他的接口
[14:35.500 --> 14:36.500] 比如说你要有一个
[14:36.500 --> 14:37.500] 写好的C function
[14:37.500 --> 14:39.500] 你可以用包装成一个max function
[14:39.500 --> 14:40.500] 然后编译
[14:40.500 --> 14:41.500] 然后用到MATLAB里面
[14:41.500 --> 14:42.500] 都是可以的
[14:45.500 --> 14:47.500] 我的那个本科的毕业设计
[14:47.500 --> 14:48.500] 其实有一部分
[14:48.500 --> 14:49.500] 就是拿MATLAB写的
[14:49.500 --> 14:51.500] 然后是用Windows上的
[14:51.500 --> 14:53.500] 那个COMM那个接口
[14:53.500 --> 14:54.500] COM那个接口
[14:54.500 --> 14:56.500] 然后给Python去调
[14:56.500 --> 14:57.500] 当时还搞得
[14:57.500 --> 14:58.500] 因为我要用那个东西
[14:58.500 --> 15:00.500] 只有MATLAB里有
[15:00.500 --> 15:03.500] 所以就是关于那个
[15:03.500 --> 15:05.500] 音频处理的一些东西
[15:05.500 --> 15:06.500] 那小白呢
[15:06.500 --> 15:07.500] 不太多吧
[15:07.500 --> 15:09.500] MATLAB只是跟我朋友
[15:09.500 --> 15:12.500] 混那个初学建模的时候
[15:12.500 --> 15:13.500] 用过一点
[15:13.500 --> 15:14.500] 我也只是单纯的
[15:14.500 --> 15:15.500] 用它来读一下代码
[15:15.500 --> 15:16.500] 没用它来写
[15:16.500 --> 15:18.500] 然后我周围的大多数
[15:18.500 --> 15:20.500] 其实也是毕设的时候用的
[15:20.500 --> 15:22.500] 因为我本专业是学机械的
[15:22.500 --> 15:24.500] 他们很多是通过这个MATLAB
[15:24.500 --> 15:26.500] 来做一些数值分析
[15:26.500 --> 15:29.500] 然后包括我现在那个导师
[15:29.500 --> 15:31.500] 他手底下还有一个其他的项目
[15:31.500 --> 15:33.500] 也是在做这方面的东西
[15:33.500 --> 15:34.500] 用的也是MATLAB
[15:34.500 --> 15:36.500] 但是我其实用的并不是特别多
[15:37.500 --> 15:40.500] 对实际上就是MATLAB就是
[15:40.500 --> 15:42.500] 实际上反而Computer Science的人
[15:42.500 --> 15:43.500] 几乎不用MATLAB
[15:43.500 --> 15:45.500] 就是其他专业的那个人
[15:45.500 --> 15:46.500] 大家都提过用MATLAB
[15:46.500 --> 15:47.500] 就是因为开箱机用
[15:47.500 --> 15:48.500] 真的是一个特别好的一个东西
[15:48.500 --> 15:50.500] 就是无法拒绝太香了
[15:50.500 --> 15:51.500] 对对
[15:51.500 --> 15:55.500] 其实我给我那个一个学弟吧
[15:55.500 --> 15:56.500] 安利过Python
[15:56.500 --> 15:58.500] 但是对他来说
[15:58.500 --> 15:59.500] 他反而会更觉得
[15:59.500 --> 16:01.500] 就是MATLAB更香一点
[16:01.500 --> 16:03.500] 对正好聊到下面这个话题
[16:03.500 --> 16:06.500] 就是就我们大家都觉得Python
[16:06.500 --> 16:08.500] 是一个非常适合初学者的语言吧
[16:08.500 --> 16:12.500] 但其实力党觉得可能并不是这样
[16:12.500 --> 16:14.500] 然后我们让他来介绍一下
[16:14.500 --> 16:15.500] 为什么
[16:15.500 --> 16:17.500] 好的我今天给大家讲一个故事
[16:17.500 --> 16:20.500] 这个故事就是一些很聪明的人
[16:20.500 --> 16:22.500] 他为什么被Python劝退了
[16:22.500 --> 16:25.500] 就是他们要入学低能力成员
[16:25.500 --> 16:27.500] 大部分的情况下都是要学Python
[16:27.500 --> 16:29.500] 但是实际上Python的课
[16:29.500 --> 16:31.500] 大部分都是先教你print hello world
[16:31.500 --> 16:32.500] 然后for循环
[16:32.500 --> 16:34.500] if statement这种东西
[16:34.500 --> 16:36.500] 那实际上他们第一件事
[16:36.500 --> 16:38.500] 是要安装Python
[16:38.500 --> 16:40.500] 然后他们都用Windows的笔记本
[16:40.500 --> 16:43.500] 然后就一步一步下一步下一步下一步
[16:43.500 --> 16:44.500] 下一步下一步
[16:44.500 --> 16:45.500] 然后就就完了
[16:45.500 --> 16:46.500] 他们以为那个就完事了
[16:46.500 --> 16:47.500] 就可以就可以了
[16:47.500 --> 16:49.500] 然后他们打开了一个CMD
[16:49.500 --> 16:51.500] 然后开始运行CMD
[16:51.500 --> 16:52.500] 然后输入Python
[16:52.500 --> 16:54.500] 然后他们发现那个Python不在里面
[16:54.500 --> 16:55.500] 然后他们就开始就疯狂了
[16:55.500 --> 16:59.500] 就开始花真的是花一天到两天的时间
[16:59.500 --> 17:00.500] 去思考这个问题
[17:00.500 --> 17:02.500] 为什么我的Python就行不了
[17:02.500 --> 17:06.500] 然后实际上对于你可能对于你们来说
[17:06.500 --> 17:08.500] 这个就是就是连想都不用想的问题
[17:08.500 --> 17:09.500] 就是你把那个加到那个
[17:09.500 --> 17:11.500] System of Arrival Path里面就可以了
[17:11.500 --> 17:12.500] 但是对于他们来说
[17:12.500 --> 17:13.500] 他们没有那个概念
[17:13.500 --> 17:14.500] 不知道Python是什么
[17:14.500 --> 17:15.500] 不知道源代码是什么
[17:15.500 --> 17:16.500] 不知道Python安装在了哪里
[17:16.500 --> 17:19.500] 不知道command line如何是调用Python
[17:19.500 --> 17:22.500] 然后然后读取那个原文件
[17:22.500 --> 17:23.500] 那个东西对于他们来说
[17:23.500 --> 17:24.500] 真的是太难了
[17:24.500 --> 17:26.500] 就是就是有一个悖论吧
[17:26.500 --> 17:28.500] 就是知道者悖论还是什么悖论的
[17:28.500 --> 17:29.500] 就是你知道这个东西
[17:29.500 --> 17:30.500] 你就会觉得特别简单
[17:30.500 --> 17:31.500] 但是你不知道的时候
[17:31.500 --> 17:33.500] 你连那些不知道的人
[17:33.500 --> 17:36.500] 是怎么思考这个问题的过程都是不明白的
[17:36.500 --> 17:37.500] 所以就是学会了
[17:37.500 --> 17:38.500] 学会了的人是特别不理解
[17:38.500 --> 17:39.500] 他们为什么不能入门
[17:39.500 --> 17:42.500] 但是真的很多人就是按照这个逻辑
[17:42.500 --> 17:44.500] 就是用了一两天的时间
[17:44.500 --> 17:46.500] 没有把Python成功安装上
[17:46.500 --> 17:48.500] 然后没有成功运行第一行的print hello world
[17:48.500 --> 17:49.500] 然后就被劝退了
[17:49.500 --> 17:50.500] 这个是真实的情况
[17:50.500 --> 17:51.500] 而且他们不是傻子
[17:51.500 --> 17:55.500] 他们是就是都是世界前50的这个名校
[17:55.500 --> 17:56.500] 然后本科生
[17:56.500 --> 17:57.500] 只不过他们没有学这些
[17:57.500 --> 17:58.500] 他们没有接触过编程
[17:58.500 --> 17:59.500] 就是这个样子
[17:59.500 --> 18:00.500] 就是很可惜
[18:00.500 --> 18:01.500] 这个事情是很可惜的一个东西
[18:01.500 --> 18:03.500] 就是给大家一个开箱机用的一个东西
[18:03.500 --> 18:04.500] 是很重要的
[18:04.500 --> 18:06.500] 再一个就是很多人并不是程序员
[18:06.500 --> 18:08.500] 所以他们也不需要了解
[18:08.500 --> 18:10.500] 特别复杂的一些概念吧
[18:10.500 --> 18:11.500] 就是什么是interpreter
[18:11.500 --> 18:12.500] 什么是原文件
[18:12.500 --> 18:15.500] 什么是那个什么path
[18:15.500 --> 18:17.500] 什么是这个什么是IDE
[18:17.500 --> 18:18.500] 他们只需要一个东西
[18:18.500 --> 18:19.500] 就是打开然后写
[18:19.500 --> 18:21.500] 然后看结果
[18:21.500 --> 18:22.500] 然后他们只需要这么一个东西
[18:22.500 --> 18:24.500] 实际上就是他们不需要赖以为生的话
[18:24.500 --> 18:25.500] 就是只需要跑一个东西
[18:25.500 --> 18:27.500] 实际上他们需要一个简单的
[18:27.500 --> 18:28.500] 这么一个东西吧
[18:28.500 --> 18:29.500] 你说你说你的
[18:29.500 --> 18:32.500] 我就是说我刚才想杠一下
[18:32.500 --> 18:37.500] 就为什么他们不在遇到问题的时候
[18:37.500 --> 18:39.500] 或者说在安装Python之前
[18:39.500 --> 18:41.500] 去打开一科教程呢
[18:41.500 --> 18:43.500] 比如说如何在Windows安装Python
[18:43.500 --> 18:45.500] 那应该理论上就可以解决他们的问题
[18:45.500 --> 18:46.500] 对吧
[18:46.500 --> 18:47.500] 对
[18:47.500 --> 18:49.500] 但是理论上他们还要搜很多东西
[18:49.500 --> 18:50.500] 他们就是要搜很多的东西
[18:50.500 --> 18:52.500] 但是搜完这个东西
[18:52.500 --> 18:54.500] 你也不确定他们能不能看得懂
[18:54.500 --> 18:55.500] 就他们可能要打开YouTube视频
[18:55.500 --> 18:56.500] 然后一步一步做
[18:56.500 --> 18:58.500] 他们才能保证解决这个问题
[18:58.500 --> 18:59.500] 但是他们可能还有下一个问题
[18:59.500 --> 19:02.500] 比如说他们打开了Python的
[19:02.500 --> 19:04.500] 从在在那个命令行里面打开了Python
[19:04.500 --> 19:07.500] 然后他们需要输那个Four寻还
[19:07.500 --> 19:08.500] 然后他们对不起那个东西
[19:08.500 --> 19:10.500] 他们又要再要去搜索
[19:10.500 --> 19:12.500] 就他们会遇到种种种种这样的问题
[19:12.500 --> 19:14.500] 他们很多东西是不太能自己解决的吧
[19:14.500 --> 19:15.500] 我觉得
[19:15.500 --> 19:17.500] 再就是他们没有那个概念就是
[19:17.500 --> 19:19.500] 还是那个就是他没有Python的EXE的
[19:19.500 --> 19:20.500] 这个到底是干什么用的
[19:20.500 --> 19:21.500] 然后原文件是干什么用的
[19:21.500 --> 19:22.500] 他没有这个概念的情况下
[19:22.500 --> 19:24.500] 他们理解不了那些很多答案
[19:24.500 --> 19:26.500] 哪怕他们在Stackoverflow上面搜到了这些东西
[19:26.500 --> 19:27.500] 是的
[19:27.500 --> 19:29.500] 其实其他语言也有这个问题
[19:29.500 --> 19:32.500] 我感觉当时我们学校在教Java的时候
[19:32.500 --> 19:34.500] 然后我们那个Java的课都上到一半了
[19:34.500 --> 19:37.500] 还有就是上到一半了
[19:37.500 --> 19:38.500] 那个学期
[19:38.500 --> 19:41.500] 然后我们课上大部分人都还没有把那个Java
[19:41.500 --> 19:44.500] 加到他们的那个System Path里面
[19:44.500 --> 19:46.500] 然后我当时
[19:46.500 --> 19:49.500] 我当时是很少的加好了这几个
[19:49.500 --> 19:50.500] 我记得当时就几个人
[19:50.500 --> 19:54.500] 一个一个帮我们同学就把那个配置调好
[19:54.500 --> 19:57.500] 这个对于计算机系的学生来说都很难
[19:57.500 --> 20:01.500] 我感觉对其他人来说可能就更麻烦一些
[20:01.500 --> 20:03.500] 因为因为大部分人其实在
[20:03.500 --> 20:07.500] 大部分人在大学前是没有接触过计算机
[20:07.500 --> 20:08.500] 不要说编程
[20:08.500 --> 20:11.500] 就是说可能计算机的基本操作都成问题
[20:11.500 --> 20:12.500] 最多你也就打打游戏
[20:12.500 --> 20:15.500] 所以对所以那个
[20:15.500 --> 20:18.500] 偏偏提一下就是MIT现在不是有门课吗
[20:18.500 --> 20:20.500] 就是我忘了课名字叫什么
[20:20.500 --> 20:22.500] 他就是教你各种工具的使用
[20:22.500 --> 20:26.500] 比如说一些像Wim呀或者说Git呀
[20:26.500 --> 20:29.500] 还有就是一些命令行的工具吧
[20:29.500 --> 20:34.500] 就相当于是说你其实要学习编程的话
[20:34.500 --> 20:37.500] 你不光是要学习这门语言的语法
[20:37.500 --> 20:38.500] 学习怎么写程序
[20:38.500 --> 20:40.500] 你是要学习这整套的环境
[20:40.500 --> 20:42.500] 怎么把这套东西搭起来
[20:42.500 --> 20:44.500] 所以这方面也是有一定的学习成本的
[20:44.500 --> 20:45.500] 而他往往是被
[20:45.500 --> 20:48.500] 就是传统的编程教学里忽略的
[20:48.500 --> 20:49.500] 对对
[20:49.500 --> 20:53.500] 其实我想提另外一个东西就是
[20:53.500 --> 20:56.500] 很多人其实学编程不是为了当程序
[20:56.500 --> 20:58.500] 而是为了解决一些生活里的问题
[20:58.500 --> 20:59.500] 或者是工作中的问题
[20:59.500 --> 21:03.500] 所以他们希望整个技术站学习的总时间是最短的
[21:03.500 --> 21:04.500] 比如说他们
[21:04.500 --> 21:05.500] 打个比方吧
[21:05.500 --> 21:07.500] 计量经济学的那些人
[21:07.500 --> 21:11.500] 他们常用的有差不多有五六个工具吧
[21:11.500 --> 21:13.500] 我觉得可以分成两类
[21:13.500 --> 21:15.500] 就是简单的和难用的
[21:15.500 --> 21:18.500] 难用的就是R, MATLAB和Python
[21:18.500 --> 21:21.500] 这个三个是他们普遍认为难用的
[21:21.500 --> 21:23.500] 等会,MATLAB怎么被归成难用的
[21:23.500 --> 21:25.500] 你刚刚不是说好用吗
[21:25.500 --> 21:32.500] 对他们来说最难的是SPSS, STATA和SAS这三个东西
[21:32.500 --> 21:33.500] 都没用过
[21:33.500 --> 21:35.500] 这三个东西你们可能不了解里面是什么东西
[21:35.500 --> 21:37.500] 但是我很了解SATA这个工具
[21:37.500 --> 21:40.500] 因为SATA的创始人就是在我们学校的一个人
[21:40.500 --> 21:42.500] 就在学校旁边创业的这么一个东西
[21:42.500 --> 21:43.500] 这公司非常小
[21:43.500 --> 21:48.500] 但是他全世界的经济学家都会用SATA这个工具来分析他们的经济数据
[21:48.500 --> 21:50.500] 这个东西连编程语言都不是
[21:50.500 --> 21:52.500] 就是安装上之后
[21:52.500 --> 21:53.500] 然后有一个手册有几十页
[21:53.500 --> 21:56.500] 然后你到看完之后你就会完全用了
[21:56.500 --> 22:00.500] 他们会觉得MATLAB和R语言编程对于他们来说太难了
[22:00.500 --> 22:02.500] SATA是他们最喜欢的一个东西
[22:02.500 --> 22:06.500] 以至于我听说Amazon里面的一些经济学家们
[22:06.500 --> 22:09.500] 会要求那他们的Amazon的infra的那些人
[22:09.500 --> 22:12.500] 把数据输出成SATA的数据格式让他们来用
[22:12.500 --> 22:15.500] 就是因为他们如果有一个能半小时学会的东西
[22:15.500 --> 22:19.500] 他们绝对不会花一周的时间去再去学一个新的东西
[22:19.500 --> 22:22.500] 就是他们会有非程序员会有一个路径依赖
[22:22.500 --> 22:23.500] 就是他们不想学新的
[22:23.500 --> 22:24.500] 真的不想学新的东西了
[22:24.500 --> 22:28.500] 这个是很多人是设计东西的时候应该考虑下他们
[22:28.500 --> 22:29.500] 但是他们实际上是被忽略了
[22:29.500 --> 22:34.500] 然后他们会在很小众的商业领域里面去用他们的软件
[22:34.500 --> 22:38.500] SATA那个软件一年好像要几千美元吧
[22:38.500 --> 22:40.500] 好像是非常昂贵
[22:40.500 --> 22:44.500] 像你刚才说到像这个叫SATA
[22:44.500 --> 22:48.500] SATA这个软件它要看几十页的这种手册
[22:48.500 --> 22:51.500] 那它这个学习成本也不低啊
[22:51.500 --> 22:53.500] 但是它不需要了解很复杂的概念
[22:53.500 --> 22:56.500] 就是你要是学Python的话
[22:56.500 --> 23:02.500] 理解那些概念的成本对于他们的用户来说是更昂贵的实际上是
[23:02.500 --> 23:06.500] 那你觉得这个和现在比较流行的这种趋势
[23:06.500 --> 23:10.500] 就是所谓的低代码是不是一个意思呢
[23:10.500 --> 23:12.500] 低代码是
[23:12.500 --> 23:15.500] 我太理解这个是什么概念就是
[23:15.500 --> 23:20.500] 低代码就是相当于是对你大致就是说少用代码吧
[23:20.500 --> 23:24.500] 比如说很多东西都是
[23:24.500 --> 23:28.500] 是不是可以理解为就是所谓的function as a service
[23:28.500 --> 23:30.500] 就是一种低代码
[23:30.500 --> 23:32.500] 可以这么理解吗 信涛
[23:32.500 --> 23:35.500] 我也没听说过这个概念
[23:35.500 --> 23:37.500] 我觉得有一些吧
[23:37.500 --> 23:41.500] 但是在我理解来看来就是一个工具把所有的东西暴露给对方
[23:41.500 --> 23:43.500] 都是对方要关心的问题
[23:43.500 --> 23:46.500] 然后对方不关心的问题你不要让他再去考虑
[23:46.500 --> 23:48.500] 这个是一个从product manager的角度
[23:48.500 --> 23:50.500] 我觉得是一个特别好的一个东西
[23:50.500 --> 23:56.500] 对 因为那个pattern本来就不是设计给这种人来使用的
[23:56.500 --> 23:58.500] 比如说他可能看一个pattern的代码
[23:58.500 --> 24:00.500] 看了那个class肯定就懵了
[24:00.500 --> 24:02.500] 他根本就不知道面向对象这些概念
[24:02.500 --> 24:06.500] 对 像pipe这种东西很多人就直接懵了
[24:06.500 --> 24:07.500] 对
[24:07.500 --> 24:09.500] 那是不是可以这样说
[24:09.500 --> 24:13.500] 就是因为我们就你刚才列了一些好用的工具
[24:13.500 --> 24:14.500] 它基本都是图形化
[24:14.500 --> 24:17.500] 那是不是可以说就是对于非计算机专业的人来说
[24:17.500 --> 24:19.500] 不是图形化的吗
[24:19.500 --> 24:21.500] 不是 他们也是一行一行代码
[24:21.500 --> 24:23.500] 不过他对于法完全你是想象不到的
[24:23.500 --> 24:26.500] 有感兴趣的观众朋友们一定要去斯坦的官网看一下他们的教程
[24:26.500 --> 24:28.500] 那个东西如果你习惯了用
[24:28.500 --> 24:31.500] 写pattern或者写任何一个正常的编程语言
[24:31.500 --> 24:33.500] 你都不会容忍那个编程的方法
[24:33.500 --> 24:34.500] 那个东西就不是编程语言
[24:34.500 --> 24:36.500] 他们形容就是魔兽世界赛里的那个作弊码
[24:36.500 --> 24:38.500] 那种感觉是吧
[24:38.500 --> 24:39.500] 哦
[24:39.500 --> 24:43.500] 但是那个东西实际上接受的门槛是最最最低的
[24:43.500 --> 24:46.500] 就是pattern的门槛可能已经把很多人挡到外面了
[24:46.500 --> 24:49.500] 但是那个东西是把他们都又欢迎下来了
[24:49.500 --> 24:51.500] 就是我听到过一种说法
[24:51.500 --> 24:55.500] 就是就是很多在一些就是计算机科班出身的人士
[24:55.500 --> 24:58.500] 或者说程序员看来很容易理解的概念
[24:58.500 --> 25:00.500] 在普通人眼里其实是不容易理解的
[25:00.500 --> 25:03.500] 就比如说变量就很多人打死也理解不了变量
[25:03.500 --> 25:05.500] A等于1是什么意思
[25:05.500 --> 25:08.500] 好像是有这种情况
[25:08.500 --> 25:09.500] 对
[25:09.500 --> 25:10.500] 是的是的
[25:10.500 --> 25:11.500] 所以你看个斯坦的你就看
[25:11.500 --> 25:13.500] 你就了解一下他的那个设计哲学
[25:13.500 --> 25:14.500] 就是漏的一个什么东西
[25:14.500 --> 25:18.500] 然后好像就是真的就是出现到一个非常
[25:18.500 --> 25:20.500] 一个难以难以理解的地步
[25:20.500 --> 25:22.500] 那个东西就是如果你有了变化的概念
[25:22.500 --> 25:25.500] 你反而不能理解斯坦的这些工具到底是怎么设计的
[25:25.500 --> 25:26.500] 这个真的是特别
[25:26.500 --> 25:28.500] 那就是另一套的思维方式
[25:28.500 --> 25:29.500] 对
[25:29.500 --> 25:32.500] 然后其实pattern的手脚架实际上我觉得已经很麻烦了
[25:32.500 --> 25:36.500] 就是虽然你说可以pipe install什么东西
[25:36.500 --> 25:39.500] 或者是conda或者是requirement.txt
[25:39.500 --> 25:41.500] 这些东西都已经可以管理的很好
[25:41.500 --> 25:44.500] 但是我觉得就是把所有东西都放打包成一个东西
[25:44.500 --> 25:46.500] 一个产品给大家用是最好的
[25:46.500 --> 25:47.500] 如果不行的话
[25:47.500 --> 25:50.500] 我就是我的另外一个想法就是如果用户需要安装一个库的话
[25:50.500 --> 25:53.500] 我的我在Hedgehog Labs里面要实现一个东西
[25:53.500 --> 25:57.500] 就是他们import进来一个library的时候
[25:57.500 --> 25:58.500] 他们应该是用URL
[25:58.500 --> 26:04.500] 而不是从一个另外一个东西去直接像pipe install一样
[26:04.500 --> 26:05.500] 这样这样的话
[26:05.500 --> 26:08.500] 这样的话反而会给他们带来一些困扰吧
[26:08.500 --> 26:10.500] 现在好像单独是这样做的吧
[26:10.500 --> 26:13.500] 除了单独还有其他事有这样做的吗
[26:13.500 --> 26:14.500] import URL
[26:14.500 --> 26:17.500] go也是直接一个github的那个吗
[26:17.500 --> 26:18.500] go是吗
[26:18.500 --> 26:19.500] 你要是import URL的话
[26:19.500 --> 26:24.500] 它是会牵扯到一个下在运行过程中需要下载这个库的
[26:24.500 --> 26:24.500] 是的
[26:24.500 --> 26:26.500] 不过因为他们是科学运算的
[26:26.500 --> 26:28.500] 就是他们可以等10秒或者1秒钟都没有区别
[26:28.500 --> 26:29.500] 所以他们可以等
[26:29.500 --> 26:32.500] 对好像是这样
[26:32.500 --> 26:34.500] 照这么说
[26:34.500 --> 26:36.500] 那个Java应该也算是吧
[26:36.500 --> 26:38.500] Java是那个把域名反写吗
[26:38.500 --> 26:42.500] 所以域名也是不能这么说
[26:42.500 --> 26:43.500] 但是还是要在本地的呀
[26:43.500 --> 26:44.500] 我这个东西
[26:44.500 --> 26:44.500] 是的
[26:44.500 --> 26:44.500] 是的
[26:44.500 --> 26:47.500] 你说的是直接运行的时候就从那个URL下载
[26:47.500 --> 26:50.500] 对或者是我不知道你们最近用没用最近版本的MATLAB
[26:50.500 --> 26:54.500] 就是MATLAB实际上很多工具箱也是一个一个GUI的一个东西
[26:54.500 --> 26:55.500] 然后一键点击
[26:55.500 --> 26:57.500] 然后就可以下载下来就可以用了
[26:57.500 --> 26:59.500] 那个其实也是很很好的
[26:59.500 --> 27:03.500] 当然MATLAB还是允许大家就是下载一堆MFile
[27:03.500 --> 27:04.500] 然后放到一个文件夹里面
[27:04.500 --> 27:05.500] 你再去调用
[27:05.500 --> 27:08.500] 不过就是他们都会给那些
[27:08.500 --> 27:10.500] 连文件概念都没有的那些用户
[27:10.500 --> 27:13.500] 他们会给他们一些一些方法吧
[27:13.500 --> 27:15.500] 就让他们很好的去用
[27:15.500 --> 27:16.500] 我觉得这个是很贴心的一点
[27:16.500 --> 27:18.500] 就是一般来说
[27:18.500 --> 27:21.500] 开源社区都不会给大家想这些方法
[27:21.500 --> 27:24.500] 哪怕是MATLAB的最佳替代品
[27:24.500 --> 27:28.500] Octave他那个那个那个package management也是一团糟
[27:28.500 --> 27:30.500] 真的是很像噩梦一样
[27:30.500 --> 27:35.500] 但是就是就是一个一个一个东西的设计起来的时候
[27:35.500 --> 27:38.500] 你真的要考虑小白用户的痛点
[27:38.500 --> 27:40.500] 实际上是一个非常困难的事情
[27:40.500 --> 27:44.500] 就是就你刚才提到了Conda
[27:44.500 --> 27:48.500] 然后我觉得Conda是不是就是Python的Python里面
[27:48.500 --> 27:53.500] 比较符合你说的这种开箱机用理念的一个一套工具机
[27:53.500 --> 27:55.500] 就因为他有自己的package manager
[27:55.500 --> 27:59.500] 然后你的所有的操作都是在他那个里面去完成
[27:59.500 --> 28:01.500] 而不是用Pip in so什么的
[28:01.500 --> 28:03.500] 然后希拉玛也是在那个里面去写运行什么
[28:03.500 --> 28:05.500] 都是在那个环境里面
[28:05.500 --> 28:06.500] 对吧
[28:06.500 --> 28:07.500] 对是这样的
[28:07.500 --> 28:11.500] 但是你克服不了很多人对于命令行的恐惧
[28:11.500 --> 28:14.500] 就是很多人真的是很害怕命令行
[28:14.500 --> 28:15.500] 就是如果用熟的话
[28:15.500 --> 28:17.500] 当然用那个是完全没有问题的
[28:17.500 --> 28:18.500] 但是用不熟的话
[28:18.500 --> 28:20.500] 很多人还是害怕命令行
[28:20.500 --> 28:21.500] 可以理解
[28:21.500 --> 28:22.500] 对
[28:22.500 --> 28:24.500] 我有一个想法就是
[28:24.500 --> 28:26.500] 假如说我是做一个商业的东西
[28:26.500 --> 28:28.500] 那我肯定是用户越多
[28:28.500 --> 28:29.500] 我赚的钱越多吗
[28:29.500 --> 28:31.500] 反正多一个用户又没有成本
[28:31.500 --> 28:32.500] 但我会赚这么多钱
[28:32.500 --> 28:35.500] 但假如说我是一个做一个开源的
[28:35.500 --> 28:39.500] 那我感觉多个小白用户对我来说没啥影响
[28:39.500 --> 28:40.500] 我还是做开源的话
[28:40.500 --> 28:42.500] 还是比较希望能得到
[28:42.500 --> 28:45.500] 就是比较厉害的人的那些认可
[28:45.500 --> 28:48.500] 就是我希望很厉害的人来做我的用户
[28:48.500 --> 28:52.500] 但是我可能是懒得去支持那些小白用户
[28:52.500 --> 28:56.500] 比如说他过来问你那个配不安装的一些问题
[28:56.500 --> 28:59.500] 是这样的
[28:59.500 --> 29:00.500] 就是好多好
[29:00.500 --> 29:03.500] 我发现开源社区的大家其实都是很厉害
[29:03.500 --> 29:05.500] 然后大家也都是喜欢厉害的人
[29:05.500 --> 29:06.500] 欣赏自己的工作
[29:06.500 --> 29:09.500] 但是我这个初恋就不太一样了
[29:09.500 --> 29:11.500] 就是我觉得好像小白用户需要这么一个东西
[29:11.500 --> 29:12.500] 我就把它做出来了
[29:12.500 --> 29:13.500] 实际上就是这样子吧
[29:13.500 --> 29:15.500] 那我们就顺便接下来聊一下
[29:15.500 --> 29:17.500] Hedgehog Lab的起源和初衷吧
[29:17.500 --> 29:20.500] 首先Hedgehog的大家顾名思义就是
[29:20.500 --> 29:23.500] 刺猬就是我最喜欢的刺猬乐队
[29:23.500 --> 29:25.500] 就是去年我听那个乐队夏天
[29:25.500 --> 29:27.500] 然后就还挺喜欢这个乐队
[29:27.500 --> 29:30.500] 然后就顺便以他们的名字命名了这个项目
[29:30.500 --> 29:31.500] 我真的是很爱他们
[29:31.500 --> 29:34.500] 大家有机会的情况下去听一听乐队的夏天第一季
[29:34.500 --> 29:37.500] 刺猬乐队火车水上云外摸鞍魂一角销
[29:37.500 --> 29:39.500] 谢谢大家对于刺猬乐队的支持啊
[29:39.500 --> 29:42.500] 然后我最初的想法是
[29:42.500 --> 29:44.500] 我看到了那个
[29:44.500 --> 29:47.500] 我其实是一个对前端完全不理解的这么一个人
[29:47.500 --> 29:49.500] 就是完全不了解任何前端的技术
[29:49.500 --> 29:51.500] 但是我看到有Bible这么一个东西
[29:51.500 --> 29:52.500] 我觉得还挺有意思的
[29:52.500 --> 29:55.500] 他们官网上提供一些就是一个demo
[29:55.500 --> 29:57.500] 就是你左边可以输入JavaScript
[29:57.500 --> 29:58.500] 右边就输入一个什么东西
[29:58.500 --> 30:00.500] 然后我发现这个东西如果能支持
[30:00.500 --> 30:01.500] 等会儿稍等一下
[30:01.500 --> 30:05.500] 那个Bible不是那个把ES6转成ES5的那个玩意儿
[30:05.500 --> 30:07.500] 它也可以支持很多的插件
[30:07.500 --> 30:08.500] 就比如说呢
[30:08.500 --> 30:10.500] 你当时看到的是一个什么东西
[30:10.500 --> 30:12.500] 我当时看到的就是
[30:12.500 --> 30:14.500] 我当时看到的就是各种各样的插件嘛
[30:14.500 --> 30:17.500] 然后我看到了有人写了一个operator overload
[30:17.500 --> 30:19.500] 因为JavaScript的所有的operator
[30:19.500 --> 30:22.500] 加号全都是变成四不出来再加
[30:22.500 --> 30:23.500] 这个东西基本上没有人用
[30:23.500 --> 30:24.500] 所以需要一个operator overload
[30:24.500 --> 30:25.500] 让一个加号
[30:25.500 --> 30:26.500] 左边是矩阵右边是矩阵
[30:26.500 --> 30:28.500] 然后加起来还是一个矩阵
[30:28.500 --> 30:29.500] 或者是左边是矩阵
[30:29.500 --> 30:30.500] 然后乘以一个数字
[30:30.500 --> 30:33.500] 他们结果是一个矩阵乘以这个数字
[30:33.500 --> 30:34.500] 或者是左边是一个矩阵
[30:34.500 --> 30:36.500] 然后中间是一个hat
[30:36.500 --> 30:37.500] 一个三角形的这个符号
[30:37.500 --> 30:39.500] 右边是一个三次方
[30:39.500 --> 30:41.500] 然后矩阵就乘以自己三次
[30:41.500 --> 30:42.500] 这个东西是一个
[30:42.500 --> 30:44.500] 实际上就是一个科学计算的这些
[30:44.500 --> 30:47.500] 所有他们在语法设计上的一个最大的痛点吧
[30:47.500 --> 30:49.500] 所以我就用Babel在JavaScript里面
[30:49.500 --> 30:51.500] 写出来了这个东西了
[30:51.500 --> 30:53.500] 那他这个我不太了解
[30:53.500 --> 30:55.500] 他具体在JavaScript里面
[30:55.500 --> 30:58.500] 做operator overload是怎么做的呢
[30:58.500 --> 31:00.500] 就是首先你要定义一个symbol
[31:00.500 --> 31:05.500] 然后你要在那个class里面定义一个symbol
[31:05.500 --> 31:06.500] 然后for
[31:06.500 --> 31:09.500] 然后是你那个符号
[31:09.500 --> 31:11.500] 然后后面是一个函数
[31:11.500 --> 31:14.500] 然后你可以把你的right operand
[31:14.500 --> 31:17.500] 作为一个参数放到那个函数里面去
[31:17.500 --> 31:19.500] 然后你再去
[31:19.500 --> 31:21.500] 把你的left operand和right operand
[31:21.500 --> 31:23.500] 进行一些那个
[31:23.500 --> 31:25.500] 一些那个就是操作吧
[31:25.500 --> 31:26.500] 比如说矩阵加法
[31:26.500 --> 31:27.500] 就是把一个一个加起来
[31:27.500 --> 31:28.500] 你的所有操作都在那个函数里面
[31:28.500 --> 31:31.500] 然后在那个Babel的那个插件是
[31:31.500 --> 31:33.500] 最开始的是
[31:33.500 --> 31:35.500] 左边是一个matrix的类
[31:35.500 --> 31:36.500] 右边是一个matrix的类
[31:36.500 --> 31:38.500] 然后中间是那个symbol
[31:38.500 --> 31:39.500] 中间是一个operator
[31:39.500 --> 31:41.500] 然后后来我就增加了一些其他的扩展吧
[31:41.500 --> 31:43.500] 就是symbolic的那个类也支持了
[31:43.500 --> 31:44.500] 但是总体来说就是
[31:44.500 --> 31:46.500] 他把那个
[31:46.500 --> 31:48.500] 比如说C等于A加B
[31:48.500 --> 31:49.500] 这一段的那个加号
[31:49.500 --> 31:50.500] 换成了一个function
[31:50.500 --> 31:52.500] 然后先判断左边的那个operand
[31:52.500 --> 31:54.500] 是什么类
[31:54.500 --> 31:56.500] 右边的operand是什么类
[31:56.500 --> 31:57.500] 然后把那一整一整大段
[31:57.500 --> 31:59.500] 替换成了一个
[31:59.500 --> 32:00.500] Vanilla Javascript
[32:00.500 --> 32:01.500] 支持了一个一个字符串
[32:01.500 --> 32:03.500] 等于说你自己输入的是C等于A加B
[32:03.500 --> 32:04.500] 但实际上编译
[32:04.500 --> 32:06.500] 经过Babel和那个插件编译出来之后
[32:06.500 --> 32:07.500] 是一个C等于AB
[32:07.500 --> 32:08.500] 然后后面是一个function
[32:08.500 --> 32:10.500] 然后但实际上类型出来的结果
[32:10.500 --> 32:12.500] 就是一个C等于A加B
[32:12.500 --> 32:14.500] 这个东西是一个很讨巧的东西
[32:14.500 --> 32:16.500] 那在那个基础上呢
[32:16.500 --> 32:17.500] 我又增加了一些其他东西
[32:17.500 --> 32:21.500] 就是不只是支持right operand和left operand
[32:21.500 --> 32:24.500] 都是matrix类的这个东西
[32:24.500 --> 32:25.500] 还支持了就是比如说
[32:25.500 --> 32:28.500] 2D array, 1D array和这个scalar
[32:28.500 --> 32:30.500] 或者是就是一个数字
[32:30.500 --> 32:31.500] 这样的话就是
[32:31.500 --> 32:32.500] 让它更像mathlab一样
[32:32.500 --> 32:35.500] 就是你就是矩阵加减乘数一个shor
[32:35.500 --> 32:36.500] 或者是加减乘数一个二维的矩阵
[32:36.500 --> 32:38.500] 就是大家更舒服一点
[32:38.500 --> 32:44.500] 那我想从更就是细节的角度理解一下
[32:44.500 --> 32:46.500] 是不是就相当于说
[32:46.500 --> 32:51.500] 你首先是利用了Babel的这个插件的一个功能
[32:51.500 --> 32:54.500] 然后它提供给你的是这样一种
[32:54.500 --> 32:56.500] 做运算服务重载的机制
[32:56.500 --> 33:00.500] 然后你可以拿到就是左右两边的操作数
[33:00.500 --> 33:03.500] 然后你相当于要写一个这种函数去
[33:03.500 --> 33:06.500] 你会去判断一下左右两边分别是什么类型
[33:06.500 --> 33:08.500] 然后根据它的不同类型来
[33:08.500 --> 33:10.500] 来在下面做不同的处理是这样吗
[33:10.500 --> 33:11.500] 是这样的
[33:11.500 --> 33:13.500] OK,理解,差不多理解
[33:13.500 --> 33:14.500] 这个是矩阵运算
[33:14.500 --> 33:16.500] 然后对于那个符号运算就更简单了
[33:16.500 --> 33:17.500] 就是是这样的
[33:17.500 --> 33:19.500] 就是有一天我在Github上瞎逛
[33:19.500 --> 33:21.500] 然后发现了一个非常非常棒的一个库
[33:21.500 --> 33:22.500] 叫Nademer
[33:22.500 --> 33:25.500] 然后这个库是Javascript里面做符号运算的
[33:25.500 --> 33:26.500] 但是那个作者很苦逼
[33:26.500 --> 33:28.500] 因为没有人用Javascript做符号运算
[33:28.500 --> 33:30.500] 所以就没有人关注他那个库
[33:30.500 --> 33:31.500] 只有200多个行
[33:31.500 --> 33:32.500] 那个库的完整度是非常非常高
[33:32.500 --> 33:33.500] 非常非常好
[33:33.500 --> 33:35.500] 我之前特别喜欢那个作者
[33:35.500 --> 33:41.500] 就是他把那个Nademer用函数输入一个字符串
[33:41.500 --> 33:44.500] 字符串里面是X加上logX
[33:44.500 --> 33:45.500] 加上sineX
[33:45.500 --> 33:48.500] 加上什么1除以tangentX
[33:48.500 --> 33:49.500] 就是这种东西
[33:49.500 --> 33:51.500] 然后输出的也是一个字符串
[33:51.500 --> 33:55.500] 并且你还可以把它完美的变成一个Tag
[33:55.500 --> 33:56.500] Tag的一个字符串
[33:56.500 --> 33:58.500] 那么我觉得这个东西很好
[33:58.500 --> 33:59.500] 我就想支持一下
[33:59.500 --> 34:01.500] 我就给它写了一个非常简单的前端
[34:01.500 --> 34:02.500] 也是支持Operator Overload
[34:02.500 --> 34:04.500] 大家一看就明白那个东西
[34:04.500 --> 34:06.500] 就是左边的那个东西和右边的那个东西
[34:06.500 --> 34:07.500] 加在一起
[34:07.500 --> 34:08.500] 分别加上括号
[34:08.500 --> 34:11.500] 然后再加上那个Operator
[34:11.500 --> 34:12.500] 再加上那个括号
[34:12.500 --> 34:14.500] 总之就是一个套娃的一个东西
[34:14.500 --> 34:16.500] 然后把那个输入到它那个函数里面去
[34:16.500 --> 34:18.500] 然后我再把那个结果拿出来
[34:18.500 --> 34:19.500] 非常简单的一个东西
[34:19.500 --> 34:20.500] 但是那个东西效果是很好的
[34:20.500 --> 34:23.500] 大家可以看到Javascript里面支持了这么一个东西
[34:23.500 --> 34:25.500] 要不你先给听众们介绍一下
[34:25.500 --> 34:27.500] 什么是符号计算
[34:27.500 --> 34:30.500] 符号计算就是你可以定义一些符号
[34:30.500 --> 34:33.500] 然后你用一些表达式来写一些这个符号
[34:33.500 --> 34:36.500] 然后你可以对这个符号进行偏微分
[34:36.500 --> 34:39.500] 或者是积分或者是定积分
[34:39.500 --> 34:41.500] 就类似于这种东西吧
[34:41.500 --> 34:43.500] 或者是不只是一个符号
[34:43.500 --> 34:44.500] 或者是一个Vector
[34:44.500 --> 34:49.500] 然后你可以算它的Jacobian或者是Hessian
[34:49.500 --> 34:50.500] 或者是就是各种各样的
[34:50.500 --> 34:52.500] 你想对它怎么积分都可以
[34:52.500 --> 34:58.500] 那目前来说Mathematica应该是做符号计算最好的
[34:58.500 --> 34:59.500] 就是公认的数学系物理系
[34:59.500 --> 35:01.500] 大家都比较喜欢用的那个一个符号计算的工具
[35:01.500 --> 35:03.500] 然后MathLab也是非常不错的
[35:03.500 --> 35:06.500] 然后开源的方案有一些Sympy
[35:06.500 --> 35:09.500] 这个是一个Python里面的一个Symbolic Computation的这么一个工具
[35:09.500 --> 35:11.500] 然后基本上就是这么一情况吧
[35:11.500 --> 35:13.500] 就给它算了积分的就是
[35:13.500 --> 35:17.500] 然后我做了一半就发现这个东西还挺好的
[35:17.500 --> 35:18.500] 然后就把那Demo加进来了
[35:18.500 --> 35:20.500] 然后并且它支持输出的Tag
[35:20.500 --> 35:24.500] 然后我就顺手搜了一个叫MathJax
[35:24.500 --> 35:25.500] 好像是叫那个
[35:25.500 --> 35:29.500] 就是可以在网页里面插入那个公式吧
[35:29.500 --> 35:33.500] 然后我就很讨巧的把那个Demo输出的那些东西
[35:33.500 --> 35:36.500] 直接入到那个MathJax里面
[35:36.500 --> 35:38.500] 这样的话就好像仿佛是一个
[35:38.500 --> 35:41.500] 你直接算完积分之后就直接在网页里面
[35:41.500 --> 35:43.500] 可以显示这么一个东西
[35:43.500 --> 35:44.500] 就一切都是讨巧吧
[35:44.500 --> 35:45.500] 都是他们的工作
[35:45.500 --> 35:47.500] 然后我只是一个装订的
[35:47.500 --> 35:49.500] 把这些东西装订起来的一个人
[35:49.500 --> 35:54.500] 对就其实说可能JS商派里很多的东西都有
[35:54.500 --> 35:56.500] 像符号运算这种
[35:56.500 --> 36:00.500] 然后只是很以前缺一个这种把它整合起来的工具
[36:00.500 --> 36:01.500] 对吧和项目
[36:01.500 --> 36:06.500] 对包括我把那个数据画出来
[36:06.500 --> 36:08.500] 那个库叫一个PlotJS
[36:08.500 --> 36:09.500] 就相当于MathLab里面
[36:09.500 --> 36:11.500] 你Plot或者是一个2D的
[36:11.500 --> 36:15.500] 或者是Mesh一个一堆的数据
[36:15.500 --> 36:17.500] 但是那个东西他们的Demo实际上就是
[36:17.500 --> 36:19.500] 我看过他们的Demo就是读一个CSV文件
[36:19.500 --> 36:22.500] 然后有一个巨大巨长的一个东西
[36:22.500 --> 36:23.500] 然后处理那个矩阵
[36:23.500 --> 36:26.500] 或者是处理一个一些那个数据计算
[36:26.500 --> 36:27.500] 然后我觉得那个东西
[36:27.500 --> 36:30.500] 如果那个东西我现在到那个Hedgehog Lab里面
[36:30.500 --> 36:31.500] 大家可以在那个Tutorial里面看一下
[36:31.500 --> 36:34.500] 那个就是很方便的就把那个东西画出来
[36:34.500 --> 36:36.500] 就像MathLab一样简单
[36:36.500 --> 36:38.500] 就是如果你要是把那个数据都准备好的话
[36:38.500 --> 36:40.500] 就是其实就是很多东西都有了
[36:40.500 --> 36:42.500] 就是缺这么一个编程环境
[36:42.500 --> 36:44.500] 还有那个Markdown都是这样的
[36:44.500 --> 36:48.500] 然后我看你还写了GPU加速对吧
[36:48.500 --> 36:50.500] 对GPU加速是个很恶心的事情
[36:50.500 --> 36:53.500] 就是因为并不是像大家想象的
[36:53.500 --> 36:55.500] 就是有就开始我跟另外一个人讨论
[36:55.500 --> 36:57.500] 就是说GPU加速是个挺好的东西
[36:57.500 --> 36:59.500] 他说为什么不用CUDA
[36:59.500 --> 37:01.500] 我说浏览器里没有CUDA这种东西
[37:01.500 --> 37:05.500] 然后是只有一个GPU.js
[37:05.500 --> 37:07.500] 是一个目前主流浏览器
[37:07.500 --> 37:08.500] 都支持了一个GPU加速
[37:08.500 --> 37:12.500] 那么实际上那个东西还是
[37:12.500 --> 37:14.500] 那个东西还是它有一个编译器的前端
[37:14.500 --> 37:17.500] 它要把你的函数编译到它的那个
[37:17.500 --> 37:19.500] 它里面那些Operand
[37:19.500 --> 37:20.500] 编译到一个东西吧
[37:20.500 --> 37:22.500] 然后反正到它那个Texture里面
[37:22.500 --> 37:24.500] 在WebGL的Texture里面
[37:24.500 --> 37:25.500] 然后输出那个东西
[37:25.500 --> 37:26.500] 所以那个GPU加速
[37:26.500 --> 37:28.500] 有很大很大的overhead
[37:28.500 --> 37:29.500] 就是你要编一个东西
[37:29.500 --> 37:31.500] 实际上前面要花很长很长的时间
[37:31.500 --> 37:34.500] 然后只能是对于一些大矩阵的
[37:34.500 --> 37:36.500] 一些这个乘法是有很快的加速吧
[37:36.500 --> 37:38.500] 就是你要是1000x1000的矩阵
[37:38.500 --> 37:40.500] 那用GPU加速实际上是能加速
[37:40.500 --> 37:43.500] 差不多看到有10倍左右吧
[37:43.500 --> 37:46.500] 就是能保证那个矩阵运算的乘法
[37:46.500 --> 37:48.500] 跟你在Blast或者是Lapack
[37:48.500 --> 37:50.500] CPU上运行的那个
[37:50.500 --> 37:54.500] CPU上没有加速的那个速度是一样的
[37:54.500 --> 37:56.500] 就因为GPU好像就是
[37:56.500 --> 37:58.500] 就是始终
[37:58.500 --> 38:00.500] 因为毕竟都是在那个
[38:00.500 --> 38:02.500] 浏览器的那个V8里面运行的
[38:02.500 --> 38:05.500] 就是始终要比原生的那些
[38:05.500 --> 38:07.500] 要慢一个数量级吧
[38:07.500 --> 38:08.500] 这个真的是没有办法
[38:08.500 --> 38:10.500] 但是你要想用舒服的话
[38:10.500 --> 38:11.500] 其实用户也不在乎这一秒钟
[38:11.500 --> 38:13.500] 或者0.1秒钟的这个东西
[38:13.500 --> 38:15.500] 然后有很多东西实际上是可以在
[38:15.500 --> 38:17.500] 浏览器里GPU加速的
[38:17.500 --> 38:19.500] 但是很多深度学习的框架
[38:19.500 --> 38:23.500] 比如说TensorFlop.js
[38:23.500 --> 38:26.500] 或者是微软的那个ONNX.js
[38:26.500 --> 38:28.500] 他们都是用了WebGL
[38:28.500 --> 38:30.500] 或者是更接近的一点
[38:30.500 --> 38:32.500] 用苹果的那个WebGPU
[38:32.500 --> 38:33.500] 直接来加速
[38:33.500 --> 38:35.500] 不过他们那个写的
[38:35.500 --> 38:36.500] 都是手写shading language
[38:36.500 --> 38:38.500] 就是很麻烦很麻烦的那些东西
[38:38.500 --> 38:40.500] 所以如果在浏览器里面
[38:40.500 --> 38:42.500] 像Hedgehog Lab给大家提供一个
[38:42.500 --> 38:43.500] 就是很简单就是
[38:43.500 --> 38:44.500] 比如说矩阵
[38:44.500 --> 38:45.500] 给他提供一个那个东西
[38:45.500 --> 38:47.500] 就是.mod等于GPU的话
[38:47.500 --> 38:49.500] 那用户用起来就是很开心
[38:49.500 --> 38:50.500] 那就是一个
[38:50.500 --> 38:52.500] 他会很愿意去用
[38:52.500 --> 38:54.500] 因为其他库他们也用
[38:54.500 --> 38:56.500] 浏览器的WebGL加速的话
[38:56.500 --> 38:57.500] 就他们会觉得那个东西是
[38:57.500 --> 38:59.500] 哎呀我也不能复用
[38:59.500 --> 39:00.500] 然后只能就是
[39:00.500 --> 39:01.500] 他们提供什么接口我就用什么
[39:01.500 --> 39:03.500] 就很可惜
[39:03.500 --> 39:04.500] 他们很多东西就浪费掉了
[39:04.500 --> 39:06.500] 就是没有编上基础的人
[39:06.500 --> 39:08.500] 是不是连GPU是什么都不知道
[39:08.500 --> 39:09.500] 然后你搞一个GPU
[39:09.500 --> 39:10.500] 然后他们不会用
[39:10.500 --> 39:11.500] 对,所以就是
[39:11.500 --> 39:12.500] 我给他们一个最简单的方法
[39:12.500 --> 39:13.500] 就是让他们记住
[39:13.500 --> 39:17.500] 只要把这个矩阵.mod等于GPU
[39:17.500 --> 39:19.500] 然后他们一个1000x1000的矩阵乘法
[39:19.500 --> 39:20.500] 就会加速10倍
[39:20.500 --> 39:23.500] 就是给他们灌输这么一个概念就可以了
[39:23.500 --> 39:25.500] 你这个就像我昨天说的
[39:25.500 --> 39:26.500] 你就应该直接做进去
[39:26.500 --> 39:28.500] 你就不应该让用户选择
[39:28.500 --> 39:30.500] 你就应该判断什么是最快的
[39:30.500 --> 39:32.500] 这个是应该做的
[39:32.500 --> 39:33.500] 但我觉得对
[39:33.500 --> 39:38.500] 就是确实从降低编程门槛的角度来讲
[39:38.500 --> 39:41.500] 还是一个非常好的项目
[39:41.500 --> 39:46.500] 好,那我们聊完了Hedgehog的一些实现的细节
[39:46.500 --> 39:50.500] 那关于它的未来你是有怎样的规划呢
[39:50.500 --> 39:51.500] 没有规划
[39:51.500 --> 39:52.500] 而且不仅是没有规划
[39:52.500 --> 39:55.500] 而且我已经在社区里面装死了好久
[39:55.500 --> 39:57.500] 因为现在社区里面
[39:57.500 --> 40:00.500] 大家的那个共享的代码真的是很厉害
[40:00.500 --> 40:02.500] 我也非常感谢社区的大佬们
[40:02.500 --> 40:04.500] 现在他们把我的代码重构了
[40:04.500 --> 40:08.500] 是一个比较合格的前端的项目
[40:08.500 --> 40:11.500] 大佬们就是基本上带我
[40:11.500 --> 40:14.500] 我就是滑雪躺赢的这么一个人
[40:14.500 --> 40:16.500] 目前来说有几个重要的feature我要写完
[40:16.500 --> 40:18.500] 写完之后就至少是可以给大家用
[40:18.500 --> 40:20.500] 然后可以给大家在那个
[40:20.500 --> 40:24.500] 不管是教学还是实际的生产
[40:24.500 --> 40:26.500] 或者是你要用什么东西都可以直接用了
[40:26.500 --> 40:28.500] 这个东西还没有写好
[40:28.500 --> 40:32.500] 这个东西会在后面的里面写好吧
[40:32.500 --> 40:34.500] 现在也没有什么未来吧
[40:34.500 --> 40:37.500] 毕竟就是一个开源的项目
[40:37.500 --> 40:39.500] 我可能会问一些人
[40:39.500 --> 40:41.500] 问问他们会不会愿意在学校里面
[40:41.500 --> 40:42.500] 会用我这个东西
[40:42.500 --> 40:46.500] 但是我也不确定他们会不会用
[40:46.500 --> 40:47.500] 基本就这么情况
[40:47.500 --> 40:49.500] 因为我前段时间在知乎上面用标题党
[40:49.500 --> 40:51.500] 然后拉了很多仇恨
[40:51.500 --> 40:54.500] 比如说国产MetLife突然宣布特朗普傻眼了
[40:54.500 --> 40:57.500] 或者是什么什么这种话
[40:57.500 --> 41:02.500] 我觉得当时就是为了吸引大家的眼光吧
[41:02.500 --> 41:04.500] 我真的没有一个特别长远的打算
[41:04.500 --> 41:05.500] 但是我有一些打算
[41:05.500 --> 41:07.500] 就是我首先我在GitHub上面
[41:07.500 --> 41:11.500] 开了一个叫reply1988的情况下1988
[41:11.500 --> 41:12.500] 就是因为我很喜欢这个电视剧
[41:12.500 --> 41:14.500] 我就以他的这个电视剧的名字命名这个库了
[41:14.500 --> 41:18.500] 就是我希望写一个用Hedgehog的语法
[41:18.500 --> 41:21.500] 完成了一个简单的机器学习的这么一个库吧
[41:21.500 --> 41:23.500] 就是至少是让那些
[41:23.500 --> 41:26.500] 比如说让那些计量经济学的人
[41:26.500 --> 41:27.500] 他们关心的一些算法
[41:27.500 --> 41:30.500] 是能用在这个Hedgehog Lab里面
[41:30.500 --> 41:31.500] 比如说计量经济学
[41:31.500 --> 41:34.500] 他们要做一个东西就是
[41:34.500 --> 41:37.500] 输入一个CSV的文件
[41:37.500 --> 41:38.500] 里面是一个大的表
[41:38.500 --> 41:39.500] 然后里面比如说这个年份
[41:39.500 --> 41:41.500] 然后这个什么数一堆数
[41:41.500 --> 41:43.500] 然后他们需要一个跑一个最简单的
[41:43.500 --> 41:44.500] 一个linear regression
[41:44.500 --> 41:46.500] 或者是logistic regression的这么一个东西
[41:46.500 --> 41:48.500] 那我会写好一个给他们
[41:48.500 --> 41:51.500] 然后让他们第一行import这么一个东西
[41:51.500 --> 41:53.500] 第二行把你们要的那个数
[41:53.500 --> 41:55.500] 那个哪一行的哪一列抽出来
[41:55.500 --> 41:56.500] 第三行跑一个regression
[41:56.500 --> 41:57.500] 第四行输出
[41:57.500 --> 41:58.500] 我就会给他们一个这么一个
[41:58.500 --> 41:59.500] 简单的一个东西
[41:59.500 --> 42:00.500] 看看他们会不会接受吧
[42:00.500 --> 42:02.500] 然后我觉得这个是一个
[42:02.500 --> 42:04.500] 可能的一个方向吧
[42:04.500 --> 42:07.500] 就是作为开源版的Stata
[42:07.500 --> 42:09.500] 代替Stata的原来的一些用户
[42:09.500 --> 42:11.500] 我倒从来没有想过代替那个
[42:11.500 --> 42:13.500] Jupyter Notebook或者是CodeLab
[42:13.500 --> 42:15.500] 因为那些往往都是面向于那些
[42:15.500 --> 42:18.500] 计算量极其繁重的那些功能
[42:18.500 --> 42:19.500] 所以基本上不太可能代替
[42:19.500 --> 42:21.500] 但是我觉得以后有机会的话
[42:21.500 --> 42:24.500] 会写一些轻量级的计算
[42:24.500 --> 42:25.500] 我觉得是可以代替的
[42:25.500 --> 42:26.500] 就是比如说就跑一个
[42:26.500 --> 42:27.500] 简单的一个矩阵
[42:27.500 --> 42:28.500] 拿一些计算什么之类的
[42:28.500 --> 42:30.500] 我觉得是可以的
[42:30.500 --> 42:32.500] 再有一个是可能会
[42:32.500 --> 42:34.500] 写一些更好的一些
[42:34.500 --> 42:37.500] 能够复用的一些函数吧
[42:37.500 --> 42:38.500] 在GPU加速里面
[42:38.500 --> 42:41.500] 因为现在好像大家每个库
[42:41.500 --> 42:43.500] 都是自己写一个GPU加速
[42:43.500 --> 42:44.500] 但是在浏览器里面的
[42:44.500 --> 42:46.500] 但是实际上就浪费了很多
[42:46.500 --> 42:47.500] 人力和物力吧
[42:47.500 --> 42:48.500] 希望大家都以后都
[42:48.500 --> 42:50.500] 在Hedgehog Script里面写
[42:50.500 --> 42:52.500] 这样也会轻松一些
[42:52.500 --> 42:54.500] 所以你这个语言正式的名称
[42:54.500 --> 42:56.500] 是Hedgehog Script是吗
[42:56.500 --> 42:58.500] 没有我自己编的
[42:58.500 --> 42:59.500] 这个不确定
[42:59.500 --> 43:00.500] 如果有更好的名字
[43:00.500 --> 43:01.500] 可以再改一下
[43:01.500 --> 43:02.500] 可能后期把Hedgehog
[43:02.500 --> 43:03.500] 这个名字都要拿掉
[43:03.500 --> 43:04.500] 有可能
[43:04.500 --> 43:05.500] 因为Hedgehog毕竟
[43:05.500 --> 43:06.500] 太长了
[43:06.500 --> 43:07.500] 一个是太长了
[43:07.500 --> 43:08.500] 再有一个是大家也不太知道
[43:08.500 --> 43:09.500] 这是什么意思
[43:09.500 --> 43:10.500] 再有一个Hedgehog Lab
[43:10.500 --> 43:11.500] 已经是被一个公司
[43:11.500 --> 43:12.500] 也注册掉了
[43:12.500 --> 43:13.500] 就是一个应该是在伦敦的
[43:13.500 --> 43:15.500] 一个做手机APP外包的
[43:15.500 --> 43:16.500] 这么一个公司
[43:16.500 --> 43:17.500] 给用掉了
[43:17.500 --> 43:18.500] 然后他们当初注册这个名字
[43:18.500 --> 43:20.500] 所以我也不好意思用了
[43:20.500 --> 43:22.500] 可以叫HScript
[43:22.500 --> 43:23.500] 也可以吧
[43:23.500 --> 43:24.500] 也可以
[43:24.500 --> 43:25.500] 这个以后再说吧
[43:25.500 --> 43:26.500] 这个
[43:26.500 --> 43:28.500] 但是就是我有一点
[43:28.500 --> 43:29.500] 很愤怒的
[43:29.500 --> 43:30.500] 就是大家实际上
[43:30.500 --> 43:31.500] Python现在已经变成了
[43:31.500 --> 43:32.500] 科学计算的一个
[43:32.500 --> 43:33.500] 不用的标准了吧
[43:33.500 --> 43:35.500] 就是大家什么东西都要
[43:35.500 --> 43:36.500] 做到Python上面
[43:36.500 --> 43:37.500] 然后实际上Python上面
[43:37.500 --> 43:40.500] 大家都是用的Cpython
[43:40.500 --> 43:41.500] 然后导致就是
[43:41.500 --> 43:42.500] 好像你要用Python
[43:42.500 --> 43:43.500] 就一定要兼容Cpython
[43:43.500 --> 43:44.500] 就是一定要把Cpython
[43:44.500 --> 43:46.500] 编译到另外一个东西上面
[43:46.500 --> 43:47.500] 比如说把Cpython
[43:47.500 --> 43:49.500] 跑到WebAssembly上面
[43:49.500 --> 43:51.500] 或者是在其他的
[43:51.500 --> 43:53.500] 这种CPU架构里面
[43:53.500 --> 43:55.500] 要完美地兼容
[43:55.500 --> 43:56.500] Numpy或者是什么之类的
[43:56.500 --> 43:57.500] 我觉得这个是
[43:57.500 --> 43:58.500] 你不能说不好吧
[43:58.500 --> 43:59.500] 这个就是已经
[43:59.500 --> 44:00.500] 路径一代
[44:00.500 --> 44:01.500] 大家已经成这样
[44:01.500 --> 44:02.500] 就是你要用的话
[44:02.500 --> 44:03.500] 其实是只有一个方法
[44:03.500 --> 44:04.500] 但是我觉得
[44:04.500 --> 44:06.500] 就是大家可以想一下
[44:06.500 --> 44:07.500] 就是不一定以后
[44:07.500 --> 44:09.500] 都要用Python来计算吧
[44:09.500 --> 44:11.500] 就是如果有些更好的工具
[44:11.500 --> 44:12.500] 比如说JavaScript
[44:12.500 --> 44:13.500] 在浏览器里面
[44:13.500 --> 44:15.500] 其实大家是可以考虑一下的
[44:15.500 --> 44:16.500] 我觉得就是
[44:16.500 --> 44:18.500] 还是生态的一个问题吧
[44:18.500 --> 44:19.500] 但是那个生态
[44:19.500 --> 44:20.500] 那个生态有的时候
[44:20.500 --> 44:21.500] 反而是个累赘
[44:21.500 --> 44:22.500] 比如说你一定要支持
[44:22.500 --> 44:24.500] Numpy的情况下
[44:24.500 --> 44:25.500] 那Mozilla它自己
[44:25.500 --> 44:26.500] 支持了一个项目
[44:26.500 --> 44:28.500] 叫IoDyte
[44:28.500 --> 44:30.500] 就是它把整个的Python
[44:30.500 --> 44:32.500] 放到了WebAssembly上面
[44:32.500 --> 44:34.500] 那那个东西实际上
[44:34.500 --> 44:35.500] 它成功了
[44:35.500 --> 44:36.500] 但是那个东西
[44:36.500 --> 44:38.500] 跑起来是很慢的
[44:38.500 --> 44:40.500] 而且是你也不太可能
[44:40.500 --> 44:42.500] 在那里面再import
[44:42.500 --> 44:43.500] 其他的一个库
[44:43.500 --> 44:44.500] 那个东西都很麻烦
[44:44.500 --> 44:45.500] 就是为了兼容Python
[44:45.500 --> 44:46.500] 实际上让我觉得
[44:46.500 --> 44:47.500] 他们反而是
[44:47.500 --> 44:48.500] 有点南辕北辙的意思吧
[44:48.500 --> 44:49.500] 他们本来是为了
[44:49.500 --> 44:50.500] 让大家在浏览器里
[44:50.500 --> 44:51.500] 做科学计算
[44:51.500 --> 44:52.500] 但实际上他们
[44:52.500 --> 44:53.500] 为了让大家用而兼容
[44:53.500 --> 44:54.500] 一些东西
[44:54.500 --> 44:55.500] 然后导致那个东西
[44:55.500 --> 44:56.500] 是更麻烦
[44:56.500 --> 44:57.500] 大家不想用了
[44:57.500 --> 44:59.500] 他们应该是
[44:59.500 --> 45:01.500] 也把Numpy和Scipy
[45:01.500 --> 45:03.500] 编译成了WebAssembly
[45:03.500 --> 45:04.500] 对吧
[45:04.500 --> 45:05.500] 是这样的
[45:05.500 --> 45:06.500] 但是再有些其他的东西
[45:06.500 --> 45:07.500] 比如说
[45:07.500 --> 45:08.500] 用Scipy里面的一些
[45:08.500 --> 45:10.500] Optimization的一些东西
[45:10.500 --> 45:12.500] 别人也打包成好了一个库
[45:12.500 --> 45:13.500] 然后又发布到
[45:13.500 --> 45:14.500] 其他上面去
[45:14.500 --> 45:15.500] 我不知道他们
[45:15.500 --> 45:16.500] 那个能不能用
[45:16.500 --> 45:17.500] 我可以试一下
[45:17.500 --> 45:18.500] 但是那个确实是
[45:18.500 --> 45:19.500] 有一点慢
[45:19.500 --> 45:20.500] 而且他们没有GPU加速
[45:20.500 --> 45:21.500] 还是
[45:21.500 --> 45:22.500] 看起来还是Hedgehog Lab
[45:22.500 --> 45:23.500] 更厉害一些
[45:23.500 --> 45:24.500] 哇
[45:24.500 --> 45:25.500] Hedgehog Lab
[45:26.500 --> 45:28.500] 我有一个问题
[45:28.500 --> 45:30.500] 就是前面已经介绍了一下
[45:30.500 --> 45:33.500] 这个东西的下限
[45:33.500 --> 45:34.500] 然后我想知道
[45:34.500 --> 45:35.500] 这个东西上限
[45:35.500 --> 45:36.500] 是由什么东西决定的
[45:36.500 --> 45:37.500] 就是比如说
[45:37.500 --> 45:38.500] 我是
[45:38.500 --> 45:39.500] 它这个东西
[45:39.500 --> 45:40.500] 计算的速度
[45:40.500 --> 45:42.500] 是跟什么相关的
[45:42.500 --> 45:43.500] 首先它的那个速度
[45:43.500 --> 45:46.500] 是跟那个V8里面
[45:46.500 --> 45:48.500] 如何优化这些相关的吧
[45:48.500 --> 45:49.500] 我觉得就是
[45:49.500 --> 45:50.500] 有很多东西
[45:50.500 --> 45:51.500] V8里面的东西
[45:51.500 --> 45:52.500] 我也不知道
[45:52.500 --> 45:53.500] 所以
[45:53.500 --> 45:55.500] 但是我现在知道的就是
[45:55.500 --> 45:56.500] 有一些非常小的矩阵
[45:56.500 --> 45:57.500] 如果你做乘法的话
[45:57.500 --> 45:58.500] 那个东西优化起来
[45:58.500 --> 45:59.500] 是非常快的
[45:59.500 --> 46:00.500] 可能跟V8里面
[46:00.500 --> 46:01.500] 那些caching的一些策略
[46:01.500 --> 46:02.500] 是有关系的吧
[46:02.500 --> 46:04.500] 然后如果你那个
[46:04.500 --> 46:05.500] 矩阵非常非常大
[46:05.500 --> 46:07.500] 那他们没有办法保证
[46:07.500 --> 46:08.500] 那个东西
[46:08.500 --> 46:09.500] 完全在cache里面的话
[46:09.500 --> 46:10.500] 那个会很慢
[46:10.500 --> 46:12.500] 比如说1000x1000的矩阵
[46:12.500 --> 46:13.500] 它就你会发现
[46:13.500 --> 46:14.500] 它会慢好几个数量级下来
[46:14.500 --> 46:15.500] 那这个就是一个
[46:15.500 --> 46:16.500] 性能上的一个问题
[46:16.500 --> 46:17.500] 所以它里面的优化策略
[46:17.500 --> 46:19.500] 现在对我来说
[46:19.500 --> 46:20.500] 是一个黑箱
[46:20.500 --> 46:21.500] 因为他们也没有
[46:21.500 --> 46:22.500] 好像没有一个
[46:22.500 --> 46:23.500] 完整的一个文档
[46:23.500 --> 46:24.500] 说是数值计算
[46:24.500 --> 46:26.500] 或者是二维矩阵
[46:26.500 --> 46:27.500] 那个乘法
[46:27.500 --> 46:28.500] 他们是怎么优化的
[46:28.500 --> 46:29.500] 但是我觉得这个
[46:29.500 --> 46:30.500] 是一个可以考虑的问题
[46:30.500 --> 46:31.500] 就是说
[46:31.500 --> 46:32.500] 如果有他们给了
[46:32.500 --> 46:33.500] 更多的机会
[46:33.500 --> 46:34.500] 能去优化的话
[46:34.500 --> 46:35.500] 我觉得优化一下
[46:35.500 --> 46:36.500] 这些东西是很好的
[46:36.500 --> 46:37.500] 然后再有一个就是
[46:37.500 --> 46:38.500] JavaScript里面
[46:38.500 --> 46:42.500] 所有的数字都是64位复典数
[46:42.500 --> 46:43.500] 那这个东西占据内存很大
[46:43.500 --> 46:44.500] 所以说内存
[46:44.500 --> 46:45.500] 也是一个大家的瓶颈
[46:45.500 --> 46:46.500] 就是比如说
[46:46.500 --> 46:48.500] 10000x10000的一个矩阵
[46:48.500 --> 46:49.500] 很可能就把很多人的
[46:49.500 --> 46:50.500] 内存给吃干净了
[46:50.500 --> 46:52.500] 所以这个也是一个瓶颈
[46:52.500 --> 46:54.500] 我觉得这个是两个上限
[46:54.500 --> 46:55.500] 如果这个两个上限
[46:55.500 --> 46:56.500] 拖不了的话
[46:56.500 --> 46:57.500] 很难让它跑一些
[46:57.500 --> 47:00.500] 负载非常巨大的一些运算
[47:00.500 --> 47:02.500] 是那我觉得这两个问题
[47:02.500 --> 47:04.500] 感觉都不是那么容易解决
[47:04.500 --> 47:05.500] 是的
[47:05.500 --> 47:08.500] 但是就是
[47:08.500 --> 47:09.500] 轻量的运算
[47:09.500 --> 47:10.500] 还是可以解决
[47:10.500 --> 47:13.500] 比如说1000x100的
[47:13.500 --> 47:15.500] 一个Data Set
[47:15.500 --> 47:16.500] 一个数据集
[47:16.500 --> 47:19.500] 你跑一个
[47:19.500 --> 47:22.500] SVM或者是一些小的一些模型
[47:22.500 --> 47:23.500] 我觉得是可以的
[47:23.500 --> 47:24.500] 就是速度不会很慢
[47:24.500 --> 47:26.500] 而且用户毕竟他可以等
[47:26.500 --> 47:28.500] 就是他不像那些
[47:28.500 --> 47:30.500] 他打开浏览器
[47:30.500 --> 47:32.500] 他毕竟他
[47:32.500 --> 47:34.500] 如果他不会用Python的话
[47:34.500 --> 47:35.500] 他只会用这个的话
[47:35.500 --> 47:36.500] 他大概率对于这个速度上
[47:36.500 --> 47:37.500] 是会有一些容忍的
[47:37.500 --> 47:39.500] 那么他就会一直在等
[47:39.500 --> 47:40.500] 比如说跑
[47:40.500 --> 47:42.500] 让他用MACLAB
[47:42.500 --> 47:44.500] 然后跑一秒钟
[47:44.500 --> 47:45.500] 用这个跑十秒钟
[47:45.500 --> 47:46.500] 他可能会更倾向于这个
[47:46.500 --> 47:47.500] 因为打开网页
[47:47.500 --> 47:48.500] 然后就可以跑了
[47:48.500 --> 47:50.500] 他们是有这个容忍度的
[47:50.500 --> 47:51.500] 我怎么感觉你就是
[47:51.500 --> 47:53.500] 对性能自暴自弃了
[47:53.500 --> 47:55.500] 我还有一个问题就是
[47:55.500 --> 47:57.500] 你像那如果是
[47:57.500 --> 47:58.500] 普通的那个
[47:58.500 --> 47:59.500] 我用MACLAB的话
[47:59.500 --> 48:00.500] 我运算一个东西
[48:00.500 --> 48:01.500] 我放这等
[48:01.500 --> 48:03.500] 我可能这个过程中
[48:03.500 --> 48:04.500] 我用这个电脑干点别的
[48:04.500 --> 48:05.500] 可能对这个结果
[48:05.500 --> 48:07.500] 并不会特别影响
[48:07.500 --> 48:08.500] 但如果说
[48:08.500 --> 48:10.500] 我是在浏览器里的话
[48:10.500 --> 48:14.500] 那我就是在这运行一个运算之后
[48:14.500 --> 48:15.500] 我用浏览器
[48:15.500 --> 48:16.500] 再做一些其他操作的话
[48:16.500 --> 48:17.500] 会不会影响到
[48:17.500 --> 48:20.500] 就是正在跑的这个运算
[48:20.500 --> 48:21.500] 如果你切到后台的话
[48:21.500 --> 48:22.500] 也会影响
[48:22.500 --> 48:24.500] 就是他可能会把你的一些数字
[48:24.500 --> 48:25.500] 一些数据
[48:25.500 --> 48:26.500] 开辟出来
[48:26.500 --> 48:29.500] 那一大块内存的矩阵都给你都给你删了
[48:29.500 --> 48:31.500] 就是浏览器会非常在意
[48:31.500 --> 48:32.500] 用户的那个什么
[48:32.500 --> 48:34.500] 所以你必须要把浏览器打开
[48:34.500 --> 48:36.500] 而且必须在前面跑着
[48:36.500 --> 48:37.500] 确实会这样
[48:37.500 --> 48:38.500] 但是
[48:40.500 --> 48:41.500] 还是那句话
[48:41.500 --> 48:42.500] 如果他需要负载很大的运算
[48:42.500 --> 48:45.500] 他就可能会想别的去了
[48:45.500 --> 48:47.500] 那我觉得这个东西的使用场景
[48:47.500 --> 48:51.500] 基本上就是就被局限的比较厉害了吧
[48:51.500 --> 48:53.500] 就因为这上线没办法
[48:53.500 --> 48:54.500] 没办法那个延展的话
[48:54.500 --> 48:56.500] 他这样的话
[48:56.500 --> 48:58.500] 但实际上一般人也没有那么大的
[48:58.500 --> 49:00.500] 巨大的一个一个
[49:00.500 --> 49:02.500] 一个运算的一个一个需求
[49:02.500 --> 49:04.500] 如果他不是跑Neural Network的话
[49:04.500 --> 49:07.500] 或者他不是跑一个巨大的一个矩阵的
[49:07.500 --> 49:08.500] 一个乘法的话
[49:08.500 --> 49:10.500] 他只要他的复杂度控制下来的话
[49:10.500 --> 49:11.500] 是是有可能的
[49:11.500 --> 49:12.500] 再有比如说他跑一个巨大的矩阵
[49:12.500 --> 49:14.500] 但是他可以把那个矩阵
[49:14.500 --> 49:16.500] 转换成一个虚数矩阵的一个形式
[49:16.500 --> 49:18.500] 那么也有可能把这复杂度降下来
[49:18.500 --> 49:20.500] 总之这次乱七八糟就是想办法
[49:20.500 --> 49:22.500] 把他的复杂度降下来
[49:22.500 --> 49:25.500] 就是这是一个最好的方法
[49:25.500 --> 49:27.500] 你有没有想过
[49:27.500 --> 49:29.500] 仅仅把HashHog
[49:29.500 --> 49:30.500] 或者叫HashHogScript
[49:30.500 --> 49:31.500] 或者叫HashHogLab
[49:31.500 --> 49:33.500] 反正就是这样一个东西
[49:33.500 --> 49:34.500] 作为一个前端
[49:34.500 --> 49:37.500] 然后后面再去
[49:37.500 --> 49:39.500] 比如说他去跟一个服务器通信
[49:39.500 --> 49:40.500] 然后你实际上的计算
[49:40.500 --> 49:42.500] 是跑在服务器上的
[49:42.500 --> 49:44.500] 这个你有想过吗
[49:44.500 --> 49:45.500] 有空就做吧
[49:45.500 --> 49:48.500] 有空我再做吧
[49:48.500 --> 49:50.500] 因为因为TensorFlow.js
[49:50.500 --> 49:53.500] 他们后端好像也有一些是
[49:53.500 --> 49:55.500] 好像是有一些Bluetooth
[49:55.500 --> 49:57.500] 或者是可以直接用
[49:57.500 --> 49:59.500] 本机的OpenBluetooth
[49:59.500 --> 50:01.500] 所以那个就是原生的性能了
[50:01.500 --> 50:02.500] 这个是很好的
[50:02.500 --> 50:03.500] 但是前提是那个东西
[50:03.500 --> 50:05.500] 你要运行在Note.js里面
[50:05.500 --> 50:06.500] 所以我觉得
[50:06.500 --> 50:07.500] 我觉得就是
[50:07.500 --> 50:08.500] 我觉得是可以的
[50:08.500 --> 50:09.500] 就是可以的
[50:09.500 --> 50:11.500] 就是裁缝密码
[50:11.500 --> 50:12.500] 但是你肯定不可能
[50:12.500 --> 50:13.500] 跑到用户的机器上吧
[50:13.500 --> 50:15.500] 这个性能受制太大了
[50:15.500 --> 50:16.500] 但是你
[50:16.500 --> 50:17.500] 比如你跑到一个集群上
[50:17.500 --> 50:20.500] 那还是很有想象空间的
[50:20.500 --> 50:21.500] 我觉得就至少从性能
[50:21.500 --> 50:22.500] 这个角度来说
[50:22.500 --> 50:24.500] 我觉得那未来
[50:24.500 --> 50:25.500] 有没有可能说
[50:25.500 --> 50:29.500] 会把这个东西打包成一个.exe
[50:29.500 --> 50:30.500] 这个很容易啊
[50:30.500 --> 50:32.500] 你拿Electron写一下不就行了
[50:32.500 --> 50:33.500] 那这样的话
[50:33.500 --> 50:35.500] 它是不是就可以解决
[50:35.500 --> 50:38.500] 它跟浏览器的这个冲突问题
[50:38.500 --> 50:40.500] 可以吧应该可以
[50:40.500 --> 50:42.500] 但这样就需要下载
[50:42.500 --> 50:44.500] 需要安装
[50:44.500 --> 50:46.500] 本来直接打开浏览器就可以跑
[50:46.500 --> 50:48.500] 或者是用React Native
[50:48.500 --> 50:50.500] 然后重装成一个原生的一个
[50:50.500 --> 50:51.500] 其实都可以
[50:51.500 --> 50:52.500] 现在最大的问题就是
[50:52.500 --> 50:54.500] 很多人有很多想象的空间
[50:54.500 --> 50:56.500] 我社区有一个朋友
[50:56.500 --> 50:58.500] 非常棒的一个哥们
[50:58.500 --> 51:00.500] 他帮我把那个Hatch Hub Runtime
[51:00.500 --> 51:01.500] 给独立出来了
[51:01.500 --> 51:03.500] 然后导致就是你在其他
[51:03.500 --> 51:04.500] 独立出来一个Runtime
[51:04.500 --> 51:06.500] 就相当于那个Runtime
[51:06.500 --> 51:07.500] 你可以跑到其他
[51:07.500 --> 51:08.500] 纤维式的一些单键机啊
[51:08.500 --> 51:10.500] 或者是一些低性能的SoC上面
[51:10.500 --> 51:11.500] 就是那个性能
[51:11.500 --> 51:12.500] 当然是不能跟一些
[51:12.500 --> 51:15.500] 深度优化过的一些OpenBLAST
[51:15.500 --> 51:17.500] 或者是一些其他可以相比
[51:17.500 --> 51:19.500] 但是就是你写一份代码
[51:19.500 --> 51:20.500] 都可以跑到浏览器里面
[51:20.500 --> 51:21.500] 也可以跑到嵌入室里面
[51:21.500 --> 51:22.500] 就是很简单
[51:22.500 --> 51:24.500] 但是就是大家想象的空间
[51:24.500 --> 51:25.500] 实际上很丰富
[51:25.500 --> 51:27.500] 但是最大的瓶颈是我的能力
[51:27.500 --> 51:28.500] 就是我太菜了
[51:28.500 --> 51:29.500] 就是前端
[51:29.500 --> 51:30.500] 我不是前端的一个合格的开发者
[51:30.500 --> 51:32.500] 所以好东西我也能想到
[51:32.500 --> 51:33.500] 但是怎么做我就很麻烦
[51:33.500 --> 51:34.500] 你知道这个东西
[51:34.500 --> 51:36.500] 我花费的时间最多的是在那个
[51:36.500 --> 51:37.500] 是在那个花界面上面
[51:37.500 --> 51:38.500] 知道吗
[51:38.500 --> 51:39.500] 就是用那个如何学习那个React
[51:39.500 --> 51:40.500] 这个东西
[51:40.500 --> 51:41.500] 是我花时间最多的东西
[51:41.500 --> 51:42.500] 就是哎呀
[51:42.500 --> 51:43.500] 怎么着也学不会
[51:43.500 --> 51:44.500] 然后求爷爷高奶奶
[51:44.500 --> 51:46.500] 让一堆人帮我
[51:46.500 --> 51:48.500] 然后他们也是磨磨唧唧的
[51:48.500 --> 51:50.500] 后来是社区的朋友们帮我
[51:50.500 --> 51:51.500] 真的是
[51:51.500 --> 51:53.500] 我想起来有一个叫
[51:53.500 --> 51:55.500] 那个渐进式Web的东西
[51:55.500 --> 51:56.500] 就是说你的网站掉线了
[51:56.500 --> 51:58.500] 但是你还是可以打开这个东西
[51:58.500 --> 51:59.500] 打开那个网站来算
[51:59.500 --> 52:00.500] 我感觉你可以做成那种
[52:00.500 --> 52:01.500] 而且这个
[52:01.500 --> 52:02.500] 对就PWA吗
[52:02.500 --> 52:04.500] 对PWA
[52:04.500 --> 52:06.500] 然后这个PWA可以安装到
[52:06.500 --> 52:07.500] 就是Mac上
[52:07.500 --> 52:08.500] 就相当于
[52:08.500 --> 52:10.500] 对可以安装到桌面上
[52:10.500 --> 52:11.500] 可以安装到手机的那个
[52:11.500 --> 52:12.500] 手机的App
[52:12.500 --> 52:14.500] 可以安装到iOS上面的一个桌面的图标
[52:14.500 --> 52:15.500] 对对对
[52:15.500 --> 52:16.500] 是的
[52:16.500 --> 52:18.500] 对但是他有一个小问题
[52:18.500 --> 52:19.500] 就是他的那个
[52:19.500 --> 52:23.500] PWA的进展不是挺不尽人意的吗
[52:23.500 --> 52:24.500] 那个其实还好
[52:24.500 --> 52:25.500] 就是现在有一个比较大的问题
[52:25.500 --> 52:27.500] 好像他那个好像就是
[52:27.500 --> 52:28.500] local storage
[52:28.500 --> 52:30.500] 就是好像他好像只有主流
[52:30.500 --> 52:32.500] 主流的浏览器都只给你25兆的
[52:32.500 --> 52:34.500] 一个一个存储
[52:34.500 --> 52:36.500] 那个实际上是很小的
[52:36.500 --> 52:39.500] 这个不够吗
[52:39.500 --> 52:41.500] 如果TensorFlow.js
[52:41.500 --> 52:43.500] 那个打包编译完之后的那个JS
[52:43.500 --> 52:44.500] 那个整个那个文件是
[52:44.500 --> 52:46.500] 他差不多就有几兆了
[52:46.500 --> 52:47.500] 你如果要把那几个东西
[52:47.500 --> 52:48.500] catch到本地之后
[52:48.500 --> 52:50.500] 就已经不太够了
[52:50.500 --> 52:51.500] 就已经
[52:51.500 --> 52:52.500] 就浏览器这个环境
[52:52.500 --> 52:54.500] 本身还是有一定的限制
[52:54.500 --> 52:55.500] 就感觉
[52:55.500 --> 52:57.500] 整个浏览器给你的所有的功能
[52:57.500 --> 52:58.500] 还是那个runtime
[52:58.500 --> 53:00.500] 就是都是给我一种
[53:00.500 --> 53:02.500] 就是在刀尖上跳舞的这种感觉
[53:02.500 --> 53:03.500] 就是只能拿它当黑箱
[53:03.500 --> 53:05.500] 然后咱也不能往里边说
[53:05.500 --> 53:06.500] 让他们给咱干点什么东西
[53:06.500 --> 53:07.500] 就是只能说您给我什么
[53:07.500 --> 53:08.500] 我这个做点什么的
[53:08.500 --> 53:09.500] 就是这种
[53:09.500 --> 53:10.500] 对
[53:10.500 --> 53:12.500] 因为本来这个项目
[53:12.500 --> 53:13.500] 因为本来这个项目
[53:13.500 --> 53:15.500] 就是让用户打开浏览器就能用嘛
[53:15.500 --> 53:16.500] 所以对
[53:16.500 --> 53:17.500] 假如说要做其他的
[53:17.500 --> 53:19.500] 需要用户去做的东西的话
[53:19.500 --> 53:20.500] 感觉就跟原来那种
[53:20.500 --> 53:22.500] 开箱机用又离得远了一点
[53:22.500 --> 53:24.500] 我觉得你这个就两条发展方向
[53:24.500 --> 53:25.500] 就是两个版本
[53:25.500 --> 53:27.500] 一个HashHog Lite
[53:27.500 --> 53:29.500] 就是完全在浏览器的本机运行
[53:29.500 --> 53:31.500] 就是没有什么
[53:31.500 --> 53:33.500] 就是你本机能跑多快
[53:33.500 --> 53:34.500] 它就跑多快
[53:34.500 --> 53:35.500] 然后一个是HashHog Pro
[53:35.500 --> 53:39.500] 就是说你的浏览器就是个前端
[53:39.500 --> 53:41.500] 然后所有东西都要在服务器上计算
[53:41.500 --> 53:42.500] 然后这个东西是收费的
[53:42.500 --> 53:43.500] 对吧
[53:43.500 --> 53:47.500] 然后你可以处理任意大小的数据
[53:47.500 --> 53:50.500] 这不就是一个很好的计划吗
[53:50.500 --> 53:51.500] 感觉
[53:51.500 --> 53:52.500] 还是很有前景
[53:52.500 --> 53:54.500] 对 但是这个东西实际上
[53:54.500 --> 53:56.500] 实际上这个就涉及到另一个问题
[53:56.500 --> 53:58.500] 就是不太会有人会想
[53:58.500 --> 54:00.500] 以这个观点
[54:00.500 --> 54:02.500] 以这个想法成立一个公司
[54:02.500 --> 54:04.500] 或者是成立
[54:04.500 --> 54:06.500] 就好像商业运作这个东西
[54:06.500 --> 54:07.500] 是一个很困难的东西
[54:07.500 --> 54:09.500] 首先我是不太可能商业运作
[54:09.500 --> 54:10.500] 再商业运作另外一个公司
[54:10.500 --> 54:11.500] 这个对我来说是不可能的
[54:11.500 --> 54:13.500] 然后好像也没有看到谁
[54:13.500 --> 54:14.500] 对这个东西感兴趣
[54:14.500 --> 54:15.500] 大家就是觉得
[54:15.500 --> 54:17.500] 目前有什么就有什么用什么
[54:17.500 --> 54:19.500] 好多开源项目就觉得
[54:19.500 --> 54:20.500] 你觉得很有商业前景
[54:20.500 --> 54:22.500] 实际上是那就是一个终点
[54:22.500 --> 54:24.500] 它就没有再发展下去了
[54:24.500 --> 54:26.500] 就是是什么样就是什么样
[54:26.500 --> 54:28.500] 然后大家也没有精力再去维护了
[54:28.500 --> 54:30.500] 很多时候需要有一些公司
[54:30.500 --> 54:33.500] 或者是去支持着你再去支持
[54:33.500 --> 54:34.500] 再去维护吧
[54:34.500 --> 54:35.500] 就是这个东西
[54:35.500 --> 54:36.500] 我觉得是是这个样子
[54:36.500 --> 54:38.500] 比如说很难再去举一个例子
[54:38.500 --> 54:39.500] 比如说
[54:39.500 --> 54:42.500] 我不知道这个他们社区有没有这个公司
[54:42.500 --> 54:44.500] 但是安娜康达是有公司的
[54:44.500 --> 54:45.500] 就是他们是在奥斯汀的一个公司
[54:45.500 --> 54:48.500] 就是好像就是那个老大爷
[54:48.500 --> 54:51.500] 好像就是专门做这个康达一些
[54:51.500 --> 54:53.500] 相关的生态的一些东西吧
[54:53.500 --> 54:55.500] 我觉得需要一些公司
[54:55.500 --> 54:57.500] 或者是基金会去支持一些东西吧
[54:57.500 --> 54:58.500] 但我是完全是没有的
[54:58.500 --> 55:00.500] 就是全而且我的社区的那些大佬们
[55:00.500 --> 55:01.500] 都是完全自愿的
[55:01.500 --> 55:03.500] 就是贡献这个东西的
[55:03.500 --> 55:07.500] 其实就是我觉得Hedgehog的社区
[55:07.500 --> 55:10.500] 是一个非常让人羡慕的开源社区吧
[55:10.500 --> 55:11.500] 某种程度上可以这么讲
[55:11.500 --> 55:12.500] 然后我们就顺便聊一下
[55:12.500 --> 55:14.500] 开源社区治理这个方面吧
[55:14.500 --> 55:16.500] 为什么我说令人羡慕呢
[55:16.500 --> 55:19.500] 因为就是你这个项目开源了
[55:19.500 --> 55:20.500] 差不多几周之后
[55:20.500 --> 55:22.500] 然后就有很多的Country Builder
[55:22.500 --> 55:23.500] 开始加入进来
[55:23.500 --> 55:25.500] 然后就是相当于把界面
[55:25.500 --> 55:26.500] 整个都重写了吧
[55:26.500 --> 55:28.500] 然后他不光是做一些小修小补
[55:28.500 --> 55:30.500] 是已经是作为了
[55:30.500 --> 55:33.500] 就你已经把它们加为了Collaborator
[55:33.500 --> 55:37.500] 然后这个进度在开源项目里
[55:37.500 --> 55:39.500] 可以说是神速了
[55:39.500 --> 55:40.500] 就我没有见过这么快的项目
[55:40.500 --> 55:42.500] 一般都是比如说一个项目
[55:42.500 --> 55:44.500] 一个人做了一两年
[55:44.500 --> 55:47.500] 然后逐渐有一些Country Builder进来
[55:47.500 --> 55:50.500] 然后他们再过了一段时间
[55:50.500 --> 55:51.500] 然后变成Collaborator
[55:51.500 --> 55:53.500] 这个过程是按年纪的
[55:53.500 --> 55:55.500] 所以就觉得Hedgehog
[55:55.500 --> 55:57.500] 在这个方面是很惊人的嘛
[55:57.500 --> 55:59.500] 然后你有没有想过
[55:59.500 --> 56:01.500] 就是是为什么呢
[56:01.500 --> 56:02.500] 是因为你是一个大V
[56:02.500 --> 56:03.500] 然后还是说
[56:03.500 --> 56:06.500] 因为你用了JavaScript还是怎么样
[56:06.500 --> 56:07.500] 首先就是这个东西
[56:07.500 --> 56:08.500] 大家很直观的明白
[56:08.500 --> 56:10.500] 我在干什么一个事情
[56:10.500 --> 56:11.500] 所以大家所有人
[56:11.500 --> 56:12.500] 看了这个东西都明白
[56:12.500 --> 56:14.500] 哪些地方需要修改
[56:14.500 --> 56:16.500] 哪些地方需要增强
[56:16.500 --> 56:17.500] 这个是一点
[56:17.500 --> 56:19.500] 就是大家首先对这个东西感兴趣
[56:19.500 --> 56:20.500] 再有一点呢
[56:20.500 --> 56:21.500] 就是确实是因为我比较菜吧
[56:21.500 --> 56:23.500] 就是我确实有的东西做得不好
[56:23.500 --> 56:25.500] 然后确实需要大家的去帮助
[56:25.500 --> 56:26.500] 很感谢大家的帮助
[56:26.500 --> 56:28.500] 真的是就是大家
[56:28.500 --> 56:29.500] 就我写得很烂的时候
[56:29.500 --> 56:32.500] 大家会觉得这些都是low hang fruit
[56:32.500 --> 56:35.500] 就是随手就能写得比我好十倍
[56:35.500 --> 56:36.500] 就是很简单
[56:36.500 --> 56:37.500] 因为我真的写得不够好
[56:37.500 --> 56:39.500] 再有一个就是可能是
[56:39.500 --> 56:41.500] 我觉得跟大V也没有太大关系吧
[56:41.500 --> 56:45.500] 就是后来的一些Country Builder
[56:45.500 --> 56:46.500] 就是很难说吧
[56:46.500 --> 56:47.500] 我觉得
[56:47.500 --> 56:49.500] 首先就是大家明白这个东西
[56:49.500 --> 56:52.500] 是在做什么事情呢
[56:52.500 --> 56:55.500] 大家的这个想法是认可的
[56:55.500 --> 56:56.500] 这个是很重要的东西
[56:56.500 --> 56:57.500] 再有一个就是
[56:57.500 --> 56:58.500] 可能大家认为这个东西
[56:58.500 --> 56:59.500] 可能以后会有人用吧
[56:59.500 --> 57:00.500] 就是大家会
[57:00.500 --> 57:02.500] 多多少少花些心血在里面
[57:02.500 --> 57:03.500] 再有
[57:03.500 --> 57:04.500] 确实这个是一个
[57:04.500 --> 57:06.500] 也是一个很少有人的一个领域吧
[57:06.500 --> 57:08.500] 就是会科学计算的人
[57:08.500 --> 57:10.500] 基本上没有人愿意碰JavaScript
[57:10.500 --> 57:11.500] 那一套钱的那个脚手架
[57:11.500 --> 57:12.500] 太恶心了
[57:12.500 --> 57:13.500] 会JavaScript的人呢
[57:13.500 --> 57:15.500] 很多他不是很了解
[57:15.500 --> 57:18.500] 科学计算的人他有什么需求
[57:18.500 --> 57:19.500] 所以中间这一条路
[57:19.500 --> 57:22.500] 就是这个东西是一个
[57:22.500 --> 57:23.500] 目前做的人
[57:23.500 --> 57:25.500] 不是很多的这么一个东西吧
[57:25.500 --> 57:26.500] 就是有几个人在做
[57:26.500 --> 57:27.500] 但是他们又不
[57:27.500 --> 57:29.500] 我觉得他们都不是合格的产品经理
[57:29.500 --> 57:31.500] 就是他们从用户的体验角度来说
[57:31.500 --> 57:33.500] 他们不够好
[57:33.500 --> 57:34.500] 所以最后导致我的就是
[57:34.500 --> 57:36.500] 我把这个Compiler和整个的这个
[57:36.500 --> 57:38.500] 这个GPU加速和这些东西
[57:38.500 --> 57:40.500] 揉在一起的这个东西的时候
[57:40.500 --> 57:41.500] 大家会觉得这个东西是一个
[57:41.500 --> 57:44.500] 还不错的这么一个尝试吧
[57:44.500 --> 57:46.500] 我觉得还是大家的认可吧
[57:46.500 --> 57:47.500] 我觉得
[57:47.500 --> 57:50.500] 所以就是你是在
[57:50.500 --> 57:51.500] 你是怎么决定把一个人
[57:51.500 --> 57:54.500] 加成GitHub的Collaborator的
[57:54.500 --> 57:55.500] 就我发现他比我强的时候
[57:55.500 --> 57:57.500] 我觉得就他是Collaborator
[57:57.500 --> 57:59.500] 是一个很顺理成章的事情
[57:59.500 --> 58:00.500] 就
[58:00.500 --> 58:02.500] 你现在有几个Collaborator了
[58:02.500 --> 58:03.500] 有三个吧差不多有三个
[58:03.500 --> 58:04.500] 就面包除外啊
[58:04.500 --> 58:05.500] 那个那个
[58:05.500 --> 58:07.500] Cortana是面包除外
[58:07.500 --> 58:08.500] 他虽然我加了他
[58:08.500 --> 58:10.500] 但是他其实现在不是很活跃
[58:10.500 --> 58:11.500] 他加了一些
[58:11.500 --> 58:12.500] 他只加了一个CI
[58:12.500 --> 58:14.500] 因为他有其他事情要忙吧
[58:14.500 --> 58:16.500] 但是其他的人确实是
[58:16.500 --> 58:17.500] 他首先也比我厉害
[58:17.500 --> 58:18.500] 就是
[58:18.500 --> 58:20.500] 现在的还是就是大家是
[58:20.500 --> 58:21.500] 在JavaScript里面
[58:21.500 --> 58:23.500] 确实是整个社区里面
[58:23.500 --> 58:24.500] 我是最菜的一个
[58:24.500 --> 58:25.500] 就是我从来不掩饰这一点
[58:25.500 --> 58:27.500] 就是确实是大家都做得比我好
[58:27.500 --> 58:28.500] 但是我觉得我现在
[58:28.500 --> 58:29.500] 更像一个Product Manager
[58:29.500 --> 58:30.500] 就是给大家想一想
[58:30.500 --> 58:32.500] 哪些Feature需要做
[58:32.500 --> 58:33.500] 然后推动一些东西吧
[58:33.500 --> 58:34.500] 推动一些我自己能做的
[58:34.500 --> 58:35.500] 一些东西吧
[58:35.500 --> 58:37.500] 只差一个产品经理了
[58:37.500 --> 58:39.500] 对对对
[58:39.500 --> 58:41.500] 然后其实很多社区
[58:41.500 --> 58:42.500] 做很多社区
[58:42.500 --> 58:44.500] 我感觉就是
[58:44.500 --> 58:47.500] 让大家产生一个共同的价值观
[58:47.500 --> 58:48.500] 实际上是
[58:48.500 --> 58:50.500] 都是在一个新兴的领域里面
[58:50.500 --> 58:51.500] 就是大家都认为
[58:51.500 --> 58:52.500] 这个东西值得去做
[58:52.500 --> 58:53.500] 然后这个东西没有人去做
[58:53.500 --> 58:56.500] 然后我觉得这个是一个比较
[58:56.500 --> 58:57.500] 容易聚集人气
[58:57.500 --> 58:59.500] 容易聚集大家的人力物力的
[58:59.500 --> 59:01.500] 这么一个机会吧
[59:01.500 --> 59:02.500] 这个其实很难得的
[59:02.500 --> 59:05.500] 就是你需要自己的一个眼光吧
[59:05.500 --> 59:06.500] 就比如说你自己给设计一些
[59:06.500 --> 59:08.500] 很精巧的一些小工具
[59:08.500 --> 59:10.500] 那可能最后就是孤芳自赏了
[59:10.500 --> 59:11.500] 我看到很多孤芳自赏
[59:11.500 --> 59:12.500] 很厉害的小工具
[59:12.500 --> 59:15.500] 就是他会到处的去卖他的观点
[59:15.500 --> 59:18.500] 但是最后用他的人实际上
[59:18.500 --> 59:19.500] 看懂他在做什么东西的人
[59:19.500 --> 59:21.500] 其实都很少
[59:21.500 --> 59:22.500] 我觉得降低门槛
[59:22.500 --> 59:25.500] 还是有助于把人拉进来
[59:25.500 --> 59:28.500] 然后再说JavaScript的这个社区
[59:28.500 --> 59:29.500] 本来就很活跃
[59:29.500 --> 59:31.500] 对 其实JavaScript社区
[59:31.500 --> 59:33.500] 有几个团队是一直都在做
[59:33.500 --> 59:34.500] 科学计算的
[59:34.500 --> 59:36.500] 就是那些几个Machine Learning的
[59:36.500 --> 59:37.500] 有些做那个深度学习的
[59:37.500 --> 59:38.500] 那几个组吧
[59:38.500 --> 59:40.500] 就是Google 微软那一些组
[59:40.500 --> 59:42.500] 还有一些就是
[59:42.500 --> 59:44.500] 有一个叫MLJS的
[59:44.500 --> 59:45.500] JS的这一个组
[59:45.500 --> 59:46.500] 他们做了很多
[59:46.500 --> 59:48.500] 很基本的一个库
[59:48.500 --> 59:49.500] 不过因为毕竟JavaScript
[59:49.500 --> 59:51.500] 大家都不愿意用这个语言
[59:51.500 --> 59:52.500] 做这些所以就是
[59:52.500 --> 59:53.500] 他们工作很没大
[59:53.500 --> 59:54.500] 用户很少
[59:54.500 --> 59:55.500] 就是这样
[59:55.500 --> 59:56.500] 或者用户不够多吧
[59:56.500 --> 59:57.500] 我认为他们应该再多
[59:57.500 --> 59:59.500] 你有统计过
[59:59.500 --> 01:00:01.500] 你们有多少
[01:00:01.500 --> 01:00:03.500] HashHog有多少用户吗
[01:00:03.500 --> 01:00:04.500] 你有统计吗
[01:00:04.500 --> 01:00:05.500] 现在没有用户
[01:00:05.500 --> 01:00:06.500] 因为还没有正式的
[01:00:06.500 --> 01:00:08.500] 发布那些其他的feature
[01:00:08.500 --> 01:00:10.500] 就是现在他们没有办法去在
[01:00:10.500 --> 01:00:12.500] 对他们没有办法去在HashHog里面
[01:00:12.500 --> 01:00:13.500] import一个其他的库
[01:00:13.500 --> 01:00:15.500] 或者是有一些基本的那些IO
[01:00:15.500 --> 01:00:17.500] 这些需要马上去写
[01:00:17.500 --> 01:00:19.500] 所以听咱们节目的朋友们
[01:00:19.500 --> 01:00:20.500] 如果你们对这个还兴趣
[01:00:20.500 --> 01:00:22.500] 或者是比如说你们想帮我写一些
[01:00:22.500 --> 01:00:23.500] 像那个Pandas
[01:00:23.500 --> 01:00:25.500] 这种那个Python的库
[01:00:25.500 --> 01:00:27.500] 或者是一些PackagePendency的
[01:00:27.500 --> 01:00:28.500] 这些东西加入我们
[01:00:28.500 --> 01:00:30.500] 然后咱们一起写
[01:00:30.500 --> 01:00:31.500] 好
[01:00:31.500 --> 01:00:32.500] 突然做广告是吧
[01:00:32.500 --> 01:00:33.500] 好尴尬
[01:00:33.500 --> 01:00:36.500] 然后像
[01:00:36.500 --> 01:00:39.500] 就是我们其实也
[01:00:39.500 --> 01:00:42.500] 我和信涛也有一些开源的库
[01:00:42.500 --> 01:00:43.500] 我不知道小白有没有
[01:00:43.500 --> 01:00:45.500] 但是有的话也可以聊一下
[01:00:45.500 --> 01:00:46.500] 就是
[01:00:46.500 --> 01:00:48.500] 其实信涛之前在几期节目里
[01:00:48.500 --> 01:00:50.500] 也差不多聊过一些
[01:00:50.500 --> 01:00:54.500] 他的IREDITY School的一些
[01:00:54.500 --> 01:00:55.500] 治理方面的问题吧
[01:00:55.500 --> 01:00:57.500] 比如说他觉得开的issue太少
[01:00:57.500 --> 01:01:01.500] 然后就这方面你听完力党的经验
[01:01:01.500 --> 01:01:04.500] 你有没有什么新的想法
[01:01:04.500 --> 01:01:09.500] 那个关于Collaborator
[01:01:09.500 --> 01:01:11.500] 其实一开始DBCLI
[01:01:11.500 --> 01:01:13.500] 他们想让我把这个库转移到
[01:01:13.500 --> 01:01:15.500] 他们的Organization下面
[01:01:15.500 --> 01:01:17.500] 然后当时我给拒绝了
[01:01:17.500 --> 01:01:19.500] 因为我在
[01:01:19.500 --> 01:01:21.500] 我在贡献其他的一些库
[01:01:21.500 --> 01:01:23.500] 比如说CLI,Helper
[01:01:23.500 --> 01:01:25.500] 就是所有的DBCLI都会依赖的一个库
[01:01:25.500 --> 01:01:28.500] 跟PCCLI,MACLI
[01:01:28.500 --> 01:01:30.500] 但是他们没有贡献IREDIS
[01:01:30.500 --> 01:01:31.500] 所以我就不想转过去
[01:01:31.500 --> 01:01:33.500] 假如说他们跟我一起维护IREDIS
[01:01:33.500 --> 01:01:35.500] 我就可以转过去
[01:01:35.500 --> 01:01:38.500] 然后我现在是一个Collaborator都没有
[01:01:38.500 --> 01:01:40.500] 大家基本上都是提过
[01:01:40.500 --> 01:01:41.500] 一个两个的PR
[01:01:41.500 --> 01:01:43.500] 后来就没有再看了
[01:01:43.500 --> 01:01:45.500] 对
[01:01:45.500 --> 01:01:49.500] 就我这边的感受也是类似的吧
[01:01:49.500 --> 01:01:52.500] 然后我曾经就我的那个
[01:01:52.500 --> 01:01:56.500] 有一个库PDIR2
[01:01:56.500 --> 01:01:59.500] 然后它是曾经有一个Contributor
[01:01:59.500 --> 01:02:02.500] 给我提了不少的Commit
[01:02:02.500 --> 01:02:04.500] 然后加了一些功能
[01:02:04.500 --> 01:02:07.500] 但是它也不是说
[01:02:07.500 --> 01:02:10.500] 就是很长期的有Contributor吧
[01:02:10.500 --> 01:02:11.500] 当然也可能是
[01:02:11.500 --> 01:02:13.500] 因为这个东西本身就比较完善了
[01:02:13.500 --> 01:02:15.500] 但所以就是我现在
[01:02:15.500 --> 01:02:18.500] 其实就是任何看院项目里
[01:02:18.500 --> 01:02:20.500] 我都还没有加过Collaborator
[01:02:20.500 --> 01:02:23.500] 因为就没有人Contributor到
[01:02:23.500 --> 01:02:25.500] 能做Collaborator的程度吧
[01:02:25.500 --> 01:02:28.500] 所以对
[01:02:28.500 --> 01:02:30.500] 我还不知道这个是个什么样的体验
[01:02:30.500 --> 01:02:33.500] 就是和其他人在一个看院项目上
[01:02:33.500 --> 01:02:34.500] 一起工作吧
[01:02:34.500 --> 01:02:37.500] 可能应该是挺好的体验我觉得
[01:02:37.500 --> 01:02:39.500] 对我觉得你们的那个
[01:02:39.500 --> 01:02:40.500] 就是已经很完善了
[01:02:40.500 --> 01:02:41.500] 所以就是
[01:02:41.500 --> 01:02:42.500] 但是我这个知道
[01:02:42.500 --> 01:02:44.500] 我现在可能做了差不多不到百分之
[01:02:44.500 --> 01:02:46.500] 我觉得按照我自己的Roadmap来看
[01:02:46.500 --> 01:02:48.500] 我做了不到百分之十吧
[01:02:48.500 --> 01:02:50.500] 我觉得就是很多东西是一定要做的
[01:02:50.500 --> 01:02:52.500] 然后我知道我自己已经
[01:02:52.500 --> 01:02:54.500] 单独我自己是没有那个能力做出来的
[01:02:54.500 --> 01:02:56.500] 所以还是就是菜啊
[01:02:56.500 --> 01:02:58.500] 就是菜是原罪
[01:02:58.500 --> 01:02:59.500] 好惭愧
[01:02:59.500 --> 01:03:01.500] 我现在好多JavaScript的东西
[01:03:01.500 --> 01:03:02.500] 我就是一个一个问
[01:03:02.500 --> 01:03:04.500] 然后一个一个的去去搜
[01:03:04.500 --> 01:03:05.500] 然后也学不会
[01:03:05.500 --> 01:03:07.500] 就是好多东西是真的是这样
[01:03:07.500 --> 01:03:08.500] 就我也很沮丧
[01:03:08.500 --> 01:03:09.500] 哇 采访太难了
[01:03:09.500 --> 01:03:10.500] 我也不会
[01:03:10.500 --> 01:03:12.500] 然后我我发现就是
[01:03:12.500 --> 01:03:13.500] 其实我更希望有更多
[01:03:13.500 --> 01:03:15.500] 有一些计算背景的人来
[01:03:15.500 --> 01:03:16.500] 来帮我去做一些
[01:03:16.500 --> 01:03:18.500] 比如说
[01:03:18.500 --> 01:03:19.500] 或者是我希望我的项目
[01:03:19.500 --> 01:03:22.500] 能够跟其他的一些人的项目去合作
[01:03:22.500 --> 01:03:25.500] 比如说像那些TensorFlow.js
[01:03:25.500 --> 01:03:26.500] 他们那个库
[01:03:26.500 --> 01:03:27.500] 我觉得那个库很好
[01:03:27.500 --> 01:03:28.500] 但是用他们的人很少
[01:03:28.500 --> 01:03:30.500] 能够给他们提供一个更好的环境
[01:03:30.500 --> 01:03:31.500] 让他们的用户打开浏览器
[01:03:31.500 --> 01:03:33.500] 然后哇一键运行
[01:03:33.500 --> 01:03:34.500] 然后一键修改代码
[01:03:34.500 --> 01:03:36.500] 那个那个是很酷的
[01:03:36.500 --> 01:03:37.500] 你只要能做到
[01:03:37.500 --> 01:03:38.500] 能import
[01:03:38.500 --> 01:03:40.500] 他们不就可以
[01:03:40.500 --> 01:03:41.500] 集成进来了
[01:03:41.500 --> 01:03:42.500] 对对对但是import
[01:03:42.500 --> 01:03:43.500] 有一些问题就是
[01:03:43.500 --> 01:03:44.500] 还是就是我菜
[01:03:44.500 --> 01:03:45.500] 不不知道怎么import
[01:03:45.500 --> 01:03:47.500] 我在我试着import一下
[01:03:47.500 --> 01:03:48.500] 然后发现那个东西
[01:03:48.500 --> 01:03:49.500] bevel会报错
[01:03:49.500 --> 01:03:50.500] 然后bevel会有一个
[01:03:50.500 --> 01:03:51.500] 好像有一个
[01:03:51.500 --> 01:03:53.500] 无限的一个cost tag一个东西
[01:03:53.500 --> 01:03:54.500] 我不知道怎么去解决
[01:03:54.500 --> 01:03:55.500] 然后那个东西就就很麻烦
[01:03:55.500 --> 01:03:57.500] 导致我想弄一个preprocessor
[01:03:57.500 --> 01:03:58.500] 然后自己弄一个
[01:03:58.500 --> 01:03:59.500] 自己弄一个package dependency的
[01:03:59.500 --> 01:04:00.500] 一个东西
[01:04:00.500 --> 01:04:01.500] 就就很麻烦
[01:04:01.500 --> 01:04:03.500] 那这还是Winter之前说帮我解决
[01:04:03.500 --> 01:04:04.500] 但是我们之前讨论了一些
[01:04:04.500 --> 01:04:06.500] 但是他还没有来得及帮我
[01:04:06.500 --> 01:04:07.500] 这个这个这个
[01:04:07.500 --> 01:04:08.500] cue他一下
[01:04:08.500 --> 01:04:10.500] 这个人只知道跟女孩子吃饭
[01:04:10.500 --> 01:04:11.500] 真的是
[01:04:11.500 --> 01:04:14.500] 我觉得比较比较难依赖别人动吧
[01:04:14.500 --> 01:04:15.500] 就对可能
[01:04:15.500 --> 01:04:16.500] 对对对其实是这样的
[01:04:16.500 --> 01:04:18.500] 就是还是是这样的
[01:04:18.500 --> 01:04:19.500] 然后还有一些
[01:04:19.500 --> 01:04:20.500] 有一些TVM
[01:04:20.500 --> 01:04:22.500] 他们他们有一个员工是
[01:04:22.500 --> 01:04:23.500] 看过我这个
[01:04:23.500 --> 01:04:24.500] 好像还挺感兴趣的
[01:04:24.500 --> 01:04:25.500] install了一下我的这个
[01:04:25.500 --> 01:04:27.500] 我不知道能不能帮他们
[01:04:27.500 --> 01:04:29.500] 看看他们能不能合作一下
[01:04:29.500 --> 01:04:32.500] 反正完全是产品经理的思路
[01:04:32.500 --> 01:04:36.500] 就是感觉一般的这种开发者
[01:04:36.500 --> 01:04:38.500] 好像也都做不到
[01:04:38.500 --> 01:04:39.500] 做不到这样
[01:04:39.500 --> 01:04:41.500] 大家可能有的人技术很厉害
[01:04:41.500 --> 01:04:42.500] 然后他就喜欢自己搞
[01:04:42.500 --> 01:04:45.500] 就可能不太有很多人有这种思路
[01:04:45.500 --> 01:04:46.500] 去跟别人合作
[01:04:46.500 --> 01:04:49.500] 毕竟就是我跟客户接触的就很多很多
[01:04:49.500 --> 01:04:51.500] 然后就还有就是我
[01:04:51.500 --> 01:04:53.500] 我我我遇到的那些变成小白也很多
[01:04:53.500 --> 01:04:54.500] 就是我知道他们的痛点在哪里
[01:04:54.500 --> 01:04:56.500] 就我本来就是一个产品导向的
[01:04:56.500 --> 01:04:57.500] 一个一个开源项目
[01:04:57.500 --> 01:04:59.500] 就是不是一个就他们怎么爽
[01:04:59.500 --> 01:05:00.500] 我怎么来
[01:05:00.500 --> 01:05:02.500] 他们他们想要怎么偷懒
[01:05:02.500 --> 01:05:03.500] 我怎么来
[01:05:03.500 --> 01:05:04.500] 我基本上就是这样
[01:05:04.500 --> 01:05:05.500] 对就我觉得这个思路
[01:05:05.500 --> 01:05:07.500] 其实做开源的听众们
[01:05:07.500 --> 01:05:09.500] 也是可以学习一下
[01:05:09.500 --> 01:05:10.500] 很值得借鉴
[01:05:10.500 --> 01:05:12.500] 就我之前就是其实蓝
[01:05:12.500 --> 01:05:14.500] 就真的是一个很好的一个驱动力
[01:05:14.500 --> 01:05:16.500] 就是包括可能大家用过zoom
[01:05:16.500 --> 01:05:18.500] 你就会发现zoom这东西真好用
[01:05:18.500 --> 01:05:19.500] 就发了一个链接
[01:05:19.500 --> 01:05:20.500] 然后就直接加进去了
[01:05:20.500 --> 01:05:21.500] 哇太棒了
[01:05:21.500 --> 01:05:22.500] 我觉得没有Google meet好用啊
[01:05:22.500 --> 01:05:24.500] 就Google meet比zoom好用一万倍啊
[01:05:24.500 --> 01:05:26.500] 连客户栏都不需要
[01:05:26.500 --> 01:05:27.500] 但Google meet比zoom要晚呀
[01:05:27.500 --> 01:05:29.500] Google meet与zoom要晚一些
[01:05:29.500 --> 01:05:31.500] 就是我还是认为
[01:05:31.500 --> 01:05:32.500] 袁征是一个很好的产品经理
[01:05:32.500 --> 01:05:34.500] 就是他他他他想到了这个痛点
[01:05:34.500 --> 01:05:35.500] 就是发链接
[01:05:35.500 --> 01:05:36.500] 然后来开会
[01:05:36.500 --> 01:05:37.500] 然后就就完了
[01:05:37.500 --> 01:05:38.500] 还包括overleaf也是一样
[01:05:38.500 --> 01:05:40.500] 就是大家写写写写写论文
[01:05:40.500 --> 01:05:41.500] 都是用overleaf
[01:05:41.500 --> 01:05:43.500] 然后就是也是不要装那些
[01:05:43.500 --> 01:05:45.500] 很复杂的本地的tech的那些工具
[01:05:45.500 --> 01:05:47.500] 然后大家就是像写google doc一样
[01:05:47.500 --> 01:05:48.500] 写写论文
[01:05:48.500 --> 01:05:50.500] 我觉得真的就是我的最后的目标
[01:05:50.500 --> 01:05:52.500] 就是发一个链接过去
[01:05:52.500 --> 01:05:53.500] 然后然后有个代码
[01:05:53.500 --> 01:05:54.500] 然后对方改一改
[01:05:54.500 --> 01:05:55.500] 或者是保定存了一个
[01:05:55.500 --> 01:05:56.500] 就像google doc一样
[01:05:56.500 --> 01:05:57.500] 最好是能能能合作
[01:05:57.500 --> 01:05:58.500] 然后写一些东西
[01:05:58.500 --> 01:05:59.500] 我觉得这个是最最好的一个
[01:05:59.500 --> 01:06:01.500] 一个一个一个一个想法吧
[01:06:01.500 --> 01:06:03.500] 啊你们还要做这个
[01:06:03.500 --> 01:06:04.500] 嗯理解
[01:06:04.500 --> 01:06:05.500] 啊对这个
[01:06:05.500 --> 01:06:07.500] 呃这个就是协同编辑
[01:06:07.500 --> 01:06:09.500] 我之前也玩过
[01:06:09.500 --> 01:06:12.500] 就是你可以用那个现成的叫share db
[01:06:12.500 --> 01:06:14.500] 嗯就这个这个非常
[01:06:14.500 --> 01:06:15.500] 呃也不是说简单
[01:06:15.500 --> 01:06:17.500] 但但是用一个现成的
[01:06:17.500 --> 01:06:18.500] 实现了ot的这么一个库
[01:06:18.500 --> 01:06:21.500] 就非常方便实现这个东西
[01:06:21.500 --> 01:06:22.500] 嗯对
[01:06:22.500 --> 01:06:25.500] 而且不只是就是很多很多人是
[01:06:25.500 --> 01:06:27.500] 其实大家并不是都需要把代码
[01:06:27.500 --> 01:06:29.500] 放在git或者什么query上托管
[01:06:29.500 --> 01:06:31.500] 他们很多就是需要就是一个文档
[01:06:31.500 --> 01:06:32.500] 然后我写一写他写一写
[01:06:32.500 --> 01:06:35.500] 然后我写一写他写一写markdown
[01:06:35.500 --> 01:06:36.500] 然后我写一写运算
[01:06:36.500 --> 01:06:37.500] 然后做出来一个东西
[01:06:37.500 --> 01:06:39.500] 然后他们很多人就是需要这么一个东西
[01:06:39.500 --> 01:06:41.500] 那我觉得嗯应该是如果做出来的话
[01:06:41.500 --> 01:06:42.500] 可能会有用吧
[01:06:42.500 --> 01:06:44.500] 但是现在也不吹也不画大饼了
[01:06:44.500 --> 01:06:46.500] 这个东西我尽量还是尽尽量做吧
[01:06:46.500 --> 01:06:48.500] 我之前花费太多了
[01:06:48.500 --> 01:06:49.500] 很对不起大家
[01:06:49.500 --> 01:06:50.500] 对不起
[01:06:50.500 --> 01:06:52.500] 其实就跟jupiter
[01:06:52.500 --> 01:06:55.500] jupiter notebook的用户群有点类似吗
[01:06:55.500 --> 01:06:56.500] 对其实很像
[01:06:56.500 --> 01:06:57.500] 但是呃对
[01:06:57.500 --> 01:06:58.500] jupiter还是很昂贵
[01:06:58.500 --> 01:07:00.500] 就是大家实际上嗯
[01:07:00.500 --> 01:07:02.500] 还是还是jupiter真的是很
[01:07:02.500 --> 01:07:04.500] 他还是要你懂python才行
[01:07:04.500 --> 01:07:05.500] 对再有一个是
[01:07:05.500 --> 01:07:06.500] 再有一个就是那个那个
[01:07:06.500 --> 01:07:07.500] 启动一个docker的那个
[01:07:07.500 --> 01:07:08.500] 那个开始的时间还是
[01:07:08.500 --> 01:07:10.500] 还是有的时候还是比较长
[01:07:10.500 --> 01:07:13.500] 就是我就是或者下载什么东西吧
[01:07:13.500 --> 01:07:15.500] 就是总之那个那个那个
[01:07:15.500 --> 01:07:17.500] 开始那个启动时间是是是有一些长的
[01:07:17.500 --> 01:07:20.500] 比如说hashrag lab就需要跑一个linear regression
[01:07:20.500 --> 01:07:22.500] 他可能就是需要0.5秒钟
[01:07:22.500 --> 01:07:23.500] 那个可能就是光启动
[01:07:23.500 --> 01:07:24.500] 就是需要四五秒钟的时间
[01:07:24.500 --> 01:07:25.500] 就他他要等
[01:07:25.500 --> 01:07:27.500] 就是实际上大家需要一个跑出来
[01:07:27.500 --> 01:07:28.500] 然后看结果
[01:07:28.500 --> 01:07:29.500] 然后修改一下
[01:07:29.500 --> 01:07:30.500] 然后再看结果这么一个反馈的过程
[01:07:30.500 --> 01:07:32.500] 那jupiter notebook实际上
[01:07:32.500 --> 01:07:33.500] 嗯你要是本机的话也可以
[01:07:33.500 --> 01:07:35.500] 但是你要是google colab的话
[01:07:35.500 --> 01:07:36.500] 实际上有一些
[01:07:36.500 --> 01:07:38.500] 有一些难度的就是有些有点慢
[01:07:38.500 --> 01:07:41.500] 你是说打开一个文件的时候
[01:07:41.500 --> 01:07:44.500] 他帮你启动后端的那个kernel会很慢吗
[01:07:44.500 --> 01:07:45.500] 而且也很昂贵
[01:07:45.500 --> 01:07:47.500] 那个东西给给给给大家免费白嫖用
[01:07:47.500 --> 01:07:49.500] 那个东西真的是我看着都心疼
[01:07:49.500 --> 01:07:50.500] 那个东西好家伙的
[01:07:50.500 --> 01:07:53.500] 那个那个那个那个东西真的是google有多少
[01:07:53.500 --> 01:07:55.500] 不用的机器给他给他给大家这么用
[01:07:55.500 --> 01:07:57.500] 不要不要替资本家担心了
[01:07:57.500 --> 01:07:58.500] 资本家都是有的是的钱
[01:07:58.500 --> 01:07:59.500] 是吧
[01:07:59.500 --> 01:08:05.500] 你说的google的那个是google开了一个免费的jupiter吗
[01:08:05.500 --> 01:08:07.500] 就你打开就可以用
[01:08:07.500 --> 01:08:10.500] 对google colab就是他支持jupiter的签名
[01:08:10.500 --> 01:08:12.500] 你老说那个是google colab
[01:08:12.500 --> 01:08:14.500] 对类似于一个在线的jupiter
[01:08:14.500 --> 01:08:15.500] 可以这么理解
[01:08:15.500 --> 01:08:18.500] 对我之前看过那个jupiter lab
[01:08:18.500 --> 01:08:20.500] 不知道是不是他们搭了一套这个东西
[01:08:20.500 --> 01:08:21.500] 比那个还要复杂一点
[01:08:21.500 --> 01:08:25.500] 好像那个那个东西还还支持gpu tpu
[01:08:25.500 --> 01:08:29.500] 而且我觉得那个google在后端做那个东西应该也是很麻烦的
[01:08:29.500 --> 01:08:31.500] 因为那个东西很很昂贵
[01:08:31.500 --> 01:08:33.500] 所以他随时他随时会把你断掉
[01:08:33.500 --> 01:08:34.500] 我感觉就是一堆docker
[01:08:34.500 --> 01:08:37.500] 然后随时起来一个然后给你用起来给他用
[01:08:37.500 --> 01:08:38.500] 然后再给你断掉
[01:08:38.500 --> 01:08:40.500] 我觉得那个要比jupiter lab也还要麻烦一些
[01:08:40.500 --> 01:08:42.500] 我觉得计算真的不是一个免费的东西
[01:08:42.500 --> 01:08:45.500] 就是资本家从你给你免费用的一些东西的话
[01:08:45.500 --> 01:08:47.500] 那么你一定是一个产品
[01:08:47.500 --> 01:08:49.500] 或者是他一定会未来在某个时间
[01:08:49.500 --> 01:08:51.500] 从你身上再再拿点钱出来
[01:08:51.500 --> 01:08:52.500] 我觉得这个是
[01:08:52.500 --> 01:08:54.500] 所以你并不想成为资本家
[01:08:54.500 --> 01:08:55.500] 对吧
[01:08:55.500 --> 01:08:58.500] 只是这个东西也并没有一个盈利的打算
[01:08:58.500 --> 01:08:59.500] 不是有机会
[01:08:59.500 --> 01:09:00.500] 我也想成为资本家
[01:09:00.500 --> 01:09:01.500] 有机会的话我也想成为资本家
[01:09:01.500 --> 01:09:03.500] 但是现在就是没有这个条件
[01:09:03.500 --> 01:09:05.500] 没有这个机会也没有这个资源吧
[01:09:05.500 --> 01:09:08.500] 就我如果是我如果是真的是有一个公司的话
[01:09:08.500 --> 01:09:10.500] 可能会很多很多资源更容易去调动
[01:09:10.500 --> 01:09:13.500] 但是现在一个开源的就是大家都大家都很都很强
[01:09:13.500 --> 01:09:14.500] 然后大家都有自己的想法
[01:09:14.500 --> 01:09:18.500] 我很难就是说去让大家去做什么
[01:09:18.500 --> 01:09:20.500] 就是我觉得那样的话反而很很惭愧
[01:09:20.500 --> 01:09:21.500] 而且我都没跟大家见过
[01:09:21.500 --> 01:09:24.500] 就是也也许时机成熟了
[01:09:24.500 --> 01:09:28.500] 然后你发现就可以出来自己干
[01:09:28.500 --> 01:09:31.500] 不过那可能还要一段时间之后吧
[01:09:31.500 --> 01:09:35.500] 对最好的就是google或者是或者是stata
[01:09:35.500 --> 01:09:38.500] 或者是mattelab或者是哪个公司能够考虑
[01:09:38.500 --> 01:09:40.500] 就是什么意思
[01:09:40.500 --> 01:09:43.500] 不知道如果我觉得他们应该觉得一个竞品
[01:09:43.500 --> 01:09:45.500] 我觉得他们应该不太会感兴趣吧
[01:09:45.500 --> 01:09:48.500] 不知道看吧看吧都是都是有可能的
[01:09:48.500 --> 01:09:52.500] 我觉得好那我觉得我们关于hedgehog聊的也差不多了
[01:09:52.500 --> 01:09:55.500] 对吧然后我们下面就进入推荐环节吧
[01:09:55.500 --> 01:09:58.500] 然后还是老规矩一个cool
[01:09:58.500 --> 01:10:02.500] 然后另外是一个一篇文章一本书或者一个电影
[01:10:02.500 --> 01:10:05.500] 一个什么都可以
[01:10:05.500 --> 01:10:07.500] 你可以你推荐电视剧什么的都是可以的
[01:10:07.500 --> 01:10:11.500] 对那还是力量你先来好的那我推荐一个
[01:10:11.500 --> 01:10:13.500] 好像我推荐一个不用不是我太推荐的
[01:10:13.500 --> 01:10:15.500] 就是一个叫叫autocurse的一个东西
[01:10:15.500 --> 01:10:17.500] 我觉得那个那个那个作者是很很棒的
[01:10:17.500 --> 01:10:20.500] 就是如果你对机器学感兴趣的话
[01:10:20.500 --> 01:10:23.500] autocurse就是相当于一个开源版的一个automl
[01:10:23.500 --> 01:10:27.500] 就是你在本机可以跑一个很好的一个模型
[01:10:27.500 --> 01:10:29.500] 帮你跑出来一个我不知道那个东西也很明显
[01:10:29.500 --> 01:10:31.500] 很大但是如果有不知道的朋友
[01:10:31.500 --> 01:10:34.500] 如果你想白嫖一个免费开源版的automl的话
[01:10:34.500 --> 01:10:37.500] autocurse是一个一个一个很好的cool
[01:10:37.500 --> 01:10:40.500] 再推荐一个nordemober就是那个hedgehog lab的
[01:10:40.500 --> 01:10:42.500] 一个后端的那个符号预算的一个后端
[01:10:42.500 --> 01:10:44.500] 那个作者真的是很棒他写的一个代码
[01:10:44.500 --> 01:10:46.500] 一个好像有几万行的一个代码
[01:10:46.500 --> 01:10:50.500] 然后一一一大半都是那个一大半都是那个tokenizer
[01:10:50.500 --> 01:10:53.500] 然后我觉得我觉得真的很棒
[01:10:53.500 --> 01:10:56.500] 他维护这么一个cool很痛苦我感觉是
[01:10:56.500 --> 01:10:59.500] 我感觉我能感受到他的痛苦
[01:10:59.500 --> 01:11:02.500] 我估计我估计红姐要吐槽你这里了
[01:11:02.500 --> 01:11:03.500] 虽然我不知道他会吐槽什么
[01:11:03.500 --> 01:11:04.500] 但我觉得他肯定会吐槽
[01:11:04.500 --> 01:11:05.500] 为什么吐槽这个
[01:11:05.500 --> 01:11:07.500] 没事你继续
[01:11:07.500 --> 01:11:08.500] 这两个我推荐吧
[01:11:08.500 --> 01:11:11.500] 然后推荐一个电影就是推荐一个电视剧吧
[01:11:11.500 --> 01:11:12.500] 就是请回来988
[01:11:12.500 --> 01:11:17.500] 那如果说我的2019年是在赐北乐队的陪伴中
[01:11:17.500 --> 01:11:18.500] 度过的笑语泪
[01:11:18.500 --> 01:11:20.500] 那么2020年基本上到目前为止都是
[01:11:20.500 --> 01:11:24.500] 请回来988这一部韩剧陪伴我的笑语泪
[01:11:24.500 --> 01:11:27.500] 我看了有差不多有七八遍吧
[01:11:27.500 --> 01:11:30.500] 就是每看一次都觉得这个故事很温暖
[01:11:30.500 --> 01:11:31.500] 就是一个韩剧
[01:11:31.500 --> 01:11:34.500] 但它不是一个传统的就是那个又臭又长的韩剧
[01:11:34.500 --> 01:11:36.500] 它是一个家庭伦理剧
[01:11:36.500 --> 01:11:37.500] 这个真的是很温暖
[01:11:37.500 --> 01:11:38.500] 我下一个坑已经开好了
[01:11:38.500 --> 01:11:39.500] 就叫请回来988
[01:11:39.500 --> 01:11:40.500] Reply 1988
[01:11:40.500 --> 01:11:42.500] 第一个用Hedgehog Lab写的一个
[01:11:42.500 --> 01:11:44.500] 极其学义酷
[01:11:44.500 --> 01:11:46.500] 基本就是这样
[01:11:46.500 --> 01:11:48.500] 好我们期待一下
[01:11:48.500 --> 01:11:51.500] 那先淘小白你们直接来
[01:11:51.500 --> 01:11:53.500] 淘宝我其实没准备什么
[01:11:53.500 --> 01:11:56.500] OK我其实最近没有用什么酷
[01:11:56.500 --> 01:11:58.500] 写的Pattern不是很多
[01:11:58.500 --> 01:12:00.500] 推荐一个乐队吧
[01:12:00.500 --> 01:12:02.500] 叫草东没有派对
[01:12:02.500 --> 01:12:05.500] 这个是在推特上别人给我推荐的
[01:12:05.500 --> 01:12:06.500] 然后我去听了我发现
[01:12:06.500 --> 01:12:09.500] 这个乐队里面的每一首歌都很好听
[01:12:09.500 --> 01:12:11.500] 对我已经把他们的歌听了好几遍了
[01:12:11.500 --> 01:12:12.500] 单曲循环了好几遍
[01:12:12.500 --> 01:12:14.500] 每一首都
[01:12:14.500 --> 01:12:16.500] 我要试一下这个一定要试一下
[01:12:16.500 --> 01:12:19.500] 草东没有派对是一个台湾的乐队
[01:12:19.500 --> 01:12:21.500] 是什么风格的呢
[01:12:21.500 --> 01:12:22.500] 摇滚
[01:12:22.500 --> 01:12:27.500] 就是跟那个万能青年旅馆那个差不多
[01:12:27.500 --> 01:12:29.500] 啊
[01:12:29.500 --> 01:12:30.500] 那应该很棒
[01:12:30.500 --> 01:12:32.500] 我就很喜欢万青
[01:12:32.500 --> 01:12:34.500] 我打开了我的网易云
[01:12:34.500 --> 01:12:36.500] 网易云是没有的
[01:12:36.500 --> 01:12:38.500] 只有QQ音乐有
[01:12:38.500 --> 01:12:39.500] 不是我是想看一下
[01:12:39.500 --> 01:12:41.500] 我应该推荐个什么东西
[01:12:41.500 --> 01:12:42.500] 啊
[01:12:42.500 --> 01:12:43.500] 那我来吧
[01:12:43.500 --> 01:12:47.500] 我就先推荐个酷
[01:12:47.500 --> 01:12:52.500] 嗯
[01:12:47.500 --> 01:12:52.500] 推荐一个叫那个short UUID
[01:12:52.500 --> 01:12:54.500] 一个python的酷
[01:12:54.500 --> 01:12:57.500] 然后python内置有一个UUID的酷
[01:12:57.500 --> 01:13:01.500] 但是它生存生存的UUID会比较长吗
[01:13:01.500 --> 01:13:03.500] 然后如果你很多的话
[01:13:03.500 --> 01:13:04.500] 可能会占比较多内存
[01:13:04.500 --> 01:13:07.500] 然后如果你想要一个就是比较短一点的
[01:13:07.500 --> 01:13:11.500] 然后你可能可以考虑一下一个叫short UUID的酷
[01:13:11.500 --> 01:13:12.500] 然后
[01:13:11.500 --> 01:13:12.500] 哎
[01:13:12.500 --> 01:13:13.500] 他是他是怎么做到的
[01:13:13.500 --> 01:13:15.500] 他是给你把那个UUID压缩了吗
[01:13:15.500 --> 01:13:16.500] 那我不知道
[01:13:16.500 --> 01:13:18.500] 但其实那个
[01:13:18.500 --> 01:13:21.500] 其实就是说你即使用python内置的那个UUID
[01:13:21.500 --> 01:13:23.500] 你也可以只截取前
[01:13:23.500 --> 01:13:25.500] 比如说前七位或者前八位
[01:13:25.500 --> 01:13:27.500] 然后来来做一个UUID
[01:13:27.500 --> 01:13:29.500] 但他就可能碰撞的概率就大一点
[01:13:29.500 --> 01:13:31.500] 对他就是有损有损了吗
[01:13:31.500 --> 01:13:34.500] 就UUID不是python里面的一个算法
[01:13:34.500 --> 01:13:36.500] 因为其他语言都有
[01:13:36.500 --> 01:13:37.500] UUID是个RFC
[01:13:37.500 --> 01:13:38.500] 对
[01:13:38.500 --> 01:13:39.500] 有好几个RFC吧
[01:13:39.500 --> 01:13:40.500] 对
[01:13:40.500 --> 01:13:42.500] 如果如果如果他那个
[01:13:42.500 --> 01:13:43.500] 你那个short
[01:13:43.500 --> 01:13:46.500] 说的说的UUID可以做到无损的话
[01:13:46.500 --> 01:13:48.500] 我真是相见恨晚
[01:13:48.500 --> 01:13:51.500] 因为我做那个clock.sh
[01:13:51.500 --> 01:13:54.500] 我把它每一行每一次执行都生成一个UUID吗
[01:13:54.500 --> 01:13:57.500] 然后把这个当作数据库的组件来存的
[01:13:57.500 --> 01:13:58.500] 其实挺长的
[01:13:58.500 --> 01:13:59.500] 无论是展示啊
[01:13:59.500 --> 01:14:01.500] 还是UIL还是什么都不是很好
[01:14:01.500 --> 01:14:04.500] 我其实没有太研究过有损无损这方面啊
[01:14:04.500 --> 01:14:07.500] 但是对你可以你可以去看一下
[01:14:07.500 --> 01:14:09.500] 然后我再推荐个酷吧
[01:14:09.500 --> 01:14:12.500] 就是叫也是python的叫typing extensions
[01:14:12.500 --> 01:14:15.500] 就这个我觉得真的是相见恨晚
[01:14:15.500 --> 01:14:16.500] 我之前一直都不知道
[01:14:16.500 --> 01:14:21.500] 因为就是他在python的type hint可能很多人都开始用了吗
[01:14:21.500 --> 01:14:25.500] 但是type hint就在最近几个版本里
[01:14:25.500 --> 01:14:28.500] 每个版本他都在添加新的一些功能吗
[01:14:28.500 --> 01:14:33.500] 比如说那个像那个literal啊
[01:14:33.500 --> 01:14:35.500] 然后就或者protocol啊
[01:14:35.500 --> 01:14:39.500] 就是这样都是这些这些一些比较新的type
[01:14:39.500 --> 01:14:42.500] 他都是最近几个版本才添加进来的
[01:14:42.500 --> 01:14:46.500] 那如果说你想在之前比较早的版本
[01:14:46.500 --> 01:14:48.500] 比如说3.5
[01:14:48.500 --> 01:14:54.500] 然后3.6或者更早的版本里面去用这样一些新加的typing的feature
[01:14:54.500 --> 01:14:55.500] 那怎么办呢
[01:14:55.500 --> 01:14:57.500] 就一个酷叫typing extensions
[01:14:57.500 --> 01:15:04.500] 他是应该是好像是mypy那个组织在维护的
[01:15:04.500 --> 01:15:06.500] 还是python官方维护的
[01:15:06.500 --> 01:15:08.500] 反正应该是python官方维护的
[01:15:08.500 --> 01:15:11.500] 对他是就非常好
[01:15:11.500 --> 01:15:13.500] 然后你安装这个第三方酷
[01:15:13.500 --> 01:15:18.500] 然后你就那些那些功能就可以从type hint里import进来了
[01:15:18.500 --> 01:15:21.500] 然后我竟然特别晚才知道这个酷
[01:15:21.500 --> 01:15:24.500] 但就很好用
[01:15:24.500 --> 01:15:27.500] 我不知道你们写python喜不喜欢加type hint
[01:15:27.500 --> 01:15:29.500] 力道你习惯吗
[01:15:29.500 --> 01:15:31.500] 我觉得加上笔不加好啊
[01:15:31.500 --> 01:15:35.500] 我基本上也都会加
[01:15:35.500 --> 01:15:38.500] 对然后我没有加
[01:15:38.500 --> 01:15:39.500] 我觉得太麻烦了
[01:15:39.500 --> 01:15:40.500] 好吧
[01:15:40.500 --> 01:15:42.500] 可能你记忆力比较好
[01:15:42.500 --> 01:15:44.500] 对我不加我就不记得那是什么
[01:15:44.500 --> 01:15:46.500] OK然后别的
[01:15:46.500 --> 01:15:50.500] 暂且好像没有想到什么
[01:15:50.500 --> 01:15:53.500] 虽然说的话其实可以讲的挺多的
[01:15:53.500 --> 01:15:55.500] 就我之前看了一篇文章
[01:15:55.500 --> 01:15:59.500] 就是怎么把那个JavaScript的callback转成promise
[01:15:59.500 --> 01:16:01.500] 可能这个做前端的人都知道
[01:16:01.500 --> 01:16:04.500] 但是我不知道就力道你知道吗
[01:16:04.500 --> 01:16:08.500] 我好像不知道
[01:16:08.500 --> 01:16:10.500] 我好像看过一些这样的教程
[01:16:10.500 --> 01:16:14.500] 因为我写了好多callback和promise的
[01:16:14.500 --> 01:16:16.500] 我看了好多但是我没有学会
[01:16:16.500 --> 01:16:18.500] 这个就好尴尬
[01:16:18.500 --> 01:16:23.500] 这个好巧我最近在写前端正好就看到了这个
[01:16:23.500 --> 01:16:26.500] 就是因为那个react的set seed是callback
[01:16:26.500 --> 01:16:29.500] 然后就看了一篇文章把它转成promise
[01:16:29.500 --> 01:16:30.500] 对对对
[01:16:30.500 --> 01:16:32.500] 那个还挺好
[01:16:32.500 --> 01:16:37.500] 但是就还是就是boilerplate code有点多
[01:16:37.500 --> 01:16:41.500] 但是还用起来还算比较轻松吧
[01:16:41.500 --> 01:16:43.500] 然后你转成promise之后
[01:16:43.500 --> 01:16:46.500] 比较好就是你可以用async await了
[01:16:46.500 --> 01:16:48.500] 就代码也清晰很多
[01:16:48.500 --> 01:16:49.500] 对对对
[01:16:49.500 --> 01:16:50.500] 我觉得还挺不错
[01:16:50.500 --> 01:16:52.500] 顺便说一句我觉得
[01:16:52.500 --> 01:16:55.500] 就是之前也是看这块想到的嘛
[01:16:55.500 --> 01:16:57.500] 就是async await的语法
[01:16:57.500 --> 01:17:00.500] 其实在各个语言里都是基本一样的嘛
[01:17:00.500 --> 01:17:02.500] 什么python的async await这么难用
[01:17:02.500 --> 01:17:06.500] 我觉得最主要的问题就是python没有内置的event loop
[01:17:06.500 --> 01:17:07.500] 当然这个结论不一定对
[01:17:07.500 --> 01:17:09.500] 但是我现在是这么觉得
[01:17:12.500 --> 01:17:14.500] 就是如果它有一个内置event loop的话
[01:17:14.500 --> 01:17:18.500] 这方面会轻松很多
[01:17:18.500 --> 01:17:20.500] anyway我要推荐的差不多就这些
[01:17:20.500 --> 01:17:22.500] 那小白
[01:17:22.500 --> 01:17:25.500] 我最近是在读张物源嘛
[01:17:25.500 --> 01:17:26.500] 也没用什么库
[01:17:26.500 --> 01:17:28.500] 我推荐一个电影吧
[01:17:28.500 --> 01:17:31.500] 一个国漫国漫的电影叫亏拔
[01:17:31.500 --> 01:17:33.500] 不知道你们看过没有
[01:17:33.500 --> 01:17:34.500] 我看过
[01:17:34.500 --> 01:17:36.500] 你看过吗
[01:17:36.500 --> 01:17:37.500] 很有名
[01:17:37.500 --> 01:17:38.500] 虽然我没看过
[01:17:38.500 --> 01:17:40.500] 但是我知道
[01:17:40.500 --> 01:17:42.500] 亏拔他怎么说呢
[01:17:42.500 --> 01:17:46.500] 他建立的那个世界观挺挺挺好的
[01:17:46.500 --> 01:17:49.500] 反正是但是他这个作者好像已经去世了
[01:17:49.500 --> 01:17:51.500] 就是原作者啊
[01:17:51.500 --> 01:17:55.500] 然后他的电影可能就对可能就无限延期了
[01:17:55.500 --> 01:17:56.500] 就后边他还没讲完
[01:17:56.500 --> 01:17:58.500] 他只是讲了一个故事的开头
[01:17:58.500 --> 01:18:02.500] 然后讲到接近高潮的部分吧
[01:18:02.500 --> 01:18:05.500] 但是这个故事好像就要这么辗软而止了
[01:18:06.500 --> 01:18:07.500] 对挺可惜的
[01:18:07.500 --> 01:18:10.500] 但是他前他前几部电影都特别好看
[01:18:10.500 --> 01:18:12.500] 好像一共有三部还是两部
[01:18:12.500 --> 01:18:13.500] 嗯
[01:18:13.500 --> 01:18:15.500] 我看过第一部
[01:18:15.500 --> 01:18:21.500] 然后我在烧带烧带守着推荐他的一个片尾曲叫静心之歌
[01:18:21.500 --> 01:18:23.500] 到时候会在那个收录子里边打出来
[01:18:23.500 --> 01:18:26.500] 然后你们可以听一听
[01:18:26.500 --> 01:18:28.500] 对就是虽然魁拔我没看过
[01:18:28.500 --> 01:18:35.500] 但是我听过那个里面的满极的那个声优的一个podcast采访
[01:18:35.500 --> 01:18:38.500] 他那个叫刘静什么那个字我已经不会念啊
[01:18:38.500 --> 01:18:39.500] 好难念啊
[01:18:39.500 --> 01:18:43.500] 就反正是他那个声优刘静洛对他那个声优特别特别屌
[01:18:43.500 --> 01:18:47.500] 他是主要他是一个中日双语的声优
[01:18:47.500 --> 01:18:49.500] 就他是在日本真正做声优的
[01:18:49.500 --> 01:18:51.500] 是在那个清二production
[01:18:51.500 --> 01:18:54.500] 然后然后他还是一个漫画家
[01:18:54.500 --> 01:18:57.500] 就他之前连载了一个他在日本做声优的漫画
[01:18:57.500 --> 01:19:00.500] 我操我觉得这个就屌翻天了
[01:19:00.500 --> 01:19:01.500] 太厉害了
[01:19:01.500 --> 01:19:04.500] 不过我看魁拔第一第一部的时候我就很纳闷
[01:19:04.500 --> 01:19:08.500] 就是那个他第一部就是很明显的就是给大家一开头
[01:19:08.500 --> 01:19:11.500] 但是那个开头也是留的实在是不太完整
[01:19:11.500 --> 01:19:14.500] 就是就你知道他要做后边
[01:19:14.500 --> 01:19:16.500] 但是那个看完第一部你觉得意犹未尽
[01:19:16.500 --> 01:19:18.500] 就是怎么就就这就完了
[01:19:18.500 --> 01:19:20.500] 就就这就是感觉
[01:19:20.500 --> 01:19:22.500] 没想到就就就就没有了
[01:19:22.500 --> 01:19:27.500] 后边就就对后边就可能要无限延迟
[01:19:27.500 --> 01:19:30.500] 就我平常就觉得国产动漫还是
[01:19:30.500 --> 01:19:32.500] 不知道为什么忽然聊到国产动漫上去
[01:19:32.500 --> 01:19:34.500] 但是我觉得国产动漫还是
[01:19:34.500 --> 01:19:41.500] 现在大家都是大大宇宙大的场景大的时空观
[01:19:41.500 --> 01:19:42.500] 但是我其实更喜欢
[01:19:42.500 --> 01:19:46.500] 希望看到观众们有一些小的一些就日常的一些生活呀
[01:19:46.500 --> 01:19:49.500] 这个我觉得会更好一些吧
[01:19:49.500 --> 01:19:50.500] 比较难啊
[01:19:50.500 --> 01:19:52.500] 是比较难
[01:19:52.500 --> 01:19:57.500] 行那我们其实今天的节目差不多也就这样
[01:19:57.500 --> 01:19:58.500] 然后按照惯例的话
[01:19:58.500 --> 01:20:05.500] 最后还是请我们的嘉宾力荡你来给听众们一些建议
[01:20:05.500 --> 01:20:06.500] 或者你有什么想说的话吧
[01:20:06.500 --> 01:20:08.500] 就是随便什么都可以了
[01:20:08.500 --> 01:20:14.500] 好的那我给大家建议就是
[01:20:14.500 --> 01:20:16.500] 我能给大家什么建议呢
[01:20:16.500 --> 01:20:20.500] 我给大家建议天哪好难啊这个东西
[01:20:20.500 --> 01:20:22.500] 多来用Hedgehog Lab
[01:20:22.500 --> 01:20:25.500] 这个不算这个不能说已经说过了
[01:20:25.500 --> 01:20:26.500] 大家好
[01:20:26.500 --> 01:20:29.500] 希望捕手所说的观众朋友们能够一如既往的支持
[01:20:29.500 --> 01:20:31.500] 捕手所说这个节目
[01:20:31.500 --> 01:20:33.500] 那也希望大家关注Hedgehog Lab这个项目啊
[01:20:33.500 --> 01:20:37.500] 以后有机会的话多多关注Hedgehog Lab的最新进展
[01:20:37.500 --> 01:20:42.500] 然后如果有机会的话会把给大家分享更多的教程
[01:20:42.500 --> 01:20:47.500] 然后或者来到这个节目去跟大家分享今后的这个进度吧
[01:20:47.500 --> 01:20:49.500] 基本就是这样
[01:20:49.500 --> 01:20:51.500] 好然后谢谢力荡
[01:20:51.500 --> 01:20:57.500] 然后也是感谢你来做客分享关于Hedgehog的一些新闻
[01:20:57.500 --> 01:20:59.500] 然后也谢谢姓涛和小白
[01:20:59.500 --> 01:21:01.500] 对谢谢大家
[01:21:01.500 --> 01:21:04.500] 然后我们今天的节目差不多就这样
[01:21:04.500 --> 01:21:07.500] 然后各位观众再见
[01:21:07.500 --> 01:21:10.500] 好本期捕手所说的播客就到这里
[01:21:10.500 --> 01:21:11.500] 感谢您的收听
[01:21:11.500 --> 01:21:14.500] 本期内容中提到的资料链接都会放到我们的网站上
[01:21:14.500 --> 01:21:17.500] 我们的网址是pythonhunter.org
[01:21:17.500 --> 01:21:20.500] 由于我们主播的持股账号被禁
[01:21:20.500 --> 01:21:23.500] 所以以后的更新都不会再发布到持股上
[01:21:23.500 --> 01:21:24.500] 请您留意
[01:21:24.500 --> 01:21:27.500] 推荐您使用泛用型客户端订阅我们的播客
[01:21:27.500 --> 01:21:29.500] 也欢迎您关注我们的推特
[01:21:29.500 --> 01:21:32.500] 加入我们的Telegram群组和其他听众一起聊天
[01:21:32.500 --> 01:21:36.500] 我们的推特是pythonhunter加一个下滑线
[01:21:36.500 --> 01:21:39.500] Telegram群组的链接可以在我们的网站上找到
[01:21:39.500 --> 01:21:41.500] 我们下期再见
[01:22:09.500 --> 01:22:12.500] 本期视频就分享到这里
[01:22:12.500 --> 01:22:14.500] 感谢您的观看
[01:22:14.500 --> 01:22:39.500] 下期再见
