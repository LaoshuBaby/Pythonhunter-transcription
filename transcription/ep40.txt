[00:00.000 --> 00:20.480] 好 各位听众大家好 欢迎来到最新一期的补舌者说我是主播Lite9M
[00:20.740 --> 00:25.100] 然后今天我们想聊一个话题就是Python和Rust
[00:25.100 --> 00:31.760] 那么众所周知Python是现在编程语言里面使用量作为广泛
[00:31.760 --> 00:34.560] 尤其是在AI领域用的特别多的一个语言
[00:34.820 --> 00:39.960] Rust是算是新鲜语言里面发展的作为训谋
[00:39.960 --> 00:43.020] 然后也是被特别多成全协议的一个语言
[00:43.280 --> 00:46.600] 那么就这两个语言 我们为什么要聊这两个语言呢
[00:46.600 --> 00:53.000] 就是因为最近在Python的这个圈子里面有一种趋势
[00:53.260 --> 01:00.420] 就是越来越多的人开始利用Rust它的性能和它的各种方面的优势
[01:00.680 --> 01:03.240] 去填补Python的一些不足
[01:03.500 --> 01:07.340] 那么举例来说就是有很多的酷
[01:07.580 --> 01:09.380] 它是核心是用Rust写的
[01:09.640 --> 01:14.500] 但是它通过一些接口给Python提供了可以调用的一个酷
[01:14.700 --> 01:18.040] 这样你在Python里面就可以调用这些用Rust写的酷
[01:18.300 --> 01:21.880] 然后来实现更好的性能 包括更好的Type safety
[01:22.380 --> 01:26.480] 那么今天我们请到的嘉宾就是Messence
[01:26.740 --> 01:30.080] Messence是一个知名的
[01:30.320 --> 01:37.240] 跟我们之前说相关的项目叫做PyO3的维护者
[01:37.500 --> 01:41.080] 那么我们会聊一下关于PyO3
[01:41.080 --> 01:46.160] 然后以及这个问题是什么 然后为什么它很重要
[01:46.420 --> 01:53.580] 然后以及就是Python和Rust它未来到底会怎么样这两者怎么样结合发展的一些相关的话题
[01:54.080 --> 01:57.820] 然后我们其他的主播是Lightningtao
[01:58.080 --> 02:00.480] 然后小白 Adam
[02:01.260 --> 02:05.860] OK 那我们现在就请Messence来给大家打个招呼
[02:06.120 --> 02:07.920] 并且简单的做一个自我介绍
[02:08.400 --> 02:10.700] Hello 大家好 我是Messence
[02:11.200 --> 02:13.800] 我自我介绍的话我大概
[02:14.320 --> 02:22.000] 我现在是在香港的一个叫Messence的一个HatchFund的一个Portfolio Manager的team工作
[02:22.260 --> 02:25.320] 我之前是在Messence
[02:25.580 --> 02:30.960] 我现在要聊一下就是我如何接触到Python和Rust的话
[02:31.160 --> 02:39.360] 就是说我Python的话我其实接触还挺早的 我记得是在学校上学的时候
[02:39.620 --> 02:42.440] 那个时候还在用SyBand的时候在SyBand上接触到的Python
[02:42.700 --> 02:43.700] 然后呢
[02:43.960 --> 02:46.600] 然后第一份工作是在杭州那边
[02:46.860 --> 02:49.600] 然后它是用的PythonJungle的一个项目
[02:49.860 --> 02:54.980] 然后然后在蚂蚁的话也是使用到一些Python
[02:55.240 --> 02:58.820] Rust的接触也是挺早的吧
[02:58.820 --> 03:04.140] 那个时候是2015年的时候那个时候Rust还没有1.0
[03:04.400 --> 03:06.460] 从那个时候开始看了一些Rust
[03:06.700 --> 03:11.320] 但是呢那个时候也不知道这个语言的发展未来会是怎么样的
[03:11.580 --> 03:16.700] 所以也就只是请线语看了一下热了个门然后就忘了
[03:16.940 --> 03:24.300] 然后后来真正的开始写Rust应该在到2017年的左右的时候
[03:24.560 --> 03:28.480] 那个时候开始在工作中就是遇到一些Python的一些性能问题的时候
[03:28.940 --> 03:34.060] 开始尝试一些不同的方案然后在那个时候开始正式的去接触
[03:34.320 --> 03:35.860] 就使用了一些Rust
[03:36.120 --> 03:37.660] 也算是热了门
[03:38.160 --> 03:39.700] 那时候你在蚂蚁吗还是
[03:40.460 --> 03:47.380] 那时候不在蚂蚁那时候还在那个叫一个上海的一个做NRP的公司叫波森数据
[03:49.160 --> 03:51.220] 为什么你那时候会想到用Rust
[03:51.460 --> 03:57.860] 因为一般不都会去比如说通过Core展或者CIA加莱去写一个Python的库
[03:59.140 --> 04:04.940] 对这么一般来说是这样的我们当时一般刚开始也会去尝试说用Syson这些方式来做
[04:05.200 --> 04:06.700] 但我们当时遇到的问题是
[04:07.380 --> 04:10.540] 用了一个就是叫CIF Suite的一个库
[04:11.460 --> 04:14.100] 它本身是一个C++的扩展
[04:14.420 --> 04:15.820] 但是它的问题是它
[04:16.100 --> 04:17.380] 它做得很不好
[04:17.620 --> 04:20.140] 它不支持多线程去做Inference
[04:20.780 --> 04:24.580] 然后当时就想说我可以用Rust来把这个
[04:25.300 --> 04:27.860] Creator Graphic CCI库给包装一下
[04:28.120 --> 04:30.420] 我去解决一下它现在里面的一些问题
[04:30.680 --> 04:34.000] 让它能够在多线程的情况下去做Inference这样能够
[04:34.260 --> 04:36.040] 大幅的提升我们就是
[04:36.300 --> 04:37.840] 那种数据处理的时候那种
[04:38.360 --> 04:38.860] 速度
[04:39.640 --> 04:43.980] 所以也是就是在工作中先接触到
[04:44.240 --> 04:46.040] 然后就是想接触到
[04:46.300 --> 04:49.100] Rust和Python协同工作这个
[04:49.360 --> 04:52.180] 一个领域然后才就逐渐去
[04:52.380 --> 04:54.440] 转向去做开源项目
[04:55.700 --> 04:59.040] 如果说转开源项目的话也可能会更早一些
[04:59.300 --> 05:03.400] 我最开始在第一家公司在杭州的时候就已经开始做开源项目
[05:03.660 --> 05:05.940] 那个就是有一个项目叫微恰的Py
[05:06.200 --> 05:09.140] 我记得是PyO3这个方面
[05:09.900 --> 05:10.560] 那没错没错
[05:10.820 --> 05:12.180] 这个是在2017年的时候
[05:12.440 --> 05:12.740] 对
[05:13.120 --> 05:13.640] 那没错
[05:13.940 --> 05:14.360] 嗯
[05:14.880 --> 05:15.240] 好
[05:16.160 --> 05:17.160] 嗯
[05:17.420 --> 05:19.360] 对然后就是说正好
[05:19.620 --> 05:25.360] Messence也聊到了就是他之前是用Rust给Python来写一个可以调用的东西
[05:25.620 --> 05:26.060] 然后
[05:26.320 --> 05:26.900] 那么
[05:27.160 --> 05:27.820] 就是
[05:28.080 --> 05:29.520] 其实就是我们今天想
[05:29.760 --> 05:31.460] 介绍的PyO3
[05:31.720 --> 05:33.820] 这个库它在做的事情
[05:34.080 --> 05:36.180] 那我们先就是
[05:36.440 --> 05:38.840] Messence能给大家简单介绍一下
[05:39.100 --> 05:40.720] PyO3是什么吗
[05:41.500 --> 05:42.000] OK
[05:42.440 --> 05:43.740] PyO3的话
[05:44.000 --> 05:48.540] 简单来说它就是对Cpython的那个API的一些封装
[05:48.800 --> 05:49.360] 通过
[05:49.880 --> 05:50.400] 呃
[05:50.920 --> 05:51.680] 一些
[05:51.940 --> 05:53.720] Rust里面有种有种叫做
[05:53.980 --> 05:55.520] 那个Procedural Micro的东西
[05:55.780 --> 06:00.640] 通过Procedural Micro把整个Cpython的接口做了一层的抽象
[06:00.900 --> 06:03.200] 让你能够在Rust中比较方便的去
[06:03.460 --> 06:08.060] 就用Safe比较Safe的代码去写一个Python的扩展
[06:08.320 --> 06:09.080] 呃
[06:09.340 --> 06:11.640] 因为如果你直接去调用
[06:11.840 --> 06:14.840] 你在Rust里面是可以直接去调用Cpython的CAPI的
[06:14.920 --> 06:15.480] 但是的话
[06:15.740 --> 06:18.280] 这样你会导致你的整个项目里面全部都是Unsafe
[06:18.540 --> 06:21.880] 所以从这个情况来说它主要是提供了一个更好的抽象
[06:23.920 --> 06:25.960] 所以听起来听听你的意思
[06:26.220 --> 06:29.300] 它的抽象是给Rust使用的什么
[06:29.560 --> 06:30.600] 就给Rust去调用
[06:30.840 --> 06:32.360] Python CAPI的抽象
[06:32.620 --> 06:32.900] 对
[06:33.400 --> 06:35.700] 就这里有个历史的历史就是说
[06:35.960 --> 06:37.500] PyO3这个项目呢它
[06:37.760 --> 06:41.340] 是从那个有一个叫做Rust Cpython的项目Folk出来的
[06:42.320 --> 06:43.340] 那个
[06:43.600 --> 06:44.620] 我可以简单说一下
[06:44.880 --> 06:47.680] Rust Cpython的项目它其实做的事情是一样的
[06:47.940 --> 06:48.460] 但是呢
[06:48.720 --> 06:49.740] 它的思路不太一样
[06:50.000 --> 06:51.020] 就是它在
[06:51.280 --> 06:52.560] 它在就是
[06:52.820 --> 06:55.380] 想要更简单的提供写写这个困难的时候
[06:55.640 --> 06:57.160] 它用的不是Procedural Micro
[06:57.420 --> 06:58.700] 它用的是那种叫做
[06:58.960 --> 06:59.560] Decorate
[06:59.820 --> 07:00.740] Decorate Micro
[07:01.000 --> 07:01.520] 也就是说
[07:01.780 --> 07:03.820] 很像C里面的那种
[07:04.080 --> 07:04.840] 那种Micro
[07:05.100 --> 07:06.380] 就是自符的替换那种感觉
[07:06.640 --> 07:08.420] 所以它会写的很奇怪
[07:08.680 --> 07:10.220] 它也不过怎么说呢
[07:10.420 --> 07:12.980] 它很像你在Rust里面写Python代码
[07:13.240 --> 07:14.260] 比如说你要定一个Class
[07:14.520 --> 07:15.800] 它可能就是用一个
[07:16.060 --> 07:17.340] 那种类似于模式Python
[07:17.600 --> 07:18.880] 你写一个Class什么什么
[07:19.140 --> 07:20.160] 你一点也不像
[07:20.920 --> 07:22.980] Rust代码也不像Python代码
[07:24.260 --> 07:25.540] 就是有一点很奇怪的样子
[07:25.800 --> 07:27.580] 当时那个就
[07:27.840 --> 07:29.620] PyO3的那个创建者
[07:29.880 --> 07:31.160] 应该是Nicola Kim
[07:31.420 --> 07:31.680] 他
[07:31.940 --> 07:33.200] 他最开始的时候
[07:33.460 --> 07:34.500] 他也是用的
[07:35.260 --> 07:36.020] 那个Rust Cpython
[07:36.280 --> 07:37.300] 他当时想实现
[07:37.560 --> 07:39.360] 想通过Rust Cpython
[07:39.720 --> 07:40.640] 把Tokyo
[07:41.160 --> 07:42.680] 那个运行时
[07:43.720 --> 07:44.980] 就暴露给Python来用
[07:45.240 --> 07:46.280] 就相当于做一个
[07:46.540 --> 07:47.820] Rust版本的UV Loop
[07:48.580 --> 07:49.600] 他在这个过程中
[07:49.860 --> 07:52.160] 遇到了非常多的Rust Cpython的那种
[07:52.420 --> 07:52.920] 问题
[07:53.180 --> 07:54.720] 他也尝试去解决他
[07:54.980 --> 07:56.000] 他给他提了不少Python
[07:56.260 --> 07:57.780] 但当时因为那个项目的Maintain
[07:58.040 --> 07:58.820] 不是很火月
[07:59.080 --> 07:59.580] 所以他
[08:00.100 --> 08:01.640] 过了一段时间之后他就
[08:02.140 --> 08:03.940] 不想再去给他TPR
[08:04.200 --> 08:05.220] 自己fog一个出来
[08:05.720 --> 08:06.500] 然后去
[08:06.760 --> 08:07.520] 用了他
[08:07.720 --> 08:08.500] 他觉得当时
[08:08.760 --> 08:10.540] 用Procedural Micro来做会更
[08:10.800 --> 08:12.080] 对用户更友好的方式
[08:12.340 --> 08:13.360] 去做了PyO3
[08:14.900 --> 08:17.960] 对因为像我们几位主播和
[08:18.220 --> 08:20.520] 听众可能对Procedural Micro
[08:20.780 --> 08:23.860] 对Rust不是特别熟悉能不能简单介绍一下这个概念
[08:24.120 --> 08:26.420] ok 那个Procedural Micro就是
[08:26.680 --> 08:27.960] 过程红嘛就是说
[08:28.460 --> 08:30.260] 相当于就是说在构建的过程中
[08:30.520 --> 08:31.800] 就是编辑帮你生产代码
[08:32.560 --> 08:33.840] 其实他可以
[08:34.100 --> 08:35.640] 通过一个annotation
[08:35.640 --> 08:38.460] 怎么说呢可以打个简单
[08:38.720 --> 08:40.240] 就很像Python的Decorator吧
[08:41.780 --> 08:43.580] 在你Decorator里面也可以做很多
[08:43.840 --> 08:44.340] Code Generation嘛
[08:44.600 --> 08:46.140] Procedural Micro可能更是说
[08:46.400 --> 08:48.180] 有Rust的编辑器来帮你做这事情
[08:48.440 --> 08:49.720] 编辑器会把你的
[08:49.980 --> 08:52.540] 你annotated过的代码给
[08:52.800 --> 08:54.580] Expand成一个
[08:55.100 --> 08:55.600] 更
[08:55.860 --> 08:57.900] 就加入很多你想要做的事情
[08:58.160 --> 08:59.200] 比方说我要给他
[08:59.700 --> 09:00.980] 给这个函数
[09:01.500 --> 09:02.520] 增加一些非常
[09:02.780 --> 09:03.800] 简单的
[09:04.060 --> 09:05.080] 参数的教验啊
[09:05.280 --> 09:06.560] 或者说给这个
[09:07.080 --> 09:08.360] Struct加一些
[09:08.620 --> 09:10.660] Train implementation啊
[09:11.680 --> 09:12.460] 大概就是这样子
[09:12.960 --> 09:13.740] 理解理解
[09:14.760 --> 09:15.520] 呃
[09:15.780 --> 09:17.060] 所以就是
[09:17.580 --> 09:20.900] 对可能可能细节就是关于细节的一些实现我们可以之后再聊
[09:21.160 --> 09:22.960] 那就是回过头来说就是
[09:23.460 --> 09:26.280] 呃PIO3一开始相当于是
[09:26.540 --> 09:27.300] 呃
[09:28.340 --> 09:30.120] 就是使得Rust能够去
[09:30.380 --> 09:32.420] 调用Python CAPI那么
[09:32.940 --> 09:33.440] 他
[09:34.160 --> 09:36.720] 在线阶段来看的话很多人用他去
[09:37.240 --> 09:41.060] 相当于提供一种Python的扩展那这个你觉得是
[09:41.320 --> 09:44.140] 呃是他最初设计的目的呢还是说
[09:44.400 --> 09:48.760] 呃就是这个有一些转变的就是大家发现哦原来还可以这样用
[09:50.280 --> 09:51.720] 呃我认为他是
[09:51.980 --> 09:53.880] 就是他最终最初的一个目标之一啊
[09:54.380 --> 09:56.940] 其实我们现在Python其实他支持
[09:57.200 --> 09:58.220] 两种吧
[09:58.480 --> 10:01.300] 一种是说我们平常最常见的写Python的extension
[10:01.760 --> 10:03.500] 但还有其实一个比较
[10:03.760 --> 10:06.620] 稍微小一点的应用就是他可以去也是可以去
[10:07.400 --> 10:08.160] 直接把它
[10:08.420 --> 10:10.980] envade的一个Python的Python解释器来用
[10:11.240 --> 10:14.300] 就是你可以跑一个binary他他就调Python CAPI
[10:14.820 --> 10:16.360] beating field是一个承认模组
[10:17.120 --> 10:19.680] 呃这个binary是Rust的
[10:19.940 --> 10:21.740] 的写的binary还是说
[10:22.000 --> 10:24.540] 对对Rust的写binary他可以去link一下cpython
[10:24.540 --> 10:25.580] 然后你可以在里面去
[10:26.340 --> 10:26.860] 去
[10:27.120 --> 10:29.160] 把cpython的解释器拿过来用啊
[10:29.840 --> 10:30.940] OK所以
[10:31.040 --> 10:34.740] 我想一下应该是有有一个项目在用的应该是那个
[10:35.000 --> 10:37.480] 呃一个做time series的
[10:37.740 --> 10:38.840] 那个叫什么来着我
[10:40.120 --> 10:44.720] 对一个叫他反正一个做time series的他们就想通过这个方式来给那个
[10:45.640 --> 10:50.360] 给就是他们的time series里面的UDF增加Python的UDF的这是他们还是生做的
[10:51.000 --> 10:56.200] OK所以我总结一下就是说Python3其实他有两种主要用法
[10:56.200 --> 11:00.440] 一种是你可以写一个通过Rust去写一个Python的库
[11:00.440 --> 11:03.240] 然后给Python在Python这边进行调用
[11:03.520 --> 11:07.200] 或者你可以反过来就是在Rust这边去
[11:07.460 --> 11:09.000] 把一个Python的解释器
[11:09.260 --> 11:09.760] 去
[11:10.020 --> 11:14.640] 相于放在Rust这个程序里面然后在Rust里面去调用Python对吧
[11:15.400 --> 11:16.160] 对对
[11:16.680 --> 11:17.200] 好的
[11:17.960 --> 11:21.800] Rust调用Python这种那个Python
[11:22.320 --> 11:25.120] 呃他应该是没有单独的进程是吧
[11:25.380 --> 11:25.900] 没有
[11:26.660 --> 11:28.980] 那所有的东西是练接了他
[11:29.740 --> 11:30.500] 哦
[11:30.760 --> 11:33.580] 也就是说在你原来写的Rust程序里面会有一个
[11:34.080 --> 11:37.940] 呃完整的Python的运行室包括GC那些东西
[11:37.940 --> 11:38.700] GIO
[11:38.700 --> 11:39.460] 对
[11:41.260 --> 11:42.020] OK
[11:42.540 --> 11:43.040] 嗯
[11:45.620 --> 11:48.940] 呃那么就是我们来说就是
[11:49.200 --> 11:52.260] 呃Python3就是有两种主要用法
[11:52.260 --> 11:56.960] 那它其实有一些比较广泛的应用
[11:56.960 --> 11:57.840] 然后
[11:58.100 --> 12:01.240] 呃我去看一下比如说
[12:01.680 --> 12:04.240] 有一个库叫做Polus
[12:04.500 --> 12:06.440] 呃Polars
[12:06.700 --> 12:10.380] 它是一个相于data frame的
[12:10.640 --> 12:14.480] 相于更快速然后支持多线程的data frame库
[12:14.480 --> 12:17.560] 呃这个是用Python3来写的
[12:18.080 --> 12:21.660] 然后可能大家更熟悉的一个是PythonPython
[12:21.760 --> 12:23.920] 用来做数据教验的这样一个库
[12:23.920 --> 12:28.560] 那Python3它最近发了第二个第二个大版本
[12:28.800 --> 12:31.840] 那么它用相于用Rust重写了它的内核
[12:31.840 --> 12:35.960] 然后呃用Python3呃给Python提供支持
[12:35.960 --> 12:40.840] 那我看它的一些bassmark是说性能提升了几十倍
[12:40.840 --> 12:43.480] 对这个也是非常的非常惊人
[12:43.720 --> 12:48.920] 然后有一个呃Python密码写的库叫做Crypto Graphic
[12:48.920 --> 12:50.400] 也是用了Python
[12:50.660 --> 12:54.540] 然后还有一个json就是Python的json库叫orjson
[12:54.540 --> 12:55.340] orjson
[12:55.740 --> 12:59.740] 对这都是Python3的一些呃应用
[12:59.740 --> 13:03.300] 就可以看到它其实用的还是比较广泛的
[13:03.300 --> 13:05.660] 因为大家也呃逐渐意识了
[13:05.660 --> 13:08.460] Python它有很多的一些缺陷嘛
[13:08.460 --> 13:12.380] 然后Rust正好有相于是一个大家比较喜欢
[13:12.380 --> 13:18.140] 然后能够去呃在性能各方面都满足一些需求的语言
[13:18.700 --> 13:19.180] 对
[13:20.160 --> 13:25.160] 呃对我这有个问题就是Python3它的名字的来源是什么呢
[13:25.160 --> 13:27.160] 呃让Messus有没有什么
[13:27.160 --> 13:32.040] 就我有个印象就是在有一年应该是17年呢是一个拍抗上面那个
[13:32.040 --> 13:35.160] 那个HDB的那个CEO
[13:35.160 --> 13:39.000] 就它的那个GatebyID好像是1ST1
[13:39.000 --> 13:42.840] 对yuri对对对好像这个名字是它提供的
[13:42.840 --> 13:47.200] 哈哈这就是对这不是你们自己起的吗
[13:47.660 --> 13:49.500] 对是它它们起的
[13:49.500 --> 13:51.260] 那这还挺有意思
[13:51.260 --> 13:51.980] 哦ok
[13:53.100 --> 13:57.140] 那我可以就因为它Python所以它当时在那个拍抗
[13:57.140 --> 13:59.820] 它一个应该是拍抗上面它也提到了
[14:02.140 --> 14:03.980] 啊那时候才刚开始
[14:05.180 --> 14:10.900] 我看一下呃有一个帖子好Python3 got its name
[14:11.000 --> 14:14.200] ok
[14:14.200 --> 14:17.800] 感觉看起来上一个化学符号
[14:17.800 --> 14:22.800] 比较比较符合现在很多Rust的项目的那个命令的方式
[14:22.800 --> 14:30.120] 哦对我看到它是这样说就是Reddit有个帖子说那个
[14:30.120 --> 14:37.200] 氧化帖是就是F1,2,3然后就相当于是生锈的帖子
[14:37.300 --> 14:39.940] 那如果是生锈的Python就是Pyl3
[14:43.140 --> 14:47.700] 嗯我觉得还挺还挺形象对对
[14:47.700 --> 14:50.340] Rust应该是锈的意思是吧
[14:50.340 --> 14:53.300] 对对嗯ok
[14:54.740 --> 14:59.900] 那就我们提到Pyl3然后就是刚也简单介绍一下
[14:59.900 --> 15:04.140] 但其实Pyl3这个组织下面还有一个项目叫matering
[15:04.200 --> 15:08.680] 然后呃matering你可不可以也简单介绍一下matering
[15:08.680 --> 15:15.640] matering的话那简单来说它就是一个PEP517的一个build back end
[15:15.640 --> 15:21.520] 它就是通过呃实现的PEP517这些接口能够让Python在
[15:21.520 --> 15:27.680] 从那个元代码的包里面可以编译出来那个pattern的我要
[15:27.680 --> 15:32.240] 除此之外呢它其实也可以不作为一个build back end来用
[15:32.240 --> 15:36.780] 直接作为一个那个帮助的程序来用也可以
[15:36.780 --> 15:39.540] 这样的话比较方便你开发的时候不需要去
[15:39.540 --> 15:41.260] 通过Python来调用它那编译
[15:41.260 --> 15:44.540] 然后能够获得那个Rust编译的时候
[15:44.540 --> 15:48.300] 那incremental compilation这些优势
[15:48.300 --> 15:53.300] 那呃最我觉得它最主要的特点是
[15:53.300 --> 15:59.940] 它大量的简化了你整个Pyl3或者是Rust C-Python这些
[15:59.940 --> 16:04.280] 写了扩展的那个构建和分发的过程
[16:04.280 --> 16:10.160] 因为它现在其实几乎所有的Metallinix的平台都是支持的
[16:10.160 --> 16:12.640] 然后Mac也好Windows也好
[16:12.640 --> 16:18.040] 什么都支持它本身也都是发布了这些所有的我要
[16:18.040 --> 16:23.200] 嗯就是我可能用呃就我自己的理解
[16:23.200 --> 16:28.960] 就是说你如果想写一个就是用Pyl3写一个呃用
[16:29.020 --> 16:32.420] 就用Pyl3加上Rust给Python写个库
[16:32.420 --> 16:37.940] 那么你怎么样去相于打包出一个Python能调用的库
[16:37.940 --> 16:41.140] 或者发布到Python那就是用Metallin这个库
[16:41.140 --> 16:45.900] 相于它就是呃提供了这样一个就简化了这样一个过程
[16:45.900 --> 16:50.060] 就是让Rust用户它比如说它可能不太熟悉
[16:50.060 --> 16:53.980] 就是Python的包管理啊然后打包发布这些流程
[16:53.980 --> 16:57.860] 但是你相于Metallin你可以做一个命令函工具
[16:57.920 --> 17:02.880] 然后你调用一下就可以帮你打包出这样一个能够上传到拍拍的库
[17:02.880 --> 17:03.760] 是不是这个意思
[17:03.760 --> 17:04.760] 对的
[17:06.200 --> 17:11.000] 我们刚刚说那个Python3除了用Rust给Python写扩展
[17:11.000 --> 17:15.200] 还有一个呃在Rust里面可以调用Cpython
[17:15.200 --> 17:19.200] 那在Rust调用Cpython跟跟这个是没有关系的吗
[17:20.680 --> 17:24.160] 呃目前来说没有跟Metallin没有太大的关系
[17:24.160 --> 17:27.320] Metallin现在也并不是很好的支持
[17:27.340 --> 17:31.660] 你从过Rust来Metallin拍摄这种这种UseCase
[17:31.660 --> 17:35.700] OK呃我对我不太了解那个517
[17:35.700 --> 17:39.780] 要是用户安装一个呃Rust来写的拍扩展的话
[17:39.780 --> 17:42.220] 那个Python会干啥呀
[17:42.220 --> 17:44.980] 它会先把整个包下来下来
[17:44.980 --> 17:47.780] 然后呃就是在这个过程中
[17:47.780 --> 17:52.860] 它是不是必须呃相对于PythonInstallMetallin
[17:52.860 --> 17:54.820] 然后再再去Build
[17:55.820 --> 17:58.920] 呃这个分情况吧就是如果它提供了Wild
[17:58.920 --> 18:02.640] 那就不需要涉及到Metallin这些东西了
[18:02.640 --> 18:04.560] 因为它直接从国家安装的好了
[18:04.560 --> 18:07.240] 如果它只提供了那个Source的话
[18:07.240 --> 18:08.360] 这Source distribution的话
[18:08.360 --> 18:13.800] 它就需要去读它的在Pyproject.tomor里面写的那个
[18:13.800 --> 18:15.400] build back end的requirements
[18:15.400 --> 18:20.040] 它会去在一个isolated的那种vnv里面去把这些东西装起来
[18:20.040 --> 18:22.440] 比如说如果它用到Metallin来构建的话
[18:22.440 --> 18:24.820] 它就会在它的一个vnv里面装上Metallin
[18:24.820 --> 18:27.940] 再通过Metallin来构建那个source distribution
[18:29.220 --> 18:30.140] 它的变形成Wild
[18:31.220 --> 18:31.620] 嗯
[18:31.620 --> 18:32.180] 嗯
[18:32.180 --> 18:32.740] Metallin是
[18:32.740 --> 18:34.220] 之前以前大家
[18:34.220 --> 18:36.580] 呃以前不都是用setup.py吗
[18:36.580 --> 18:37.540] 现在也就是说现在
[18:37.540 --> 18:38.260] 对对对
[18:38.260 --> 18:40.340] 呃这个过程没有setup.py
[18:40.340 --> 18:42.820] 但是那个Metallin是
[18:42.820 --> 18:45.020] 就是它去装这个battery
[18:45.020 --> 18:46.420] 它装这个Metallin
[18:46.420 --> 18:48.500] 呃怎么来怎么来build
[18:48.500 --> 18:50.580] 是因为那个Metallin直接提供了Wild
[18:50.580 --> 18:52.420] 所以直接下载就可以了吗
[18:52.960 --> 18:53.440] 对的
[18:53.440 --> 18:54.920] 对于绝大多数情况是这样子的
[18:54.920 --> 18:56.120] 这个事情呢
[18:56.120 --> 18:57.080] 会变得比较复杂
[18:57.080 --> 19:02.000] 就是如果涉及到一些news distribution的那种
[19:02.000 --> 19:04.200] 他们的那种package的方式
[19:04.200 --> 19:06.160] 但是绝大多数用户都比较简单
[19:06.160 --> 19:07.480] 它直接下载到了
[19:07.480 --> 19:09.200] 它自动会下载到Metallin的Wild
[19:09.200 --> 19:11.240] 所以没有什么感知
[19:12.200 --> 19:12.800] 嗯
[19:12.800 --> 19:16.040] 那这假如说没有那个Metallin的Wild的话
[19:16.040 --> 19:18.560] 它要先去buildMetallin
[19:18.560 --> 19:20.960] 然后再用Metallin去build的那个
[19:21.020 --> 19:22.300] 它要的能够cool对吧
[19:23.420 --> 19:23.860] 对的
[19:23.860 --> 19:26.260] 这就是一个比较长那个Boss Rubber的轻
[19:26.260 --> 19:26.860] 嗯
[19:26.860 --> 19:29.260] 那Metallin的build是也是517吗
[19:29.260 --> 19:31.740] 还是用到setup电派
[19:31.740 --> 19:34.100] Metallin的build是用到setup
[19:34.100 --> 19:36.700] setup Toss Rust
[19:36.700 --> 19:39.140] 就是就是之前是这样子的
[19:39.140 --> 19:41.340] 它是可以setup Boss Rubber的
[19:41.340 --> 19:41.980] 但是呢
[19:41.980 --> 19:43.860] 为了方便那些distribute
[19:43.860 --> 19:45.300] distribute like
[19:45.300 --> 19:46.420] 来构建Metallin
[19:46.420 --> 19:49.420] 所以我们再也给它提供了一个setup Toss的
[19:49.440 --> 19:51.440] 方式来Boss Rubber
[19:51.440 --> 19:52.720] 啊
[19:52.720 --> 19:53.520] okok
[19:53.520 --> 19:54.480] 理解
[19:54.480 --> 19:55.280] 嗯
[19:55.280 --> 19:55.560] 对
[19:55.560 --> 19:57.720] 然后然后Metallin的话
[19:57.720 --> 19:58.720] 我
[19:58.720 --> 20:01.120] 就看一下它最
[20:01.120 --> 20:02.520] 就是最
[20:02.520 --> 20:05.600] 大家可能最熟悉的一个应用就是Rough
[20:05.600 --> 20:08.680] 然后Rough是一个最近特别特别火的
[20:08.680 --> 20:11.160] Python的for matter
[20:11.160 --> 20:12.520] 哎是Linter for matter
[20:12.520 --> 20:13.320] 不一定
[20:13.320 --> 20:14.920] 目前来说是Linter
[20:14.920 --> 20:16.000] Linter对对对
[20:16.000 --> 20:18.120] 然后它就是比像Blake 8
[20:18.120 --> 20:21.820] 这些传统的Python的Linter要快特别多
[20:21.820 --> 20:23.220] 几百倍吧
[20:23.220 --> 20:23.700] 可能
[20:23.700 --> 20:25.900] 然后它就是
[20:25.900 --> 20:26.940] 呃用
[20:26.940 --> 20:30.060] 赶快问一下Metallin是用Rough写的库
[20:30.060 --> 20:31.740] 然后用Metallin打包的对吧
[20:31.740 --> 20:32.300] 对
[20:32.940 --> 20:34.060] 嗯
[20:34.060 --> 20:34.460] 对
[20:36.140 --> 20:36.340] 对
[20:36.340 --> 20:37.940] 但它但它没有用PyO3
[20:37.940 --> 20:38.380] 所以
[20:40.100 --> 20:40.500] 是的
[20:40.500 --> 20:42.860] 但是其实这个UseCast也很常见
[20:42.860 --> 20:44.300] 就是
[20:44.300 --> 20:46.220] 有另外一个项目也是这么做的
[20:46.240 --> 20:48.200] 它是一个叫TypeOS的一个项目
[20:48.200 --> 20:51.680] 就是专门用来检查你代码里面的TypeOS
[20:51.680 --> 20:53.400] 它就是做成那个pre-commit嘛
[20:53.400 --> 20:54.480] pre-commit的话
[20:54.480 --> 20:55.480] 如果它不
[20:55.480 --> 20:57.400] 它如果不提供一个
[20:57.400 --> 20:58.440] 像Python这样的话
[20:58.440 --> 21:00.680] 它其实它是Rough写的
[21:00.680 --> 21:02.120] 它如果是pre-commit的这种方式的话
[21:02.120 --> 21:05.680] 它还要要求你用户的用这个pre-commit的hook的时候
[21:05.680 --> 21:07.600] 你得有Rough的编译器
[21:07.600 --> 21:08.640] 有大的东西
[21:08.640 --> 21:08.920] 所以呢
[21:08.920 --> 21:10.760] 它通过adopt
[21:10.760 --> 21:11.840] Metallin的这种方式呢
[21:11.840 --> 21:13.480] 它就可以再把
[21:13.480 --> 21:14.880] 把TypeOS也发不到
[21:14.880 --> 21:15.880] 拍拍上去
[21:15.880 --> 21:16.820] 这样的话
[21:16.820 --> 21:17.860] 它的pre-commit呢
[21:17.860 --> 21:19.700] 可以直接从拍拍安装
[21:19.700 --> 21:20.740] 那个TypeOS的包
[21:20.740 --> 21:22.860] 这样它用户就会
[21:22.860 --> 21:24.580] 不需要再有那么多依赖了
[21:26.340 --> 21:28.340] 我刚才说就是怎么做到的
[21:28.340 --> 21:28.660] sorry
[21:28.660 --> 21:29.620] Metallin怎么做到的
[21:29.620 --> 21:32.740] 就是不需要用户有那个Rough的编译器
[21:32.740 --> 21:33.460] 因为发布
[21:33.460 --> 21:34.740] 最后发布的是一个Volio
[21:34.740 --> 21:35.180] 有Volio
[21:35.180 --> 21:36.940] 它只需要把它解压就可以用了
[21:39.100 --> 21:39.620] 等一下
[21:39.620 --> 21:41.420] 你只要开发者有Matterin
[21:41.420 --> 21:43.020] 你不需要用户有Matterin
[21:43.020 --> 21:44.180] 用户不需要
[21:45.000 --> 21:48.240] 这个Matterin就是把开发者写的东西去
[21:48.240 --> 21:49.520] build成各种Volio
[21:49.520 --> 21:52.240] 然后上上到拍拍
[21:52.240 --> 21:53.000] 对
[21:53.000 --> 21:53.200] 对
[21:53.200 --> 21:54.280] 那我是不是可以这样理解
[21:54.280 --> 21:58.840] 就是说如果你并不需要去提供一个
[21:58.840 --> 22:00.840] 排层用户可以调用的户
[22:00.840 --> 22:01.720] 换句话说
[22:01.720 --> 22:03.360] 你就是一个Binary
[22:03.360 --> 22:04.400] 然后你想
[22:04.400 --> 22:05.760] 但是你希望
[22:05.760 --> 22:08.280] 你就是你写了一个Binary是给排层用户用的
[22:08.280 --> 22:10.160] 比如说一个排层的Linter
[22:10.160 --> 22:11.920] 那你就完全可以用Rust
[22:11.980 --> 22:14.180] 唇Rust不用PiO3写一个东西
[22:14.180 --> 22:15.660] 然后用Matterin打包
[22:15.660 --> 22:16.860] 上传到拍拍
[22:16.860 --> 22:18.340] 这样子对吧
[22:18.340 --> 22:18.580] 对
[22:18.580 --> 22:19.380] 是的
[22:19.380 --> 22:22.260] 这样你可以提供各个平台的Volio
[22:22.260 --> 22:23.140] OK
[22:23.140 --> 22:25.100] 这个地方我有个小文的
[22:25.100 --> 22:26.500] 那
[22:26.500 --> 22:30.780] 就是因为PiO3有提到
[22:30.780 --> 22:33.300] 就是那个样历里就是
[22:33.300 --> 22:35.380] 我写了一段Rust代码之后
[22:35.380 --> 22:37.060] 因为我看到它是用Matterin
[22:37.060 --> 22:39.420] 然后做了一个Develop这个面领
[22:39.420 --> 22:41.420] 然后我就可以引用这个包了
[22:41.420 --> 22:45.320] 那这个过程中就是PiO3对象和Rust对象转换
[22:45.320 --> 22:49.280] 这个事情是Matterin在包装了一个中间层吗
[22:49.280 --> 22:52.760] 还是说这个也是PiO3在负责的呀
[22:52.760 --> 22:54.040] 整个对象转换
[22:54.040 --> 22:56.680] 这个应该都是PiO3这边来提供的
[22:56.680 --> 22:58.280] Matterin仅仅是把它做了一个打包
[22:58.280 --> 23:01.080] 就是在开发过程中本地打了一个Volio
[23:01.080 --> 23:03.480] 实际上相当于是
[23:03.480 --> 23:03.680] 对
[23:03.680 --> 23:05.520] 就是Matterin第一个相当于说
[23:05.520 --> 23:06.720] 它要求你有一个包装
[23:06.720 --> 23:09.760] 因为它会通过那个
[23:09.760 --> 23:12.740] 它会构建出来一个Editable的Volio
[23:12.740 --> 23:14.660] 然后让PiP去装一下
[23:14.660 --> 23:17.620] 这样你就可以在你的建设器面去硬泡它了
[23:22.980 --> 23:23.380] 好的
[23:25.100 --> 23:25.500] 对
[23:25.500 --> 23:30.420] 然后其实Matterin不是其实重点
[23:30.420 --> 23:33.380] 但如果就是最后
[23:33.380 --> 23:34.780] 反正听众们很感兴趣的话
[23:34.780 --> 23:36.180] 我们也可以专门聊一起
[23:36.200 --> 23:36.440] 对
[23:36.440 --> 23:40.600] 然后我还是回到PiO3这个话题上
[23:40.600 --> 23:44.280] 然后就前面也介绍了PiO3
[23:44.280 --> 23:46.880] 它的主要是用来干什么
[23:46.880 --> 23:51.960] 就是用Rust写排算能标用的库
[23:51.960 --> 23:56.280] 那么就当然我们也非常好奇
[23:56.280 --> 23:59.680] 就是它的底层到底是怎么工作的
[23:59.680 --> 24:02.200] 比如说我之前问了一下ChartGVT
[24:02.200 --> 24:06.380] 然后它PiO3是不是生成了一个C扩展
[24:06.380 --> 24:08.540] 然后发现它其实不是
[24:08.540 --> 24:11.260] 那我们就可以请Messence来介绍一下
[24:11.260 --> 24:14.140] 它这个PiO3到底是怎么工作
[24:14.140 --> 24:19.540] 就是它怎么能让排算去调用Rust写的生成的代码
[24:19.540 --> 24:20.300] OK
[24:20.300 --> 24:21.820] 其实前面已经提到了一些
[24:21.820 --> 24:24.820] 就是它首先是通过那些procedural micro
[24:24.820 --> 24:27.940] 来让这个代码写代码的过程变得更简单
[24:27.940 --> 24:29.020] 也更safe
[24:29.020 --> 24:30.220] 那它比方说我举个例子
[24:30.220 --> 24:34.720] 就是你要是一个排算的扩展
[24:34.720 --> 24:35.520] Latel的扩展
[24:35.520 --> 24:37.360] 我们现在说是C扩展
[24:37.360 --> 24:39.800] 就已经不太合适了
[24:39.800 --> 24:41.240] 它得有一个module
[24:41.240 --> 24:42.320] 这个module它肯定
[24:42.320 --> 24:46.120] 它是通过一个C排算的API来创建的
[24:46.120 --> 24:47.760] 那在procedural里面
[24:47.760 --> 24:53.160] 它就会通过一个叫PiO module的一个micro
[24:53.160 --> 24:58.640] 来把你写的一段关于这个module
[24:58.640 --> 25:00.300] 怎么初始化的代码
[25:00.300 --> 25:07.940] 把它变成给那个PiSonCAPI去调用的过程
[25:07.940 --> 25:08.860] 最终来说
[25:08.860 --> 25:09.620] 从本质上来说
[25:09.620 --> 25:12.660] 它和你在CAPI里面
[25:12.660 --> 25:14.860] 就是C扩展里面写法其实没什么区别
[25:14.860 --> 25:21.780] 都是调用了那个PiSonLatel扩展的那个CAPI来初始化成果就
[25:21.780 --> 25:22.980] 然后你在这初始化的代码中
[25:22.980 --> 25:24.100] 可以再加入更多的
[25:24.100 --> 25:26.020] 比方说我要添加一个class
[25:26.020 --> 25:28.100] 或者添加一个function
[25:28.120 --> 25:31.880] 那这些我们通过另外的几个micro
[25:31.880 --> 25:34.320] 比方说PiClass这个micro
[25:34.320 --> 25:35.760] PiFunction这个micro
[25:35.760 --> 25:38.360] 把它注册到这里面去
[25:38.360 --> 25:43.040] 你需要在引力的时候把它加进去就好了
[25:43.040 --> 25:45.680] 所以从底层原理来说
[25:45.680 --> 25:51.640] 我觉得这架子GbT可能它写说的也不完全正确吧
[25:51.640 --> 25:53.240] 对对对
[25:53.240 --> 25:55.200] 我只是把它贴在这
[25:55.200 --> 25:57.000] 对
[25:57.060 --> 25:58.140] 你不能说它是secret
[25:58.140 --> 26:00.300] 但它跟secret的本质没有区别
[26:00.300 --> 26:01.700] 嗯
[26:01.700 --> 26:03.820] OK
[26:03.820 --> 26:06.140] 换句话说
[26:06.140 --> 26:13.620] 就是它首先打包场的肯定是一个动态连接库对吧
[26:13.620 --> 26:15.180] 对
[26:15.180 --> 26:20.860] 然后就是这个动态连接库就是你的PiSon是可以import一个动态连接库
[26:20.860 --> 26:24.060] 就是你把你打包出来什么什么什么.so
[26:24.060 --> 26:25.420] 然后import进来
[26:25.420 --> 26:26.820] 然后import进来之后
[26:26.840 --> 26:30.880] 我理解就是Rust这边它写的
[26:30.880 --> 26:37.080] 就是这个时候你相与你的CPiSon解释器就已经load了一些
[26:37.080 --> 26:40.960] 你通过Rust写或者生成的代码
[26:40.960 --> 26:46.200] 然后接Rust的代码再去调用PiSon解释器里的PiSonCAPI
[26:46.200 --> 26:49.600] 去出使化一些PiSon的对象对吧
[26:49.600 --> 26:50.320] 对的
[26:50.320 --> 26:51.920] 基本上就是
[26:51.920 --> 26:56.640] 然后这些对象就存在于PiSon之中了
[26:56.860 --> 26:58.780] 那其实我还是有点好奇
[26:58.780 --> 26:59.660] 就是说
[26:59.660 --> 27:05.020] 因为听起来你最终创建的还是一个PiSon的对象
[27:05.020 --> 27:09.700] 那这个和你比如说直接写一段PiSon代码创建一个PiSon对象
[27:09.700 --> 27:11.420] 有什么本质的区别呢
[27:11.420 --> 27:12.980] 然后以及就是说
[27:12.980 --> 27:16.020] 如果没有就肯定是有区别
[27:16.020 --> 27:17.860] 那换句话说这个区别
[27:17.860 --> 27:21.820] 另一个问题就是这个区别是怎么带来它的性能上这么大的差异呢
[27:22.800 --> 27:26.160] 呃肯定有
[27:26.160 --> 27:27.440] 我觉得区别也不明显
[27:27.440 --> 27:29.760] 因为你创建一个存PiSon的对象
[27:29.760 --> 27:33.920] 他也是经过了CiPiSon里面类不能写一篇来创建的
[27:33.920 --> 27:34.120] 对吧
[27:34.120 --> 27:37.840] 这些性能上面这个应该区别也不大
[27:37.840 --> 27:43.200] 我觉得现在PiO随这边一个性能比较能够明显感觉到的地方呢
[27:43.200 --> 27:46.200] 是就是从Rust的对象的
[27:47.640 --> 27:51.440] 万成PiSon的对象或者这种PiSon对象再转万成Rust对象
[27:51.460 --> 27:53.340] 这个的开销是比较大了
[27:53.340 --> 27:56.380] 那其他的你说你用Rust的之后
[27:56.380 --> 28:00.540] 用Rust写了一个PiSon的扩展之后带来了性能提升
[28:00.540 --> 28:05.420] 它更多的是因为你用的Rust的代码比较高效
[28:05.420 --> 28:06.060] 比较那个啊
[28:06.060 --> 28:08.940] 不是因为PiOS 3做了什么东西让它比较高效
[28:10.300 --> 28:12.220] 换句话说就是呃
[28:12.220 --> 28:15.900] 你的大部分工作是在你的这个Rust代码里完成
[28:15.900 --> 28:20.540] 但是你只是相于比如说PiSon给Rust那边提供一个输入
[28:20.540 --> 28:21.960] 就是说我要计算一些这个这个这个
[28:21.960 --> 28:24.200] 然后你Rust代码里面计算完了
[28:24.200 --> 28:27.200] 然后再把这个Rust的对象转万成PiSon对象
[28:27.200 --> 28:29.240] 然后送给PiSon解决器对吧
[28:29.240 --> 28:31.080] 这个过程其实有一定开销
[28:31.080 --> 28:32.680] 但它并不是主要的一个过程
[28:32.680 --> 28:34.440] 主要的计算过程都在Rust里完成
[28:34.440 --> 28:36.040] 所以它不能高效
[28:36.040 --> 28:36.480] 是的
[28:36.480 --> 28:39.880] 所以就是你就会遇到那时候你写了一个非常小的一个函数
[28:39.880 --> 28:42.680] 你去然后他传的对象可能比较复杂
[28:42.680 --> 28:47.360] 然后你去本件码会发现他的性能不一定会好于你纯白的写的
[28:48.340 --> 28:50.260] 因为他主要的工作都花在了
[28:51.260 --> 28:52.940] 他把这个对象转换了过程中
[28:55.180 --> 28:56.180] 会有一个问题啊
[28:56.180 --> 29:01.780] 可能可能用别的原型那个PiSon扩展也会有
[29:01.780 --> 29:09.420] 就是那个内分管理是如果我用PiSon去用Rust的写的扩展
[29:09.420 --> 29:13.140] 我需要在PiSon里面去管理Rust那部分的内分吗
[29:13.140 --> 29:14.580] 这个都是被封张掉的
[29:14.580 --> 29:21.280] 就是说你的Rust and Count这些都是通过一个是Rust的本身
[29:21.280 --> 29:23.880] 有一些onel shape这些的可以做一些优化
[29:23.880 --> 29:26.120] 另外就是凡是设计到PiSon对象
[29:26.120 --> 29:29.840] 你肯定是在整个PiS的传递的过程中
[29:29.840 --> 29:33.320] 你会对他做Incredible这种操作
[29:33.320 --> 29:36.800] 但这些整个过程都是被PiSon给封装掉的
[29:36.800 --> 29:39.480] 所以绝大多数情况下你不需要关心
[29:39.480 --> 29:44.660] 哦就是在PiSon里面这个对象应用到零的时候他会去
[29:44.660 --> 29:46.860] 他也会 会不会掉了 可能掉了
[29:46.860 --> 29:51.060] 哦 接下来请复杂的PiSon这个地方
[29:57.140 --> 29:57.900] OK
[29:59.900 --> 30:09.100] 对 然后然后我还那个之前让ChartGPT写了一个Rust如何调用PiSonCPI的例子
[30:10.340 --> 30:15.100] 然后感觉看上去还挺直接的
[30:15.100 --> 30:16.620] 对 倒不知道他写的对不对
[30:17.980 --> 30:19.100] 这个这边上没什么问题
[30:19.100 --> 30:24.580] 就是说你首先要去申明一下你要调用的CAPI的它的寒出签名是什么
[30:24.580 --> 30:29.100] 所以它会有XtonC然后里面会有很多的寒出的签名
[30:29.100 --> 30:33.380] 它里面基本上都是一些指针啊什么之类的东西
[30:33.380 --> 30:35.580] 但就是这个东西它必定要写在这里
[30:35.580 --> 30:39.260] 就比方说PiO所以现在其实它不仅提供了一个叫PiO水的包
[30:39.280 --> 30:42.640] 还提供了一个包叫做PiO水的GUN FFI
[30:42.640 --> 30:45.480] 那个GUN FFI这个包里面的它就是全部都是这种
[30:46.360 --> 30:47.960] 就是C寒出的定义
[30:49.000 --> 30:53.960] 这样的话其实假如你想说我不用PiO水的那些high-level的东西
[30:53.960 --> 30:58.240] 我只想用这些排行CAPI来实现一个困难也是完全可以的
[30:59.240 --> 31:00.560] 只不过这会写得非常有心
[31:01.520 --> 31:03.480] 理解 理解 你也可以用CIA加写对吧
[31:03.480 --> 31:05.160] 就去调对对
[31:05.820 --> 31:06.820] 只不过在CIA里面
[31:06.820 --> 31:09.420] 你的这些寒出定义都已经在投文件里面
[31:09.420 --> 31:13.140] 因为在RUS里面你存在说有投文件这种东西
[31:13.140 --> 31:15.540] 所以你得这样去试密出来
[31:16.180 --> 31:17.580] 但是这个过程是可以自动化的
[31:17.580 --> 31:20.460] 就是说有叫做BindGin的东西
[31:20.460 --> 31:24.540] 它可以把通过输入一个投文件
[31:24.540 --> 31:27.340] 然后产出了还这些寒出签名
[31:28.580 --> 31:28.980] OK
[31:31.340 --> 31:31.860] 好的
[31:31.880 --> 31:36.160] 那我之后也会再把这个单码放到short notes
[31:37.280 --> 31:43.240] 然后就关于PiO水的工作原理
[31:43.240 --> 31:46.720] 不知道大家还有没有什么想多了解的地方
[31:46.720 --> 31:47.480] 我又有个小问题
[31:48.920 --> 31:49.520] 你也说
[31:50.320 --> 31:50.800] 你也说
[31:51.360 --> 31:54.640] 我想了解一下PiO水
[31:54.640 --> 32:00.160] 它主要的工作就是它帮助用户处理了哪些问题
[32:00.260 --> 32:04.060] 就是我们刚刚提到了在PiO水里面管理RUSnation
[32:04.060 --> 32:08.460] 然后还有一个RUS跟PiO水之间的类型转换
[32:08.460 --> 32:08.660] 对吧
[32:08.660 --> 32:10.260] 我觉得这个应该是比较花
[32:10.740 --> 32:11.740] 发工作
[32:11.740 --> 32:13.820] 有大量的工作在里面
[32:13.820 --> 32:15.620] 然后不知道还有什么其他的那个
[32:16.460 --> 32:19.220] 那还有些就是它对于那些PiO水
[32:19.220 --> 32:23.620] 就是已经提供了一些对象做了一层封装
[32:23.620 --> 32:26.340] 比方说你要用到CiPiO水的水准类型
[32:26.340 --> 32:29.220] 那我们会有一个对应的叫PiO水准的对象
[32:29.240 --> 32:34.280] 这样你也可以不通过RUS的这种自动的类型转换
[32:34.280 --> 32:37.080] 你直接通过手工来创建一个PiO水准
[32:37.080 --> 32:38.960] 它就是一个拍摄的对象
[32:38.960 --> 32:41.680] 那另外一个方面的话
[32:41.680 --> 32:47.120] 可能是提供了一个比较方便使用的一个释放Gil
[32:47.120 --> 32:50.800] 能够并发的这种API吧
[32:53.200 --> 32:54.800] Gil这块我还挺好写的
[32:54.800 --> 33:00.020] 也就是说因为我以前看一些那个C扩展和CaGa的拍摄扩展
[33:00.020 --> 33:05.620] 它是说你就是你进入到这个扩展代码里面
[33:05.620 --> 33:07.180] 它实际上就是没有Gil的
[33:07.180 --> 33:10.740] 然后不知道像Rust这边是怎么样
[33:12.500 --> 33:15.660] 这样子的现在是你进入到这个扩展里面的
[33:15.660 --> 33:17.140] 调用它的函数也好方法也好
[33:17.140 --> 33:18.540] 默认是有Gil的
[33:18.540 --> 33:24.700] 你通过一个叫PiO水准的它上面有一个方法
[33:24.700 --> 33:36.200] 叫AllowsRest它就可以让你去在它让你传一个closer
[33:36.200 --> 33:40.480] 这个closer里面的代码就是没有Gil的
[33:40.480 --> 33:42.040] 还是不太理解
[33:42.040 --> 33:44.680] 换一个说你可以去有办法去关掉Gil对吧
[33:44.680 --> 33:45.320] 就是在Rust里面
[33:45.320 --> 33:47.480] 对你有一个函数来关掉Gil
[33:47.480 --> 33:51.840] 但是它为了保证说你这不会关掉Gil是忘了重新把它开启
[33:51.940 --> 33:55.180] 它实际上是通过一个Rust的closer传进去了
[33:55.180 --> 34:01.900] 这样就保证说你这个代码一定是运行在Gil被关了情况下
[34:01.900 --> 34:05.100] 并且你推出最后作用以后Gil会自动回来
[34:05.100 --> 34:06.820] 就有点像PiO的那个上下
[34:06.820 --> 34:13.620] 我就说你再说我把我要关掉Gil的代码传进去
[34:13.620 --> 34:15.420] 执行完之后我会重新开启是吧
[34:16.420 --> 34:25.920] 对 然后这个好处就是说你在这个里面你是没办法写出来说我在里面不小心引用了一个PiO对象这种事情
[34:25.920 --> 34:35.080] 因为有PiO组织上面有些API上的设计它会让你说你要带PiO的LiveTime
[34:35.080 --> 34:40.560] 你有这个LiveTime你想在allowGil allow thread里面去调用的话
[34:40.620 --> 34:41.620] 它是编译不过的
[34:42.780 --> 34:50.620] 你如果想在这个我释放了Gil里面去临时的想要去拿一个创建PiO对象也好
[34:50.620 --> 34:53.340] 你得重新去显示的去获取一个Gil
[34:57.860 --> 35:04.940] 这样就说你很难写出来说写出来的代码真的有现场安全问题或者说就不对
[35:04.940 --> 35:08.140] 就让你写得不对编译期的时候就编译不过了
[35:11.540 --> 35:14.460] 诶 谷杰娜老师好像跟他有问题
[35:14.460 --> 35:18.300] 因为我其实没有过这样的场景
[35:18.300 --> 35:24.540] 所以我比较好奇就是一般什么情况下我们会考虑去关掉Gil然后就做一些任务呀
[35:26.380 --> 35:28.540] 这个肯定有很多场景
[35:28.540 --> 35:31.700] 比方说你要假设你做一个图像设备好了
[35:31.700 --> 35:38.100] 但你的传这个图像的这个数据的过程它肯定要经过拍摄你这个过程
[35:38.120 --> 35:39.880] 这个过程你没办法不经过要
[35:39.880 --> 35:45.080] 但你当你在Rus里面拿到的这个PiO这个Image它的bytes之后
[35:45.080 --> 35:49.080] 这个bytes它就是跟PiO可以跟PiO完全无关的东西了
[35:49.080 --> 35:51.640] 这个时候我去做图像识别的过程
[35:51.640 --> 35:54.520] 它这个代码可能也跟PiO毫无关系的话
[35:54.520 --> 36:01.120] 那我就可以释放掉Gil这样我就可以比方说并发的去识别好几十张图片了
[36:01.120 --> 36:02.280] 还不需要一个一个等
[36:02.740 --> 36:10.020] 就是说相当于是我在PiO调用Rust的过程中
[36:10.020 --> 36:12.660] 我的PiO本身可以是个多线程的任务
[36:12.660 --> 36:21.100] 然后在Rust部分它可以关掉Gil这样的话其实它会有更高的效率
[36:21.100 --> 36:23.980] 它不需要去频繁的获取和释放Gil
[36:23.980 --> 36:35.720] 然后关于刚才信套铁道的那个内存管理我其实还是有一个小疑问
[36:35.720 --> 36:40.520] 就是这个地方是不是其实是因为它已经被编一成一个二进制了
[36:40.520 --> 36:47.480] 就是其实在我PiO调Rust过程中其实就是做了一个直考备
[36:47.480 --> 36:50.760] 然后PiO还是管理自己的内存
[36:50.820 --> 36:54.660] 然后Rust这边也是独自管理自己的内存
[36:54.660 --> 36:57.420] 它双方会有什么关联吗
[36:57.420 --> 36:59.140] 就是在这个垃圾回收上
[37:00.820 --> 37:02.620] 这应该说是会有的呀
[37:02.620 --> 37:05.980] 就是说比方说你实现了一个Struct
[37:05.980 --> 37:07.580] 然后你把它在Rust里面用Struct
[37:07.580 --> 37:09.740] 然后把它封装成了一个PiSentObject
[37:09.740 --> 37:12.420] 你这个PiSentObject在你创建的时候
[37:12.420 --> 37:14.820] 它在PiSent解释器里面它有一个类传
[37:14.840 --> 37:20.920] 但这个类传的内部其实它是包含了Rust的Struct的东西的
[37:20.920 --> 37:22.080] 它可能是一个指针
[37:22.080 --> 37:23.400] 但它也可能直接就用了它
[37:24.400 --> 37:24.960] 它可以是指针
[37:24.960 --> 37:28.640] 可以指针的话你多了一个Indirect可能会比较复杂
[37:28.640 --> 37:30.080] 直接用它会更简单
[37:30.080 --> 37:34.480] 那在这个过程中你需要做的比方说引用技术的话
[37:34.480 --> 37:36.560] 你就直接在这个PiSentObject上做就可以了
[37:37.520 --> 37:37.760] 对吧
[37:37.760 --> 37:40.160] 那如果假如说它有Cycle
[37:40.160 --> 37:42.080] 它需要GCA的支持的话
[37:42.080 --> 37:45.540] 你可以在这个上面实现那些GCA的Project
[37:45.540 --> 37:48.340] 这样的话它多会能够正常工作
[37:48.340 --> 37:50.660] 然后刚才提到的这一部分
[37:50.660 --> 37:53.500] 其实也都是PiSentObject在进行管理和处理
[37:55.660 --> 37:55.980] 对
[37:56.940 --> 37:58.420] 但我听你的意思
[37:58.420 --> 38:03.500] 就是说PiSent的这些对象还是由PiSent解释器自己去管理的
[38:03.500 --> 38:03.740] 对吧
[38:03.740 --> 38:06.780] 就其实和PiSent没有太多关系
[38:07.900 --> 38:11.260] 只是PiSentObject在上面去调用了
[38:11.320 --> 38:15.280] 在它需要的地方去调用了PiSent那些引用技术的加减的那些函数
[38:16.800 --> 38:17.600] 就像于
[38:17.600 --> 38:18.460] 是不是可以理解
[38:18.460 --> 38:23.080] Rust有一套ObjectLiveTime管理
[38:23.080 --> 38:24.160] 虽然我不来手
[38:24.160 --> 38:27.280] 那就是它当Rust发现
[38:27.280 --> 38:27.520] OK
[38:27.520 --> 38:30.400] 我需要去销毁一个对象的时候
[38:30.400 --> 38:37.000] 那我其实就是去调用PiSent的CAPI去把这个它的ReferenceContent引用技术简易
[38:37.000 --> 38:37.800] 是这个意思吗
[38:39.880 --> 38:41.040] 还是说
[38:41.980 --> 38:47.580] 一般来说都是从PiSent这边来发起的说去加减引用技术
[38:47.580 --> 38:50.300] Rust这边它有一些内部的封装
[38:50.300 --> 38:51.980] 所以是反过来
[38:51.980 --> 38:53.860] 是PiSent调用Rust去说OK
[38:53.860 --> 38:54.460] 我要把这个
[38:57.820 --> 38:58.300] 也不是
[38:58.300 --> 39:02.740] 就整个对象的生命周期这个API什么
[39:02.740 --> 39:04.380] 其实应该都是CiPiSent自己去调用的
[39:05.580 --> 39:05.700] 对吧
[39:05.700 --> 39:08.100] 但是你在Rust里面可能会出现一些情况说
[39:08.160 --> 39:10.200] 你需要去给这个东西
[39:10.200 --> 39:11.880] 给你创建的一个对象
[39:11.880 --> 39:12.720] 增加一个引用技术
[39:12.720 --> 39:14.920] 这些是PiSent里面做掉的
[39:14.920 --> 39:16.160] 或者减掉一个PiSent
[39:16.160 --> 39:17.880] 减掉一个引用技术
[39:17.880 --> 39:19.560] 比如说在用户的代码里面
[39:19.560 --> 39:21.960] 在你一些这个Extension的代码里面
[39:21.960 --> 39:23.720] 基本上不太需要关心这些问题
[39:25.400 --> 39:25.840] 理解
[39:29.840 --> 39:30.280] OK
[39:32.840 --> 39:33.360] 好
[39:33.460 --> 39:38.140] 我们也聊了不少关于PiO3内部实现的一些原理
[39:38.140 --> 39:40.820] 然后这个其实会稍微有点底层
[39:40.820 --> 39:46.060] 然后可能听众如果只是想用PiO3写个东西的话
[39:46.060 --> 39:49.580] 我觉得应该不用太过关心这些实现细节
[39:52.140 --> 39:57.020] 我们下一个话题是关于PiSent和Rust发展的
[39:57.020 --> 40:00.300] 就是PiSent加Rust发展的可能性
[40:00.300 --> 40:02.020] 这个是小白题的问题
[40:02.020 --> 40:05.480] 然后你要不要就是来来补充说明一下
[40:05.480 --> 40:15.400] 我只要是想问一下就是作为这个一个核心的这个PiSent加Rust的开发者
[40:15.400 --> 40:19.200] 你对这个PiSent加Rust未来的一个发展可能性的一个判断是什么
[40:19.200 --> 40:23.440] 就是你觉得它是一个必然趋势
[40:23.440 --> 40:25.840] 还是说只是一种辅助性的过渡手段呢
[40:27.280 --> 40:29.200] 我当然觉得它是一个必然趋势了
[40:29.540 --> 40:32.700] 其实PiSent很流行
[40:32.700 --> 40:34.820] Rust其实现在的流行度也很高
[40:34.820 --> 40:38.340] 这里面他们俩结合的点缺也挺多的
[40:38.340 --> 40:41.820] 最典型的就是前面一些说的东西
[40:41.820 --> 40:49.380] 但绝大多数场景都是因为说Rust里面已经有了这个比较高性能的一些酷了之后
[40:49.380 --> 40:54.860] 我PiSent里面想用的时候我就可以比较方便的去通过PiO3来调塌
[40:54.860 --> 40:58.220] 那这个已经有非常多的例子了
[40:58.240 --> 41:02.000] 那还有一种就是说你现在并没有用到
[41:02.000 --> 41:03.560] 你也没有现成的Rust的酷
[41:03.560 --> 41:04.920] 你只是用了个PiSent
[41:04.920 --> 41:09.280] 你觉得可以通过Rust写出来一个更高性能的酷
[41:09.280 --> 41:14.080] 这个也很觉得挺实际的
[41:14.080 --> 41:14.720] 也可以实现
[41:14.720 --> 41:17.240] 所以我觉得整体的发展还是不可以的
[41:17.240 --> 41:19.160] 未来肯定还是会
[41:20.440 --> 41:21.840] 你先说完
[41:21.840 --> 41:24.680] 我说未来肯定还是有比较大的发展空间
[41:24.680 --> 41:27.160] 我刚才听你们在前面聊的过程中
[41:27.220 --> 41:31.780] 然后我简单的理解了一下就是PiSent加Rust
[41:31.780 --> 41:36.580] Rust主要负责的其实是一些中间的处理过程
[41:36.580 --> 41:43.220] 然后最终的呈现它是通过PiO3把这个处理的结果转化成了PiSent的对象
[41:43.220 --> 41:44.020] 是这样吧
[41:44.020 --> 41:45.340] 就是我现在有一个任务
[41:45.340 --> 41:49.980] 然后我觉得这个任务中的某些部分用Rust来处理会比较高效
[41:49.980 --> 41:53.700] 那我就是先用PiSent把他的一些前置性的工作做完
[41:53.700 --> 41:56.900] 简单性的前置性的数据处理做完
[41:56.920 --> 42:02.000] 然后我把我处理完的数据传递给Rust的代码
[42:02.000 --> 42:08.840] 然后Rust在码再用高效的方法把处理过程给做完
[42:08.840 --> 42:11.680] 然后再把处理结果封装之后传给PiSent
[42:11.680 --> 42:13.920] 然后供PiSent去调用
[42:13.920 --> 42:14.480] 是这样吧
[42:21.040 --> 42:26.040] 那这样看的话其实并没有看出Rust在这个过程中的不可替代性在哪
[42:26.060 --> 42:31.820] 因为好像跟我去用PiSent去写也没什么太大的区别
[42:31.820 --> 42:33.940] 就是刚才你们也提到过这个过程
[42:33.940 --> 42:39.780] 现在来看的话就是Rust的唯一的一个优势是在他语言设计的优势上
[42:39.780 --> 42:40.140] 对吧
[42:41.380 --> 42:42.900] 对一个是语言设计
[42:42.900 --> 42:45.820] 然后另外一个就是他现在的整个生态
[42:45.820 --> 42:51.220] 我其实有一个有一个就是接着这个有点类似的问题
[42:51.220 --> 42:56.920] 就是其实在PiSent之前也有一些类似的这种项目
[42:56.920 --> 42:58.160] 也不能说是PiSent吧
[42:58.160 --> 43:00.240] 我印象中那个叫Safe
[43:00.240 --> 43:06.000] 对就是这种说我能够让PiSent去跑这个Side
[43:06.000 --> 43:09.320] 在以及说比如说我有Side
[43:09.320 --> 43:13.480] 对那但是他们好像之前都没有像PiSent这么火
[43:13.480 --> 43:17.280] 就是其实这个也不断单纯是项目
[43:17.280 --> 43:23.900] 就是往往是这个项目连带着他所对应的某一个语言所所带来的这种变化
[43:23.900 --> 43:28.660] 就是感觉O3要比之前的这些项目都要活很多
[43:28.660 --> 43:31.780] 就是包括PiSent的一些开发者也比较喜欢
[43:31.780 --> 43:33.180] 然后去拥抱他
[43:33.180 --> 43:36.020] 就是这里面造成的主要的一些差异是什么
[43:39.140 --> 43:40.420] 差异是Messus
[43:40.420 --> 43:42.620] 就是就是
[43:42.640 --> 43:43.280] 我能够说吧
[43:43.280 --> 43:44.960] 这里面差异我觉得
[43:44.960 --> 43:48.880] 你首先你那些语言比方说你用CiSent来写好吧
[43:48.880 --> 43:51.360] CiSent其实我觉得还开不错了
[43:51.360 --> 43:54.520] 但是他最终最大问题是他写出来的代码
[43:54.520 --> 43:58.560] 既不像C也不像PiSent对吧
[43:58.560 --> 44:01.440] 然后呢你用CiSent写肯定没有问题
[44:01.440 --> 44:05.800] 但是你整个的开发的这个新制成本也好
[44:05.800 --> 44:07.440] 整个就是你debug的过程也好
[44:07.440 --> 44:08.480] 肯定也会更加复杂
[44:08.480 --> 44:12.580] 因为你在那里面写会有很多类似的问题
[44:12.580 --> 44:14.060] 你需要自己去解决
[44:14.060 --> 44:16.620] 虽然说现在已经比以前好很多了吧
[44:16.620 --> 44:20.300] 比如说你要用PiSent的万万去实现的话
[44:20.300 --> 44:21.420] 也还算挺方便的
[44:23.900 --> 44:27.380] 再其次的话我觉得这块能流行起来
[44:27.380 --> 44:32.740] 也很大的原因就是我们现在在整个构建发布这块投入了很多经历
[44:32.740 --> 44:34.980] 因为你用CiSent来写了也好
[44:35.000 --> 44:38.240] 你也很多人其实不知道怎么去把它变成一个
[44:38.240 --> 44:41.440] 就是发布成给很多人用的卧药包
[44:41.440 --> 44:44.180] 就是近些年来说我觉得这方面都有改善
[44:44.180 --> 44:46.480] 因为比方说那个CiSent比较的卧药这个项目
[44:46.480 --> 44:48.480] 都能让这个过程变得比较简单
[44:48.480 --> 44:49.820] 确实就是像
[44:49.820 --> 44:52.360] 对 这个我很同意
[44:52.360 --> 44:55.560] 对 因为我印象中像Saison还比较好说
[44:55.560 --> 45:00.240] 因为它可以在那个那个有一个Build EXT选项中
[45:00.240 --> 45:02.280] 可以先下载下来然后再去Build
[45:02.280 --> 45:04.420] 但是你像那个CiFi
[45:04.420 --> 45:07.740] 就是如果我们要去调CiSent的代码
[45:07.740 --> 45:08.860] 那个就比较复杂
[45:08.860 --> 45:11.580] 可能我要自己全套的搞完
[45:11.580 --> 45:14.980] 然后才能上传到那个
[45:14.980 --> 45:16.260] 才能上传打包上去
[45:17.580 --> 45:19.060] 这里我其实可以举个例子
[45:19.060 --> 45:24.420] 比方说你要编一个就是ABI3的卧药
[45:24.420 --> 45:25.540] 就是所谓ABI3的卧药
[45:25.540 --> 45:28.940] 就是说它这个卧药可以在Python 3.x
[45:28.940 --> 45:31.780] 你选的一个x的版本上面都可以使用
[45:31.780 --> 45:35.200] 而不需要为每一个Python版本都打包一个卧药
[45:35.200 --> 45:37.040] 那它的好处
[45:37.040 --> 45:37.880] 好处已经说了
[45:37.880 --> 45:40.040] 就是可以简化这个发布流程嘛
[45:40.040 --> 45:42.280] 但它就是说我在构建的过程中
[45:42.280 --> 45:45.280] 你比方说在Ninux上构建的时候
[45:45.280 --> 45:47.400] 其实不需要一个在Rust里面
[45:47.400 --> 45:48.240] 我们现在这种做法
[45:48.240 --> 45:50.040] 你不需要一个Python几十器
[45:50.040 --> 45:52.680] 就能够编译出来一个这样的卧药
[45:52.680 --> 45:54.800] 这个就极大的方面的说
[45:54.800 --> 45:57.000] 我现在是在一个Mac下面工作的
[45:57.000 --> 46:00.080] 我是ARC64这种架构下面
[46:00.080 --> 46:03.740] 我想给Ninux下面的x8较的智能编一个卧药
[46:03.740 --> 46:04.700] 让它去用
[46:04.700 --> 46:07.260] 我就只要有一个Cross Compile了
[46:07.260 --> 46:09.940] 我就可以直接去编译出来一个卧药
[46:09.940 --> 46:11.500] 那个版本的卧药它就可以用了
[46:11.500 --> 46:14.660] 但是如果你是比方说Sython也好
[46:14.660 --> 46:15.980] Python1也好
[46:15.980 --> 46:18.380] 你要去Cross Compile这样一个卧药出来
[46:18.380 --> 46:19.540] 会有非常复杂的过程
[46:19.540 --> 46:20.380] 你需要
[46:20.380 --> 46:22.700] 不仅你需要首先有一个Cross Compile了
[46:22.700 --> 46:25.620] 你还要有一个Hose的这个
[46:25.620 --> 46:28.140] 就是你的机器上的这个Python的版本
[46:28.140 --> 46:29.940] 比方说3.10好了
[46:29.940 --> 46:33.400] 你还需要一个Sython8664
[46:33.400 --> 46:37.280] Ninux版本的一个编译好的一个Python放在那里
[46:37.280 --> 46:41.320] 你再去找一个叫做Cross ENV的项目
[46:41.320 --> 46:44.340] 去创建一个假的Vocal ENV
[46:44.340 --> 46:47.280] 假的那种Target architecture的Vocal ENV
[46:47.280 --> 46:49.400] 然后你才能够把整个编译出来
[46:49.400 --> 46:52.720] 这个过程中你还可能会遇到各种各样的问题
[46:52.720 --> 46:53.720] 刚才
[46:53.720 --> 46:54.760] 我好奇
[46:54.760 --> 46:56.520] 你先说
[46:56.520 --> 46:58.000] 你说
[46:58.000 --> 47:02.180] 就是刚才提到的这个跨平台的编译流程
[47:02.180 --> 47:05.460] 就是相当于是由Matrin来负责的
[47:05.460 --> 47:06.780] 对
[47:06.780 --> 47:08.700] Matrin是有办法
[47:08.700 --> 47:10.060] 只是一种
[47:10.060 --> 47:11.260] 太讲就是瞎想
[47:11.260 --> 47:14.220] 就是Matrin是有办法做到语言无关的
[47:14.220 --> 47:16.660] 就是其实我可以负责
[47:16.660 --> 47:19.100] 因为对象转换的都是由各个项目
[47:19.100 --> 47:20.220] 其实实际实现的
[47:20.220 --> 47:21.060] 对比的话
[47:21.060 --> 47:25.340] 我可以认为Python3和Sython是类似的
[47:25.340 --> 47:27.740] 一个层级的东西
[47:27.760 --> 47:29.800] 那是不是Matrin可以
[47:29.800 --> 47:31.640] 有办法支持所有语言
[47:31.640 --> 47:32.720] 想到没有
[47:32.720 --> 47:35.160] 因为其实大部分事情是一致的
[47:35.160 --> 47:37.280] 我觉得所有语言
[47:37.280 --> 47:38.880] 所有语言可能太ambitious了
[47:38.880 --> 47:43.480] 但是我们其实Matrin现在是支持CFFI的
[47:43.480 --> 47:44.880] 但是它支持的主要是说
[47:44.880 --> 47:48.640] 你通过Rust来暴露一个CFFI的借口
[47:48.640 --> 47:51.040] 而不是C那种
[47:51.040 --> 47:55.640] 就是相当于是我搞了一个Rust的转接层来调CFFI
[47:58.640 --> 48:00.760] 就说你在Rust里面只要
[48:00.760 --> 48:02.720] 只要暴露一个C的API就可以了
[48:02.720 --> 48:03.600] 因为你这样
[48:03.600 --> 48:05.960] 你之后出来的本质上就和你C写的没什么区别
[48:05.960 --> 48:07.080] 好
[48:07.080 --> 48:10.720] 然后CFFI它都是要一个构建的那个
[48:10.720 --> 48:12.040] 就是它有个标的过程
[48:12.040 --> 48:14.160] 那个标的过程也可以在Matrin里面把它做掉
[48:16.600 --> 48:18.920] 大概理解了
[48:18.920 --> 48:22.120] 想要跨语言还是有一些有一些挑战呢
[48:22.980 --> 48:29.380] 所以就之前提到说那个
[48:29.380 --> 48:33.940] Matrin在标的方面就简化了这个
[48:33.940 --> 48:35.860] 就很多的这种打包的过程
[48:35.860 --> 48:37.300] 包括就是想交叉编译
[48:37.300 --> 48:40.500] 那我好奇你们是自己写了一套工具练的
[48:40.500 --> 48:42.020] 还是说你们只是
[48:42.020 --> 48:47.460] 你们是在下面就调用了你之前说的那些那些工具
[48:47.460 --> 48:49.380] 要把它都做进Matrin
[48:49.380 --> 48:54.960] Matrin的话基本上你要自己有那个Cross Compile
[48:54.960 --> 48:56.320] 你可以直接用
[48:56.320 --> 48:59.280] 这个主要是有一个注意事项
[48:59.280 --> 49:03.480] 就是你要去构建Many News的那种优要的话
[49:03.480 --> 49:06.800] 你的投资需要符合要求
[49:06.800 --> 49:10.240] 那另外一个就是我们提供的就是跟Zig CC的支持
[49:10.240 --> 49:11.760] 就是Integration的话
[49:11.760 --> 49:13.720] 你直接装一下那个Zig的话
[49:13.720 --> 49:17.960] 你就可以直接把Zig当成一个Cross Compile来用
[49:17.980 --> 49:20.220] 这样的话就会非常简单
[49:20.220 --> 49:21.820] 那它默认的是哪种
[49:21.820 --> 49:25.900] 就是默认的是你机器上的
[49:25.900 --> 49:27.340] 就是你自己提供的
[49:27.340 --> 49:32.020] ok 那它其实还是依赖于你机器上有一个Cross Compile对吧
[49:32.020 --> 49:33.700] 对对
[49:33.700 --> 49:36.860] 但是装进Cross Compile相对来说还是比较简单的
[49:36.860 --> 49:40.940] 你比方说你在Matef上基本上你APT,Gator也好,Yummy, News到也好
[49:40.940 --> 49:43.540] 都能够装到一个Cross Compile了
[49:43.540 --> 49:47.580] 那所以反而是说你要提供一个
[49:47.600 --> 49:51.040] 就是你要交叉边移的对象的那个版本的Python
[49:51.040 --> 49:53.720] 再搞出来一个环境会更复杂
[49:53.720 --> 49:57.040] 那这部分就是Matef是怎么把它减化掉的
[49:57.040 --> 49:59.960] 所以它为什么可以不依赖于对象版本Python
[49:59.960 --> 50:06.400] 这个很大程度上是因为Rust不需要一个Head File
[50:06.400 --> 50:10.000] 就是我们已经有了所有的我需要的东西了
[50:10.000 --> 50:15.000] 就是那个函数签名已经在PyO水里FFI里面有了
[50:15.000 --> 50:20.320] 然后因为我是ABS3,假如这种东西是ABS3的
[50:20.320 --> 50:22.300] 我不需要念接一个Cpython的
[50:22.300 --> 50:27.060] 我不需要关心这个Cpython的那个它的一个运行室的一些信息
[50:27.060 --> 50:32.060] 就是这样我就可以在没有一个Cpython存在的情况下
[50:32.060 --> 50:33.260] 就去把它勾结出来
[50:33.260 --> 50:37.620] 因为这个东西怎么说呢有一颗flag,就是link的flag
[50:37.620 --> 50:41.060] 它是可以说这些undefined的symbol
[50:41.060 --> 50:43.740] 我可以先在念接的时候可以不管嘛
[50:43.740 --> 50:47.880] 这就是让我们能够实现说你在勾结的过程中
[50:47.880 --> 50:52.720] 不需要有一个Python解释器的编译过程里放在这里
[50:52.720 --> 50:58.320] 那换句话说这个是我没有完全理解
[50:58.320 --> 51:02.960] 但是它是依赖于是跟Rust的语言本身的特性有关的
[51:02.960 --> 51:10.440] 还是说是跟Matef的实现有关
[51:10.440 --> 51:13.480] 主要我觉得是跟Rust的语言有关吧
[51:13.540 --> 51:17.060] 跟Matef的实现有关是一个跟Windows比较相关的东西
[51:17.060 --> 51:19.620] 因为在Windows下并没有存在一个说
[51:19.620 --> 51:23.420] 你在念接一个外部的shared library的时候
[51:23.420 --> 51:27.340] 它必须得存在一个所谓的import library的东西
[51:27.340 --> 51:28.940] 那这样的话也就是说你在写
[51:28.940 --> 51:31.500] 构建一个Python的Windows的那个我要的时候
[51:31.500 --> 51:36.660] 你必须得存在一个对应的版本的Python解释器编译好的东西
[51:36.660 --> 51:38.540] 一个dll团件
[51:38.540 --> 51:40.740] 那我们在这里面是怎么解决的呢
[51:40.740 --> 51:45.880] 我们通过说一个叫Py3-dll-a的项目
[51:45.880 --> 51:52.960] 它通过去把Cpython里面有一个叫它所有的导书符号的那个列表
[51:52.960 --> 51:56.480] 把那个列表从那个列表自己生成一个import library
[51:56.480 --> 51:58.880] 这样我们在Matef的构建的过程中
[51:58.880 --> 52:06.320] 我们通过这个东西生成一个临时的一个Cpython的所有接口的一个dll
[52:06.320 --> 52:07.640] 让它去念接这个东西
[52:07.640 --> 52:13.300] 并且指定说它的dll的名称实际上是Cpython什么东西
[52:13.300 --> 52:15.780] 这样就可以构建出来一个Windows的一个我要
[52:15.780 --> 52:20.700] 但你不需要提前去构建一个对应的版本的Windows的Python
[52:21.780 --> 52:24.580] ok interesting
[52:24.580 --> 52:27.540] 对感觉这段还是有有挺多细节的
[52:27.540 --> 52:31.540] 但但最后其实能够达到效果
[52:31.540 --> 52:35.980] 就是说你其实在比如说Linux然后的Mac上
[52:35.980 --> 52:42.320] 都可以不仅便于Linux和Mac的那个Python的可以调原库
[52:42.320 --> 52:45.760] 然后也可以生成Windows版本的dll是这一项
[52:45.760 --> 52:46.520] 对的
[52:46.520 --> 52:48.280] 那确实还是很强大的
[52:50.280 --> 52:52.800] 对其实那个关于之前就回到之前那个问题
[52:52.800 --> 52:58.760] 就是为什么其他的那个Sython或者PyBind的11就是这些
[52:58.760 --> 53:02.240] 这些都没有PyO3火我觉得
[53:02.240 --> 53:04.560] 就是确实在我看来就是两个原因
[53:04.660 --> 53:06.740] 第一个是Rust的语言本身非常优秀
[53:06.740 --> 53:14.340] 然后就是像连续多少年PyBind都是那个StackoverFlow开发者最喜欢的语言
[53:14.340 --> 53:16.620] 我觉得产年了五年还是六年第一
[53:16.620 --> 53:17.860] 这个已经很说明问题了
[53:17.860 --> 53:19.620] 就是大家都非常想写Rust
[53:19.620 --> 53:28.780] 然后然后第二个就是确实PyO3和Matery的可用性做的非常好
[53:28.780 --> 53:31.260] 然后远超其他的这些工具吧
[53:31.280 --> 53:38.680] 对然后其中反正我看到很多网上的人就是真的是对Messence有非常高的评价
[53:38.680 --> 53:42.080] 然后就是可以说是功不可没吧
[53:42.080 --> 53:44.360] 对这个其实像这种工具
[53:44.360 --> 53:49.560] 我我的理解还是挺依赖于维护者的个人
[53:49.560 --> 53:53.960] 个人努力或者说个人的一些contributions这样子
[53:55.960 --> 54:00.000] OK然后这方面聊到这个话题了
[54:00.000 --> 54:03.060] 我有一个就是跟前面有关的问题
[54:03.060 --> 54:04.140] 然后我刚才实验一下
[54:04.140 --> 54:06.460] 就是刚才在讲Matery的时候
[54:06.460 --> 54:12.860] 讲过是可以用那个纯Rust去写一个那个包然后上传到那个PyPI
[54:12.860 --> 54:17.900] 然后我刚才看了一下那个RUFF好像就是这样的一个例子
[54:17.900 --> 54:22.700] 我的一个问题是就是这样像这样我写的这个纯Rust的这种包
[54:22.700 --> 54:26.140] 他在这个Python引用的时候
[54:26.140 --> 54:29.620] 他怎么去做的那个model的这个解析呢
[54:29.680 --> 54:32.400] 或者是他可能做model的解析吗
[54:32.400 --> 54:40.040] 因为我看这个RUFF他只是给出了一个这个FundBin的一个一个方法
[54:40.040 --> 54:43.120] 就是说他在引用的时候是去找到并文件
[54:43.120 --> 54:45.280] 然后去调用那个并文件
[54:45.280 --> 54:46.520] 我可以这么解释一下吧
[54:46.520 --> 54:49.600] 他其实不需要那个刚刚Madein.py里面的这个逻辑
[54:49.600 --> 54:55.200] 这个逻辑仅仅是为了方便你用Python-MRust来调用它
[54:55.200 --> 54:59.820] 我想的一个我关注的一个点是如果说我想要Import它
[54:59.820 --> 55:02.700] 然后或者是Import它点什么东西的时候
[55:02.700 --> 55:05.660] 他怎么去做这个model的解析
[55:05.660 --> 55:08.060] 他现在这种方式是不能够Import的
[55:08.060 --> 55:10.780] RUFF他仅仅是个Binary
[55:10.780 --> 55:14.340] 那就是说如果你想Import的你必须得是一个Extension模组
[55:15.780 --> 55:16.780] 这个地方我可能不太理解
[55:16.780 --> 55:24.700] 然后我其实比较关注的是如果说我用纯Rust是可以写出一个能被Python-解析model的一个包吗
[55:24.760 --> 55:26.080] 可以啊
[55:26.080 --> 55:27.720] 那你就得用Python了嘛
[55:27.720 --> 55:30.920] 对 我的意思就是说不依赖于Python
[55:30.920 --> 55:34.920] 那你也可以直接去用那个Cython的那些CAPI来实现
[55:34.920 --> 55:36.480] 没有问题
[55:36.480 --> 55:37.760] 应该会很复杂
[55:37.760 --> 55:40.520] 对 周围很复杂 很恶心
[55:40.520 --> 55:41.480] 好的 理解了
[55:43.040 --> 55:43.280] 好
[55:43.280 --> 55:44.200] OK 我没问题了
[55:45.400 --> 55:46.600] 好 好的
[55:46.600 --> 55:51.200] 对 然后对 然后最后最后我们就是想
[55:51.220 --> 55:53.340] 你刚才也聊到就是说
[55:53.340 --> 56:00.940] 所以开源项目其实很依赖于维护者的努力
[56:00.940 --> 56:05.340] 然后维护者往里面投入了多少时间
[56:05.340 --> 56:06.180] 对
[56:06.180 --> 56:10.860] 像L3和Matrin就是典型的非常成功的例子
[56:10.860 --> 56:13.060] 那么我们也是非常好奇
[56:13.060 --> 56:21.480] 就是Mathens作为一个这种非常重要的底层开源项目的维护者的一些经历
[56:21.480 --> 56:25.960] 然后就是你可不可以了解
[56:25.960 --> 56:30.800] 就是像你是怎么接触到就是Python和Matrin
[56:30.800 --> 56:33.200] 并且成为它的维护者
[56:33.200 --> 56:35.720] 因为我感觉就是很多人可能接触到
[56:35.720 --> 56:40.240] 但是到成为维护者中间似乎是有一道门槛在的
[56:40.260 --> 56:45.300] 然后就是在这个功能中你有没有一些经历想分享给听众的
[56:45.300 --> 56:49.700] OK 其实我接触Python3这个还是比较早的
[56:49.700 --> 56:54.220] 因为在17年的时候就开始尝试它的时候
[56:54.220 --> 56:57.420] 然后那个时候我在用的功能中也遇到过一些问题
[56:57.420 --> 57:00.100] 然后就会去给它提一些PR什么的
[57:00.100 --> 57:03.580] 然后可能提了也没几个PR的话
[57:03.580 --> 57:08.660] 那个当时的creator那个Nicola Kim就邀请我加入了Python3这个组织
[57:08.660 --> 57:11.080] 因为它还是挺开放的
[57:11.080 --> 57:15.360] 后来就是说它创建的Actus那个组织的时候
[57:15.360 --> 57:18.960] 做Actus Web的时候也是这么搞
[57:18.960 --> 57:23.120] 就是很早的就会去邀请一些早期的贡献者来加入到这个组织
[57:25.360 --> 57:30.240] Matrin的话就会就我本来已经在这Python随着组织里面了
[57:30.240 --> 57:32.800] 但是我刚开始并没有去开发它
[57:32.800 --> 57:38.220] 对吧 然后中间其实说从我们之前的公司被Mai收购之后
[57:38.220 --> 57:44.220] 在中间有一段时间其实我是应该好几年时间都没有怎么去给Coyote3做contribute
[57:44.220 --> 57:47.020] 然后在21年的时候吧
[57:47.020 --> 57:55.220] 然后当时它一年应该是视频我发布ME的时候吗
[57:55.220 --> 57:56.260] 对
[57:56.260 --> 57:59.660] OK 那时候因为我当时比较感兴趣的一个点就是
[57:59.680 --> 58:03.760] 那个他当时发布了就Universal 2的那个架构
[58:03.760 --> 58:06.660] 对吧 他可以通过在一个Binary
[58:06.660 --> 58:12.080] 包含G包含X864的也包含ARC64的两个Binary
[58:12.080 --> 58:16.480] 我当时去做Matrin的第一个任务呢
[58:16.480 --> 58:23.720] 就是想把想给Matrin增加生成Universal 2不要的一个功能
[58:23.720 --> 58:30.220] 然后在那个之后做完那个之后呢也去做了很多其他相关的一些改进吧
[58:30.220 --> 58:38.620] 然后就逐渐的就那个当时Matrin的creator就是那个怎么读的我也不知道
[58:38.620 --> 58:45.740] KONSTIN 它就慢慢的就会让我主动去merge那些那些PR
[58:45.740 --> 58:47.740] 也去review一些别人的PR
[58:47.740 --> 58:50.820] 然后后来有一天我就收到他有件
[58:50.820 --> 58:54.240] 他说他的工作可能比较忙吧
[58:54.240 --> 58:57.640] 他现在没有时间去管这些Matrin这个项目了
[58:57.640 --> 59:01.520] 他就让我去全权的去负责这个项目的维护
[59:01.520 --> 59:05.120] 然后这样我就成为了他的一个主要的menting了
[59:05.120 --> 59:10.080] 哦 感觉就是就是因为你非常强
[59:10.080 --> 59:15.800] 然后就被社区的那些就是那两个库的创立者就很认可你
[59:15.820 --> 59:20.660] 然后就我就说OK你来你来听了维护
[59:20.660 --> 59:28.660] 不过他现在说那个Matrin的原来的creator他现在因为他加入了那个rough的那家公司
[59:28.660 --> 59:34.100] 所以他应该现在也会有一些时间来维护一些这边的东西
[59:34.100 --> 59:36.100] ok interesting
[59:36.100 --> 59:41.780] 那rough他们公司有没有去找你就是说你来加入我们
[59:42.240 --> 59:44.240] 并没有
[59:44.240 --> 59:47.120] 而且他找我我也我也没办法去啊
[59:47.120 --> 59:51.400] 因为我当时已经在跟这边在在聊入职的事情了
[59:51.400 --> 59:53.400] ok ok
[59:53.400 --> 01:00:01.080] 对那有没有就是比如说你在维护看项目过程中有没有什么有意思的经历
[01:00:01.080 --> 01:00:03.080] 除了刚才说的
[01:00:03.080 --> 01:00:05.080] ok
[01:00:05.080 --> 01:00:09.560] 我觉得可能现在有一个就是我现在这家公司我怎么来的
[01:00:09.620 --> 01:00:11.620] 就是通过他们通过给他们来找我的
[01:00:13.460 --> 01:00:19.620] 只是他他之前是我的给他sponsor然后来他问我有没有兴趣
[01:00:19.620 --> 01:00:22.820] 然后我们就开始了这个够大过程之后就入职了
[01:00:22.820 --> 01:00:28.140] 因为他们也用Rust对吧然后也用拍摄对对ok
[01:00:28.140 --> 01:00:30.660] 那他们就是也用pl3吗
[01:00:30.660 --> 01:00:33.060] 对也用的Matrin也用
[01:00:33.060 --> 01:00:35.660] 哦那确实
[01:00:37.540 --> 01:00:38.820] 相对来说比较合适吧
[01:00:40.300 --> 01:00:43.260] 对这样搞工作就很理想啊
[01:00:43.260 --> 01:00:50.580] 就是呃你知道这个公司至少让他们看重你的开源的经历
[01:00:50.580 --> 01:00:53.740] 然后也不会说啊你这个做开源
[01:00:53.740 --> 01:00:55.540] 然后你就没有做我们公司的货
[01:00:55.540 --> 01:00:58.580] 是这个还是挺好
[01:00:58.580 --> 01:01:02.460] 嗯这个其实缓解了我呃从蚂蚁蚁之后的焦虑啊
[01:01:04.300 --> 01:01:08.060] 其实我我这中间其实修了接近半年时间没有去工作
[01:01:09.040 --> 01:01:12.520] 哎那你在蚂蚁的时候就是有时间维护
[01:01:13.800 --> 01:01:15.560] 看一下我会不会比较忙
[01:01:15.560 --> 01:01:18.000] 呃其实我在蚂蚁的话前几年的话
[01:01:18.000 --> 01:01:21.720] 就是18年到20年的话其实时间没有那么多
[01:01:22.360 --> 01:01:27.120] 那基本上都是靠一些就是呃下班的时间啊
[01:01:27.120 --> 01:01:28.640] 和周末时间来维护一些
[01:01:28.640 --> 01:01:31.720] 但是到21年的时候
[01:01:31.720 --> 01:01:34.240] 因为当时我就基本上是在带团队
[01:01:34.420 --> 01:01:37.340] 然后呃也基本上没有什么
[01:01:38.540 --> 01:01:39.900] 也不是说没有时间写带吗
[01:01:39.900 --> 01:01:43.260] 还是说对我的要求并不是写带吗了
[01:01:43.260 --> 01:01:45.820] 所以我其实有很多的时间来去做一些开源项目
[01:01:47.340 --> 01:01:47.820] 哦
[01:01:50.220 --> 01:01:52.620] 就是上班是带团队下班写带吗
[01:01:54.140 --> 01:01:54.740] 可以可以
[01:01:56.820 --> 01:01:58.460] 我不知道信套当时是不是也是这样
[01:02:00.540 --> 01:02:01.020] 呃
[01:02:01.520 --> 01:02:04.360] 不是这样我是上班写带吗
[01:02:04.360 --> 01:02:05.360] 上班就没时间了
[01:02:08.400 --> 01:02:12.360] 所以所以结论是搞开源的要先成为manager吗
[01:02:16.680 --> 01:02:17.160] 嗯
[01:02:18.440 --> 01:02:19.520] 挺好玩的
[01:02:19.520 --> 01:02:24.360] OK那那可能下一个问题就是像呃
[01:02:25.080 --> 01:02:28.600] 你是怎么平衡日常工作和客人项目维护的呢
[01:02:28.620 --> 01:02:32.260] 然后还是说你在这家现在这家公司
[01:02:32.260 --> 01:02:34.100] 因为他本身就用PLS
[01:02:34.100 --> 01:02:37.700] 然后你可以在一些工作时间去正大光明的维护
[01:02:37.700 --> 01:02:38.740] 我看得像
[01:02:40.060 --> 01:02:42.220] 那对于这家公司来说
[01:02:42.220 --> 01:02:43.380] 我觉得差不多是这样的
[01:02:43.380 --> 01:02:48.460] 至少我们现在的就是还是比较认可这些活的
[01:02:48.460 --> 01:02:51.300] 就是说在日常工作中遇到问题也好
[01:02:51.300 --> 01:02:52.260] 能够帮他修的话
[01:02:52.260 --> 01:02:55.340] 最好还是能够秉承着那种upstream force的方式
[01:02:55.340 --> 01:02:56.860] 去帮他们去解决掉这问题
[01:02:58.600 --> 01:03:02.340] 那其他的方面我觉得平衡的话
[01:03:02.340 --> 01:03:07.860] 就是你自己对你就是开源工作中
[01:03:07.860 --> 01:03:09.580] 遇到的那些问题也好
[01:03:09.580 --> 01:03:13.380] 你想做的非切要有一个你自己的优先级的判断吗
[01:03:13.380 --> 01:03:16.020] 那现在因为我维护的项目还挺多的
[01:03:16.020 --> 01:03:19.420] 然后遇到非常多的人提一些艺术也好
[01:03:19.420 --> 01:03:21.220] 那里面有一些艺术
[01:03:21.220 --> 01:03:24.220] 那明显明显就是没有讲清楚的
[01:03:24.220 --> 01:03:26.260] 我可能也就不会去看了
[01:03:26.260 --> 01:03:29.080] 就是主要去解决一些比较重要的事情
[01:03:29.080 --> 01:03:30.880] 嗯
[01:03:30.880 --> 01:03:33.360] 对就像你还维护微chat派
[01:03:33.360 --> 01:03:35.760] 这个也是非常好的一个项目
[01:03:35.760 --> 01:03:38.560] 啊那个项目其实现在已经基本上没那么花时间了
[01:03:38.560 --> 01:03:40.880] 因为这个项目比较特殊
[01:03:40.880 --> 01:03:42.840] 因为他必须要有微信的那些
[01:03:42.840 --> 01:03:45.240] 那些他把明的正好才能够去
[01:03:45.240 --> 01:03:46.600] 真正的去测试
[01:03:46.600 --> 01:03:49.200] 但是当我不再在这个领域工作以后
[01:03:49.200 --> 01:03:53.120] 我基本上已经没办法去真正去做他了
[01:03:53.120 --> 01:03:55.000] 啊
[01:03:55.000 --> 01:03:59.100] 那可能就是考虑找几个比较活跃的人
[01:03:59.100 --> 01:04:02.300] 然后教给他们维护这样子
[01:04:02.300 --> 01:04:02.940] 尝试过了
[01:04:02.940 --> 01:04:04.180] 但是其实效果不是很好
[01:04:04.180 --> 01:04:04.780] 因为
[01:04:04.780 --> 01:04:05.780] OK
[01:04:05.780 --> 01:04:07.180] 大家都会遇到相当的问题
[01:04:07.180 --> 01:04:10.180] 就是我不再在微信的生态里面去做了
[01:04:10.180 --> 01:04:10.660] 对吧
[01:04:10.660 --> 01:04:12.220] 就没办法再去维护了
[01:04:12.220 --> 01:04:13.180] 嗯嗯
[01:04:13.180 --> 01:04:14.860] 对对
[01:04:14.860 --> 01:04:16.860] 呃
[01:04:16.860 --> 01:04:17.420] 好
[01:04:17.420 --> 01:04:18.820] 那我有一个小问题
[01:04:18.820 --> 01:04:19.660] 然后
[01:04:19.660 --> 01:04:21.580] 哈哈
[01:04:21.600 --> 01:04:24.160] VCHAN的派就是
[01:04:24.160 --> 01:04:25.440] 可以
[01:04:25.440 --> 01:04:28.560] 所以现在Mathans还是在维护吗
[01:04:28.560 --> 01:04:33.160] 还是或者说他现在是一个什么样的状态啊
[01:04:33.160 --> 01:04:36.800] 我觉得他现在可以说是Passionally Maintained的
[01:04:36.800 --> 01:04:39.480] 就是如果有人来TPR有什么我会Review
[01:04:39.480 --> 01:04:44.880] 但是我自己并不会去做一些Facial或者Bug Fix了
[01:04:44.880 --> 01:04:46.160] 哎那嗯
[01:04:46.160 --> 01:04:48.160] 所以PIA怎么测试啊
[01:04:48.180 --> 01:04:50.380] 如果Review不测试的话
[01:04:50.380 --> 01:04:52.660] 不会有问题
[01:04:52.660 --> 01:04:55.740] 所以这个就得看那个TPR的人
[01:04:55.740 --> 01:04:58.580] 他的一些你以前的一些Track Record之类的东西
[01:04:58.580 --> 01:05:00.700] 以及我需要去看一些文档是有的
[01:05:00.700 --> 01:05:03.020] 至于他实际上运行起来有没有问题
[01:05:03.020 --> 01:05:04.740] 我已经没办法知道了
[01:05:04.740 --> 01:05:06.420] 嗯
[01:05:06.420 --> 01:05:09.300] 我现在就在带着我们团队的另一个人
[01:05:09.300 --> 01:05:11.420] 再造一个新的轮子
[01:05:11.420 --> 01:05:14.220] 我们那天我们那天还在想名字
[01:05:14.220 --> 01:05:18.400] 然后我们发现那个PYVChat被人抢住了
[01:05:21.400 --> 01:05:23.480] 就是那个PYPI里边那个包
[01:05:23.480 --> 01:05:25.280] 他是他就注册了一个名字
[01:05:25.280 --> 01:05:27.120] 然后什么代码也没传
[01:05:27.120 --> 01:05:28.520] 嗯这种人太丑了
[01:05:28.520 --> 01:05:30.200] 我说现在没那个
[01:05:30.200 --> 01:05:31.920] 可烦这种
[01:05:31.920 --> 01:05:34.520] 然后我们就找了一个VChat API
[01:05:37.560 --> 01:05:42.480] 哎为啥你们不直接在VChat派上继续开发
[01:05:42.500 --> 01:05:45.660] VChat API他好像是用的那个
[01:05:45.660 --> 01:05:47.020] 就是我们主要是微信支付
[01:05:47.020 --> 01:05:50.220] 然后他那个微信支付的接口好像是v2的
[01:05:50.220 --> 01:05:50.740] 对吧
[01:05:50.740 --> 01:05:52.100] 如果我们一击脱的话
[01:05:52.100 --> 01:05:54.500] 对有一个人有一个人要提PYVChat
[01:05:54.500 --> 01:05:57.260] 但是其实也没有做完
[01:05:57.260 --> 01:05:57.540] 对
[01:05:57.540 --> 01:05:59.860] 然后我们主要是因为我们是个新项目
[01:05:59.860 --> 01:06:03.020] 然后我们想的就是直接用最新的那个接口
[01:06:03.020 --> 01:06:05.700] 因为v2好像是计划要报废的
[01:06:06.980 --> 01:06:08.700] 嗯
[01:06:08.700 --> 01:06:08.940] 对
[01:06:08.940 --> 01:06:11.140] 然后所以说我们就想着正好锻炼团队
[01:06:11.240 --> 01:06:13.160] 我就想着带着他们一块儿照我轮着
[01:06:16.040 --> 01:06:16.360] 我好
[01:06:16.360 --> 01:06:17.720] 为什么你们都带团队了
[01:06:17.720 --> 01:06:19.880] 我感觉没有带团队
[01:06:21.880 --> 01:06:22.320] 也没有
[01:06:22.320 --> 01:06:23.680] 我这个都不算是团队
[01:06:23.680 --> 01:06:26.360] 就是懂得说我们公司本来就小
[01:06:26.360 --> 01:06:30.120] 然后就只能是会的跟不会的多讲一点
[01:06:30.120 --> 01:06:33.160] 然后我就我想的就是通过项目来迭代
[01:06:33.880 --> 01:06:34.240] 没事
[01:06:34.240 --> 01:06:38.560] 我给自己没有时间维护开源项目找到理由
[01:06:38.560 --> 01:06:40.080] 就是因为我还没有带团队
[01:06:41.520 --> 01:06:42.320] 所以我带了团队
[01:06:42.320 --> 01:06:43.560] 我就可以去搞开源
[01:06:46.480 --> 01:06:46.840] OK
[01:06:46.840 --> 01:06:54.800] 那就是这个还有一个问题就是向Messence你作为一个开源项目维护者
[01:06:54.800 --> 01:06:57.880] 然后你觉得就是我们作为普通用户
[01:06:57.880 --> 01:07:01.920] 然后有什么办法能更好地支持开源项目
[01:07:01.920 --> 01:07:04.120] 以及你们这些维护者吗
[01:07:04.120 --> 01:07:05.840] 那这次我觉得就两点吧
[01:07:05.840 --> 01:07:08.720] 一个就是当你来提议书的时候
[01:07:08.720 --> 01:07:11.820] 能够把信息提供的全面一些
[01:07:11.820 --> 01:07:13.860] 这样你就已经能够接受很多时间了
[01:07:14.980 --> 01:07:17.580] 对另外一个的话就是个人也好
[01:07:17.580 --> 01:07:19.020] 企业也好
[01:07:19.020 --> 01:07:20.860] 如果能有钱四方四一下
[01:07:20.860 --> 01:07:22.220] 那就最好能四方四一下
[01:07:23.820 --> 01:07:24.660] 听着我们
[01:07:24.660 --> 01:07:28.020] 然后尤其是那个一业的一些负责人啊
[01:07:28.020 --> 01:07:31.460] 就是真诚的呼吁
[01:07:31.460 --> 01:07:31.980] 对
[01:07:31.980 --> 01:07:36.740] 就是可能对于你们是一些非常微小的金钱
[01:07:36.760 --> 01:07:40.240] 但是对于开源项目维护来讲就是值关重要
[01:07:40.240 --> 01:07:42.600] 现在是尤其是尤其是当
[01:07:42.600 --> 01:07:46.520] 像如果你们的公司用了这个开源项目的话
[01:07:46.520 --> 01:07:46.720] 对吧
[01:07:46.720 --> 01:07:51.160] 你们肯定也不希望就是说这些项目有一天维护不下去了
[01:07:51.160 --> 01:07:54.160] 这样对大家都是有很大的不变
[01:07:58.960 --> 01:07:59.320] 对
[01:07:59.320 --> 01:08:01.360] 然后好
[01:08:01.360 --> 01:08:06.080] 那就是让大家关于开源项目维护这块
[01:08:06.080 --> 01:08:09.340] 还有没有什么问题或者想聊的话题呢
[01:08:13.900 --> 01:08:14.300] OK
[01:08:14.300 --> 01:08:15.180] 如果没有的话
[01:08:15.180 --> 01:08:18.580] 那我们就进入今天最后一环节
[01:08:18.580 --> 01:08:21.420] 就是我们每次都会有的就是推荐
[01:08:21.420 --> 01:08:24.420] 然后那个之前我忘记你说了
[01:08:24.420 --> 01:08:30.420] 但是就是我们就是每次都会让嘉宾然后推荐一个东西吧
[01:08:30.420 --> 01:08:31.860] 就是什么东西都可以
[01:08:31.860 --> 01:08:33.240] 像你看了书啊
[01:08:33.240 --> 01:08:35.760] 然后你或者玩游戏啊
[01:08:35.760 --> 01:08:36.720] 就是什么都行
[01:08:36.720 --> 01:08:40.560] 然后可以看有没有什么想推荐
[01:08:40.560 --> 01:08:41.560] OK
[01:08:41.560 --> 01:08:44.320] 我其实之前看那个文档看到了这个东西
[01:08:44.320 --> 01:08:46.600] 我就是推荐两个东西吧
[01:08:46.600 --> 01:08:49.280] 第一个就是最近其实也比较火的那个opstock
[01:08:49.280 --> 01:08:52.480] 还替代麦克商的那些dalker的东西
[01:08:52.480 --> 01:08:54.080] 我觉得用起来还挺舒服的
[01:08:54.080 --> 01:08:54.960] 这个怎么拼的
[01:08:56.160 --> 01:08:58.160] ORB STICK
[01:08:59.160 --> 01:09:01.080] ORB STICK
[01:09:02.060 --> 01:09:04.060] TACK
[01:09:04.060 --> 01:09:06.060] OP STICK
[01:09:06.060 --> 01:09:08.060] 我听说过这个OK
[01:09:08.060 --> 01:09:10.060] OP STICK
[01:09:10.060 --> 01:09:12.060] ORB不是OB
[01:09:12.060 --> 01:09:13.100] ORB
[01:09:13.100 --> 01:09:17.900] 另外一个的话就是我现在在工作中会用到的就是平常我是用的麦克
[01:09:17.900 --> 01:09:21.900] 但是我现在工作中它是远程到一个Windows的机器
[01:09:21.900 --> 01:09:22.380] 所以呢
[01:09:22.380 --> 01:09:24.660] 然后又是用一个比较大的比较宽的屏幕
[01:09:24.660 --> 01:09:28.540] 然后Windows上有一个比较好用的一个Windows版面叫Fancy WM
[01:09:29.520 --> 01:09:31.520] Fancy WM
[01:09:31.520 --> 01:09:33.520] Fancy Window Manager
[01:09:33.520 --> 01:09:34.520] 对
[01:09:34.520 --> 01:09:36.520] 我觉得还不错
[01:09:36.520 --> 01:09:38.520] 那有什么卖点呢
[01:09:38.520 --> 01:09:44.520] 就是安装那完了就可以很方便的管理
[01:09:44.520 --> 01:09:46.520] 我基本上要的也就是屏幕
[01:09:46.520 --> 01:09:50.520] 就是几个窗口屏幕这样子
[01:09:50.520 --> 01:09:52.520] OK
[01:09:52.520 --> 01:09:54.520] 好那这两个
[01:09:55.500 --> 01:09:59.500] 都是算是和开发者相关的比较相关的工具吧
[01:09:59.500 --> 01:10:03.500] 然后我们都会把那个链接放到shownotes
[01:10:03.500 --> 01:10:05.500] 所以你就推荐这两个吗
[01:10:05.500 --> 01:10:07.500] 对
[01:10:07.500 --> 01:10:09.500] 好那我们就是
[01:10:11.500 --> 01:10:13.500] 就我们主播也来推荐一下吧
[01:10:13.500 --> 01:10:15.500] 然后谁先来
[01:10:15.500 --> 01:10:17.500] 然后信桃你先来吧
[01:10:19.500 --> 01:10:21.500] 我还有没什么
[01:10:21.500 --> 01:10:23.500] OK
[01:10:24.480 --> 01:10:25.480] 行
[01:10:25.480 --> 01:10:27.480] 那小白
[01:10:27.480 --> 01:10:29.480] 我最近在看那个
[01:10:29.480 --> 01:10:30.480] 什么在看书
[01:10:30.480 --> 01:10:32.480] 但是我觉得我看这两本书太
[01:10:32.480 --> 01:10:33.480] 太那个啥了
[01:10:33.480 --> 01:10:34.480] 太出名了
[01:10:34.480 --> 01:10:35.480] 我感觉我推不推荐的
[01:10:35.480 --> 01:10:37.480] 其实应该也就那样
[01:10:37.480 --> 01:10:39.480] 就是CSAPP跟APUE
[01:10:41.480 --> 01:10:43.480] 对啊这两本书就太出名了
[01:10:43.480 --> 01:10:44.480] 也不需要我推荐了
[01:10:44.480 --> 01:10:47.480] 然后我最近主要的经历就是在看这两本书
[01:10:48.480 --> 01:10:50.480] 那你是怎么看的呢
[01:10:50.480 --> 01:10:53.480] 就是你就是有没有什么读书的方法要分享
[01:10:54.460 --> 01:10:55.460] 这个我可以分享一下
[01:10:55.460 --> 01:10:57.460] 就是这两本书特别厚
[01:10:57.460 --> 01:10:59.460] 然后我又是一个突然特别严重的人
[01:10:59.460 --> 01:11:01.460] 我一看到这种厚的书呢
[01:11:01.460 --> 01:11:03.460] 我就会不自觉的就是说
[01:11:03.460 --> 01:11:05.460] 要不先放一放
[01:11:05.460 --> 01:11:07.460] 然后明天再看
[01:11:07.460 --> 01:11:09.460] 然后我发现了一个比较好的解决方案是什么呢
[01:11:09.460 --> 01:11:11.460] 就是你可以直接把这个书按一张一张的去
[01:11:11.460 --> 01:11:13.460] 给它裁开
[01:11:13.460 --> 01:11:15.460] 我现在就是这样主的
[01:11:15.460 --> 01:11:17.460] 就是我把每一张都裁成了一个小本
[01:11:17.460 --> 01:11:19.460] 就直接给它裁了
[01:11:19.460 --> 01:11:21.460] 用刀
[01:11:22.460 --> 01:11:23.460] 对对对
[01:11:23.460 --> 01:11:25.460] 这样看的一个好处是什么呢
[01:11:25.460 --> 01:11:28.460] 就是首先你面对的就是一本很薄的
[01:11:28.460 --> 01:11:31.460] 就是每一张截的一本很薄的一个小冊子
[01:11:31.460 --> 01:11:32.460] 类似小冊子
[01:11:32.460 --> 01:11:35.460] 然后你基本上一两天就能看一张
[01:11:35.460 --> 01:11:37.460] 然后我现在就这样看的
[01:11:37.460 --> 01:11:40.460] 大概已经那个APUE我已经看了一半了
[01:11:41.460 --> 01:11:43.460] 而且这样的还有一个好处就是
[01:11:43.460 --> 01:11:48.460] 像这种书它会有特别那个多的前后文的关联
[01:11:48.460 --> 01:11:49.460] 而且它是夸张截的
[01:11:49.460 --> 01:11:52.460] 如果说你真的是在用那么一本厚的书
[01:11:52.460 --> 01:11:53.460] 或者是电子书去看的话
[01:11:53.460 --> 01:11:56.460] 你去跳跃张截是很不方便的
[01:11:56.460 --> 01:11:58.460] 但是你像你现在这样你把实习书裁开
[01:11:58.460 --> 01:12:00.460] 它指向了哪个张截
[01:12:00.460 --> 01:12:02.460] 你就可以很快的找到那个张截的那个小冊子
[01:12:02.460 --> 01:12:04.460] 然后去翻
[01:12:05.460 --> 01:12:07.460] 确实
[01:12:07.460 --> 01:12:10.460] 我还真的是第一次听说
[01:12:10.460 --> 01:12:13.460] 然后你是原创的方法吗
[01:12:13.460 --> 01:12:14.460] 还是说也是看别人
[01:12:14.460 --> 01:12:17.460] 最早我听到的一个
[01:12:17.460 --> 01:12:18.460] 一个故事吧
[01:12:18.460 --> 01:12:19.460] 但是应该是真事
[01:12:19.460 --> 01:12:24.460] 是台湾还是香港的一个记者叫什么来着
[01:12:24.460 --> 01:12:25.460] 但他已经去世了
[01:12:25.460 --> 01:12:28.460] 就是他读书的方式就是他会私书
[01:12:28.460 --> 01:12:30.460] 然后我是使用那个的启发
[01:12:30.460 --> 01:12:31.460] 然后我就想那为什么
[01:12:31.460 --> 01:12:34.460] 我不能把这个书直接按照张截的形式去裁开
[01:12:36.460 --> 01:12:37.460] interesting
[01:12:37.460 --> 01:12:38.460] 那个人还挺出名的
[01:12:38.460 --> 01:12:40.460] 但是我忘记他叫什么了
[01:12:41.460 --> 01:12:42.460] 没关系
[01:12:42.460 --> 01:12:43.460] 没关系
[01:12:43.460 --> 01:12:45.460] 你最后想到可以就是发过来
[01:12:45.460 --> 01:12:46.460] 我们放到short notes
[01:12:46.460 --> 01:12:47.460] 对
[01:12:47.460 --> 01:12:49.460] 但这个真的很有意思
[01:12:49.460 --> 01:12:51.460] 我好像也
[01:12:51.460 --> 01:12:53.460] 我好像也听说过这个人
[01:12:53.460 --> 01:12:55.460] 我之前也试过一本
[01:12:55.460 --> 01:12:56.460] 因为那本书太厚了
[01:12:56.460 --> 01:12:58.460] 我就是带出去比较重
[01:12:58.460 --> 01:13:02.460] 所以我就每次带一张一样这样在包里
[01:13:04.460 --> 01:13:07.460] 就是比较废书
[01:13:07.460 --> 01:13:09.460] 可能可以买两本的吧
[01:13:09.460 --> 01:13:11.460] 一本撕了一本
[01:13:11.460 --> 01:13:13.460] 其实买了三本最后
[01:13:13.460 --> 01:13:17.460] 可以
[01:13:17.460 --> 01:13:19.460] 中国买书太便宜了
[01:13:19.460 --> 01:13:21.460] 二三十一本
[01:13:21.460 --> 01:13:22.460] 确实
[01:13:22.460 --> 01:13:23.460] 对
[01:13:23.460 --> 01:13:25.460] 那种大后书翻起来很费劲
[01:13:25.460 --> 01:13:26.460] 对
[01:13:27.460 --> 01:13:28.460] 好
[01:13:28.460 --> 01:13:30.460] 也是感谢小白的这个
[01:13:30.460 --> 01:13:33.460] 一个很不错的推荐
[01:13:33.460 --> 01:13:35.460] 那吴老师
[01:13:37.460 --> 01:13:39.460] 我这边最近也没看什么书
[01:13:39.460 --> 01:13:42.460] 但是我最近看了一个比较不错的
[01:13:42.460 --> 01:13:43.460] 算课程吗
[01:13:43.460 --> 01:13:45.460] 我觉得算教程吧
[01:13:45.460 --> 01:13:47.460] 就是那个
[01:13:47.460 --> 01:13:49.460] 吴恩达他们搞了一个
[01:13:49.460 --> 01:13:50.460] 那种
[01:13:50.460 --> 01:13:52.460] promote engineering的课程
[01:13:52.460 --> 01:13:53.460] 对
[01:13:53.460 --> 01:13:54.460] 那个我还没看完
[01:13:54.460 --> 01:13:55.460] 我看了一半
[01:13:55.460 --> 01:13:57.460] 但是我会觉得
[01:13:57.460 --> 01:14:00.460] 还是有一些技巧上的改良的
[01:14:00.460 --> 01:14:01.460] 以及说
[01:14:01.460 --> 01:14:02.460] 有一种
[01:14:02.460 --> 01:14:04.460] 给我一种什么感觉呢
[01:14:04.460 --> 01:14:05.460] 是
[01:14:05.460 --> 01:14:08.460] 是我高中的时候学习如何用那个
[01:14:08.460 --> 01:14:10.460] google search
[01:14:10.460 --> 01:14:12.460] 都是有一种就是
[01:14:12.460 --> 01:14:14.460] 如果你一开始
[01:14:14.460 --> 01:14:15.460] 你普通正常的用
[01:14:15.460 --> 01:14:17.460] 你就是简单的写一句话
[01:14:17.460 --> 01:14:19.460] 但是你其实是可以通过优化
[01:14:19.460 --> 01:14:22.460] 你的查询来得到一些更好的结果
[01:14:22.460 --> 01:14:24.460] 我稍后把那个也贴出来
[01:14:24.460 --> 01:14:25.460] 把那个网址贴出来
[01:14:25.460 --> 01:14:26.460] 对
[01:14:26.460 --> 01:14:30.460] 他那个B站是有完整的中文翻译的
[01:14:30.460 --> 01:14:31.460] 对
[01:14:31.460 --> 01:14:33.460] 那我待会也找一下
[01:14:33.460 --> 01:14:34.460] 我感觉可以一起
[01:14:34.460 --> 01:14:35.460] 对
[01:14:36.460 --> 01:14:37.460] 对
[01:14:38.460 --> 01:14:39.460] 对
[01:14:39.460 --> 01:14:41.460] 像promote engineering这个
[01:14:41.460 --> 01:14:42.460] 这个话题
[01:14:42.460 --> 01:14:43.460] 其实
[01:14:43.460 --> 01:14:46.460] 如果你之后觉得可以的话
[01:14:46.460 --> 01:14:47.460] 我们也可以聊一下
[01:14:47.460 --> 01:14:48.460] 这个也是挺有意思
[01:14:48.460 --> 01:14:49.460] 然后现在
[01:14:49.460 --> 01:14:51.460] 非常厚的一个话题
[01:14:51.460 --> 01:14:52.460] 嗯
[01:14:52.460 --> 01:14:53.460] 好啊
[01:14:53.460 --> 01:14:54.460] 嗯
[01:14:54.460 --> 01:14:55.460] 好
[01:14:55.460 --> 01:14:56.460] 那我这边
[01:14:56.460 --> 01:14:57.460] 我这边可能要推荐
[01:14:57.460 --> 01:14:58.460] 就是一个软件
[01:14:58.460 --> 01:15:00.460] 就我最近用的
[01:15:00.460 --> 01:15:02.460] 也是一个手机上的软件器
[01:15:02.460 --> 01:15:03.460] 叫keyway
[01:15:03.460 --> 01:15:05.460] keyway就是那个
[01:15:06.460 --> 01:15:07.460] 鸡尾鸟
[01:15:07.460 --> 01:15:09.460] 或者米猴桃的那个
[01:15:09.460 --> 01:15:11.460] 英文就是kiwi
[01:15:11.460 --> 01:15:13.460] 然后keyway浏览器
[01:15:13.460 --> 01:15:14.460] 就是他
[01:15:14.460 --> 01:15:15.460] 说完了他的卖点
[01:15:15.460 --> 01:15:17.460] 就是他是基于chrome的
[01:15:17.460 --> 01:15:18.460] 但是呢
[01:15:18.460 --> 01:15:20.460] 他可以在你的手机上
[01:15:20.460 --> 01:15:22.460] 去用chrome的各种扩展
[01:15:22.460 --> 01:15:24.460] 然后我觉得这个真的是
[01:15:24.460 --> 01:15:26.460] 一个
[01:15:26.460 --> 01:15:27.460] 对我帮助特别大
[01:15:27.460 --> 01:15:30.460] 因为像很多那种拆gbt的扩展嘛
[01:15:30.460 --> 01:15:31.460] 你
[01:15:31.460 --> 01:15:32.460] 他都是浏览器扩展
[01:15:32.460 --> 01:15:33.460] 然后你如果在手机上
[01:15:33.460 --> 01:15:34.460] 看一个文章的话
[01:15:34.460 --> 01:15:35.460] 可以用
[01:15:35.460 --> 01:15:36.460] 但是呢
[01:15:36.460 --> 01:15:37.460] 如果用keyway这个浏览器
[01:15:37.460 --> 01:15:38.460] 我就可以去
[01:15:38.460 --> 01:15:39.460] 装一个那种
[01:15:39.460 --> 01:15:40.460] chrome gbt summary
[01:15:40.460 --> 01:15:41.460] 然后读文章
[01:15:41.460 --> 01:15:42.460] 就是效率
[01:15:42.460 --> 01:15:43.460] 提升特别多
[01:15:43.460 --> 01:15:44.460] 对
[01:15:44.460 --> 01:15:45.460] 所以我今天就把它
[01:15:45.460 --> 01:15:46.460] 设成手机上的
[01:15:46.460 --> 01:15:47.460] 默认浏览器
[01:15:47.460 --> 01:15:49.460] 可以推荐一下
[01:15:51.460 --> 01:15:52.460] 好
[01:15:52.460 --> 01:15:53.460] 嗯
[01:15:53.460 --> 01:15:54.460] 那
[01:15:54.460 --> 01:15:57.460] 我们今天差不多也就是
[01:15:57.460 --> 01:15:58.460] 就是聊这些
[01:15:58.460 --> 01:15:59.460] 然后
[01:15:59.460 --> 01:16:01.460] 就是看message你
[01:16:01.460 --> 01:16:02.460] 还有没有什么
[01:16:02.460 --> 01:16:05.460] 想和听众最后说的话
[01:16:05.460 --> 01:16:06.460] 然后就是
[01:16:06.460 --> 01:16:08.460] 任何事情都可以
[01:16:08.460 --> 01:16:09.460] 啊没有了
[01:16:09.460 --> 01:16:10.460] 谢谢大家
[01:16:10.460 --> 01:16:11.460] 好
[01:16:11.460 --> 01:16:12.460] 好
[01:16:12.460 --> 01:16:13.460] 那就是
[01:16:13.460 --> 01:16:14.460] 对
[01:16:14.460 --> 01:16:15.460] 这就是
[01:16:15.460 --> 01:16:16.460] 再次呼吁一下听众们
[01:16:16.460 --> 01:16:17.460] 就是如果你
[01:16:17.460 --> 01:16:18.460] 是想
[01:16:18.460 --> 01:16:20.460] 通过RAS扩展拍摄
[01:16:20.460 --> 01:16:21.460] 请务必试一下
[01:16:21.460 --> 01:16:22.460] PIO3和MATURAN这两个裤
[01:16:22.460 --> 01:16:23.460] 然后
[01:16:23.460 --> 01:16:24.460] 如果你是企业用户
[01:16:24.460 --> 01:16:25.460] 或者就是
[01:16:25.460 --> 01:16:27.460] 比较有娱力的个人的话
[01:16:27.460 --> 01:16:28.460] 也请就是
[01:16:28.460 --> 01:16:29.460] 多多在资金上
[01:16:29.460 --> 01:16:30.460] 支持一下我们的
[01:16:30.460 --> 01:16:32.460] 这些非常努力
[01:16:32.460 --> 01:16:34.460] 非常厉害的
[01:16:34.460 --> 01:16:35.460] 维护者们
[01:16:35.460 --> 01:16:36.460] 好吧
[01:16:36.460 --> 01:16:37.460] 然后
[01:16:37.460 --> 01:16:38.460] 对
[01:16:38.460 --> 01:16:39.460] 好那今天
[01:16:39.460 --> 01:16:40.460] 我们的节目就是这样
[01:16:40.460 --> 01:16:42.460] 然后欢迎大家收听
[01:16:42.460 --> 01:16:43.460] 然后
[01:16:43.460 --> 01:16:45.460] 大家跟听众们打招呼吧
[01:16:45.460 --> 01:16:46.460] 就
[01:16:46.460 --> 01:16:47.460] 结束了
[01:16:47.460 --> 01:16:48.460] 好
[01:16:48.460 --> 01:16:49.460] 那么多
[01:16:50.460 --> 01:16:50.460] 好了
[01:16:50.460 --> 01:16:51.460] 听众们
[01:16:51.460 --> 01:16:51.460] 我们下期再见了
[01:16:51.460 --> 01:16:52.460] 大家拜拜
[01:16:52.460 --> 01:16:53.460] 拜拜
[01:16:53.460 --> 01:16:54.460] 拜拜
[01:16:55.460 --> 01:16:56.460] 拜拜
[01:16:56.460 --> 01:16:57.460] 好
[01:17:00.460 --> 01:17:01.460] 拜拜