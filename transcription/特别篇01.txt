[00:00.000 --> 00:03.040] 好的 我们今天就先聊一个小时吧
[00:03.040 --> 00:07.200] 大家好 欢迎来到久违的捕蛇走说
[00:07.200 --> 00:08.640] 我们已经好久没聊了对吧
[00:08.960 --> 00:12.240] 然后我们现在来今天在拍看之前
[00:12.240 --> 00:13.600] 我们大家一起来聊一聊
[00:13.600 --> 00:15.600] 还是我们今天先熟悉的四位嘉宾
[00:15.600 --> 00:16.880] 大家分别来介绍吧
[00:16.880 --> 00:18.240] 从我左手边开始
[00:18.400 --> 00:20.320] 对大家好 我是like9m
[00:20.320 --> 00:22.160] 然后今天非常不同的一点是
[00:22.160 --> 00:24.960] 我们四个是在同一个宾馆同一间房间
[00:24.960 --> 00:25.760] 一起录节目的
[00:25.760 --> 00:28.480] 所以也是算是我们第一次一起录吧
[00:28.480 --> 00:30.240] 然后对
[00:30.240 --> 00:31.760] 下一位吧
[00:31.760 --> 00:34.160] 大家好 我是赖信涛
[00:34.160 --> 00:35.360] 这个声音是赖信涛
[00:35.360 --> 00:36.640] 大家要区别好声音
[00:36.640 --> 00:40.240] 好好好下一位
[00:40.240 --> 00:41.760] 大家好 我是Adam1
[00:41.760 --> 00:42.800] 就这样了
[00:42.800 --> 00:47.440] 我怎么感觉今天的气氛有一点getty getty气的对吧
[00:47.440 --> 00:49.200] 好的 我们先不说getty getty了
[00:49.200 --> 00:50.960] 我们明天对吧
[00:50.960 --> 00:53.840] 明天拍看就是说是我们就今年的主会场
[00:53.840 --> 00:55.519] 上海场会正式举办
[00:55.519 --> 00:57.280] 我们就今天来大概聊一聊
[00:57.280 --> 01:00.160] 大家我先想其实想听一下
[01:00.160 --> 01:01.520] 我自己作为主办方
[01:01.520 --> 01:03.440] 也作为不是说主播
[01:03.440 --> 01:06.160] 我其实想听一听我们几位搭档
[01:06.160 --> 01:09.600] 他明天有没有什么想去听的talk或者是其他的
[01:09.600 --> 01:11.760] 我说一下吧
[01:11.760 --> 01:15.920] 因为就是我明天会给一个talk
[01:15.920 --> 01:18.720] 然后是在那个上午的最后一场
[01:18.720 --> 01:23.600] 然后会讲一下python debugger的一些新的东西吧
[01:23.600 --> 01:27.520] 大家不是这个
[01:27.520 --> 01:29.759] 然后别的talk的话
[01:29.759 --> 01:33.919] 其实赖信涛也会给一个jumbo migration的
[01:33.919 --> 01:36.399] 然后如果可能的话我想去听一下
[01:36.399 --> 01:38.960] 然后但是其实我最期待的还是
[01:38.960 --> 01:43.280] 就是红姐姐会给一个talk
[01:43.280 --> 01:44.080] 她会讲一下
[01:44.080 --> 01:47.679] 就是真正的第一个cpython compatible的JIT
[01:47.679 --> 01:49.679] 我觉得是一个重大发表
[01:49.680 --> 01:56.720] 我记得红姐的JIT的话
[01:56.720 --> 01:58.320] 是前几天才正式发布吧
[01:58.320 --> 02:01.040] 对她一直在干这个活
[02:01.040 --> 02:04.000] 然后反正因为工作量你们可以想到还是挺大的
[02:04.000 --> 02:09.680] 话说昨天是你去看过红姐的JIT的实现吗
[02:09.680 --> 02:11.760] 我没有仔细看
[02:11.760 --> 02:15.280] 但我觉得先等她讲一下吧
[02:15.280 --> 02:20.720] 红姐的JIT明天语言特性会场的确是一个超干的
[02:20.720 --> 02:24.400] 大家有兴趣的话可以去听一下红姐怎么样去把
[02:24.400 --> 02:26.000] 她好像是基于Julia
[02:26.000 --> 02:28.800] 她是用了一部分好像是
[02:28.800 --> 02:30.160] 我也不太懂
[02:30.160 --> 02:31.600] 但是有一部分是用Julia实现的
[02:31.600 --> 02:35.120] 对她好像是用Julia来作为一个JIT的后段
[02:35.120 --> 02:37.360] 来做到cpython compatible的
[02:37.360 --> 02:39.280] 所以大家有兴趣的话可以去听一下
[02:39.280 --> 02:40.960] 如果大家有兴趣去写Julia的
[02:40.960 --> 02:42.480] 也可以去给红姐battle一下
[02:42.480 --> 02:45.840] 那沈涛你有没有什么明天想听的talk
[02:45.840 --> 02:47.280] 你讲一下你明天要讲的呗
[02:47.280 --> 02:50.079] 我明天讲的其实比较基础了
[02:50.079 --> 02:52.079] 如果你用django一段时间的话
[02:52.079 --> 02:55.920] 肯定需要去处理migration的一些问题
[02:55.920 --> 02:57.839] 然后会讲migration的原理
[02:57.839 --> 02:59.280] 你可能会遇到的问题
[02:59.280 --> 03:01.200] 你用它可以来做什么
[03:01.200 --> 03:03.440] 如果你已经对这些很熟悉了
[03:03.440 --> 03:04.560] 熟悉到什么程度呢
[03:04.560 --> 03:06.480] 你自己写过migration file
[03:06.480 --> 03:09.679] 你可能我讲的内容你已经都知道了
[03:09.680 --> 03:12.720] 可以去听一下其他分会上在这个时间
[03:12.720 --> 03:16.720] 我比较期待的是ARMY的那个主题
[03:16.720 --> 03:18.160] 因为我们用Central很多
[03:18.160 --> 03:19.920] 然后他讲的也是用
[03:19.920 --> 03:23.440] Debugging the new release
[03:23.440 --> 03:25.840] 对他那个标题挺有意思
[03:25.840 --> 03:29.360] 叫曼语言的优势是吧
[03:29.360 --> 03:31.280] 对曼语言带来的意外的优势
[03:31.280 --> 03:33.120] 然后我今天负责接待他们
[03:33.120 --> 03:34.560] 在路上也聊了一些
[03:34.560 --> 03:36.880] 就是这方面的东西
[03:36.880 --> 03:38.560] 我感觉应该是非常有料的
[03:38.560 --> 03:40.320] 因为他们团队嘛
[03:40.320 --> 03:42.800] 他说80%是用RUST
[03:42.800 --> 03:44.560] 现在剩10%是用Python
[03:44.560 --> 03:46.800] 10%的是TypeScript
[03:46.800 --> 03:49.120] 但是他们Central有很多SDK
[03:49.120 --> 03:52.640] 所以基本上他们各种语言都需要处理
[03:52.640 --> 03:54.560] 相当于它的核心是RUST嘛
[03:54.560 --> 03:57.120] 然后外面用Python包一层
[03:57.120 --> 04:01.920] 是的他们用Python掉RUST是常规操作
[04:01.920 --> 04:04.000] 这方面应该还有经验
[04:04.000 --> 04:05.200] 对于Central来说
[04:05.200 --> 04:07.040] 我觉得他吐槽的是太慢了
[04:07.040 --> 04:10.000] 对这个我今天也跟他聊过
[04:10.000 --> 04:11.200] 就是因为我讲
[04:11.200 --> 04:12.400] 所以用RUST
[04:12.400 --> 04:14.400] 还算动态了
[04:14.400 --> 04:16.800] 是的所以我今天还跟他开玩笑
[04:16.800 --> 04:19.200] 我说我的主题是Jungle Migrations
[04:19.200 --> 04:21.760] 我想找一个Jungle 1.7之前
[04:21.760 --> 04:22.880] 用Jungle Service的例子
[04:22.880 --> 04:23.840] 然后找来找去
[04:23.840 --> 04:25.840] 然后他说Century
[04:25.840 --> 04:27.840] 因为Century还在用Service
[04:27.840 --> 04:29.120] 现在没有一项目在用Service
[04:29.120 --> 04:31.520] 说到Century要不然我们扩展一下吧
[04:31.520 --> 04:32.800] 你们有用过Century吗
[04:32.800 --> 04:33.920] 我个人是没有用过的
[04:33.920 --> 04:34.960] 我有在用啊
[04:34.960 --> 04:37.120] 我们有很多Century
[04:37.120 --> 04:38.479] 因为Century实在太有帮助了
[04:38.479 --> 04:40.080] 他们帮我们节省了很多很多时间
[04:40.080 --> 04:40.719] 是这样
[04:40.719 --> 04:42.960] 但是我觉得Century的话
[04:42.960 --> 04:45.680] 他作为一个对于一个企业来讲
[04:45.680 --> 04:47.200] 我觉得他最大的坑点就是
[04:47.200 --> 04:48.400] 他的质疑性太难了
[04:48.400 --> 04:50.080] 他里面的就是很多东西
[04:50.080 --> 04:52.640] 是的有一个问题就是
[04:52.640 --> 04:53.919] 如果你在企业里面
[04:53.919 --> 04:55.760] 部署了一个Century
[04:55.760 --> 04:57.440] 然后所有的项目都用
[04:57.440 --> 04:58.880] 所有的项目都往上面发Toll
[04:58.880 --> 04:59.919] 但是有一个项目
[04:59.919 --> 05:01.599] 一直发Toll但他不处理
[05:01.599 --> 05:04.240] 这样的话就会把整个所有人的体验都拖慢
[05:04.240 --> 05:05.520] 对他就直接会打爆
[05:05.520 --> 05:06.240] 对对对
[05:06.240 --> 05:07.280] 对对对打爆
[05:07.280 --> 05:08.240] 然后的话Century
[05:08.240 --> 05:09.840] 他另外一个东西就是太慢了
[05:09.840 --> 05:11.200] 就是对于企业
[05:11.200 --> 05:12.720] 对于几个企业来讲
[05:12.720 --> 05:15.600] 就比如说像我们每天可能
[05:15.600 --> 05:17.280] 上亿或者是上10亿的
[05:17.280 --> 05:18.160] 然后这种
[05:18.160 --> 05:20.960] 慢你是说接收消息慢还是
[05:20.960 --> 05:22.960] 就是他接收消息处理消息慢
[05:22.960 --> 05:25.840] 然后第二个就是我在使用的时候也会慢
[05:25.840 --> 05:27.200] 第三个他性能差的话
[05:27.200 --> 05:28.800] 就是我得堆机器
[05:28.800 --> 05:31.440] 不然他机器扛不住那么大量
[05:31.440 --> 05:32.640] 对
[05:32.640 --> 05:34.800] 你们觉得Sentry有什么
[05:34.800 --> 05:37.120] 除了槽点以外你们觉得他最大的好处是什么
[05:37.120 --> 05:39.840] 就是他可以把你debug需要的
[05:39.840 --> 05:41.440] 基本上任何信息都可以给你
[05:41.440 --> 05:42.640] 比如浏览器的Tag
[05:42.640 --> 05:44.000] 哪些用户受了影响
[05:44.000 --> 05:46.880] 甚至一些你自己去机器上
[05:46.880 --> 05:48.800] 你都找不到的一些东西都给你打印出来
[05:48.800 --> 05:49.280] 对吧
[05:49.280 --> 05:50.560] 是这样
[05:50.560 --> 05:53.120] 然后我会觉得我
[05:53.120 --> 05:56.719] 我其实比较建议大家用Sentry的时候
[05:56.719 --> 05:58.479] 不要就接入那个SDK
[05:58.479 --> 05:59.840] 然后配置一下就得了
[05:59.840 --> 06:01.440] 对可以去看一下文档
[06:01.440 --> 06:02.880] 包括他关于Tag
[06:02.880 --> 06:04.320] 这种自己如何去标记
[06:04.320 --> 06:08.240] 其实是能极大丰富的去帮助你去定位异常信息
[06:08.240 --> 06:08.719] 对的
[06:08.719 --> 06:11.920] 而且他有跟那个现在很多服务的交互都特别好
[06:11.920 --> 06:14.080] 比如说某个问题复现了
[06:14.080 --> 06:16.080] 或者他自动去Github开一个issue
[06:16.080 --> 06:19.600] 然后你在Github或者是GitLab这种地方
[06:19.600 --> 06:23.600] 你close一个issue顺便把Sentry的一个东西标记成result
[06:23.600 --> 06:26.400] 算是一整套解决方案
[06:26.400 --> 06:27.040] 是的
[06:27.040 --> 06:30.240] 这个他跟外部的服务像Slack这些东西都集成的非常好
[06:30.240 --> 06:33.280] 那我就今天随便聊
[06:33.280 --> 06:36.240] 那我就随时想问一下你们对于Sentry比如说使用的话
[06:36.240 --> 06:39.200] 你们自己推荐的做法是比如说我是像那种
[06:39.200 --> 06:43.680] 直接就比如说我最开始的初始化设置之后一把说
[06:43.680 --> 06:45.520] 什么其余什么都不管
[06:45.520 --> 06:48.960] 还是你们觉得你更喜欢去对他的做一些特
[06:48.960 --> 06:51.520] 就是说上报的消息做一些特殊的定制
[06:51.520 --> 06:54.320] 我倾向于先一把说
[06:54.320 --> 06:55.760] 就是你第一次用Sentry
[06:55.760 --> 06:58.560] 你可能还不太了解说他到底有哪些好处
[06:58.560 --> 07:01.280] 但是你如果接入的话
[07:01.280 --> 07:05.680] 你会发现你的系统有很多你之前没有意识到的崩溃的地方
[07:05.680 --> 07:07.040] traceback之类的
[07:07.040 --> 07:09.680] 然后整个的异常站都在你面前
[07:09.680 --> 07:10.880] 你就先去修一修
[07:10.880 --> 07:11.600] 是的
[07:11.600 --> 07:14.880] 他的问题就是如果你把error只是打到log里面
[07:14.880 --> 07:16.160] 你可能不会去看那些log
[07:16.160 --> 07:17.760] 而且log看起来一行一行的
[07:17.760 --> 07:18.560] 你也不想看
[07:18.560 --> 07:20.960] 但是Sentry它是一条一条的格式化了
[07:20.960 --> 07:23.760] 那我其实这个地方还有一个问题
[07:23.760 --> 07:27.520] 你们有去看过Sentry他那些生存那些SDK的原理吗
[07:27.520 --> 07:28.960] 就比如说Python的话
[07:28.960 --> 07:31.440] 他去补货Exception的话
[07:31.440 --> 07:34.719] 他是直接通过Sys的hook
[07:34.719 --> 07:36.479] 就是一个Exception的hook
[07:36.479 --> 07:38.799] 那比如说像Golang像Java
[07:38.799 --> 07:41.919] 像其他静态语言没有这么方便的hook的情况下
[07:41.919 --> 07:43.520] 他怎么做你们有去了解过吗
[07:43.520 --> 07:46.479] Golang它是能从error里拿到traceback
[07:46.479 --> 07:48.960] 能拿到他的部分占信息了
[07:48.960 --> 07:52.000] 对但是比如说我一个error出来了对吧
[07:52.000 --> 07:55.120] 我这个地方我没有他能够全局补货吗
[07:55.120 --> 07:59.200] 就比如说我Python里面我抛出了一个Exception
[07:59.200 --> 08:00.880] 我Sentry那个地方就能补货
[08:00.880 --> 08:04.960] 就因为它是Sys直接是全局补货Exception
[08:04.960 --> 08:06.480] 那比如说我Golang这样
[08:06.480 --> 08:08.400] 因为Golang大家都知道最反人类
[08:08.400 --> 08:10.160] 大家最喜欢写error
[08:10.160 --> 08:11.280] 对反回error
[08:11.280 --> 08:12.320] 如果是这种情况下
[08:12.320 --> 08:14.080] 我比如说反回个error他能补货吗
[08:14.080 --> 08:19.840] 这个我其实没有仔细看Golang SDK的代码
[08:19.840 --> 08:22.560] 你可以在recovery里面做
[08:22.560 --> 08:25.280] 我印象中其实你可以为你的app
[08:25.280 --> 08:28.720] 不论是一个web的还是一个其他架构的app
[08:28.720 --> 08:30.640] 设计一个类似于Middleware的机制
[08:30.640 --> 08:35.120] 就是说在你所有的真正的逻辑代码执行之前
[08:35.120 --> 08:37.120] 然后先有一个Middleware
[08:37.120 --> 08:39.600] 然后在这层你可以做一个recover
[08:39.600 --> 08:45.440] 就是他可以补货就相当于你没有手动去recover到的那些error
[08:45.440 --> 08:49.440] 但是你刚才说的error应该是指panic吧
[08:49.440 --> 08:51.040] 对panic
[08:51.040 --> 08:53.040] 但是你单纯的反回error的话
[08:53.040 --> 08:54.160] 他应该是不会处理
[08:54.160 --> 08:57.439] 因为Golang他要求开发者自己来处理error
[08:57.439 --> 08:59.360] 这个你不能依赖Sentry
[08:59.360 --> 09:00.640] 反回error就是要求你的caller来处理
[09:00.640 --> 09:02.240] 反回error的语义就是这样子
[09:02.240 --> 09:05.120] 这个就不归Sentry管了
[09:05.120 --> 09:08.160] 因为在Golang里你的error会影响你的逻辑
[09:08.160 --> 09:11.040] 影响你之后的代码分支走哪个流程
[09:11.040 --> 09:16.880] 然后我用过GS的Sentry的一个SDK
[09:16.880 --> 09:20.880] 他应该也是把整个react的项目在外面包一层
[09:20.880 --> 09:22.880] 你把你的react的app传给他
[09:22.880 --> 09:25.680] 然后如果有未补货的话
[09:25.680 --> 09:27.280] 他也是在上传到服务器
[09:27.280 --> 09:30.800] 所以听众们如果你们有Sentry的问题的话
[09:30.800 --> 09:32.560] 这次Sentry的核心开发者在
[09:32.560 --> 09:34.640] 然后你们可以直接去找他来问一问
[09:34.640 --> 09:36.560] 或者说你们想吐槽的话
[09:36.560 --> 09:38.640] 直接去你们的Sentry为什么写的这么慢
[09:38.640 --> 09:41.760] 然后我可以再透露一点小道消息
[09:41.760 --> 09:43.920] 当然我跟他的交流我可能理解有误
[09:43.920 --> 09:44.960] 不代表他的关键
[09:44.960 --> 09:45.840] 是我转述
[09:45.840 --> 09:46.880] 不要转述错误
[09:46.880 --> 09:49.520] 报道出了偏差我们不负责任
[09:49.520 --> 09:50.720] 我也不负责任
[09:50.720 --> 09:55.200] 我问他有没有因为现在Sentry的服务
[09:55.200 --> 09:59.440] 因为我们就想比如说给我一个马上可以用的URL
[09:59.440 --> 10:00.480] 我只要把这个设置好
[10:00.480 --> 10:01.600] 你就可以帮我处理
[10:01.600 --> 10:04.000] 我不要因为Sentry依赖其实也比较多
[10:04.000 --> 10:04.880] 是对吧
[10:04.880 --> 10:06.400] 有队列有数据库有什么的
[10:06.400 --> 10:07.840] 还有定时任务
[10:07.840 --> 10:10.480] 后面Armin说有一个Rust服务
[10:10.480 --> 10:13.120] 从Sentry里面拨出来需要独立部署
[10:13.120 --> 10:15.360] 反正就部署起来挺复杂
[10:15.360 --> 10:18.400] 然后现在available的服务只有一个Sentry.io
[10:18.400 --> 10:19.200] 他们官方的
[10:19.200 --> 10:23.120] 但在中国可能有一些问题
[10:23.120 --> 10:24.480] 对对对
[10:24.480 --> 10:25.920] 他手头出了问题
[10:25.920 --> 10:27.760] 就是网络不是很稳定吗
[10:27.760 --> 10:31.360] 然后Armin说他们尝试在中国提供应付
[10:31.360 --> 10:35.440] 但是得到批准就比较难
[10:35.440 --> 10:38.000] 所以我问他将来有没有这种情况
[10:38.000 --> 10:39.040] 他说他们也不知道
[10:39.040 --> 10:40.960] 开个中国分公司
[10:40.960 --> 10:42.240] 我懂了
[10:42.240 --> 10:45.600] 新涛的意思是大家如果是觉得想创业想赚钱的话
[10:45.600 --> 10:47.360] 赶紧去来我们这边联系Armin
[10:47.360 --> 10:49.840] 另外一个问题就是我接着问他
[10:49.840 --> 10:54.800] 如果有人单独提供商业版的Sentry服务的话
[10:54.800 --> 10:57.120] 他对这个问题有没有什么想法
[10:57.120 --> 10:59.440] 会不会也去改他们的license
[10:59.440 --> 11:03.680] 然后他说他们可能会有这样的一个措施
[11:03.680 --> 11:08.080] 就是阻止别人用他们的代码来提供商业服务
[11:08.080 --> 11:11.120] 就是说如果你给自己打一个Sentry
[11:11.120 --> 11:12.400] OK你可以用最新版了
[11:12.400 --> 11:16.080] 因为他们的收费版跟社区版代码一样的
[11:16.080 --> 11:18.560] 他说你可以自己打一个
[11:18.560 --> 11:20.480] 但是如果你提供商业服务的话
[11:20.480 --> 11:22.160] 你只能用两年前的一个版本
[11:22.160 --> 11:25.440] 这个是通过协议来保证的吗
[11:25.440 --> 11:26.960] 是的
[11:26.960 --> 11:29.360] 但是他这个协议的话
[11:29.360 --> 11:33.520] 是考虑的只是欧洲的法律
[11:33.520 --> 11:35.280] 欧洲当地的法律还是
[11:35.280 --> 11:37.280] 这个没有具体聊
[11:37.280 --> 11:38.880] 就是他有这么一个想法
[11:38.880 --> 11:42.000] 因为说到版权这个问题
[11:42.000 --> 11:46.240] 国内对于就是说是国外就比如说开源协议这种的话
[11:46.240 --> 11:48.960] 目前的司法实践是还在摸索
[11:48.960 --> 11:50.720] 我记得最近的有一个判例
[11:50.720 --> 11:53.920] 是大家是部分只是部分支持关于开源协议
[11:53.920 --> 11:55.920] 是15年的一个北京市判
[11:55.920 --> 11:59.840] 一个关于GNU的GPLv3协议的一个
[11:59.840 --> 12:02.560] 他是作为一个就是说是辅佐
[12:02.560 --> 12:07.200] 但是而不是一个就是具体的一个就是法律明文条款
[12:07.200 --> 12:11.120] 就是说大家如果是有这方面的兴趣的话
[12:11.120 --> 12:12.480] 这也可以和我们一起聊聊
[12:12.480 --> 12:14.720] 大家一起就聊一聊这方面的东西
[12:14.720 --> 12:17.280] 因为目前国内对于开源这一块
[12:17.280 --> 12:20.880] 他的司法实践说实话他还在初步的探索阶段
[12:20.880 --> 12:25.440] 我觉得对于整个国外难道也是国外比较成熟的吗
[12:25.440 --> 12:29.200] 因为国外的话国外我没有去找具体的判例
[12:29.200 --> 12:32.560] 然后但是的话我看国外的话应该是他的一个律师的
[12:32.560 --> 12:36.560] 从律师到或者说是相关的一个团体是相当成熟的
[12:36.560 --> 12:38.800] 而国内对于目前来讲
[12:38.800 --> 12:41.760] 国内成熟的一个就是版权保护就一个软柱
[12:41.760 --> 12:45.280] 我想起来那个当时我的同事跟我说过一个事情
[12:45.280 --> 12:47.839] 就是以前那个Oracle和Google不是在打官司吗
[12:47.839 --> 12:52.000] 关于Java的一些API的版权问题
[12:52.000 --> 12:55.920] 然后说那个大法官为了研究清楚这个事情
[12:55.920 --> 12:57.120] 专门去学了Java
[12:57.120 --> 13:02.479] 然后他判决的时候他已经会写基本的Java程序了
[13:02.479 --> 13:06.479] 对好像他们那些政府官员好像都会那个的
[13:06.480 --> 13:08.960] 就Libra不是最近在那个什么的时候
[13:08.960 --> 13:11.360] 那些政府人员就问Facebook
[13:11.360 --> 13:14.800] 你们为什么Rust选择用Natalie版本不用文明版本
[13:14.800 --> 13:17.200] 好了好了好了我们先收一下
[13:17.200 --> 13:19.040] 我们文老师你们忘了还没发言呢
[13:19.040 --> 13:20.640] 我其实想问文老师一个问题
[13:20.640 --> 13:23.360] 就是我们知道文老师平时是在北京嘛对吧
[13:23.360 --> 13:26.160] 然后这次专门到上海来参加PyCon
[13:26.160 --> 13:27.920] 然后你对这次PyCon有什么期待呢
[13:27.920 --> 13:34.320] 其实你们刚才讲的那几个主题我还都比较感兴趣
[13:34.320 --> 13:36.240] 在此之外呢我补充一个吧
[13:36.240 --> 13:39.760] 就是我其实可能对Liquid要分享的那个
[13:39.760 --> 13:42.720] 他们用GraphQL的实践可能会感兴趣一些
[13:42.720 --> 13:45.200] 因为其实在web应用这块
[13:45.200 --> 13:49.680] GraphQL其实从两三年开始就已经在不断的推广和宣传了
[13:49.680 --> 13:53.840] 但是其实我之前做一些调研也会觉得GraphQL有很大的好处
[13:53.840 --> 13:57.520] 但是它也有一些没有解决的问题
[13:57.520 --> 14:00.560] 包括也有一些Restful也没有解决的问题
[14:00.560 --> 14:05.520] 那我也比较好奇像Liquid他们用在什么样的场景
[14:05.520 --> 14:09.040] 对他们这次来宣传的主要好处是什么样的实践
[14:09.040 --> 14:11.280] 这个还是挺想了解一下
[14:11.280 --> 14:13.439] 我自己的项目里玩过一会GraphQL
[14:13.439 --> 14:15.520] 反正就普遍的认知来讲
[14:15.520 --> 14:17.840] GraphQL好处我们不提到有很多
[14:17.840 --> 14:20.480] 但最大坏处就是你需要把整个Infra都给改了
[14:20.480 --> 14:22.319] 这是最大的问题
[14:22.319 --> 14:26.240] 所以如果不是从顶层往下推的话就很难推得动
[14:26.240 --> 14:28.000] 然后我正好是做Infra的嘛
[14:28.000 --> 14:31.680] 然后对然后我其实很感兴趣的是像Liquid这种的话
[14:31.680 --> 14:33.920] 因为GraphQL它存在一个很大的一个问题
[14:33.920 --> 14:35.839] 就是它治理很难
[14:35.839 --> 14:38.880] 因为比如说像Rest这种
[14:38.880 --> 14:41.920] 如果是遵循Rest或者是传统的RPC这种
[14:41.920 --> 14:45.120] 然后你的接口的力度其实是相对较细的
[14:45.120 --> 14:48.880] 对然后的话这个时候你不管是做券权
[14:48.880 --> 14:51.920] 还是流量的管控流量的治理
[14:51.920 --> 14:56.079] 然后这些或者说是做在更进一步程度上的
[14:56.079 --> 14:57.439] 然后做更多的玩法
[14:57.439 --> 15:00.079] 就比如说像就是各大公司现在很多时候
[15:00.079 --> 15:02.079] 都会为了稳定性追求的异地多活
[15:02.080 --> 15:04.320] 因为你这个时候就涉及到流量管控嘛
[15:04.320 --> 15:08.000] 这方面也就是说是Rest或者是传统的RPC这种的话
[15:08.000 --> 15:09.760] 是有比较好的优势
[15:09.760 --> 15:11.680] 但像GraphQL这种
[15:11.680 --> 15:14.400] 然后用户的自主权太大了
[15:14.400 --> 15:17.200] 其实我挺想知道他们治理怎么做的
[15:17.200 --> 15:22.640] 方面可能还是需要在实际中摸索才能
[15:22.640 --> 15:26.960] 对我对对然后我其实挺
[15:26.960 --> 15:31.520] 啊GraphQL你们是用过你们自己在生产上用过吗
[15:31.520 --> 15:36.640] 我没有但是我觉得生产上有一个场景比较适合
[15:36.640 --> 15:38.560] 就是你公司的护台系统
[15:38.560 --> 15:41.439] 你的管理护台啊
[15:41.439 --> 15:46.560] 就是其实你的管理护台可能会依赖各种数据的创建与修改
[15:46.560 --> 15:50.480] 对然后其实你通过GraphQL你只要建好模型之后
[15:50.480 --> 15:53.520] 对后端工程师来说它是一个极大的解放
[15:53.520 --> 15:58.319] 然后由前端工程师在不同的页面上做不同的数据的展示啊
[15:58.320 --> 16:03.120] 这种就相当于后端变成了一个Data Store
[16:03.120 --> 16:08.000] 对然后一切就之后的后续开发都由前端工程师来解决
[16:08.000 --> 16:10.800] 其实我觉得是对于客户端的
[16:10.800 --> 16:14.480] 就是说是对于客户端的就是说是网关层那一层来说
[16:14.480 --> 16:16.800] 就是说是直接是要对用户暴露的
[16:16.800 --> 16:20.160] 网关层那一层来说其实我觉得GraphQL其实是都挺适合的
[16:20.160 --> 16:23.280] 因为举个例子比如说我前端想加一个字段
[16:23.280 --> 16:25.840] 我后端想加一个字段对吧
[16:25.840 --> 16:28.080] 就是我前端想让后端加一个字段
[16:28.080 --> 16:29.920] 这个东西按照一个传统模式
[16:29.920 --> 16:33.200] 你先得走排息测试然后规度然后全机房
[16:33.200 --> 16:37.040] 我感觉你们刚刚提出了一个中台的概念
[16:37.040 --> 16:39.600] 是你还做的吗
[16:39.600 --> 16:42.800] 不是不是我在做现在很火的一个概念
[16:42.800 --> 16:44.400] 对数据中台吧
[16:44.400 --> 16:48.560] 不过我觉得中台跟GraphQL倒是有挺大区别的
[16:48.560 --> 16:51.920] 这个概念我感觉在英文世界里我基本没有怎么听说过
[16:51.920 --> 16:53.280] 国内的国内的
[16:53.280 --> 16:54.720] 对国内比较火
[16:54.720 --> 16:58.240] 我倒是觉得它的中台概念更像是
[16:58.240 --> 16:59.840] 中台你们谁介绍的到底什么意思
[16:59.840 --> 17:01.360] 我自己也没摸清楚
[17:01.360 --> 17:02.080] 我也不知道
[17:02.080 --> 17:06.400] 不过我可以说一个我的理解
[17:06.400 --> 17:10.079] 之前就是比如说
[17:10.079 --> 17:13.680] 无论是一些纯技术型的项目组
[17:13.680 --> 17:14.960] 或者业务型的项目组
[17:14.960 --> 17:19.520] 之前可能就是国内的大公司它各个事业部都在搞
[17:19.520 --> 17:21.600] 比如说专门搞对立的
[17:21.600 --> 17:24.400] 可能是不同的事业部都有自己的对立
[17:24.400 --> 17:26.720] 都有自己的部署平台
[17:26.720 --> 17:28.720] 但是好像最近大公司在做的事情就是
[17:28.720 --> 17:31.040] 把这些事业部这些团队整合成一个团队
[17:31.040 --> 17:33.360] 然后让他们做一个统一的系统
[17:33.360 --> 17:35.920] 然后服务于全公司
[17:35.920 --> 17:37.840] 对那他们就变成了一个中台
[17:37.840 --> 17:40.000] 就是他们不再为某个独立业务负责
[17:40.000 --> 17:43.040] 而是变成了他们有自己的独立的产品
[17:43.040 --> 17:46.160] 然后他们的用户就是公司内部的各个事业部
[17:46.160 --> 17:48.080] 然后他们专注来提供这个服务
[17:48.080 --> 17:49.200] 我在做的东西就是这样
[17:49.200 --> 17:52.880] 然后然后但是最近好像还有这种类似于业务中台
[17:52.880 --> 17:54.880] 就是比如说
[17:54.880 --> 17:57.360] 很火的直播
[17:57.360 --> 17:58.640] 就是可能
[17:58.640 --> 18:00.720] 就有部分功能上是公共的对吧
[18:00.720 --> 18:03.120] 对就是功能下沉的吧
[18:03.120 --> 18:05.200] 对比如说像阿里他有这么多的产品
[18:05.200 --> 18:07.840] 他可能很多产品都会有一个直播的
[18:07.840 --> 18:11.120] 他是一个同一个团队来提供
[18:11.120 --> 18:14.320] 我觉得的话我觉得中台
[18:14.320 --> 18:17.600] 其实我的观点和文老师不分上市一致
[18:17.600 --> 18:19.280] 我觉得中台更多的话
[18:19.280 --> 18:22.160] 我觉得更牵向于一个组织架构的概念
[18:22.160 --> 18:24.080] 某种程度上是
[18:24.080 --> 18:27.520] 对因为就比如说像文老师不是之前在头条亮过的时间对吧
[18:27.520 --> 18:31.280] 对其实我觉得头条那种就是大中台模式
[18:31.280 --> 18:34.000] 因为他们就是不分具体的APP的话
[18:34.000 --> 18:35.600] 就是有统一的一个组织
[18:35.600 --> 18:36.880] 就是统一的一层
[18:36.880 --> 18:38.160] 你怎么知道
[18:38.160 --> 18:40.560] 他们是对外暴露的公开了的信息
[18:40.560 --> 18:42.160] 就是他们是有
[18:42.160 --> 18:43.280] 这是对外暴露的吗
[18:43.280 --> 18:43.920] 是啊
[18:43.920 --> 18:47.520] 我记得他们是有公开说过的
[18:47.520 --> 18:50.720] 然后对就是他们不是外海APP工厂吗
[18:50.720 --> 18:54.560] 对然后他们就是因为按照原本的传统架构
[18:54.560 --> 18:57.360] 一个APP或者就是某一个独立的事务群
[18:57.360 --> 18:59.040] 自己的市场那一套
[18:59.040 --> 19:02.000] 对然后头条那边把这边全部抽象成一套了
[19:02.000 --> 19:04.400] 然后又说是同一个大的团队
[19:04.400 --> 19:05.840] 为不同的APP复栏
[19:05.840 --> 19:09.120] 然后这样得到的效果就是效率高嘛
[19:09.120 --> 19:12.320] 然后再输去获取或者说是其他的
[19:12.320 --> 19:14.640] 就是说是方向更加就是便捷
[19:14.640 --> 19:18.720] 然后内部斗争来说相对来说是会减少一些内部斗争上的
[19:18.720 --> 19:20.720] 他们有点像亚马逊搞的那一套
[19:20.720 --> 19:22.160] 就是所有东西都是API
[19:22.160 --> 19:25.200] 就是不知道你们了不了解
[19:25.200 --> 19:28.720] 就是亚马逊在就是从Jeff Bezos那层要求
[19:28.720 --> 19:30.720] 就是所有东西你都以API来提供
[19:30.720 --> 19:31.760] API first
[19:31.760 --> 19:34.960] 对API first是他们公司的一个原则吧
[19:34.960 --> 19:38.800] 所以就是就这样就减少很多不必要的工作嘛
[19:38.800 --> 19:40.800] 然后感觉就跟你说头条这个有点像
[19:40.800 --> 19:42.240] 对
[19:42.240 --> 19:43.680] 好我们聊回GraphQL
[19:43.680 --> 19:46.880] 因为我刚才有一点想补充呢
[19:46.880 --> 19:49.920] 就是说我说我现在唯一知道生产环境下
[19:49.920 --> 19:51.360] 最合适的是管理后台
[19:51.360 --> 19:51.840] 对
[19:51.840 --> 19:54.480] 就因为首先这个东西往往没有性能要求
[19:54.480 --> 19:55.840] 也不需要性能监控
[19:55.840 --> 19:56.480] 是
[19:56.480 --> 19:57.440] 对然后
[19:57.440 --> 19:58.640] 事实来说它是内网
[19:58.640 --> 19:59.760] 而且它也是内部的
[19:59.760 --> 20:02.400] 其实权限来说相对管理是宽松的
[20:02.400 --> 20:02.640] 对
[20:02.640 --> 20:04.240] 不像是我面向外部用户
[20:04.240 --> 20:06.320] 可能外部用户伪造一个调用
[20:06.320 --> 20:08.400] 然后就把一些敏感设计给搞出去了
[20:08.400 --> 20:11.680] 对这是我目前唯一了解说
[20:11.680 --> 20:15.360] 或者说是我自己觉得适合生产环境的
[20:15.360 --> 20:18.000] 但是其他的我就比较好奇雷库的
[20:18.000 --> 20:19.919] 对我其实也挺好奇的
[20:19.919 --> 20:21.760] 对我其实也挺好奇的
[20:21.760 --> 20:22.879] 然后说到我吧
[20:22.879 --> 20:25.919] 我今年其实因为我是一直在跟讲师对接嘛
[20:25.919 --> 20:27.840] 然后我今年其实
[20:27.840 --> 20:30.879] 首先我们要说个正确的话
[20:30.879 --> 20:34.560] 所有讲师的那个就是topic我都喜欢
[20:34.560 --> 20:36.080] 对然后
[20:36.080 --> 20:38.479] 然后我自己就个人而言的话
[20:38.479 --> 20:41.360] 我自己更喜欢那个意大利老哥就是Paul
[20:41.360 --> 20:43.199] 就是他是意大利的核心开发者
[20:43.200 --> 20:46.160] 他带来了一个就是加速的文件的拷贝
[20:46.160 --> 20:51.200] 因为这个是Linux在4.12之后新增了一个API
[20:51.200 --> 20:54.480] 就是说是能够极大提升我比如说文件发送
[20:54.480 --> 20:57.520] 就通过socket发送文件
[20:57.520 --> 21:03.440] 或者说我去在系统上面高效的操作复制文件
[21:03.440 --> 21:04.800] 加速它的性能
[21:04.800 --> 21:06.560] 那个是send file吗
[21:06.560 --> 21:07.520] 是send file
[21:07.520 --> 21:10.720] 对是Linux 4.12之后继续的支持的
[21:10.720 --> 21:12.640] 对然后我其实对这一块
[21:12.640 --> 21:14.640] 因为我自己就是做这些的
[21:14.640 --> 21:17.760] 然后我就是觉得我对这些方面很感兴趣
[21:17.760 --> 21:20.480] 然后的话对我另外一个比较感兴趣的话
[21:20.480 --> 21:21.840] 是一个日本小姐姐的
[21:21.840 --> 21:23.920] 她是做NLP
[21:23.920 --> 21:26.400] 她是在日本做NLP的
[21:26.400 --> 21:28.000] 其实我挺想去了解一下
[21:28.000 --> 21:30.960] 因为大家都知道中文和日文虽然都是东亚语系的
[21:30.960 --> 21:32.640] 就是东亚语言圈的
[21:32.640 --> 21:34.160] 然后虽然是一脉相承的
[21:34.160 --> 21:38.240] 但是因为日本的那个日语的环境和中文的环境是不一样的
[21:38.240 --> 21:43.040] 他们做NLP是也要面临很多中文圈不具有的挑战
[21:43.040 --> 21:46.720] 其实我想挺想知道这两种同个就是同源的语言
[21:46.720 --> 21:49.920] 在这细分到现在做NLP上面有什么区别
[21:49.920 --> 21:53.120] 日文是不是也是需要分词的
[21:53.120 --> 21:54.240] 是需要分词的
[21:54.240 --> 21:55.360] 我今天和她聊了一下
[21:55.360 --> 21:56.560] 他们是需要分词的
[21:56.560 --> 21:58.560] 而且他们面临一个更为挑战的情况
[21:58.560 --> 22:02.000] 就是因为日文它现在是有
[22:02.000 --> 22:06.080] 大概是大家看到有些时候日文里面是有一些汉字类似的
[22:06.080 --> 22:07.920] 就汉字繁体的汉字对吧
[22:07.920 --> 22:10.480] 有一些是就纯粹的平片假名
[22:10.480 --> 22:15.200] 但是有些时候你的平片假名其实是可以用汉字代替的
[22:15.200 --> 22:17.680] 然后这个东西是取决于个人的习惯的
[22:17.680 --> 22:20.720] 然后他们就是说相当于说中文的一个车
[22:20.720 --> 22:23.440] 有不同的写法有G有什么的对吧
[22:23.440 --> 22:26.880] 所以说这种情况下是他们面临的一个很有特色的挑战
[22:26.880 --> 22:30.480] 所以说我其实就想挺想去知道一下
[22:30.480 --> 22:33.280] 所以他用中文讲吗
[22:33.280 --> 22:34.320] 用中文讲
[22:34.320 --> 22:36.560] 他的经历很特殊
[22:36.560 --> 22:39.120] 他是在北大读了三年的中文研究生
[22:39.120 --> 22:43.600] 然后又去东京读了一个中文的
[22:43.600 --> 22:46.399] 就不是语言学的研究生
[22:46.399 --> 22:49.600] 对了我这里带日本小姐姐发一个征婚启事了
[22:49.600 --> 22:50.879] 然后她没有男朋友
[22:50.879 --> 22:52.159] 她想找一个中国男朋友
[22:52.159 --> 22:54.639] 我们的听众朋友如果听到谁有兴趣的话
[22:54.639 --> 22:56.560] 请联系我们的like9m
[22:56.560 --> 22:59.280] 为什么联系你了
[22:59.280 --> 23:00.480] 好
[23:00.480 --> 23:04.080] 我们就是说到大家话说
[23:04.080 --> 23:07.120] 你们觉得你们最近工作上有什么好玩的事情没有
[23:07.120 --> 23:12.399] 好玩的事情就是休假
[23:12.399 --> 23:18.000] 开玩笑
[23:18.000 --> 23:22.000] 我感觉我可以说一下我的项目
[23:22.000 --> 23:23.919] 你要对你说一下你的项目
[23:23.919 --> 23:24.879] 你都不想说
[23:24.879 --> 23:26.159] 五分钟
[23:26.159 --> 23:27.520] 五分钟不能再
[23:27.520 --> 23:30.480] 就是我最近在做一个
[23:30.480 --> 23:34.800] 如果你用过myscli和pecli的话
[23:34.800 --> 23:38.800] 你可能会知道有一些支持自动补全的数据库工具
[23:38.800 --> 23:41.360] 我最近在做一个redis版本
[23:41.360 --> 23:45.520] 就相当于一个支持语法高量和自动补全的redis cli
[23:45.520 --> 23:47.280] 然后现在已经
[23:47.280 --> 23:50.480] 这个到底是叫redis cli还是叫iredis
[23:50.480 --> 23:52.880] 它的类型是redis cli
[23:52.880 --> 23:54.800] 不过它名字叫iredis
[23:54.800 --> 23:56.320] interactive redis
[23:56.320 --> 24:00.800] i-passive
[24:00.800 --> 24:03.919] 因为rdcli被注册了
[24:03.919 --> 24:05.679] 后来我改
[24:05.679 --> 24:07.840] 然后
[24:07.840 --> 24:10.399] 这个项目最难的地方就是
[24:10.399 --> 24:12.639] redis有230个命令
[24:12.639 --> 24:13.760] 我没想到有那么多
[24:13.760 --> 24:16.159] 所以要支持语法补全的话需要
[24:16.159 --> 24:19.360] 去实现每一个命令的语法
[24:19.360 --> 24:20.639] 然后输出结果
[24:20.639 --> 24:24.879] 因为原生的redis cli它的输出只是一个array
[24:24.879 --> 24:25.760] 一个list
[24:25.760 --> 24:27.040] 或者是一个int
[24:27.040 --> 24:28.800] 这个array代表什么概念
[24:28.800 --> 24:30.879] 里面每一个元素有什么对应的
[24:30.879 --> 24:32.160] 你需要自己去理解
[24:32.160 --> 24:35.360] 但是我想把它给格式化好
[24:35.360 --> 24:37.920] 相当于redis里面有一个hash
[24:37.920 --> 24:39.040] 它的返回也是
[24:39.040 --> 24:40.800] 虽然hash是kvalue
[24:40.800 --> 24:42.400] 但是它会返回给你一个list
[24:42.400 --> 24:44.800] 你要告诉基数个元素是k
[24:44.800 --> 24:46.560] 偶数个元素是value这样
[24:46.560 --> 24:48.160] 我想把这个给做好
[24:48.160 --> 24:49.120] 然后就
[24:49.120 --> 24:51.840] 其实工作量就是一个一个去实现命令
[24:51.840 --> 24:54.480] 然后
[24:54.480 --> 24:55.760] 让人激动的一个事情是
[24:55.760 --> 24:57.360] 我现在已经写好100多个了
[24:57.360 --> 25:00.240] 还剩100多个
[25:00.240 --> 25:01.760] 恭喜恭喜
[25:01.760 --> 25:04.160] 所以感觉10月1
[25:04.160 --> 25:06.080] 我一直在写这个的话
[25:06.080 --> 25:09.520] 估计很快可以有一个
[25:09.520 --> 25:11.920] General Available版本
[25:11.920 --> 25:14.160] 我的建议是你先
[25:14.160 --> 25:15.840] 你肯定先把常用的那些实现了
[25:15.840 --> 25:16.240] 对吧
[25:16.240 --> 25:18.560] 你可以先发一个比如说0.0.1出来
[25:18.560 --> 25:19.840] 然后让大家先用着
[25:19.840 --> 25:21.600] 一开始一般不用那么完善
[25:21.600 --> 25:23.760] ok现在其实我没实现一组命令
[25:23.760 --> 25:25.760] 我是按组织list全都支持了
[25:25.760 --> 25:26.720] 我就发一个版本
[25:26.720 --> 25:28.560] 我现在已经发了32个版本了
[25:28.560 --> 25:29.920] 所以已经可以下载
[25:29.920 --> 25:31.040] 是的一直是可以
[25:31.040 --> 25:34.080] 它是从0.0.1就可以下载安装
[25:34.080 --> 25:36.000] 你的网站是iradis.io对吧
[25:36.000 --> 25:37.520] 对iradis.io
[25:37.520 --> 25:39.600] radis的官网是radis.io
[25:39.600 --> 25:42.000] 所以你在radis的官网前面加一个i
[25:42.000 --> 25:43.920] 你就可以找到一个更好的客户端
[25:43.920 --> 25:46.480] 现在广告费五毛就打我粉包了
[25:46.480 --> 25:47.440] 好的好的
[25:47.440 --> 25:49.520] 我问个问题
[25:49.520 --> 25:50.480] 就是你
[25:50.480 --> 25:53.440] 目前这100个命令都是相与你在实现吗
[25:53.440 --> 25:54.000] 对吧
[25:54.000 --> 25:54.400] 是的
[25:54.400 --> 25:57.280] 那你有设计一个什么后续的机制
[25:57.280 --> 25:59.200] 可以比如说让大家来提PR
[25:59.200 --> 26:00.080] 来帮你去做
[26:00.080 --> 26:01.600] 而不是你要再把
[26:01.600 --> 26:03.840] 剩下的100多个再手写
[26:03.840 --> 26:05.280] 这是一个问题
[26:05.280 --> 26:06.640] 因为怎么说呢
[26:06.640 --> 26:07.680] 很少有人知道一个项目
[26:07.680 --> 26:10.720] 之前有一个同学在Github上
[26:10.720 --> 26:11.920] 实现了4个命令
[26:11.920 --> 26:13.360] 后来他可能比较忙
[26:13.360 --> 26:14.400] 他说他在找工作
[26:14.400 --> 26:15.280] 然后就没有
[26:15.280 --> 26:17.920] 所以我觉得如果参与进来实现一个命令的话
[26:17.920 --> 26:18.960] 是非常简单的
[26:18.960 --> 26:22.240] 因为我所有的工作都是通过PR给自己提交的
[26:22.240 --> 26:23.520] 你看一下
[26:23.520 --> 26:25.840] 之前的PR是怎么实现命令的
[26:25.840 --> 26:27.120] 你基本上就知道
[26:27.120 --> 26:28.880] 怎么去实现一个新的命令了
[26:28.880 --> 26:30.960] 讯道我这里有个问题
[26:30.960 --> 26:33.440] 就是说是那个
[26:33.440 --> 26:34.480] 就是说是
[26:34.480 --> 26:36.800] 因为我听你刚才的意思就是说是
[26:36.800 --> 26:38.880] 第一个你说是看之前的PR
[26:38.880 --> 26:40.560] 就知道怎么填一下新的命令了
[26:40.560 --> 26:41.040] 对吧
[26:41.040 --> 26:43.200] 就说明你的就是说是命令的这部分代码
[26:43.200 --> 26:44.640] 其实是有高度的共同性的
[26:44.640 --> 26:45.280] 对吧
[26:45.280 --> 26:46.800] 是的
[26:46.800 --> 26:48.160] 应该可以弄成插件的机制
[26:48.160 --> 26:48.720] 对
[26:48.720 --> 26:49.280] 然后的话
[26:49.280 --> 26:50.320] 那我在想问的话
[26:50.320 --> 26:54.080] 你但是你有没有想过去做一个code进来生成这部分代码
[26:54.080 --> 26:55.120] 是的
[26:55.120 --> 26:56.159] 我想过
[26:56.159 --> 26:58.879] 因为redis有一个文档
[26:58.879 --> 27:02.000] 里面有一个大json文件描述了所有的命令的
[27:03.520 --> 27:06.000] 就是所有的命令的语法
[27:06.000 --> 27:08.879] 我其实你可以基于那个json来生成
[27:08.879 --> 27:09.600] 对
[27:09.600 --> 27:10.960] 因为我听你的意思
[27:10.960 --> 27:13.840] 其实就是说是你这部分核心的任务
[27:13.840 --> 27:16.080] 就是说是利用称则或者是其他一些工具
[27:16.080 --> 27:16.480] 对吧
[27:16.480 --> 27:16.800] 是的
[27:16.800 --> 27:18.240] 对于输入的语法做校验
[27:18.240 --> 27:18.800] 对吧
[27:18.800 --> 27:19.840] 那么这个语法的话
[27:19.840 --> 27:21.199] 它基本可以说是有规律的
[27:21.199 --> 27:21.760] 对吧
[27:21.760 --> 27:22.959] 那么既然如此的话
[27:22.959 --> 27:26.560] 那么为什么你为什么没有考虑去做一个code进来
[27:26.560 --> 27:27.919] code进来是可以的
[27:27.919 --> 27:28.560] 我也想过
[27:28.560 --> 27:31.199] 但是这个难度可能会稍微高一点
[27:31.199 --> 27:33.520] 所以我之前一直想请教一下
[27:33.520 --> 27:36.000] 虹姐如果用code gen的话生成这部分怎么做
[27:36.000 --> 27:39.199] 而且我感觉你可能对某一些命令还要有一些特殊的处理
[27:39.199 --> 27:39.840] 对
[27:39.840 --> 27:40.879] 我考虑的点就是这里
[27:40.879 --> 27:43.600] 就是我自己写的处理的是更友好的
[27:43.600 --> 27:44.000] 你知道吗
[27:44.000 --> 27:46.480] 包括它的每一个命令
[27:46.480 --> 27:48.159] 比如说有一些选择
[27:48.160 --> 27:50.400] 要么写个ex要么写个xx
[27:50.400 --> 27:53.040] 这种选择的补全我这边支持是更好的
[27:53.040 --> 27:55.840] 因为我是针对每一个命令去做优化
[27:55.840 --> 27:57.760] OK
[27:57.760 --> 27:59.040] 说到这个问题的话
[27:59.040 --> 28:02.960] 其实我这边刚才我们不是正好聊到孙翠的license的问题吗
[28:02.960 --> 28:03.680] 对
[28:03.680 --> 28:04.480] 其实我想问一下
[28:04.480 --> 28:06.880] 信涛你的iradius选择的license是什么
[28:06.880 --> 28:07.840] bsd
[28:07.840 --> 28:10.240] 因为radius的license是bsd
[28:10.240 --> 28:11.520] 所以我就跟着它走
[28:11.520 --> 28:13.120] bsd是具有传染性吗
[28:13.120 --> 28:13.840] 还是没有
[28:13.840 --> 28:17.520] bsd核心就三条
[28:17.520 --> 28:18.480] 但是我
[28:18.480 --> 28:21.200] 其实我挺好奇
[28:21.200 --> 28:25.120] 你为什么当时没有考虑选择MIT或者是apache之类的
[28:25.120 --> 28:25.600] 对吧
[28:25.600 --> 28:27.920] 是这样
[28:27.920 --> 28:28.879] 我有的项目用apache
[28:28.879 --> 28:30.080] 有的项目用MIT
[28:30.080 --> 28:31.840] 有的项目用GNU v3
[28:31.840 --> 28:33.680] 然后这个选择bsd
[28:33.680 --> 28:36.160] 基本上是看心情的
[28:36.160 --> 28:40.720] 话说我们这里面几个有没有谁对许可证比较熟的
[28:40.720 --> 28:42.320] 我每次都看那个图
[28:42.320 --> 28:43.440] 对
[28:43.440 --> 28:44.560] 选许可证的图
[28:44.560 --> 28:44.960] 对
[28:44.960 --> 28:47.280] 但是其实有一个比较核心的点
[28:47.280 --> 28:48.639] 其实我什么都不关心
[28:48.639 --> 28:50.240] 我关心的一点就是
[28:50.240 --> 28:52.399] 你如果用我的这个MiniHarm工具
[28:52.399 --> 28:54.399] 对你的server造成了任何
[28:54.399 --> 28:56.720] 比如说block了一段时间或者丢数据了
[28:56.720 --> 28:58.480] 这个都要跟我没有关系
[28:58.480 --> 29:00.399] bsd还管这个
[29:00.399 --> 29:01.840] bsd有一条就是说
[29:01.840 --> 29:04.560] 你要对使用的软件怎么用你说了算
[29:04.560 --> 29:08.160] 但是你用这个软件对你造成了任何损害
[29:08.160 --> 29:09.200] 你都要自己负责
[29:09.200 --> 29:11.760] 你怕别一下几十万条
[29:11.760 --> 29:13.200] 然后一下新的
[29:13.200 --> 29:14.639] 然后就打出来了
[29:14.639 --> 29:15.680] 但是这个地方的话
[29:15.680 --> 29:18.960] 我一个建议是你最好是在做一个中文版的
[29:18.960 --> 29:20.960] 然后一个就是说豁免说明
[29:20.960 --> 29:22.400] 就从事实上来说
[29:22.400 --> 29:26.000] 因为你的bsd来说并不一定可能会被国内的
[29:26.000 --> 29:28.160] 如果说将来我们
[29:28.160 --> 29:30.400] 这样可以规避已经可以规避法律问题了
[29:30.400 --> 29:33.360] 总之大家如果做这种类似的工具的话
[29:33.360 --> 29:35.360] 可能要注意一下给自己免责
[29:35.360 --> 29:36.000] 这种声明
[29:36.000 --> 29:38.800] 对了我突然想起那个9m的话
[29:38.800 --> 29:43.200] 你之前好像是有个那个有一个比较受欢迎的项目是那个
[29:43.200 --> 29:44.240] 排第二
[29:44.240 --> 29:45.600] 对那个用的是MIT
[29:45.600 --> 29:47.360] 我一般都是用MIT的
[29:47.360 --> 29:51.679] 因为反正好像基本的原则就是说MIT和APA起用的最多的
[29:51.679 --> 29:56.639] 然后这两种就是选什么好像主要有一点细微差别
[29:56.639 --> 29:57.439] 但是我现在记不住了
[29:57.439 --> 29:59.679] 但是这两个基本上用最多的
[29:59.679 --> 30:01.280] APA起好像是要原本署名
[30:01.280 --> 30:04.080] MIT还是APA起好像是要就带那个
[30:04.080 --> 30:05.600] 每一个文件都要带
[30:05.600 --> 30:06.320] 对对对
[30:06.320 --> 30:07.120] 这个很烦
[30:07.120 --> 30:09.360] 但是肯定有可以自动生成的
[30:09.360 --> 30:10.480] 所以其实也还好
[30:10.480 --> 30:11.040] 对
[30:11.040 --> 30:14.879] 其实我看到是就是我们和文老师
[30:14.880 --> 30:17.840] 文老师你有自己的开源的setup
[30:17.840 --> 30:18.400] 没有
[30:18.400 --> 30:19.680] 对
[30:19.680 --> 30:22.320] 我有一些但是我感觉已经被废弃了
[30:22.320 --> 30:24.960] 然后像排第二之后还是现在还在维护吗
[30:24.960 --> 30:27.360] 上一次更新是18年
[30:27.360 --> 30:29.920] 因为比较稳定了
[30:29.920 --> 30:31.520] 我看过你发过一个版本
[30:31.520 --> 30:35.120] 我记得我印象里看过你发过一个版本
[30:35.120 --> 30:37.760] 那个3.7之后是发过一个版本
[30:37.760 --> 30:44.320] 因为要支持3.7新加的一些就是内置的那个叫什么Magic Message那些东西
[30:44.320 --> 30:46.879] 我那个其实也是体力互捞
[30:46.879 --> 30:49.439] 我觉得你那个应该是有1000star了吧
[30:49.439 --> 30:50.480] 1000多star
[30:50.480 --> 30:51.200] 超过1000
[30:51.200 --> 30:54.720] 其实我估计我们文老师和我一起都有的
[30:54.720 --> 30:56.000] 其实情话谁跟我提
[30:56.000 --> 30:59.439] 你们对于就是说是做自己的开源的setup project
[30:59.439 --> 31:00.000] 对吧
[31:00.000 --> 31:01.600] 有没有什么经验之谈没有
[31:01.600 --> 31:03.520] 或者说怎么样去选择一个项目立项
[31:03.520 --> 31:04.560] 然后怎么样去推动
[31:04.560 --> 31:05.520] 然后怎么样去落地
[31:05.520 --> 31:06.720] 然后怎么样去推广
[31:06.720 --> 31:07.840] 我先说吧
[31:07.840 --> 31:10.560] 因为这个是我在杭州PyCon的topic
[31:10.560 --> 31:12.800] 我会专门有一个topic来讲这个事情
[31:12.800 --> 31:16.000] 然后但是我可以现在给大家简单分享一下
[31:16.000 --> 31:18.320] 就是你要挑你需要去用到的东西
[31:18.320 --> 31:20.879] 比如说我想写一个iRedis
[31:20.879 --> 31:22.240] 因为我用Redis比较多
[31:22.240 --> 31:24.320] 我又记不住Redis那么多命令
[31:24.320 --> 31:26.080] 所以我想给自己做一个这么东西
[31:26.080 --> 31:27.840] 然后今天跟阿敏聊天
[31:27.840 --> 31:30.240] 阿敏说我只做我需要用的东西
[31:30.240 --> 31:31.120] 然后他要debug
[31:31.120 --> 31:32.720] 所以他做Century
[31:32.720 --> 31:37.520] 然后他其实因为他们现在的东西跟用Python比较少了
[31:37.520 --> 31:39.280] 所以他也坦诚说
[31:39.280 --> 31:41.120] 因为他们用的少
[31:41.120 --> 31:43.360] 所以他不会去专门做Flask
[31:43.360 --> 31:45.919] 今天有人问他Flask开发
[31:45.919 --> 31:48.479] 阿敏就直接说自己很久没有关注了
[31:48.479 --> 31:49.439] 因为他不用
[31:49.439 --> 31:51.439] 所以大家要选择自己用的东西
[31:51.439 --> 31:52.239] OK
[31:52.239 --> 31:54.879] 那你怎么样去推动一个项目
[31:54.879 --> 31:56.719] 或者说是然后在一个项目就是说
[31:56.719 --> 31:58.159] 差不多是有一定完成度了之后
[31:58.159 --> 31:58.560] 对吧
[31:58.560 --> 32:00.080] 怎么样去推广这个项目
[32:00.080 --> 32:02.560] 推广比较简单
[32:02.560 --> 32:02.879] 其实
[32:02.879 --> 32:05.919] 我来说一下推广
[32:05.919 --> 32:10.479] 其实基本上就中文世界和英文世界宣传一下
[32:10.480 --> 32:12.240] 英文世界就是Reddit
[32:12.240 --> 32:14.320] 然后那个Hacker News
[32:14.320 --> 32:15.200] 就像这俩
[32:15.200 --> 32:15.760] 对
[32:15.760 --> 32:18.640] 然后中文世界的话
[32:18.640 --> 32:19.680] 一般去哪里发
[32:19.680 --> 32:20.480] 我还真不知道
[32:20.480 --> 32:23.040] V2可以发一下
[32:23.040 --> 32:24.240] 也就V2了
[32:24.240 --> 32:24.800] 我感觉
[32:24.800 --> 32:25.680] 知乎也可以发一下
[32:25.680 --> 32:26.000] 对
[32:26.000 --> 32:27.920] 但知乎的话感觉发出来的关注量不太大
[32:27.920 --> 32:29.360] 就是基本上在中文
[32:29.360 --> 32:32.640] 我的经验是在中文世界发出来的start很少
[32:32.640 --> 32:34.240] 就是关注的相对少一点
[32:34.240 --> 32:35.840] 但是如果去Reddit一发
[32:35.840 --> 32:38.240] 就是瞬间关注人就会很多
[32:38.240 --> 32:41.280] 但前提是你项目本身质量要达到一定程度
[32:41.280 --> 32:41.760] 对
[32:41.760 --> 32:44.240] 你们会关注V2的Python版吗
[32:44.240 --> 32:45.200] 我很久没关注
[32:45.200 --> 32:47.200] 我一般是去看V2CB
[32:47.200 --> 32:48.000] 对
[32:48.000 --> 32:49.760] 我也是去看CB
[32:49.760 --> 32:52.000] 我记得V2
[32:52.000 --> 32:53.920] 我们可以待会再聊
[32:53.920 --> 32:55.520] 先聊一下开发项目
[32:55.520 --> 32:56.000] 对
[32:56.000 --> 32:58.400] 我来说一下我的想法
[32:58.400 --> 33:00.880] 其实我也是很赞同刚才新涛说的
[33:00.880 --> 33:03.200] 就是你做的项目一定要是你自己用的
[33:03.200 --> 33:06.400] 我感觉我之前做的项目也都是
[33:06.400 --> 33:09.920] 就是我觉得我的开发过程中有某种痛点
[33:09.920 --> 33:12.800] 然后我去自己来实现一个项目去解决
[33:12.800 --> 33:13.440] 对
[33:13.440 --> 33:19.680] 包括这次就是Python要讲的一个
[33:19.680 --> 33:22.400] 就是要讲这个项目也是我最近一直在做的
[33:22.400 --> 33:27.040] 它是因为我17年在公司里面写Python的时候
[33:27.040 --> 33:30.080] 然后就发现调试其实是一个很大的问题
[33:30.080 --> 33:33.680] 那么我就觉得说现有的调试工具
[33:33.680 --> 33:35.920] 其实并不能满足我当时的需求
[33:35.920 --> 33:37.680] 因为我当时需求是调试一段
[33:37.680 --> 33:38.800] 调试一个Codebase
[33:38.800 --> 33:40.160] 这个Codebase是别人写的
[33:40.160 --> 33:41.360] 然后我完全不熟
[33:41.360 --> 33:44.240] 就那些参数调用信息什么我完全都不懂
[33:44.240 --> 33:46.640] 但是我又需要去接受这个Codebase
[33:46.640 --> 33:49.920] 所以就有这么一个需求
[33:49.920 --> 33:51.600] 那么这个具体怎么样
[33:51.600 --> 33:52.960] 我们可以在talk上再看
[33:52.960 --> 33:56.480] 但是大概意思就是说你确实是写东西
[33:56.480 --> 33:59.520] 最好是你有这样需求的一个东西
[33:59.520 --> 34:01.520] 然后你才去会去有动力
[34:01.520 --> 34:04.000] 去往里面投入时间去实现
[34:04.000 --> 34:06.480] 其实我挺想
[34:06.480 --> 34:09.600] 就像是比如说刚才就是信叨说
[34:09.600 --> 34:11.440] 他的Ci Redis
[34:11.440 --> 34:16.560] 是因为现在市面上Redis是一坨Piece of shit
[34:16.560 --> 34:20.159] 不要攻击别人
[34:20.159 --> 34:21.840] 他只是没有满足我的需求
[34:21.840 --> 34:24.800] 但是Redis CLI其实是比较好的
[34:24.800 --> 34:26.480] 因为他用的代码比较少
[34:26.480 --> 34:28.639] 实现的功能其实也够
[34:28.639 --> 34:30.639] 如果你足够懂Redis你可以用
[34:30.639 --> 34:36.480] 不够就是说是for human
[34:36.480 --> 34:39.359] 但是其实我想问一下
[34:39.359 --> 34:42.639] 像朱老师你刚才说你当时写调试软件
[34:42.639 --> 34:45.520] 是因为你17年时候遇到
[34:45.520 --> 34:49.199] 但是市面上的比如说像PyCharm的PYDEV
[34:49.199 --> 34:51.679] 或者说是官方的PDB
[34:51.679 --> 34:53.440] 这种东西是没法满足你吗
[34:53.440 --> 34:55.920] 还是你觉得没法满足你的点在哪些地方
[34:55.920 --> 34:58.319] 是没法满足我
[34:58.319 --> 34:59.279] 然后具体点在哪里
[34:59.279 --> 35:00.400] 请听我明天的talk
[35:00.400 --> 35:04.880] 我会详细讲一下为什么要做这个
[35:04.880 --> 35:06.400] 朱老师虽然你是我们的讲师
[35:06.400 --> 35:09.200] 但是你还是先把五毛打到我这儿吧
[35:09.200 --> 35:10.000] 好的好的
[35:10.000 --> 35:11.280] 今天是广告特辑
[35:11.280 --> 35:13.680] 然后有一个很有意思的点就是
[35:13.680 --> 35:16.640] 你有一个side project你想完成这个事件A
[35:16.640 --> 35:19.760] 但你发现你大部分事情都在解决问题B
[35:19.760 --> 35:24.320] 比如说Lac9M你花了很多时间去搞那个Dota语言对吧
[35:24.320 --> 35:26.960] 对对对
[35:26.960 --> 35:31.120] 我之前记忆犹新
[35:31.120 --> 35:35.040] 然后就我之前是因为我在上海公司的时候
[35:35.040 --> 35:38.000] 是会有些时候会去借一些私活对吧
[35:38.000 --> 35:40.800] 然后这个时候的话就需要去基于我们
[35:40.800 --> 35:43.040] 大家都知道GitLab自建对吧
[35:43.040 --> 35:45.280] 然后就有一些团队协作工具对吧
[35:45.280 --> 35:49.120] 那么团队的协作工具怎么和团队的聊天工具实时协作
[35:49.120 --> 35:52.720] 就比如说是我一个webhook这些东西对吧
[35:52.720 --> 35:54.960] 于是我就写了一套系统去
[35:54.960 --> 35:59.280] 我原本以为就是说是最花时间的部分
[35:59.280 --> 36:02.640] 是那个去调试各个就是说比如说适配GitLab
[36:02.640 --> 36:04.800] 适配Github或者说是适配Tower
[36:04.800 --> 36:08.080] 或者是这些东西的就是说是webhook接口对吧
[36:08.080 --> 36:09.920] 然后但是实际上并不是
[36:09.920 --> 36:12.160] 你猜这最单纯的是什么
[36:12.160 --> 36:13.120] 广告绕道
[36:13.120 --> 36:13.920] 不是
[36:13.920 --> 36:15.680] 不知道
[36:15.680 --> 36:18.880] 最单纯的是去调试聊天软件
[36:18.880 --> 36:20.480] 啊
[36:20.480 --> 36:23.680] 对因为各家公司的他们的格式是不通用的
[36:23.680 --> 36:26.560] 而且你各家公司他写的文档
[36:26.560 --> 36:29.200] 就比如说我想以一个就是说是for human
[36:29.200 --> 36:31.359] 就是说是消息for human
[36:31.359 --> 36:33.200] 对需要转发吗还是
[36:33.200 --> 36:36.799] 就是说是比如说webhook给我服务发了这种东西对吧
[36:36.799 --> 36:40.080] 我就需要去发送到那个团队的协作工具里面
[36:40.080 --> 36:41.600] 好像有一些这种
[36:41.600 --> 36:42.399] Apprise
[36:42.399 --> 36:44.879] 那个叫什么XAMPP
[36:44.879 --> 36:48.319] 不是那个是协议啦XAMPP
[36:48.319 --> 36:51.200] 所以你的那个webhook可能既要接slack
[36:51.200 --> 36:54.319] 也要接telegram也要接丁丁也要接微信
[36:54.319 --> 36:55.359] 我觉得肯定有这种app
[36:55.359 --> 36:56.480] 不是有一个叫Apprise
[36:56.480 --> 36:58.000] 这个我有个项目在用的
[36:58.000 --> 37:00.640] 就是你用他的接口Apprise send的一个东西
[37:00.640 --> 37:02.240] 他还有个什么Test什么
[37:02.240 --> 37:04.640] 他可以给你发到100多个平台上去
[37:04.640 --> 37:07.200] 我这个我当时写的时候还真没去了解
[37:07.200 --> 37:08.640] 但是我就是可能没有
[37:08.640 --> 37:10.720] 对我对然后我现在去
[37:10.720 --> 37:13.279] 然后我当时就觉得最花时间的就是
[37:13.279 --> 37:14.799] 去适配各个软件
[37:14.799 --> 37:18.080] 因为你各个软件的那个消息渲染的完全不一样
[37:18.080 --> 37:19.759] 其实我觉得这个是很好的一个
[37:19.760 --> 37:21.280] 对了我还要吐槽一点
[37:21.280 --> 37:22.800] 国内某些软件
[37:22.800 --> 37:23.600] 然后他的
[37:23.600 --> 37:24.480] webhook是吧
[37:24.480 --> 37:25.520] 不是很难用
[37:25.520 --> 37:30.400] 实际上文档和他实际上的时间是两回事
[37:30.400 --> 37:34.480] 而且差的是差了两个墙壁楼
[37:34.480 --> 37:35.760] 是的这种
[37:35.760 --> 37:37.040] 哎是的
[37:37.040 --> 37:38.800] 其实我觉得是一个很好的创业项目
[37:38.800 --> 37:40.320] 就是你搞一个平台
[37:40.320 --> 37:43.600] 就是所谓的slack telegram丁丁
[37:43.600 --> 37:46.000] 都可以过来接这个平台对吧
[37:46.000 --> 37:47.120] 然后
[37:47.120 --> 37:51.600] 最主要是他太多undefined behavior了
[37:51.600 --> 37:54.160] 你知道吗python里都有这种
[37:54.160 --> 37:55.120] cpython里都有这种
[37:55.120 --> 37:58.480] 对啊cpython多undefined behavior太多了
[37:58.480 --> 38:02.160] 我遇到的一个就是
[38:02.160 --> 38:04.400] 他文档和实际的behavior不一样
[38:04.400 --> 38:07.040] 并且那个bug在10年之前被提了
[38:07.040 --> 38:08.720] 然后过了10年被修了
[38:08.720 --> 38:11.920] 是那个inspect.get source
[38:11.920 --> 38:15.520] 就是get一段代码的那个原代码
[38:15.520 --> 38:18.720] 就是实际上他比如说好像
[38:18.720 --> 38:20.800] 你要get那个multilevel代码
[38:20.800 --> 38:22.560] 在某些情况下是get不到的
[38:22.560 --> 38:24.320] 然后这个bug已经存在10多年了
[38:24.320 --> 38:25.200] 你修的
[38:25.200 --> 38:25.920] 不是我修的
[38:25.920 --> 38:27.040] 我看到是你修的
[38:27.040 --> 38:27.920] 对这个是
[38:27.920 --> 38:31.840] 因为我在写iretis的时候要经常看iretis文档
[38:31.840 --> 38:33.040] 我也发现了很多错误
[38:33.040 --> 38:34.480] 我也给他们提过PR
[38:34.480 --> 38:37.600] 就是这个问题就是你开发这个一个项目的时候
[38:37.600 --> 38:40.880] 你会发现你需要去修很多其他的项目
[38:40.880 --> 38:45.120] 对我在开发项目过程中修了一个cpython文档的bug
[38:45.120 --> 38:47.359] 就因为他和你描述不一样
[38:47.359 --> 38:48.480] 就是inspect的吧好像是
[38:48.480 --> 38:49.600] 不是那个
[38:49.600 --> 38:53.600] 我修的是那个就是那个bytecode
[38:53.600 --> 38:55.839] 那个叫什么extend的那个命令
[38:55.839 --> 38:57.200] 就是他字节码
[38:57.200 --> 39:00.799] 他字节码的描述其实和他的实际的behavior不一样
[39:00.799 --> 39:04.000] 因为他在3.6里面把那个
[39:04.000 --> 39:06.240] 就3.6里面我不知道听众们知不知道
[39:06.240 --> 39:09.279] 他是把字节码统一变成了两个字节
[39:09.279 --> 39:11.120] 原来是一个字节或者三个字节
[39:11.120 --> 39:14.319] 但是他那个extend是他的一个bytecode的命令
[39:14.320 --> 39:16.480] 他就没有相应的把文档改过来
[39:16.480 --> 39:17.680] 所以给他修了一下
[39:17.680 --> 39:20.480] 这个地方我就点名我就不点名批评了
[39:20.480 --> 39:22.800] 然后归类了某些企业聊天软件
[39:22.800 --> 39:26.880] 然后对我去真的是他文档写的消息渲染格式
[39:26.880 --> 39:27.760] 他会怎么样
[39:27.760 --> 39:30.960] 实际上跟他实际上的是中间差了4个巧笔
[39:30.960 --> 39:33.280] 我问个问题
[39:33.280 --> 39:38.000] 你们有见过国内哪家API文档写的好的吗
[39:38.000 --> 39:39.680] 你们觉得用过的
[39:39.680 --> 39:41.520] 我觉得TeamBeating
[39:41.520 --> 39:44.640] 基本上你说的文档写的好
[39:44.640 --> 39:46.160] 感觉都是一些很酷的公司
[39:46.160 --> 39:47.280] 就小公司了
[39:47.280 --> 39:52.240] 那种本来就是技术创业的小公司
[39:52.240 --> 39:53.840] 是的只有这种公司
[39:53.840 --> 39:56.560] 没被信托他们收购之前的公司
[39:56.560 --> 40:02.080] 基本上文档写的好的一般都是技术创业的公司
[40:02.080 --> 40:03.200] 对对对我是
[40:03.200 --> 40:06.400] 但是这种比如说用户量大的大的开放平台的文档
[40:06.400 --> 40:09.040] 反而写的都特别的不好用
[40:09.040 --> 40:10.960] 这个地方我就想黑微博了
[40:10.960 --> 40:12.480] 我去微博的文档
[40:12.480 --> 40:14.480] 他的API还是很不稳定
[40:14.480 --> 40:15.920] 是的
[40:15.920 --> 40:17.360] 以前我听师兄吐槽过
[40:17.360 --> 40:18.400] 微博的
[40:18.400 --> 40:21.200] 他们很不负责任
[40:21.200 --> 40:22.160] 我不是赞助商吧
[40:22.160 --> 40:23.440] 我不是赞助商
[40:23.440 --> 40:24.720] 他们很不负责任
[40:24.720 --> 40:26.800] 就是别人辛辛苦苦的开发一个APP
[40:26.800 --> 40:29.200] 他直接一改API别人直接黄了
[40:29.200 --> 40:33.040] 其实国内的API其实都主流
[40:33.040 --> 40:35.040] 因为我觉得这个东西可能说
[40:35.040 --> 40:37.600] 就是说原因更复杂
[40:37.600 --> 40:38.480] 不占KPI吗
[40:38.480 --> 40:39.200] 对
[40:39.200 --> 40:44.640] 国内的开放API其实都存在这样的问题
[40:44.640 --> 40:47.520] 比如说某一个版本升级就直接broken change
[40:47.520 --> 40:51.359] 但是国内的一些大公司他们也有KPI
[40:51.359 --> 40:52.560] 为什么他们没有这个问题
[40:52.560 --> 40:53.279] 这个很奇怪
[40:53.279 --> 40:57.359] 因为我觉得这个算是一部分
[40:57.359 --> 41:00.480] 因为你文档好其实能带动你的用户量
[41:00.480 --> 41:03.040] 但是国内可能更加急功近利一点
[41:03.040 --> 41:04.560] 就是说他带来的用户量可能是
[41:04.560 --> 41:06.480] 比如说我在6个月以后
[41:06.480 --> 41:08.480] 我长期来看是对我有好处
[41:08.480 --> 41:11.840] 但是我并不能给我这3个月内就给我增加1000个用户
[41:11.840 --> 41:16.480] 这3个月内增加1000个用户可能是你加功能来的更多
[41:16.480 --> 41:19.040] 所以就会有这样一个问题
[41:19.040 --> 41:20.000] 我觉得还是管理上的问题
[41:20.000 --> 41:21.760] 我觉得还有一个问题就是
[41:21.760 --> 41:23.680] 我不确认是不是因为垄断
[41:23.680 --> 41:27.200] 比如说像微博微信的API其实做的都不好
[41:27.200 --> 41:28.880] 微信有API
[41:28.880 --> 41:29.600] 微信
[41:29.600 --> 41:31.520] 各种平台或者是其他的
[41:31.520 --> 41:34.720] 微信确实它那个
[41:34.720 --> 41:35.760] 我举个例子
[41:35.760 --> 41:38.640] 它那个微信支付的API我看过
[41:38.640 --> 41:42.640] 它那个URL的param用按的连起来
[41:42.640 --> 41:46.560] 那个URL的param它是要求有顺序的
[41:46.560 --> 41:47.760] 你看我手机
[41:47.760 --> 41:51.920] 后面三鼠是要求按顺序的
[41:51.920 --> 41:55.440] 而且它的验签流程也烦的一
[41:55.440 --> 41:58.640] 烦的
[41:58.640 --> 42:02.400] 我猜它那个顺序就是用来做签名验证的
[42:02.400 --> 42:06.240] 但是我理解它应该是自己签名的做自己验证的时候
[42:06.240 --> 42:07.840] 去排序来做签名验证
[42:07.840 --> 42:09.840] 不是它复杂一点
[42:09.840 --> 42:12.000] 你把它说明白了我也可以搞
[42:12.000 --> 42:13.440] 但是有一些它没说在里面
[42:13.440 --> 42:18.240] 是就是这个地方叫unspecific behavior
[42:18.240 --> 42:19.680] unspecified
[42:19.680 --> 42:21.600] 对
[42:21.600 --> 42:26.320] 就是能把那个URL的参数搞成有顺序的这种
[42:26.320 --> 42:27.600] 它真的懂HTTP吗
[42:27.600 --> 42:32.160] 这个时候能排成3.6Dict的好处出来了
[42:32.160 --> 42:34.720] 不懂HTTP
[42:34.720 --> 42:36.960] 你不是之前说有同事
[42:36.960 --> 42:40.160] 我是确实见到过我的同事有不懂HTTP的
[42:40.160 --> 42:42.000] 我不知道你们有没有
[42:42.000 --> 42:45.600] 我见过一个同事我就不吐槽是哪家公司
[42:45.600 --> 42:47.040] 我经历过的哪家公司了
[42:47.040 --> 42:48.799] 他比如他做算法他有别的专业
[42:48.799 --> 42:50.160] 他可以不懂HTTP
[42:50.160 --> 42:51.680] 但是他把这个API设计出来
[42:51.680 --> 42:54.799] 不懂HTTP其实是好事了
[42:54.799 --> 42:56.640] 我见过一个同事
[42:56.640 --> 42:57.600] 然后我就不吐槽
[42:57.600 --> 42:58.399] 为了人身安全
[42:58.399 --> 43:00.000] 我就不吐槽是具体哪家公司了
[43:00.000 --> 43:01.600] 就是我经历过哪家公司了
[43:01.600 --> 43:03.600] 就是某一个大佬
[43:03.600 --> 43:07.040] 然后我们那天在群里进行一个trial shooting的时候
[43:07.040 --> 43:08.960] 然后大佬在去看源码
[43:08.960 --> 43:10.080] 看了源码之后
[43:10.080 --> 43:11.279] 因为是我们同事
[43:11.279 --> 43:12.319] 是我另外一个同事写的
[43:12.319 --> 43:13.600] 就是一个Java的SDK
[43:13.600 --> 43:17.680] 他里面拿了一个pass.macdr出来
[43:17.680 --> 43:18.560] 拋出来问
[43:18.560 --> 43:19.920] 我想问一下
[43:19.920 --> 43:22.400] 这个函数是不是创建文件的
[43:22.400 --> 43:26.160] 这个是英文不好
[43:26.160 --> 43:30.720] Macdr就已经是Macdr了
[43:30.720 --> 43:31.759] 对啊 如果是英文
[43:31.759 --> 43:32.959] 他没有Windows吗
[43:32.959 --> 43:34.240] 对 就首先英文不好
[43:34.240 --> 43:37.120] 然后也开发的经验感觉也比较那个
[43:37.120 --> 43:38.720] 但是他学习还挺高的
[43:38.720 --> 43:43.520] 这种事情任何世界的任何地方都有可能发生
[43:43.520 --> 43:45.520] 这个是比较习惯
[43:45.520 --> 43:47.520] 也有可能吧
[43:47.520 --> 43:51.200] 对 但是我当时看呆了
[43:51.200 --> 43:52.640] pass.macdr
[43:52.640 --> 43:54.799] 你这个还是用来创建文件的吗
[43:54.799 --> 43:56.799] 我猜的还比较靠谱
[43:56.799 --> 43:58.240] 就是没有特别离谱
[43:58.240 --> 44:03.040] 话说我上个周周末在一台Windows上面装了一个Oracle数据库
[44:03.040 --> 44:04.319] 你闲的吗
[44:04.319 --> 44:05.520] Pen is the S
[44:05.520 --> 44:08.479] 我觉得Oracle的SDK太买了
[44:08.479 --> 44:09.439] 我没用过Oracle
[44:09.439 --> 44:12.640] 就是你把那个东西装好了
[44:12.640 --> 44:15.839] 你的桌面上就是你会多出来一大坨软件
[44:15.839 --> 44:17.439] 可以双击点进去的
[44:17.439 --> 44:21.919] 有什么Database什么Assistant什么Helper
[44:21.919 --> 44:26.959] 什么Account什么Network Helper那种东西
[44:26.960 --> 44:28.960] 所以人家叫企业软件
[44:28.960 --> 44:31.680] Oracle对Python的支持太少了
[44:31.680 --> 44:34.960] 基本上Python的Oracle你所有关键词Error
[44:34.960 --> 44:39.920] 最多的就是Oracle从零点几升到哪个版本升到哪个版本
[44:39.920 --> 44:41.360] SDK不兼容
[44:41.360 --> 44:43.360] 不过它虽然很多很多
[44:43.360 --> 44:46.000] 但是你确实打开一个一直点下一步
[44:46.000 --> 44:48.000] 你可以把你的事情搞定
[44:48.000 --> 44:51.440] 那我们还是聊回PyCon吧
[44:51.440 --> 44:54.800] 今年PyCon其实有一些新的项目
[44:54.800 --> 44:56.240] 有Tutorial和Workshop
[44:56.240 --> 44:58.240] 要不来介绍一下
[44:58.240 --> 45:02.720] 说实话Workshop和Tutorial今年是第一次办
[45:02.720 --> 45:07.200] Tutorial这边的话其中基本上阵容都是很强大的
[45:07.200 --> 45:09.200] 小明大家应该都认识
[45:09.200 --> 45:10.479] 就是Tablog的作者
[45:10.479 --> 45:12.479] 原本是Flex的现在的维护者
[45:12.479 --> 45:16.720] 我们的播客也是host在Tablog上面
[45:16.720 --> 45:19.439] 对,等一下我们当小明打50块钱吧
[45:19.439 --> 45:22.240] 50块钱到我们账上
[45:22.240 --> 45:26.240] 然后李辉还有Luciano,Bashir
[45:26.240 --> 45:28.240] 就是流畅的Python的作者
[45:28.240 --> 45:30.240] 然后李辉是Flask的维护者
[45:30.240 --> 45:32.240] 他之前那个演讲我还看了一下
[45:32.240 --> 45:34.240] 他是两年之前还不会Flask
[45:34.240 --> 45:36.240] 然后他两年之后成为Flask的维护者
[45:36.240 --> 45:38.240] 他今年在CosCup上面的一个分享就是
[45:38.240 --> 45:44.240] 如何从两年期间从一个初学者变为一个开源者
[45:44.240 --> 45:46.240] 还挺神奇的
[45:46.240 --> 45:48.240] 然后当时他给了个答案就是不要去工作
[45:48.240 --> 45:50.240] 有好几条,不要去工作,不要有女朋友
[45:50.240 --> 45:52.240] 还有什么来着
[45:52.240 --> 45:54.240] 反正有好几条
[45:54.240 --> 45:58.240] 他是有女朋友的,这点我先揭露一下黑暗现实
[45:58.240 --> 46:00.240] 今年Tutorial的话
[46:00.240 --> 46:04.240] 其实是我们是在仿造Python US的形式
[46:04.240 --> 46:06.240] 因为我们当时一个设想是
[46:06.240 --> 46:08.240] 就是说是你单纯的一天会议下来
[46:08.240 --> 46:12.240] 其实你并没有把嘉宾来到中国
[46:12.240 --> 46:14.240] 就是特别是很多国外的嘉宾
[46:14.240 --> 46:16.240] 我们大家都知道我们这两年是在不断走国际化路线
[46:16.240 --> 46:18.240] 然后请国外的嘉宾出席国内外的交流
[46:18.240 --> 46:22.240] 其实你并没有把国外嘉宾想分享的
[46:22.240 --> 46:26.240] 就是说是真正的就是说是分享一部分出来
[46:26.240 --> 46:28.240] 就是这样一个东西
[46:28.240 --> 46:30.240] 因为大家想其实我在场上
[46:30.240 --> 46:34.240] 我一个就是说我40分钟到50分钟的一个topic
[46:34.240 --> 46:36.240] 其实是讲的东西很有限的
[46:36.240 --> 46:38.240] 对,所以说我们其实就是
[46:38.240 --> 46:40.240] 我猜Python US也考虑到了这一层
[46:40.240 --> 46:43.240] 其实我们就是想做一个Tutorial的形式
[46:43.240 --> 46:45.240] 来就是让有兴趣的人一起来玩
[46:45.240 --> 46:49.240] 然后给大家提供一个更深度的交流的空间
[46:49.240 --> 46:51.240] 那Tutorial现在还能报名吗
[46:51.240 --> 46:53.240] 还是Tutorial现在是还能报名的状态
[46:53.240 --> 46:56.240] 对,然后因为这点要给大家澄清一下
[46:56.240 --> 46:59.240] 因为大家都知道我们是按照惯例
[46:59.240 --> 47:02.240] 是就是说是请国内外的嘉宾过来的时候
[47:02.240 --> 47:05.240] 我们是需要报销餐饮和住宿费用的
[47:05.240 --> 47:08.240] 但是我们场地是要付出一笔
[47:08.240 --> 47:09.240] 大家都知道上海房价
[47:09.240 --> 47:12.240] 上海的场地不会太便宜
[47:12.240 --> 47:15.240] 所以说我们是按照成本相信我们
[47:15.240 --> 47:18.240] 我们今年预计还是会微亏一点
[47:18.240 --> 47:20.240] 但是我们是绝对不会赚钱的
[47:20.240 --> 47:22.240] 那workshop主要是干什么
[47:22.240 --> 47:24.240] Workshop的话
[47:24.240 --> 47:27.240] 其实是我们今年和赞助商伙伴的一个
[47:27.240 --> 47:29.240] 更新的一个尝试
[47:29.240 --> 47:31.240] 因为其实赞助商伙伴
[47:31.240 --> 47:33.240] 像我们今年是跟AWS合办的
[47:33.240 --> 47:34.240] 对,然后赞助商伙伴
[47:34.240 --> 47:36.240] 其实不管是AWS Lambda
[47:36.240 --> 47:40.240] 或者是现在AWS在Solaris上
[47:40.240 --> 47:41.240] 更多的一些产品
[47:41.240 --> 47:43.240] 其实它是有很
[47:43.240 --> 47:44.240] 对于开发者来说
[47:44.240 --> 47:46.240] 其实是一个不错的利好的
[47:46.240 --> 47:47.240] 然后对于我们来讲的话
[47:47.240 --> 47:50.240] 其实就是一个双赢的三赢状态
[47:50.240 --> 47:52.240] 就是说是开发者能够获取到
[47:52.240 --> 47:53.240] 就是说是我们的想法是
[47:53.240 --> 47:55.240] 开发者能够获取到最新的
[47:55.240 --> 47:56.240] 就是说是企业级的
[47:56.240 --> 47:58.240] 就是企业的就是东西好用的
[47:58.240 --> 47:59.240] 或者说是便宜的
[47:59.240 --> 48:01.240] 然后而企业的话
[48:01.240 --> 48:03.240] 能够获取到主要的帮助
[48:03.240 --> 48:05.240] 而我们也能和企业建立一个长期的
[48:05.240 --> 48:07.240] 就是双向的联系
[48:07.240 --> 48:09.240] 就是促进社区更良好的发展
[48:09.240 --> 48:10.240] 其实我想问的是
[48:10.240 --> 48:11.240] TALK主要是一个什么形式呢
[48:11.240 --> 48:13.240] 就是这也是TALK吗
[48:13.240 --> 48:15.240] 就是有一个topic
[48:15.240 --> 48:18.240] 然后他会就在里面去做这个topic
[48:18.240 --> 48:20.240] 然后由AWS那边来提供资源
[48:20.240 --> 48:22.240] 然后对就是
[48:22.240 --> 48:23.240] 就比如怎么在AWS里
[48:23.240 --> 48:25.240] run python之类的
[48:25.240 --> 48:26.240] 对对对就是
[48:26.240 --> 48:27.240] 就是他会提供一些东西
[48:27.240 --> 48:29.240] 对然后就是你会去线上
[48:29.240 --> 48:30.240] 写一部分功能性的代码
[48:30.240 --> 48:32.240] 然后把这部分功能性的代码
[48:32.240 --> 48:34.240] 用我们合作伙伴提供的服务
[48:34.240 --> 48:36.240] 对然后播上去
[48:36.240 --> 48:38.240] 今年是有AWS和微软
[48:38.240 --> 48:40.240] 对AWS
[48:40.240 --> 48:42.240] 哎 既然干货这么多
[48:42.240 --> 48:44.240] 那怎么才能够报名Totals
[48:44.240 --> 48:46.240] 跟Total
[48:48.240 --> 48:50.240] cn.python.org
[48:50.240 --> 48:52.240] 然后前面已经播了
[48:52.240 --> 48:54.240] 别忘了加上https
[48:54.240 --> 48:56.240] 大家快来报名吧
[48:56.240 --> 48:58.240] 你们有没有觉得
[48:58.240 --> 49:00.240] 现在信涛的声音
[49:00.240 --> 49:02.240] 我们等下发去听众朋友们
[49:02.240 --> 49:03.240] 我们等下发去一个投票吧
[49:03.240 --> 49:04.240] 你们有没有觉得
[49:04.240 --> 49:06.240] 信涛的声音现在越来越是
[49:06.240 --> 49:08.240] gay里gay系了
[49:08.240 --> 49:10.240] 有谁想和信涛做男朋友的
[49:10.240 --> 49:12.240] 请在我们的群里打1
[49:12.240 --> 49:14.240] 如果想和文老师做男朋友的
[49:14.240 --> 49:15.240] 请打2
[49:15.240 --> 49:17.240] 想和左老师做男朋友的请打3
[49:17.240 --> 49:19.240] 然后我就不参与活动了
[49:19.240 --> 49:20.240] 谢谢大家
[49:20.240 --> 49:21.240] 剩下默认就是
[49:21.240 --> 49:24.240] 关注三叉对吧
[49:24.240 --> 49:26.240] 我们都懂
[49:26.240 --> 49:27.240] 好吧
[49:27.240 --> 49:29.240] 其实我觉得反正就是说
[49:29.240 --> 49:31.240] 还是希望大家多多支持吧
[49:31.240 --> 49:33.240] 因为大家就是其实
[49:33.240 --> 49:35.240] 像去年派克很亏了
[49:35.240 --> 49:36.240] 今年20万吧
[49:36.240 --> 49:38.240] 对然后今年的话也是
[49:38.240 --> 49:39.240] 只能说做到微亏
[49:39.240 --> 49:41.240] 因为我们今年得到了
[49:41.240 --> 49:42.240] 很多合作伙伴
[49:42.240 --> 49:44.240] 包括社区那边就是
[49:44.240 --> 49:46.240] Python software foundation
[49:46.240 --> 49:47.240] 就是大家经常说到psf
[49:47.240 --> 49:48.240] Python基金会
[49:48.240 --> 49:49.240] 曾介绍过的
[49:49.240 --> 49:51.240] 对然后赞助
[49:51.240 --> 49:52.240] 然后能做到一个微亏
[49:52.240 --> 49:54.240] 但是实际上是距离我们
[49:54.240 --> 49:56.240] 就是说是能够真正
[49:56.240 --> 49:58.240] 收支平衡的那一天
[49:58.240 --> 50:00.240] 还有很大的就是说
[50:00.240 --> 50:01.240] 差距
[50:01.240 --> 50:03.240] 所以我们也希望大家来多多支持
[50:03.240 --> 50:05.240] 其实我个人感觉
[50:05.240 --> 50:06.240] 那个Totoro的门票
[50:06.240 --> 50:08.240] 我看到是觉得有点小贵
[50:08.240 --> 50:10.240] 但是就我也理解你们是
[50:10.240 --> 50:12.240] 需要去有各种支出
[50:12.240 --> 50:14.240] 对我们的想法是这样的
[50:14.240 --> 50:16.240] 就是我们希望把这个
[50:16.240 --> 50:18.240] 钱至少cover掉
[50:18.240 --> 50:20.240] Totoro场地的费用
[50:20.240 --> 50:22.240] 跟因为卢斯亚诺过来的
[50:22.240 --> 50:24.240] 机票是比较贵的
[50:24.240 --> 50:26.240] 这部分费用也
[50:26.240 --> 50:28.240] 因为也make sense
[50:28.240 --> 50:30.240] 就是卢斯亚诺的Totoro
[50:30.240 --> 50:32.240] 然后由他的听众来
[50:32.240 --> 50:34.240] 多买单一些
[50:34.240 --> 50:36.240] 所以可能有点小贵
[50:36.240 --> 50:38.240] 但是卢斯亚诺的那个
[50:38.240 --> 50:40.240] 内容确实是很好
[50:40.240 --> 50:42.240] 是讲OOP是吧
[50:42.240 --> 50:44.240] OOP和SYNC
[50:44.240 --> 50:46.240] 对因为他准备的很
[50:46.240 --> 50:48.240] 花的时间精力比较多
[50:48.240 --> 50:50.240] 而且我跟他聊过
[50:50.240 --> 50:52.240] 我就感觉
[50:52.240 --> 50:53.240] 至少Fluent Python
[50:53.240 --> 50:55.240] 大家是有口皆碑的
[50:55.240 --> 50:57.240] 然后跟他聊起来非常有料
[50:57.240 --> 50:59.240] 这种绝对是这种开发者
[50:59.240 --> 51:01.240] 真的我反正是
[51:01.240 --> 51:03.240] 我们是比不了的
[51:03.240 --> 51:05.240] 然后其实
[51:05.240 --> 51:07.240] 我们剩下的时间
[51:07.240 --> 51:09.240] 我看我们原定于一个小时
[51:09.240 --> 51:11.240] 对我们现在还有9分钟时间
[51:11.240 --> 51:13.240] 来我就先把我的主持权
[51:13.240 --> 51:15.240] 交给来9M你来主持了
[51:15.240 --> 51:17.240] 你要干嘛
[51:17.240 --> 51:19.240] 我先喝口水啊
[51:19.240 --> 51:21.240] 然后我们剩下时间
[51:21.240 --> 51:23.240] 当然是要给自己
[51:23.240 --> 51:25.240] 打一下广告的对吧
[51:25.240 --> 51:27.240] 其实就像我们之前说的
[51:27.240 --> 51:29.240] 补舌者说明天会有一个展台
[51:29.240 --> 51:31.240] 展台的位置我们会随这期播客
[51:31.240 --> 51:33.240] 发出来就是有一个图
[51:33.240 --> 51:35.240] 大家可以看得到
[51:35.240 --> 51:37.240] 然后我们四个的话会
[51:37.240 --> 51:39.240] 尽可能多的有时间待在展台
[51:39.240 --> 51:41.240] 然后如果有听众想来找我们交流的话
[51:41.240 --> 51:43.240] 就直接来找我们就好
[51:43.240 --> 51:45.240] 对我这里给大家透露
[51:45.240 --> 51:47.240] 个福利然后我们和图林
[51:47.240 --> 51:49.240] 出版社然后我们补舌者说和图林出版社
[51:49.240 --> 51:51.240] 然后大概聊聊下
[51:51.240 --> 51:53.240] 我们到时候会带着大家一起去图林
[51:53.240 --> 51:55.240] 出版社上的摊位上抢书
[51:55.240 --> 51:57.240] 然后大家如果有兴趣的话可以来
[51:57.240 --> 51:59.240] 参加我们的活动
[51:59.240 --> 52:01.240] 对对对我们是可以拿到书的
[52:01.240 --> 52:03.240] 我们的摊位上也有
[52:03.240 --> 52:05.240] 将近一千张贴纸
[52:05.240 --> 52:07.240] 跟一大些
[52:07.240 --> 52:09.240] 补舌者说的衣服
[52:09.240 --> 52:11.240] 一大些是什么
[52:11.240 --> 52:13.240] 有二十件对吧
[52:13.240 --> 52:15.240] 其实没有二十件了我们穿了很多
[52:15.240 --> 52:17.240] 对我们穿了四件
[52:17.240 --> 52:19.240] 我们搞了二十件衣服其实这个数量不多
[52:19.240 --> 52:21.240] 但是大家也要理解一下因为衣服也是有成本的
[52:21.240 --> 52:23.240] 然后我们四个穿掉四件
[52:23.240 --> 52:25.240] 所以还有十六件我们会送出去
[52:25.240 --> 52:27.240] 其实还有三件粉红色的
[52:27.240 --> 52:29.240] 对我们有十三件
[52:29.240 --> 52:31.240] 我们有十三件灰色和三件粉红色
[52:31.240 --> 52:33.240] 对
[52:33.240 --> 52:35.240] 然后对了
[52:35.240 --> 52:37.240] 明天的话如果是大家有兴趣的话
[52:37.240 --> 52:39.240] 我们可以来请
[52:39.240 --> 52:41.240] 信涛说他没有体会过阿鲁巴的
[52:41.240 --> 52:43.240] 滋味
[52:43.240 --> 52:45.240] 对对对
[52:45.240 --> 52:47.240] 我们可以就是说现场的朋友
[52:47.240 --> 52:49.240] 明天会在现场安排好一棵树
[52:49.240 --> 52:51.240] 然后我们一起
[52:51.240 --> 52:53.240] 让信涛满足一下
[52:53.240 --> 52:55.240] 让信涛愿望对不对
[52:55.240 --> 52:57.240] 让信涛体验一下阿鲁巴的感觉
[52:57.240 --> 52:59.240] 就看听众你们给不给力了
[52:59.240 --> 53:01.240] 对对对
[53:01.240 --> 53:03.240] 话说其实我想问一下
[53:03.240 --> 53:05.240] 你们现在写python写多
[53:05.240 --> 53:07.240] 我只在业余时间写
[53:07.240 --> 53:09.240] 我也是
[53:09.240 --> 53:11.240] 我现在写够写Java
[53:11.240 --> 53:13.240] 我现在工作上写Java但是
[53:13.240 --> 53:15.240] 如果我不写python的话
[53:15.240 --> 53:17.240] 只写Java我感觉这个人就
[53:17.240 --> 53:19.240] 就有点不正常
[53:19.240 --> 53:21.240] 所以我每天晚上回到家可能写一点python
[53:21.240 --> 53:23.240] 来恢复一下心智
[53:23.240 --> 53:25.240] 我可能后面会去做融洩
[53:25.240 --> 53:27.240] 可能以后写够写够
[53:27.240 --> 53:29.240] 不是一直在写够
[53:29.240 --> 53:33.240] 因为我现在是够和Java混写
[53:33.240 --> 53:35.240] 然后
[53:35.240 --> 53:37.240] 然后所以就这样
[53:37.240 --> 53:39.240] 网上现在说够是下一代的Java
[53:39.240 --> 53:41.240] 所以这两个语言可能有点像
[53:41.240 --> 53:43.240] 差的太多了
[53:43.240 --> 53:45.240] 我觉得没有Generic的语言
[53:45.240 --> 53:47.240] 我觉得够的设计哲学
[53:47.240 --> 53:49.240] 其实很奇葩
[53:49.240 --> 53:51.240] 而且够的很多东西让我用着
[53:51.240 --> 53:53.240] 哪一个更糟
[53:53.240 --> 53:55.240] 我宁愿写Java
[53:55.240 --> 53:57.240] 说实话
[53:57.240 --> 53:59.240] 我肯定是宁愿写够的
[53:59.240 --> 54:01.240] Java我不能忍
[54:01.240 --> 54:03.240] 为什么test要和你的source code放在不同的文件夹
[54:03.240 --> 54:05.240] 并且他们要用公司的前缀
[54:05.240 --> 54:07.240] 作为文件
[54:07.240 --> 54:09.240] 作为folder的名字
[54:09.240 --> 54:11.240] 就很不理解
[54:11.240 --> 54:13.240] 就是additive的ID
[54:13.240 --> 54:15.240] com.google.org
[54:15.240 --> 54:17.240] 但是
[54:17.240 --> 54:19.240] ID现在很强
[54:19.240 --> 54:21.240] 我用起来感觉
[54:21.240 --> 54:23.240] 我自己觉得够在写业务方面
[54:23.240 --> 54:25.240] 然后我自己因为
[54:25.240 --> 54:27.240] 很久之前有些setup project
[54:27.240 --> 54:29.240] 我自己觉得够在写业务
[54:29.240 --> 54:31.240] 特别是涉及到大量的搜索操作
[54:31.240 --> 54:33.240] 涉及到大量的交互式的
[54:33.240 --> 54:35.240] 就是一个变更
[54:35.240 --> 54:37.240] 比如说在就是刚才我们今天聊到的graphQL
[54:37.240 --> 54:39.240] 比如说够在写这些偏动态的东西
[54:39.240 --> 54:41.240] 比如说我再去
[54:41.240 --> 54:43.240] 以后我们要去动态的添加一些什么东西
[54:43.240 --> 54:45.240] 就是这种够上面
[54:45.240 --> 54:47.240] 相较于java的生态
[54:47.240 --> 54:49.240] 或者其他数码程式
[54:49.240 --> 54:51.240] 所以现在写go的话
[54:51.240 --> 54:53.240] 主要用什么编辑器
[54:53.240 --> 54:55.240] golang
[54:55.240 --> 54:57.240] 也是JetBrains
[54:57.240 --> 54:59.240] 我买了全家桶好用
[54:59.240 --> 55:01.240] 绝对值
[55:01.240 --> 55:03.240] 所以你2000块钱的开销是这么来的
[55:03.240 --> 55:05.240] 一年一年
[55:05.240 --> 55:07.240] 一年1000多
[55:07.240 --> 55:09.240] 现在多少钱
[55:09.240 --> 55:11.240] 全家桶个人的开发者是249
[55:11.240 --> 55:13.240] 所有可用
[55:13.240 --> 55:15.240] 然后到第二年是打几折
[55:15.240 --> 55:17.240] 然后第三年是打6折
[55:17.240 --> 55:19.240] 249到一年
[55:19.240 --> 55:21.240] 一年还行
[55:21.240 --> 55:23.240] 对很好用
[55:23.240 --> 55:25.240] 相信我买了
[55:25.240 --> 55:27.240] 对了JetBrains也是我们今年的白银赞助商
[55:27.240 --> 55:29.240] 是PyCon的赞助商
[55:29.240 --> 55:31.240] 是我们今年的赞助商
[55:31.240 --> 55:33.240] 然后大家可以
[55:33.240 --> 55:35.240] 来JetBrains的展位上玩
[55:35.240 --> 55:37.240] 也许他们今年还会给大家
[55:37.240 --> 55:39.240] 免费送出
[55:39.240 --> 55:41.240] 全家桶的
[55:41.240 --> 55:43.240] 会吗
[55:43.240 --> 55:45.240] 这个当然是不可靠消息
[55:45.240 --> 55:47.240] 这个东西我只说可能
[55:47.240 --> 55:49.240] 但是对大家懂了
[55:49.240 --> 55:51.240] 另外捕食者说
[55:51.240 --> 55:53.240] 现在还没有赞助商
[55:53.240 --> 55:55.240] 如果
[55:55.240 --> 55:57.240] 如果有心动的公司的话
[55:57.240 --> 55:59.240] 可以联系我们
[55:59.240 --> 56:01.240] 对然后今天JetBrains
[56:01.240 --> 56:03.240] 今天JetBrains那个话题
[56:03.240 --> 56:05.240] 我也很想听
[56:05.240 --> 56:07.240] 他们是假的
[56:07.240 --> 56:09.240] JetBrains那个人
[56:09.240 --> 56:11.240] 他做调试
[56:11.240 --> 56:13.240] 然后我还去看一下
[56:13.240 --> 56:15.240] 那个人在两年前
[56:15.240 --> 56:17.240] 的PyCon也做过一个关于Debugger的演讲
[56:17.240 --> 56:19.240] 他是俄罗斯人
[56:19.240 --> 56:21.240] 可能是东欧那边
[56:21.240 --> 56:23.240] 然后他就是讲了一下
[56:23.240 --> 56:25.240] Python 3.6里面
[56:25.240 --> 56:27.240] 新加的一个API
[56:27.240 --> 56:29.240] 然后用那个来对Debugger
[56:29.240 --> 56:31.240] 进行优化
[56:31.240 --> 56:33.240] 对今天他也会讲针对这个来
[56:33.240 --> 56:35.240] Frame Evaluation
[56:35.240 --> 56:37.240] 对就感觉他们
[56:37.240 --> 56:39.240] JetBrains对Python调试这块
[56:39.240 --> 56:41.240] 应该还是很有经验
[56:41.240 --> 56:43.240] 其实我很好奇的是他们怎么样对于
[56:43.240 --> 56:45.240] GNATool和Jungle的Template
[56:45.240 --> 56:47.240] 这种东西他们都能支持锻炼调试
[56:47.240 --> 56:49.240] 我其实挺好奇
[56:49.240 --> 56:51.240] 这都支持
[56:51.240 --> 56:53.240] 这个也太刁了
[56:53.240 --> 56:55.240] Python Professional的版本是支持的
[56:55.240 --> 56:57.240] 就是说是GNATool和Jungle的Template
[56:57.240 --> 56:59.240] 就直接是在HTM你打个锻炼
[56:59.240 --> 57:01.240] 这也太强了吧
[57:03.240 --> 57:05.240] PDP好像都不行
[57:05.240 --> 57:07.240] PDP怎么可能行
[57:07.240 --> 57:09.240] Jungle这个模板语言
[57:09.240 --> 57:11.240] 其实就自己又有一个小Parser
[57:11.240 --> 57:13.240] 他把那个Parser集成
[57:13.240 --> 57:15.240] 但我不确定他们是怎么样集成
[57:15.240 --> 57:17.240] 因为按道理说你是那个L7渲染的时候
[57:17.240 --> 57:19.240] 我不知道他们在哪一层Py系的
[57:19.240 --> 57:21.240] 反正而且大家都知道
[57:21.240 --> 57:23.240] Gevent调试其实挺恶心的
[57:23.240 --> 57:25.240] 对吧Gevent
[57:25.240 --> 57:27.240] 就是你MankyPy系之后你的对战信息是有比较大的变化
[57:27.240 --> 57:29.240] 对你用PDP之类的调试就会有点问题
[57:29.240 --> 57:31.240] 对然后但是像
[57:31.240 --> 57:33.240] PySem全系列早就很早之前
[57:33.240 --> 57:35.240] 就支持了Gevent的MankyPy
[57:35.240 --> 57:37.240] 之后的调试
[57:37.240 --> 57:39.240] 他们毕竟是专业的公司
[57:39.240 --> 57:41.240] 我其实好好奇他们怎么做
[57:41.240 --> 57:43.240] 而且他们那个补全我用过Vim的You Can't Believe Me
[57:43.240 --> 57:45.240] 跟PySem补全当然是最好的
[57:45.240 --> 57:47.240] 对
[57:47.240 --> 57:49.240] 我回去找他们要补时刀的广告费
[57:49.240 --> 57:51.240] 好了我们今天要不要推荐个酷
[57:51.240 --> 57:53.240] 你看有什么推荐的
[57:53.240 --> 57:55.240] 我们已经推荐了iRedis
[57:57.240 --> 57:59.240] 对我们今天就推荐这一个
[57:59.240 --> 58:01.240] 那我们今天就只推荐这一个
[58:01.240 --> 58:03.240] 信涛给一下
[58:03.240 --> 58:05.240] iRedis.io
[58:05.240 --> 58:07.240] 这里我再发一个投票
[58:07.240 --> 58:09.240] 大家觉得
[58:09.240 --> 58:11.240] 信涛这一集今天打了这么多广告
[58:11.240 --> 58:13.240] 应该给补社者说
[58:13.240 --> 58:15.240] 交多少广告费
[58:15.240 --> 58:17.240] 5块的扣1
[58:17.240 --> 58:19.240] 10块的扣2
[58:19.240 --> 58:21.240] 50块的扣3
[58:21.240 --> 58:23.240] 500块的扣4
[58:23.240 --> 58:25.240] 好了那我们今天差不多就这样了
[58:25.240 --> 58:27.240] 我们现在就会把
[58:27.240 --> 58:29.240] 这个上传上去
[58:29.240 --> 58:31.240] 大家然后明天
