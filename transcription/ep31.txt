[00:00.760 --> 00:03.000] 对 就是我们前面不讲了一堆外利鞋
[00:03.000 --> 00:04.280] 说怎么样去组织代码吗
[00:04.280 --> 00:05.400] 代码防腐这些东西
[00:05.400 --> 00:07.400] 如果大家对于怎么实践感兴趣的话
[00:07.880 --> 00:09.840] 然后在成都前端
[00:09.840 --> 00:11.480] 可以带我们公司考虑一下
[00:12.360 --> 00:14.440] 成都的主流的薪资水平吧
[00:15.920 --> 00:18.680] 刚强要不要聊一下你这边的招聘
[00:22.280 --> 00:23.920] 我上次打过了
[00:23.920 --> 00:25.560] 我还要打
[00:26.560 --> 00:27.480] 对 我还要打
[00:27.480 --> 00:33.640] 就是我这边是初中资深架构师
[00:33.640 --> 00:34.760] 我们都要
[00:34.760 --> 00:36.320] 包含前端后端客户端
[00:36.320 --> 00:37.800] 我们都要
[00:37.800 --> 00:40.880] 所以我们也是在元辅导
[00:40.880 --> 00:41.720] 大家也听说过
[00:41.720 --> 00:44.400] 我在元辅导的班马这个事业部工作
[00:44.400 --> 00:46.680] 也是现在业务增长最快
[00:46.680 --> 00:50.280] 也是业界2到8岁标准的业务的第一名
[00:50.280 --> 00:54.240] 整体来说业务发展和技术的演化
[00:54.240 --> 00:55.400] 也是特别快的
[00:55.400 --> 00:59.879] 如果大家有兴趣来跟我一起来聊一聊
[00:59.879 --> 01:02.040] 或者是有兴趣来过来看一看
[01:02.040 --> 01:25.960] 也可以随时来联系我
[02:32.040 --> 02:51.720] 刚才产品经理的笔的
[02:51.720 --> 02:54.799] 我会觉得这个是不是对
[02:54.799 --> 02:57.480] 对我们的研发同学会有一个很高的要求
[02:57.480 --> 03:00.079] 就是相当于是我能理解业务
[03:00.079 --> 03:01.399] 然后预判业务
[03:01.400 --> 03:03.320] 然后才能确定说
[03:03.320 --> 03:05.080] 我这个东西我要去怎么实现
[03:05.080 --> 03:06.880] 不然的话就是产品第一个需求
[03:06.880 --> 03:08.000] 我就往里累一点
[03:08.000 --> 03:09.240] 提个需求就累一点
[03:09.240 --> 03:13.520] 然后就很快这个项目也好
[03:13.520 --> 03:14.840] 或者是个API也好
[03:14.840 --> 03:16.800] 它就会变得臃肿复杂
[03:16.800 --> 03:18.040] 而且很难维护
[03:18.040 --> 03:20.680] 其实是不需要预判的
[03:20.680 --> 03:22.880] 其实你一开始你无非就做两种决定
[03:22.880 --> 03:25.440] 一开始就是说当你挨个需求之后
[03:25.440 --> 03:27.640] 你把它认为说它这是个可复用需求
[03:27.640 --> 03:30.280] 你把它变成个组件库这样东西可复用的
[03:30.280 --> 03:32.280] 然后你这个判断有可能是错的
[03:32.280 --> 03:34.040] 因为你可能过了一段时间之后
[03:34.040 --> 03:36.040] 发现说这个组件参数在不断的膨胀
[03:36.040 --> 03:38.040] 你实在是抖不住需求了
[03:38.040 --> 03:41.240] 你要各种各样的去用技巧性的方式去绕过去
[03:41.240 --> 03:43.480] 这个时候你就应该果断的把它从
[03:43.480 --> 03:47.480] 从这种所谓的组件库可复用的技术设施里面给剔除掉
[03:47.480 --> 03:49.320] 你就直接把它复制N份
[03:49.320 --> 03:51.720] 然后到各自的地方去直接去写就好了
[03:51.720 --> 03:55.400] 对吧 这个实际上不需要你预先判断
[03:55.400 --> 03:57.800] 而是更多是你能够事后去归纳总结
[03:57.800 --> 03:59.720] 你发现说你一开始做错了没有关系
[03:59.720 --> 04:01.720] 你到时候你再去改进它就行了
[04:01.720 --> 04:04.440] 那也有另外一种极端可能就是
[04:04.440 --> 04:06.920] 你一开始没有意识到这个东西是一个pattern
[04:06.920 --> 04:09.800] 就比如说它是一种特殊的布局模式
[04:09.800 --> 04:12.360] 然后在很多个页面里面其实都是这个样子的
[04:12.360 --> 04:14.760] 然后你一开始把它当成一个特殊业务写进去了
[04:14.760 --> 04:17.480] 然后你在很多地方都看见它是类似的
[04:17.480 --> 04:21.800] 那你这个时候你就得再把它沉淀归纳总结
[04:21.800 --> 04:25.080] 然后再变成一个组件库呗
[04:25.080 --> 04:28.280] 这个应该不是预先判断的
[04:28.280 --> 04:30.280] 没有人能够做出预先判断
[04:30.280 --> 04:34.039] 只是更多的是你能够通过监测某些指标
[04:34.039 --> 04:36.039] 然后发现它有异常
[04:36.039 --> 04:39.559] 然后在事后进行一些归纳总结
[04:39.559 --> 04:44.359] 我这个陶文说的这个我还有一个
[04:44.359 --> 04:47.000] 当时跟陶文一起聊到一个特别好的点
[04:47.000 --> 04:49.000] 我自己的理解
[04:49.000 --> 04:51.000] 然后就是说因为作为一个工程师
[04:51.000 --> 04:54.599] 我们从刚开始学计算机行
[04:54.599 --> 04:57.080] 进入计算机行业后刚开始毕业后
[04:57.080 --> 04:59.080] 我们就听到了各种名词
[04:59.080 --> 05:01.560] 例如听到最多的名词叫reuse
[05:01.560 --> 05:06.039] 就是我们总是在尝试着去追求
[05:06.039 --> 05:08.039] 我们尝试着追求附用
[05:08.039 --> 05:11.320] 追求reuse DRY这些原则
[05:11.320 --> 05:14.039] 所以工程师经常想的就是说
[05:14.039 --> 05:19.479] OK我看着这两个class只有一个failed是不一样的
[05:19.479 --> 05:22.200] 那把公共的部分是不是要抽出来呢
[05:22.200 --> 05:25.960] 那产品今天提了一个A需求
[05:25.960 --> 05:29.159] 我发现它有一块和以前做过的B需求是一样的
[05:29.159 --> 05:31.159] 那是不是先把它抽出来呢
[05:31.159 --> 05:34.919] 我的理解就是工程师对于reuse
[05:34.919 --> 05:38.520] reuseable这个追求是特别特别强烈的
[05:38.520 --> 05:43.400] 就像design pattern那本书的原著的英文名
[05:43.400 --> 05:46.280] 应该是也用了reuseable这个词
[05:46.280 --> 05:48.280] 也是在追求附用
[05:48.280 --> 05:50.280] 但是这个附用就像刚才陶文说的
[05:50.280 --> 05:53.880] 它不是工程师能决定的
[05:53.880 --> 05:56.440] 它是PM来决定的
[05:56.440 --> 06:00.280] 那当你有更多的这些同负的现象出现的时候
[06:00.280 --> 06:02.840] 你才要慎重地考虑要不要做抽象
[06:02.840 --> 06:06.040] 要不要做一个reuseable object
[06:06.040 --> 06:09.240] 那同样的一个观点也出现在了
[06:09.240 --> 06:12.040] 上次我参加的时候也提到那篇论文
[06:12.040 --> 06:15.880] 就是叫The Hints of Computer System Design
[06:15.880 --> 06:17.560] 那篇特别老的一篇论文
[06:17.560 --> 06:18.600] 是一个图灵奖
[06:18.600 --> 06:19.719] 忘了那个作者了
[06:19.719 --> 06:21.159] 一个图灵奖得主写的
[06:21.160 --> 06:23.960] 它里面就反复地提到了一个点
[06:23.960 --> 06:26.680] 就是说你要对abstraction
[06:26.680 --> 06:28.840] 对reuse保持警惕
[06:28.840 --> 06:35.240] 因为它很多时候比你不抽象带来的复杂度更高
[06:35.240 --> 06:37.560] 带来的系统的复杂度更高
[06:37.560 --> 06:40.360] 而且更难维护
[06:40.360 --> 06:42.280] 当然当时我读了那篇论文之后
[06:42.280 --> 06:43.240] 我也写了一点
[06:43.240 --> 06:46.760] 就是这篇论文类似的这些点
[06:46.760 --> 06:48.280] 现在例如说我阐述了
[06:48.280 --> 06:49.320] 但是就是说
[06:49.320 --> 06:54.440] 我们刚入行的小同学的话
[06:54.440 --> 06:55.719] 该去读第三pattern的
[06:55.719 --> 06:57.000] 我认为还是要去读
[06:57.000 --> 06:59.320] 该去了解DIY是什么的
[06:59.320 --> 07:00.200] 还要去了解
[07:00.200 --> 07:04.680] 但是并不代表你可以无脑地套用它
[07:04.680 --> 07:07.240] 对 然后大家就会问什么时候应该套用
[07:07.240 --> 07:09.800] 然后你就会扔一句说it depends
[07:09.800 --> 07:12.360] 然后就走回到了同样的轮回
[07:12.360 --> 07:16.200] 所以代码防腐要提高
[07:16.200 --> 07:22.599] 所以代码防腐要想要去破除这样的一个子循环
[07:22.599 --> 07:25.159] 就在于说我们能不能够有一种
[07:25.159 --> 07:28.760] 不用it depends的方式来去回答这个问题
[07:28.760 --> 07:29.800] 就比如说刚刚这个问题
[07:29.800 --> 07:31.800] 就是说你怎么能够知道说
[07:31.800 --> 07:34.120] 你这个组件库是抽错了
[07:34.120 --> 07:35.400] 对吧
[07:35.400 --> 07:37.320] 我们有什么指标能够去告诉你说
[07:37.320 --> 07:39.000] 你这个是一个过度的抽象
[07:39.000 --> 07:41.159] 那过度抽象的这个症状是什么
[07:41.159 --> 07:44.120] 它应该会体现为你的参数的数量的一个膨胀
[07:44.120 --> 07:44.840] 对吧
[07:44.840 --> 07:47.400] 然后你就会说我参数数量多就是不好的吗
[07:47.400 --> 07:48.200] 对吧
[07:48.200 --> 07:49.080] 这个时候也不对
[07:49.080 --> 07:51.239] 因为你发现说有的时候参数数量多是对的
[07:51.239 --> 07:53.560] 因为这些参数确实是必要的
[07:53.560 --> 07:55.080] 那你又回答这个问题说
[07:55.080 --> 07:56.359] 那什么时候参数多是不好
[07:56.359 --> 07:57.640] 什么时候参数少是好的呢
[07:57.640 --> 07:59.159] 那又是it depends
[07:59.159 --> 07:59.719] 对吧
[07:59.719 --> 08:00.840] 那我们怎么去回答这个问题
[08:00.840 --> 08:03.000] 那我们是不是能够体现出一个叫做
[08:03.000 --> 08:04.440] 必要参数占比的概念
[08:04.440 --> 08:06.200] 这个必要参数占比就是说
[08:06.200 --> 08:08.120] 你如果有一个function
[08:08.120 --> 08:09.880] 它有三个参数
[08:09.880 --> 08:12.440] 然后你发现说其中两个参数
[08:12.440 --> 08:15.000] 在其他地方大部分情况都会使用到
[08:15.000 --> 08:16.920] 但其中有一个参数
[08:16.920 --> 08:19.480] 它可能就是为特殊一两行代码准备的
[08:19.480 --> 08:21.080] 特殊一两个业务准备的
[08:21.080 --> 08:24.760] 那这个地方的参数我们就称为非必要参数
[08:24.760 --> 08:26.760] 那我们统计一下必要参数占比
[08:26.760 --> 08:29.400] 就知道说你有多大情况下
[08:29.400 --> 08:32.919] 是在为一些特殊的场景去做一些特化
[08:32.919 --> 08:33.720] 对吧
[08:33.720 --> 08:35.640] 然后你就可以通过必要参数占比
[08:35.640 --> 08:37.880] 这样一个指标来去指导你
[08:37.880 --> 08:41.880] 是不是在做过度抽象
[08:41.880 --> 08:44.200] 你就可以去防御这样的一些问题
[08:44.200 --> 08:47.800] 这个就我觉得说会比it depends更好落地一点
[08:47.800 --> 08:50.680] 然后另外一个极端的就是说
[08:50.680 --> 08:55.640] 你没有去做可附用的东西
[08:55.640 --> 08:57.960] 你可能什么东西都是复制粘贴写一份
[08:57.960 --> 09:00.360] 这也是很多做基础架构
[09:00.360 --> 09:02.360] 或者做抽主建库的一个烦恼
[09:02.360 --> 09:04.840] 就是我明明做了一个可附用的东西
[09:04.840 --> 09:06.360] 我明明实现了一套
[09:06.360 --> 09:08.200] 他们做业务的就是不用
[09:08.200 --> 09:08.680] 对吧
[09:08.680 --> 09:10.520] 他们就要用HTTP直接扩
[09:10.520 --> 09:12.040] 我就不用我这个RPC框架
[09:12.040 --> 09:14.840] 我又没有办法按着他们来去调我的东西
[09:14.840 --> 09:19.480] 我怎么保证说我认为说我可附用的东西一定会被附用
[09:19.480 --> 09:22.600] 这个时候其实也是另外一个极端的烦恼
[09:22.600 --> 09:25.880] 我的想法来说的话就是说
[09:25.880 --> 09:28.439] 我们也不能够依赖于人来解决这个问题
[09:28.439 --> 09:29.720] 如果你依赖于人来解决问题
[09:29.720 --> 09:30.760] 人就会犯错的
[09:30.760 --> 09:33.720] 所以你要把这个东西变成一个自动化的检查
[09:33.720 --> 09:39.560] 比如说如果你要求说你的所有的RPC调用
[09:39.560 --> 09:41.160] 都得听过你的RPC库
[09:41.160 --> 09:44.359] 不能够直接用操作系统或者说编程语言
[09:44.359 --> 09:47.000] 提供的HTTP接口来去调用的话
[09:47.000 --> 09:50.439] 那我们完全可以把这个东西写成一个架构约束的测试
[09:50.439 --> 09:50.920] 对吧
[09:50.920 --> 09:52.199] 我们扫一下所有代码
[09:52.199 --> 09:53.880] 所有代码HTTP的地方
[09:53.880 --> 09:56.359] 是不是只在你这个RPC组件库里面出现
[09:56.359 --> 09:57.880] 别的地方都没有出现过
[09:57.880 --> 10:00.280] 那我们就能够知道说
[10:00.280 --> 10:04.040] 是不是有地方违背了你一开始论为的这样一个架构约束
[10:05.160 --> 10:07.959] 那这个其实都是可以落地可以实操的东西
[10:07.959 --> 10:08.280] 对吧
[10:08.280 --> 10:10.680] 就是你很多你的封装库
[10:10.680 --> 10:16.120] 实际上都是对底层的库的一个再次的实现
[10:16.120 --> 10:19.240] 那当你有一个再次实现之后
[10:19.240 --> 10:21.720] 就比如说你有一个for循环了之后
[10:21.720 --> 10:23.959] 大家就不应该再用goto了
[10:23.959 --> 10:25.720] 应该所有地方都有你的for循环
[10:25.720 --> 10:29.400] 那这个东西就应该是一个被强制的东西
[10:29.400 --> 10:32.760] 而不是应该let it depends让大家自己去误会
[10:32.760 --> 10:33.800] 误会的东西
[10:33.800 --> 10:35.160] 学习了
[10:35.160 --> 10:39.079] 对我刚才陶文提到的这两个点
[10:39.079 --> 10:43.800] 我会觉得就是一个
[10:43.800 --> 10:46.360] 突然有人把它做一个知识性总结
[10:46.360 --> 10:51.800] 会觉得我会觉得其实对听众应该也会有一个比较大的帮助
[10:51.800 --> 10:53.640] 就特别是第一个点
[10:53.640 --> 10:57.000] 对就是他听起来就是
[10:57.000 --> 11:00.439] 因为我们做一些工程设计的时候会面临很多情况
[11:00.439 --> 11:04.120] 对所以说很难有原则是告诉你怎么设计
[11:04.120 --> 11:07.080] 但是比如说我刚才提到那个必要参数占比
[11:07.080 --> 11:09.880] 就是一个很好的评估
[11:09.880 --> 11:13.880] 你这个设计做的怎么样的一个指标
[11:13.880 --> 11:17.880] 对能够帮助我们来做一个评估和改善
[11:17.880 --> 11:22.280] 对其实我觉得这个根本上来说是帮助code reviewer
[11:22.280 --> 11:24.280] 就是你总会有一两个人
[11:24.280 --> 11:27.000] 然后他希望说我用code reviewer去把关
[11:27.000 --> 11:30.440] 然后去维持一个很好的一个代码质量
[11:30.440 --> 11:33.400] 然后你就会发现这个code reviewer的人会非常的累
[11:33.400 --> 11:35.400] 然后他也看不过来
[11:35.400 --> 11:37.240] 所以我提出这些东西来说的话
[11:37.240 --> 11:40.280] 这些safety measures不是给普通工程师的
[11:40.280 --> 11:43.240] 其实你可以把一个团队里面认为说你有两帮人
[11:43.240 --> 11:45.959] 一帮人是负责code reviewer的
[11:45.959 --> 11:47.880] 他可能是有追求的
[11:47.880 --> 11:52.439] 然后他们可能是他的职责是防止其他剩下的人犯错的
[11:52.439 --> 11:54.600] 那我们其实要给一些safety measures
[11:54.600 --> 11:56.280] 就是给这些code reviewer
[11:56.280 --> 11:59.240] 那他们能够产生更大的impact
[11:59.240 --> 12:01.480] 也就是说他们不应该仅仅靠
[12:01.480 --> 12:04.840] 这个重体力的code reviewer来去维持这个代码质量
[12:04.840 --> 12:07.560] 而是应该更多的把他们的工作
[12:07.560 --> 12:11.000] 交给这个计算机来自动的去强制实现
[12:11.000 --> 12:13.560] 或者说用一些augmented的方式
[12:13.560 --> 12:17.080] 就是使得他能够更加四两拨千斤的方式
[12:17.080 --> 12:19.560] 去完成他们的code reviewer的工作
[12:19.560 --> 12:21.880] 就我相比前面两种极端
[12:21.880 --> 12:24.520] 就一个是说你帮他们把所有事情都给干了
[12:24.520 --> 12:26.840] 或者说你给他一些模棱两可的guideline
[12:26.840 --> 12:28.600] 我感觉这是第三种方式
[12:28.600 --> 12:34.040] 就是给code reviewer这个事情本身让他更scalable这种方式
[12:34.040 --> 12:37.560] 我觉得是更加有可能落地和实现的
[12:37.560 --> 12:41.720] 健康状态也好或者架构状态的一种measure的话
[12:41.720 --> 12:43.960] 那这个事情如果是可衡量的
[12:43.960 --> 12:47.800] 那它是不是未来也许我们有办法可以做到自动化
[12:47.800 --> 12:49.560] 就比如说我集成到CI里面
[12:49.560 --> 12:53.240] 我自动对你的merge request做一个评估
[12:53.240 --> 12:58.200] 我们不说它是一个直接的这种评价
[12:58.200 --> 12:59.480] 或者是判断好坏
[12:59.480 --> 13:02.840] 但是它是不是可以做到自动化的评估呢
[13:02.840 --> 13:06.920] 其实CI都有一些门槛对吧
[13:06.920 --> 13:08.680] 你要过一些门槛才能过
[13:08.680 --> 13:11.160] 所以有一些你的variant
[13:11.160 --> 13:12.600] 有一些这个rule
[13:12.600 --> 13:15.640] 那你是可以把它变成CI的测试的一部分的
[13:15.640 --> 13:20.440] 比如说我要求说我在我的具体的业务代码里面
[13:20.440 --> 13:22.280] 不应该有CSS
[13:22.280 --> 13:25.400] 那我就可以把它变成一个no CSS check
[13:25.400 --> 13:27.880] 在这个代码里面就不允许写CSS
[13:27.880 --> 13:31.080] 对我可能会想问的问题
[13:31.080 --> 13:32.840] 我不知道能不能实现说
[13:32.840 --> 13:36.520] 比如说刚才我们提到那个必要参数占比对吧
[13:36.520 --> 13:40.439] 然后听起来可能是有点难
[13:40.439 --> 13:45.160] 因为可能对必要的定义在各个业务里也不太一样
[13:45.160 --> 13:48.760] 必要的定义的话是可以量化的
[13:48.760 --> 13:52.680] 你可以把一个参数的所有的core site
[13:52.680 --> 13:54.120] 就是所有掉落的地方都找到
[13:54.120 --> 13:56.840] 然后知道说这个掉落的地方有没有传这个参数
[13:56.840 --> 13:59.720] 对吧然后你通过静态分析是能够直接精确算出来
[13:59.720 --> 14:01.480] 它必要参数占比的指标的
[14:01.480 --> 14:06.680] 那比如说有一个就是我想到一种情况
[14:06.680 --> 14:12.600] 就是比如说就是原本这个函数它没有实现这个功能
[14:12.600 --> 14:15.400] 然后现在呢我就强行揉进来了
[14:15.400 --> 14:16.680] 多接受了一个参数
[14:16.680 --> 14:20.680] 然后在里面也用到这个会被算成必要的还是非必要的
[14:20.680 --> 14:24.040] 非必要的因为比如说假如这个函数
[14:24.040 --> 14:25.480] 它已经有5个地方掉落它了
[14:25.480 --> 14:26.680] 它都没传这个参数对吧
[14:26.680 --> 14:29.239] 你现在有第6个地方要传这个参数
[14:29.239 --> 14:32.839] 那它这个参数的占比它可能就是1 1⁶对吧
[14:32.839 --> 14:37.959] 那你就很容易就抓到这样一个新引路的一个非必要的参数
[14:37.959 --> 14:42.760] 就相当于是查这个函数的调用房
[14:42.760 --> 14:45.000] 而不是去看函数的内部实现
[14:45.000 --> 14:47.959] 就相当于直接就可以做一个分析
[14:47.959 --> 14:50.839] 这样的话你就可以让code reviewer
[14:50.839 --> 14:53.959] 就重点关注这些新的参数的引路对吧
[14:53.960 --> 14:57.800] 他就可以去重点去关注一些这种现有的这种
[14:57.800 --> 15:00.120] 代码里面有一些bad smell的地方
[15:00.120 --> 15:02.600] 之前大家会提过有些smell
[15:02.600 --> 15:04.840] 这些东西是可量化的一些smell
[15:04.840 --> 15:08.840] 应该业界尤其在Java搞Java系的
[15:08.840 --> 15:11.240] 他们对这些好像是追求还蛮多的
[15:11.240 --> 15:14.440] 然后例如说ArcUnit它本身的发生
[15:14.440 --> 15:17.080] 它的ArcUnit我们写UnitTest
[15:17.080 --> 15:22.760] ArcUnit的含义就是UnitTest for Architecture
[15:22.760 --> 15:26.280] 应该是它例如说这个里面
[15:26.280 --> 15:27.560] 它例如类似的这种东西
[15:27.560 --> 15:30.120] 它已经定义过一些所谓的metrics
[15:30.120 --> 15:34.120] 那这些metrics之前也有很多人提过
[15:34.120 --> 15:37.400] 例如说Multi-Ball
[15:37.400 --> 15:39.240] 它很多人提过各种各样的指标
[15:39.240 --> 15:41.480] 那已经出现过类似的这样的东西了
[15:41.480 --> 15:42.840] 就是它从工程技术上
[15:42.840 --> 15:47.240] 那Towin这里是提供了一些新的指标
[15:47.240 --> 15:50.040] 这些指标肯定是能通过自动化的方式来实现的
[15:50.040 --> 15:51.560] 我是这个没有保持
[15:51.560 --> 15:54.359] 我是对这个事还蛮有信心的
[15:54.359 --> 15:57.560] 因为之前已经提过很多次这样的事项从历史上
[15:57.560 --> 16:01.479] 对它主要的难点在于说它要一开始就是加进去
[16:01.479 --> 16:05.560] 因为你从后期加进去的话就没有什么太大意义了
[16:05.560 --> 16:07.880] 它就是所有的预防措施的尴尬地方
[16:07.880 --> 16:11.800] 就是说它没有办法让你一个生锈的铁变成一个光洁
[16:11.800 --> 16:13.160] 没有锈实的铁
[16:13.160 --> 16:15.000] 它没办法逆这个过程
[16:15.000 --> 16:17.959] 因为我不会加网
[16:17.959 --> 16:19.319] 我只会基本的语法
[16:19.319 --> 16:21.000] 对我也没有听过ArcUnit
[16:21.000 --> 16:23.320] 但是刚才Towin提到的那个我觉得
[16:23.320 --> 16:28.200] 我脑海第一反应就是这下可以防止说
[16:28.200 --> 16:31.240] 当我们有新的需求要改动的时候
[16:31.240 --> 16:34.040] 不会有人把原来的某个函数
[16:34.040 --> 16:36.920] 我就给它扩展一个参数
[16:36.920 --> 16:38.680] 然后在新的场景简单用一下
[16:38.680 --> 16:40.360] 对
[16:40.360 --> 16:41.960] 对因为其实这样的话
[16:41.960 --> 16:45.800] 它是在破坏整个的这个必要参数占比的
[16:45.800 --> 16:51.240] 对是的你是可以防御的到
[16:51.240 --> 16:54.760] 对因为之前就可能会遇到那种
[16:54.760 --> 16:57.479] 不知道是什么因素吧
[16:57.479 --> 16:59.640] 可能有主观因素也会有客观因素
[16:59.640 --> 17:02.199] 但会导致某个工程师他改动特别随意
[17:02.199 --> 17:07.079] 就是总之我找个地儿能把它改成业务想要的样子就ok了
[17:07.079 --> 17:09.319] 对需求总是能实现的
[17:09.319 --> 17:10.440] 只要参数加足够多
[17:10.440 --> 17:13.639] 对而且对CodeReview的人来说
[17:13.640 --> 17:16.040] 他有可能他看不到完整的调用链信息
[17:16.040 --> 17:18.120] 他只能看到他这一小块Changes
[17:18.120 --> 17:22.280] 他如果不是特别熟或者是印象不是特别深
[17:22.280 --> 17:24.360] 他也有可能意识不到说
[17:24.360 --> 17:29.000] 我这一个小Changes我到底是对整个系统的影响是什么
[17:29.000 --> 17:31.080] 对我可能只能评估你的实现
[17:31.080 --> 17:34.920] 对是这就是要计算机辅助人工决策
[17:34.920 --> 17:37.560] 我们不能够替人做出好的决定
[17:37.560 --> 17:40.280] 但是我们可以让CodeReview让它更有效率
[17:40.280 --> 17:43.080] 我们提供工具让CodeReview这个事情更scalable
[17:43.080 --> 17:45.000] 而且其实还有一个问题就是说
[17:45.000 --> 17:48.040] 你是可以提出很多理想化的指标
[17:48.040 --> 17:50.360] 对吧这个指标的标准非常高
[17:50.360 --> 17:51.879] 他要怎么样要怎么样怎么样
[17:51.879 --> 17:54.520] 但是他可能实际上就是呈现做不到
[17:54.520 --> 17:57.240] 因为他比如说我们可以要求个指标说
[17:57.240 --> 18:03.320] 我每两个业务模块之间没有直接的依赖
[18:03.320 --> 18:04.919] 对吧他不产生任何直接的依赖
[18:04.919 --> 18:09.080] 他应该就是自己一个独立的一个模块
[18:09.080 --> 18:14.840] 他的这个就不会产生这种各种各样偶合的情况
[18:14.840 --> 18:18.760] 然后你的可能在这个接口变更的情况下
[18:18.760 --> 18:20.040] 也是会好一些
[18:20.040 --> 18:23.960] 就可能更加不可能会去影响到别人
[18:23.960 --> 18:26.360] 但问题就是这个呈现做不到
[18:26.360 --> 18:27.879] 因为需求不是这样的
[18:27.879 --> 18:30.679] 因为产品经理要求说
[18:30.679 --> 18:33.000] 这个界面上要同时展示A和B和C
[18:33.000 --> 18:34.919] 而且不光是同时展示A和B和C
[18:34.919 --> 18:37.159] 还要判断一下A和B和C哪个更大
[18:37.159 --> 18:38.360] 然后展示哪个
[18:38.360 --> 18:40.919] 你告诉我说A和B和C没有依赖关系
[18:40.919 --> 18:43.000] 我怎么能实现我的业务了
[18:43.000 --> 18:44.360] 这就是一个矛盾的地方
[18:44.360 --> 18:46.760] 就大家经常会去讲一些所谓的
[18:46.760 --> 18:49.000] Disposable software的概念
[18:49.000 --> 18:51.000] 说你所有东西都应该是Disposable的
[18:51.000 --> 18:52.360] 都应该是独立的
[18:52.360 --> 18:55.639] 但这个理想化的东西它根本落地不了
[18:55.639 --> 18:57.399] 因为你实际上拿的需求
[18:57.399 --> 18:59.000] 它既不是given-driven的
[18:59.000 --> 19:00.679] 又不是isolated的
[19:00.679 --> 19:01.719] 他什么东西
[19:01.719 --> 19:04.840] 产品经理把所有东西都规划成为一个同步的调用
[19:04.840 --> 19:06.600] 什么东西都是偶合在一起的
[19:06.600 --> 19:08.280] 因为它从用户体验出发来讲
[19:08.280 --> 19:09.560] 它确实这样是最合理的
[19:10.840 --> 19:15.240] 这就是之前很多人去谈一些理想化架构的问题
[19:15.240 --> 19:17.240] 就是他只谈这个理想
[19:17.240 --> 19:20.120] 但他并不给你一条途径说达成这个理想
[19:20.120 --> 19:24.600] 他给你一个最好的一个理想国的一个愿景
[19:24.600 --> 19:26.600] 但他并没有办法落地
[19:28.840 --> 19:34.360] 所以听起来就是这种第三种途径也许是
[19:34.360 --> 19:38.360] 能够规避这个问题
[19:38.360 --> 19:41.560] 因为我直接给到你guideline
[19:41.560 --> 19:42.679] 你是很难落地的
[19:42.679 --> 19:44.679] 如果你只是
[19:44.679 --> 19:46.919] 如果这个safety measure
[19:46.919 --> 19:49.399] 它仅仅只是一堆metrics
[19:49.399 --> 19:51.240] 就像autonomy metrics
[19:51.240 --> 19:52.120] consistent metrics
[19:52.120 --> 19:53.000] fitment metrics
[19:53.000 --> 19:56.520] 只是一堆量化的数值的时候
[19:56.520 --> 19:57.879] 虽然有一些作用
[19:57.879 --> 19:59.639] 但我仍然认为它是用处不大的
[19:59.639 --> 20:02.520] 因为你看到一个metrics不好
[20:02.520 --> 20:04.520] 比如说必要参数准宇不好的时候
[20:04.520 --> 20:08.920] 你并没有办法提出一种更好的解决方案
[20:08.920 --> 20:10.440] 对吧
[20:10.440 --> 20:12.200] 这也是一个问题
[20:12.200 --> 20:15.080] 所以还要结合另外一件事情就是
[20:15.080 --> 20:18.600] 你要能够给出一些例子
[20:18.600 --> 20:21.480] 能够给出一些真实情况下比较恶心的例子
[20:21.480 --> 20:23.800] 如何在这些例子的情况下
[20:23.800 --> 20:25.400] 在这些需求例子的情况下
[20:25.400 --> 20:28.120] 还能够维持你所谓的高标准
[20:28.120 --> 20:33.000] 比如说你能够让两个业务
[20:33.000 --> 20:34.520] 写成两个插件对吧
[20:34.520 --> 20:37.560] 然后它们之间没有直接的依赖关系
[20:37.560 --> 20:39.159] 所有东西都是插在主板上的
[20:39.159 --> 20:41.719] 你要达成的目标
[20:41.719 --> 20:44.600] 你可能是为了实现所谓的
[20:44.600 --> 20:49.399] 接口变更次数尽可能的少
[20:49.399 --> 20:50.679] 大部分人都在改实线
[20:50.679 --> 20:51.639] 而不是在改接口
[20:51.639 --> 20:54.360] 你可能是为了满足这样一个指标的要求
[20:54.360 --> 20:55.800] 但你这个指标
[20:55.800 --> 20:57.479] 如果没有给它例子的话
[20:57.480 --> 20:58.600] 大家是非常懵逼的
[20:58.600 --> 21:01.000] 因为不知道在实际的需求的情况下
[21:01.000 --> 21:03.080] 如何能够应用得上
[21:03.080 --> 21:07.080] 所以这个业务逻辑拆封模式里面
[21:07.080 --> 21:09.640] 包括主板那一块
[21:09.640 --> 21:11.560] 包括class信息隐藏那一块
[21:11.560 --> 21:13.880] 都是一些更清晰的例子
[21:13.880 --> 21:18.440] 来帮助大家来提升这个指标的是吗
[21:18.440 --> 21:19.880] 或者说怎么让这个指标
[21:19.880 --> 21:21.400] 更适配现实的场景
[21:21.400 --> 21:22.120] 对
[21:22.120 --> 21:25.160] 其实很多这个指标
[21:25.160 --> 21:26.120] 大家都认为是对的
[21:26.120 --> 21:28.360] 大家一直也追求说
[21:28.360 --> 21:29.639] 要往这个方向去努力
[21:29.639 --> 21:31.719] 比如说尽可能少的依赖关系
[21:31.719 --> 21:33.639] 尽可能不要让所有的东西
[21:33.639 --> 21:34.760] 在依赖所有东西
[21:34.760 --> 21:37.639] 但实际的问题
[21:37.639 --> 21:40.199] 其实就是卡在大家做不了需求上面
[21:40.199 --> 21:41.479] 我就发现是这一点
[21:41.479 --> 21:43.719] 就是你很多产品经理的需求拿过来
[21:43.719 --> 21:46.600] 发现没有办法在这种理想化的架构下实现
[21:46.600 --> 21:48.919] 那就是所有人都在依赖所有人
[21:48.919 --> 21:50.120] 一个RPC调用
[21:50.120 --> 21:51.719] 就是一个接口
[21:51.719 --> 21:52.520] 一个页面
[21:52.520 --> 21:53.879] 一两百个RPC调用
[21:53.879 --> 21:54.600] 那就是合理的
[21:54.600 --> 21:56.919] 因为只有在这种方式下才能够实现需求
[21:56.919 --> 22:02.280] 就我去DD的时候
[22:02.280 --> 22:06.120] 当时就是说要去做重构
[22:06.120 --> 22:12.280] 然后我们也去了解过一些国外的一些成功的案例
[22:12.280 --> 22:13.320] 比如他们会去讲
[22:13.320 --> 22:17.159] 你的系统要更多的用卡复卡解偶
[22:17.159 --> 22:17.639] 对吧
[22:17.639 --> 22:19.800] 然后有更多的event driven
[22:19.800 --> 22:22.199] 然后这个时候我就经常会被
[22:22.199 --> 22:24.280] 这个一线的一偶工程师
[22:24.280 --> 22:25.560] 来去劝人去说
[22:25.560 --> 22:27.160] 你看这样一个需求
[22:27.160 --> 22:29.399] 你来跟我用卡复卡解偶一下
[22:29.399 --> 22:30.680] 对吧
[22:30.680 --> 22:32.280] 那真的成千做不到
[22:32.280 --> 22:34.520] 那个就是实现不出来
[22:34.520 --> 22:39.000] 你就发现说你不是说能够在用书上的一些经典的案例
[22:39.000 --> 22:40.920] 一套就能够解决问题的
[22:40.920 --> 22:43.240] 因为你发现是做不出来
[22:43.240 --> 22:47.320] 然后你就要去思考说在这种实际的这个业务需求情况下
[22:47.320 --> 22:51.160] 怎么能够把东西给拆出来拆明白
[22:51.160 --> 22:55.000] 对书上的东西很多书上的东西实在是
[22:55.000 --> 22:56.920] 就是真的是太理想化了
[22:56.920 --> 22:59.480] 我说我根据我的业务能抽象出来
[22:59.480 --> 23:01.640] ABCDEF这几个独立的模块
[23:01.640 --> 23:02.920] 他们不互相影响
[23:02.920 --> 23:04.600] 然后这个架构就是好的
[23:04.600 --> 23:07.480] 原先A依赖B是个直接的依赖
[23:07.480 --> 23:12.280] 那现在我拆成了中间用一个消息堆垒就解决了依赖
[23:12.280 --> 23:14.840] 那他真的就解决了依赖
[23:14.840 --> 23:16.600] 那这个只是我觉得
[23:16.600 --> 23:21.719] 提到这些他只是我们遇到的业务场景里很小的一部分例子
[23:21.719 --> 23:23.719] 或者是很多公司的业务场景并不是这样
[23:23.719 --> 23:26.840] 他只能解决很小很小的一部分问题
[23:26.840 --> 23:33.800] 那所以当时我第一次看陶文的那个写的
[23:33.800 --> 23:35.879] 业务逻辑产品模式的时候
[23:35.879 --> 23:38.600] 我其实是第一次在我眼里
[23:38.600 --> 23:41.800] 在我眼里确实是第一次看到了是说
[23:41.800 --> 23:45.480] 我们不是在探讨理想化的
[23:45.480 --> 23:47.800] 根据我们畅想的有哪些业务场景
[23:47.800 --> 23:49.000] 我们能有理想化的方案
[23:49.000 --> 23:49.960] 其实不是这样的
[23:49.960 --> 23:52.760] 陶文写的那个业务逻辑产品模式
[23:52.760 --> 23:56.360] 是真的给你举出来一些复杂的业务场景
[23:56.360 --> 23:57.240] 而且这些
[23:57.240 --> 24:00.120] 而且各种从简单到复杂的业务场景
[24:00.120 --> 24:05.160] 那他能用我文章里
[24:05.160 --> 24:09.480] 那本小书里所写到的那些方案或者方法
[24:09.480 --> 24:11.080] 或者metrics来衡量
[24:11.080 --> 24:12.360] 来指导设计的
[24:12.360 --> 24:13.560] 那我说实话
[24:13.560 --> 24:15.080] 那是我第一次看到这样的
[24:15.080 --> 24:17.000] 以前也看过很多
[24:17.000 --> 24:19.720] 很多很多所谓的架构经典书籍
[24:19.720 --> 24:21.159] 什么clean architecture
[24:21.159 --> 24:22.360] DDD
[24:22.360 --> 24:24.679] 还有the philosophy of software design
[24:24.679 --> 24:26.439] 还包含最近刚出来的
[24:26.439 --> 24:29.320] 什么the fundamentals of software architecture
[24:29.320 --> 24:31.240] 这些都是最近出的一些
[24:31.240 --> 24:36.199] 最近几年出的一些所谓的比较好的书
[24:36.199 --> 24:37.800] 我不是说他们不好
[24:37.800 --> 24:41.800] 但是他们不落地
[24:41.800 --> 24:47.240] 对感觉是应该配合着看是吗
[24:47.240 --> 24:48.919] 他在我眼里
[24:48.919 --> 24:50.040] 例如对于我来说
[24:50.040 --> 24:53.080] 现在看电视他只是让我
[24:53.080 --> 24:56.600] 知道了一些所谓的pattern
[24:56.600 --> 24:57.879] 一些pattern
[24:57.879 --> 25:00.280] 或者给我提了个词叫it depends
[25:00.280 --> 25:01.080] trade off
[25:01.080 --> 25:04.120] 但是这些在我真实的设计一个东西的时候
[25:04.120 --> 25:07.320] 他对我的指导意义相对来说
[25:07.320 --> 25:09.480] 相对于陶文写的那个业务逻辑
[25:09.480 --> 25:13.640] 差分模式的话要小很多
[25:13.640 --> 25:18.040] 然后这个是因为这个问题就像刚才说的
[25:18.040 --> 25:19.800] 他也是一直在苦恼我的
[25:19.800 --> 25:24.360] 我一直在问自己的什么是好的
[25:24.360 --> 25:25.640] 好的设计
[25:25.640 --> 25:27.720] 这个设计怎么证明它是好的
[25:27.720 --> 25:31.400] 你的设计系统逐渐要腐化了
[25:31.400 --> 25:33.080] 你怎么知道它要腐化了
[25:33.080 --> 25:35.640] 它腐化的时候你可以通过什么方式
[25:35.640 --> 25:37.160] 来让它腐化的变慢
[25:37.160 --> 25:39.000] 可以制止这个趋势
[25:39.000 --> 25:43.480] 这些问题是一直我在脑子里问自己的
[25:43.480 --> 25:46.680] 然后再提一点就是说
[25:46.680 --> 25:48.440] 陶文写的业务逻辑差分模式
[25:48.440 --> 25:49.960] 他写的很精简
[25:49.960 --> 25:52.200] 但是我很明确的说的就是
[25:52.200 --> 25:54.840] 如果有同学感兴趣看的话
[25:54.840 --> 25:56.520] 我很直白的说就是
[25:56.520 --> 26:00.360] 我自己当时读那份资料的时候
[26:00.360 --> 26:02.920] 我自己先看了一遍
[26:02.920 --> 26:04.760] 看了一遍有个模模糊糊的概念
[26:04.760 --> 26:06.440] 然后又看第二遍
[26:06.440 --> 26:08.040] 又有理解的深一点
[26:08.040 --> 26:09.480] 然后看第三遍的时候
[26:09.480 --> 26:12.040] 我还是像陶文问了不下
[26:12.040 --> 26:15.560] 我觉得有不下三四十个问题吧
[26:15.560 --> 26:17.399] 然后又看相关的资料
[26:17.399 --> 26:21.159] 我才get到了一些可能所说的
[26:21.159 --> 26:23.320] 所说的incidence
[26:23.320 --> 26:29.159] 然后后来陶文又过来我所在的公司做分享
[26:29.159 --> 26:33.960] 但是我每一次在聊的时候
[26:33.960 --> 26:36.280] 或者在看里面东西的时候
[26:36.280 --> 26:37.639] 我会有一些新的sense
[26:37.640 --> 26:40.040] 而且每一次它不是隔的时间特别长
[26:40.040 --> 26:41.960] 它可能就隔了一两个月
[26:41.960 --> 26:43.640] 我都会感受到一些新的点
[26:43.640 --> 26:45.640] 我是我以前没get到的
[26:45.640 --> 26:48.360] 我觉得它的蕴含东西比较多
[26:48.360 --> 26:49.800] 要看起来也比较困难
[26:49.800 --> 26:51.160] 这只是我的感受
[26:51.160 --> 26:53.320] 我觉得回归到一点就是说
[26:53.320 --> 26:54.360] 刚才也提到了
[26:54.360 --> 26:56.760] 就是说一个人一个有经验的人
[26:56.760 --> 26:58.440] 想把他的经验和知识
[26:58.440 --> 27:00.040] 来总结出来传递出来的时候
[27:00.040 --> 27:02.440] 因为大家的背景差别太大了
[27:02.440 --> 27:04.200] 经验水平也差距太大了
[27:04.200 --> 27:06.200] 你想完全理解里面的东西
[27:06.200 --> 27:08.440] 或者想get到里面的主要信息
[27:08.440 --> 27:09.720] 其实都是个很大的挑战
[27:09.720 --> 27:11.560] 这个信息传递
[27:11.560 --> 27:13.880] 其实是一个特别特别难的事情
[27:13.880 --> 27:15.400] 如果扯淡一句话
[27:15.400 --> 27:18.040] 我觉得我可以联想到这里
[27:18.040 --> 27:19.800] 其实就是写的不好
[27:19.800 --> 27:21.720] 就是目前现状来说的话
[27:21.720 --> 27:24.520] 它可能最多只是一个提纲性的东西
[27:24.520 --> 27:28.440] 我想把那个名字从业务逻辑拆分模式
[27:28.440 --> 27:31.720] 改成代码防腐使用技术
[27:31.720 --> 27:36.360] 然后我希望能够写出一个sample出来
[27:36.360 --> 27:38.280] 就是写出一个样例的代码
[27:38.280 --> 27:39.640] 因为很多人都会说
[27:39.640 --> 27:41.640] talkstrip show me the code
[27:41.640 --> 27:46.360] 那我应该能够提供一份更精简的一份实现代码
[27:46.360 --> 27:49.560] 然后去对比说你用A方法来实现
[27:49.560 --> 27:51.160] 和B方法来实现
[27:51.160 --> 27:54.120] 在同样的这个需求变化情况下
[27:54.120 --> 27:55.720] 它的差异是什么
[27:55.720 --> 27:58.280] 我觉得如果有一份sample的话
[27:58.280 --> 28:01.240] 然后再把这个文字重新再组织一下
[28:01.240 --> 28:02.840] 就会更好理解一些
[28:02.840 --> 28:04.760] 因为很多写的时候
[28:04.760 --> 28:06.680] 它的隐藏知识是在我脑子里面的
[28:06.680 --> 28:10.200] 因为我们现在这家公司实际上就是用
[28:10.200 --> 28:14.520] 代码防腐使用技术去实践去这么做的
[28:14.520 --> 28:18.520] 因为很多这个东西是因为我们实际完成了这些需求之后
[28:18.520 --> 28:21.240] 然后才知道说可以这么去解对吧
[28:21.240 --> 28:26.840] 但是如果你没有跟着我们一起去做过一遍这样的需求
[28:26.840 --> 28:28.520] 没有看到这份实现代码
[28:28.520 --> 28:31.720] 你是很难从这个经验的文字里面知道
[28:31.720 --> 28:33.480] 说我们到底怎么解决这个问题的
[28:33.480 --> 28:38.760] 所以我也在搞这么样一个sample的事情
[28:38.760 --> 28:43.400] 对说到这里如果有听众感兴趣的话
[28:43.400 --> 28:46.600] 我们还是可以去访问
[28:46.600 --> 28:49.720] 陶文的这个Tell Filers
[28:49.720 --> 28:55.720] 以及现在的这个叫做业务逻辑参观模式
[28:55.720 --> 29:00.680] 对未来会改成代码防腐使用指南的这个网站
[29:00.680 --> 29:04.680] 我们也会附在我们的这个文章的后面的链接
[29:04.680 --> 29:06.440] 到时候大家可以去关注
[29:06.440 --> 29:10.040] 关于这个业务逻辑查分模式这个事情
[29:10.040 --> 29:11.880] 刚才刚翔有提到说
[29:11.880 --> 29:15.400] 可能对新同学来说他可能看起来比较吃力
[29:15.400 --> 29:20.600] 对然后那我们有什么建议可以帮助他
[29:20.600 --> 29:21.880] 不那么吃力吗
[29:21.880 --> 29:24.440] 对还是说这个确实是需要一定经验
[29:24.440 --> 29:27.160] 我感觉来说的话其实感觉这个东西
[29:27.160 --> 29:31.880] 他写给来说更多是写给吃过亏的人看的
[29:31.880 --> 29:34.680] 就是如果你没有犯过那些错误的话
[29:34.680 --> 29:37.000] 你是很难有感觉的
[29:37.000 --> 29:39.880] 所以我并不指望说
[29:39.880 --> 29:41.720] 比如你一个团队里面10个人
[29:41.720 --> 29:43.960] 10个人读完了之后都有同样的收获
[29:43.960 --> 29:47.800] 但其实更多的是给你10个人团队里面
[29:47.800 --> 29:50.600] 做代码把关的那么一两个人看的
[29:50.600 --> 29:55.480] 然后他能够从中得出一些代码防腐的实用技术
[29:55.480 --> 29:58.040] 比如说有一些安全性的措施
[29:58.040 --> 29:59.800] 他能够一开始就可以实现进去
[29:59.800 --> 30:01.000] 或者到下一个项目
[30:01.000 --> 30:02.760] 从一开始就把它内置进去
[30:02.760 --> 30:06.520] 我觉得这个是一个更加可能实现的一个路径
[30:06.520 --> 30:09.320] 因为传统的软件工程教育
[30:09.320 --> 30:11.320] 什么设计原则教育的问题就是
[30:11.320 --> 30:13.800] 它依赖于所有人都达成共识
[30:13.800 --> 30:16.199] 所有人都保持同样的一个高标准
[30:16.199 --> 30:19.399] 但你要让一个新入行一两年的人
[30:19.400 --> 30:20.760] 没有吃过什么亏的人
[30:20.760 --> 30:23.560] 去听明白什么叫single responsibility principle
[30:23.560 --> 30:24.760] 那是不可能的
[30:24.760 --> 30:27.240] 因为即便你讲得再好
[30:27.240 --> 30:29.480] 他也可能没有耐心去读你的东西
[30:29.480 --> 30:32.600] 我觉得这种指望百分之百教育
[30:32.600 --> 30:34.440] 能来达到你想要的效果
[30:34.440 --> 30:36.440] 这种路径是一个徒劳的事情
[30:36.440 --> 30:39.560] 我觉得这一点我十分同意
[30:39.560 --> 30:43.080] 我下来说的话要剪掉啊小兵
[30:43.080 --> 30:45.320] 说一下
[30:45.320 --> 30:46.440] 对对对
[30:46.440 --> 30:47.560] 因为
[30:47.560 --> 30:50.520] 那关于
[30:50.520 --> 30:52.679] 刚才其实我们聊完了
[30:52.679 --> 30:53.960] Tell File See
[30:53.960 --> 30:56.520] 对也聊完了
[30:56.520 --> 30:59.480] 代码防腐使用技术指南
[30:59.480 --> 31:01.879] 对那对于比如说
[31:01.879 --> 31:05.480] 更具体的
[31:05.480 --> 31:09.080] 我们想去推动一个架构的落地
[31:09.080 --> 31:11.240] 对这里面可能会涉及很多问题
[31:11.240 --> 31:12.919] 包括说
[31:12.919 --> 31:15.240] 我们怎么去评估
[31:15.240 --> 31:17.480] 对然后怎么去
[31:17.480 --> 31:19.720] 和老板或者同事沟通
[31:19.720 --> 31:21.640] 以及最后怎么去推动落地
[31:21.640 --> 31:25.160] 这个刚才和陶文会有什么经验吗
[31:25.160 --> 31:26.440] 刚才你先来
[31:26.440 --> 31:29.800] 好那我就先说我的粗浅的一点点经验
[31:29.800 --> 31:32.360] 然后
[31:32.360 --> 31:34.520] 其实我认为
[31:34.520 --> 31:37.000] 第一是我像上次参加的时候
[31:37.000 --> 31:38.920] 我说过一句我不认为自己是架构师
[31:38.920 --> 31:41.720] 因为我认为我自己架构师是有个bar的
[31:41.720 --> 31:44.120] 我觉得我离那个bar还有比较大的差距
[31:44.120 --> 31:45.960] 所以我一直说自己是工程师
[31:45.960 --> 31:48.200] 但是有一些想法你想让大家
[31:48.200 --> 31:50.120] 你一些好的想法想让大家也接受
[31:50.120 --> 31:52.200] 或者是真实的落地
[31:52.200 --> 31:53.240] 上次也简单聊到过
[31:53.240 --> 31:54.600] 我现在的想法还是那样
[31:54.600 --> 31:56.520] 就是说
[31:56.520 --> 32:00.040] 假设你真的是以一个架构师身份入职的一家公司
[32:00.040 --> 32:02.360] 那我认为这是个特别难的工作
[32:02.360 --> 32:06.040] 难的工作的原因第一就是说
[32:06.040 --> 32:09.800] 你没有人
[32:09.800 --> 32:11.800] 你是没有那个打击效的权利
[32:11.800 --> 32:14.840] 或者是别人对你是没有那个收汇报权的
[32:14.840 --> 32:16.840] 别人是不是汇报给你的
[32:16.840 --> 32:20.120] 那你说的观点和建议
[32:20.120 --> 32:22.439] 大家为什么要听
[32:22.439 --> 32:25.720] 就是大家要听你的建议和方案的时候
[32:25.720 --> 32:26.520] 其实有两个途径
[32:26.520 --> 32:29.720] 第一个就是大家汇报给你
[32:29.720 --> 32:31.240] 所以你说的话他们必须得听
[32:31.240 --> 32:32.919] 因为你要给他们打击效
[32:32.919 --> 32:33.879] 或者大部分的人得听
[32:33.879 --> 32:35.080] 无论同意不同意
[32:35.080 --> 32:35.959] 这是第一点
[32:35.959 --> 32:39.879] 第二点就是说你在这个公司里有特别
[32:39.879 --> 32:42.520] 你有特别强的威信
[32:42.520 --> 32:45.400] 或者说你已经证明了自己做过很多事是好的
[32:45.400 --> 32:46.200] 是对的
[32:46.200 --> 32:48.920] 那大家可能会听
[32:48.920 --> 32:50.520] 那第三点
[32:50.520 --> 32:52.760] 那我觉得这两点是很重要的
[32:52.760 --> 32:54.760] 那作为一个架构
[32:54.760 --> 32:56.760] 作为一个架构师的话
[32:56.760 --> 32:58.760] 你脑子里有很多理念
[32:58.760 --> 32:59.960] 有很多方法
[32:59.960 --> 33:01.960] 你想让它来实现的时候
[33:01.960 --> 33:04.440] 那你就抓住这两条
[33:04.440 --> 33:07.000] 我认为就只能这两条路了
[33:07.000 --> 33:09.960] 那第一就是让你就是负责技术线
[33:09.960 --> 33:11.000] 让这些人汇报给你
[33:11.000 --> 33:12.680] 第二点就是说
[33:12.680 --> 33:14.520] OK我在公司里
[33:14.520 --> 33:15.960] 我在现在的公司里
[33:15.960 --> 33:19.160] 我先去解决几个一到两个难题
[33:19.160 --> 33:21.320] 这两个难题证明我是很有能力的
[33:21.320 --> 33:23.560] 所以让他们可能来相信我
[33:23.560 --> 33:27.640] 但是这两个方案听起来都不那么简单
[33:27.640 --> 33:31.240] 那所以呢可能的方案是说
[33:31.240 --> 33:35.240] 如果你坚信自己接下来可能创造方案是对的
[33:35.240 --> 33:38.760] 我觉得架构师一个很重要的软性能力的目标
[33:38.760 --> 33:44.280] 就是说你能说服你的老板就够了
[33:44.280 --> 33:46.120] 说服你的老板
[33:46.120 --> 33:48.840] 就是你首先坚信自己是对的
[33:48.840 --> 33:50.280] 你已经做了充分的调研
[33:50.280 --> 33:51.720] 他的tradeoff各种方面
[33:51.720 --> 33:53.240] 脑子里特别特别清楚
[33:53.240 --> 33:55.160] 有份特别特别清晰的文档
[33:55.160 --> 33:56.920] 然后你想做什么
[33:56.920 --> 33:58.200] 你就去说服你的老板
[33:58.200 --> 34:02.760] 让你的老板把它写在所谓的OK或者KPI里
[34:02.760 --> 34:04.200] 然后就去做就好了
[34:04.200 --> 34:07.000] 因为真正的这些东西实施的时候
[34:07.000 --> 34:10.280] 其实在我眼里是没有什么技术难度的
[34:10.280 --> 34:11.400] 特别难的技术难度的
[34:11.400 --> 34:12.920] 你只需要稍微看看就好了
[34:12.920 --> 34:16.040] 这个起步阶段从零到一的阶段才是最难的
[34:16.040 --> 34:18.600] 那我现在如果说可能有一些方法
[34:18.600 --> 34:20.120] 我认为它是好的的话
[34:20.120 --> 34:22.040] 我想让一个大的团队
[34:22.040 --> 34:24.040] 一个几百人的团队来实施的话
[34:24.040 --> 34:26.520] 我会倾向于自己把它想清楚之后
[34:26.520 --> 34:28.040] 去和自己的老板聊
[34:28.040 --> 34:29.159] 把它聊清楚
[34:29.159 --> 34:30.440] 让自己的老板同意
[34:30.440 --> 34:35.400] 然后把它真的写到我们的KPI或者OK而已
[34:35.400 --> 34:37.320] 所以从另一个角度来说
[34:37.320 --> 34:39.000] 我记得之后有人问过一个问题
[34:39.000 --> 34:41.639] 他说一个架构是应该具备什么样的能力
[34:41.639 --> 34:43.960] 你的代码水平
[34:43.960 --> 34:45.000] 你的架构经验
[34:45.000 --> 34:48.280] 你的像陶文这样的一些总结能力
[34:48.280 --> 34:49.320] 这是特别关键
[34:49.320 --> 34:51.560] 因为这是基础
[34:51.560 --> 34:53.080] 你能有自己的方法和理论
[34:53.080 --> 34:53.800] 而且坚持这个
[34:53.800 --> 34:54.680] 这是基础
[34:54.680 --> 34:58.040] 但是仅仅做到基础是远远不够的
[34:58.040 --> 35:01.240] 你一定要知道可以用什么方式落地
[35:01.240 --> 35:05.080] 可以落地的路径就是你自己
[35:05.080 --> 35:08.600] 怎么去说服了自己的老板
[35:08.600 --> 35:11.000] 让自己的老板去同意这个事情
[35:11.000 --> 35:13.560] 就是这个部门该做的
[35:13.560 --> 35:14.680] 这是我的理解
[35:14.680 --> 35:18.759] 我说的都偏PPT架构师或PPT工程师的思路
[35:18.759 --> 35:20.040] 没有说什么技术的点
[35:20.040 --> 35:24.759] 但是这是我认为的可能一个
[35:24.759 --> 35:27.000] 要在一个所谓一个几百人的
[35:27.000 --> 35:28.920] 一个好几百人的团队里
[35:28.920 --> 35:32.279] 你想实现自己的一些
[35:32.279 --> 35:33.640] 想改进一些东西
[35:33.640 --> 35:35.960] 想实现自己思路的一个方法
[35:35.960 --> 35:36.839] 我谈两点
[35:36.839 --> 35:39.640] 我觉得大家提出个问题的时候
[35:39.640 --> 35:40.520] 它其实是个背景
[35:40.520 --> 35:42.600] 就是说我已经有一个现成的系统了
[35:42.600 --> 35:44.520] 然后我有一些想法
[35:44.520 --> 35:49.560] 我如何能够让它推行下去
[35:49.560 --> 35:50.920] 然后大家会遇到一些阻力
[35:50.920 --> 35:52.600] 然后就想去问这个问题
[35:52.600 --> 35:53.160] 对吧
[35:53.160 --> 35:55.240] 我觉得说这里面有两个问题
[35:55.240 --> 35:58.440] 一个是所谓的架构
[35:58.440 --> 36:02.600] 它就是系统中不易改变的那些部分的集合
[36:02.600 --> 36:03.000] 对吧
[36:03.000 --> 36:05.560] 它就是说一些不容易改变的东西
[36:05.560 --> 36:08.280] 如果你半途插进来一个已有的项目
[36:08.280 --> 36:09.160] 一个系统
[36:09.160 --> 36:11.480] 然后你就很容易落实你的想法了
[36:11.480 --> 36:12.840] 那这个东西还叫架构吗
[36:12.840 --> 36:13.000] 对吧
[36:13.000 --> 36:14.040] 它就是不容易改变
[36:14.040 --> 36:15.640] 所以它才成为架构
[36:15.640 --> 36:17.640] 就是它本来就是不容易实现的
[36:17.640 --> 36:19.960] 就不容易被修改的东西
[36:19.960 --> 36:21.560] 然后其次另外一个问题就是
[36:21.560 --> 36:24.840] 大家总是希望说能够可量化的收益
[36:24.840 --> 36:27.880] 就可量化的收益就是最后能够
[36:27.880 --> 36:29.640] 比如说体现在业务成功也好
[36:29.640 --> 36:31.480] 什么交付速度也好
[36:31.480 --> 36:35.640] 能够体现在这样一些非常直接的结果指标上
[36:35.640 --> 36:37.880] 但这个也是不现实的
[36:37.880 --> 36:41.720] 因为结果指标往往来说的话都是多因素造成的
[36:41.720 --> 36:43.640] 而且它可能周期也比较长
[36:43.640 --> 36:46.360] 比如说你可能有一款药物
[36:46.360 --> 36:48.280] 然后它能够治疗一些疾病
[36:48.280 --> 36:51.800] 然后你非得以北京市人均寿命这个指标
[36:51.800 --> 36:53.640] 来去衡量这个药物的有效性
[36:53.640 --> 36:55.000] 那怎么能做得到呢
[36:55.000 --> 36:55.400] 对吧
[36:55.400 --> 36:57.400] 因为北京市人均寿命这个事情
[36:57.400 --> 36:59.000] 它可能受到很多因素影响
[36:59.000 --> 37:01.880] 它也可能要到十几年之后
[37:01.880 --> 37:05.160] 才能够去验证它是不是好还是坏
[37:05.160 --> 37:07.320] 那这样的一些结果指标
[37:07.320 --> 37:09.560] 它其实是没有办法有任何的指导意义
[37:09.560 --> 37:13.320] 所以我也不再去追求这所谓的可量化的收益
[37:13.320 --> 37:16.920] 这个事情来去直接证明这个东西是好还是坏
[37:16.920 --> 37:22.360] 而是更多的要去追求一些更直接的过程性的指标
[37:22.360 --> 37:25.800] 就比如说一些明确的症状的一些问题
[37:25.800 --> 37:30.280] 所以如果你要去推动一个现有的一个架构
[37:30.280 --> 37:32.520] 往你希望的方向去走的话
[37:32.520 --> 37:35.480] 你应该明确地看到一些大家的痛点
[37:35.480 --> 37:37.080] 然后发起一些复盘
[37:37.080 --> 37:41.320] 这个复盘最好是以这种伴随着某一个大故障的复盘
[37:41.320 --> 37:43.960] 就它可能这些矛盾的积怨
[37:43.960 --> 37:46.920] 最后以某一个P0或者P1事故为爆发
[37:46.920 --> 37:49.960] 然后你最好的方式就是借题发挥
[37:49.960 --> 37:52.680] 然后你以这种为引子
[37:52.680 --> 37:55.720] 把你自己的私货给夹带进去
[37:55.720 --> 37:58.600] 这样更加可能大家对现有的一些痛点
[37:58.600 --> 38:00.680] 进行一些更加深刻的反思
[38:00.680 --> 38:02.200] 往你的方向去扒一摆
[38:02.200 --> 38:04.680] 但你想要去做大的改动的话是不太可能的
[38:04.680 --> 38:05.799] 如果是可能的话
[38:05.799 --> 38:08.759] 我也不会去搞所谓的代码防腐技术
[38:08.759 --> 38:11.399] 那我就直接搞代码除锈技术就好了
[38:11.399 --> 38:13.640] 那样更直接更加有效
[38:13.640 --> 38:15.480] 更加能够有更广泛的受众
[38:15.480 --> 38:17.080] 但我觉得这是不可能的
[38:17.080 --> 38:20.040] 就是没有办法能够起死回生
[38:20.040 --> 38:23.879] 更好的办法还是从一开始搞一些预防性措施
[38:23.880 --> 38:29.320] 所以听起来可能比如说我们去聊架构的落地
[38:29.320 --> 38:31.000] 刚才两位都提到一个点
[38:31.000 --> 38:33.240] 就是可能这个事情
[38:33.240 --> 38:35.880] 你单纯说你的架构怎么怎么好
[38:35.880 --> 38:37.400] 对你的架构是什么样子
[38:37.400 --> 38:40.280] 是很难去推动落地的
[38:40.280 --> 38:42.840] 对就包括有需要契机啊
[38:42.840 --> 38:44.760] 实际啊因素啊支持者啊
[38:44.760 --> 38:45.800] 就很多个点
[38:45.800 --> 38:50.680] 然后才能去依旧比较艰难的把它推下去是吗
[38:50.680 --> 38:53.400] 嗯我认为是这个样子
[38:53.400 --> 38:56.280] 就是你之前认为很多做法可能是一些
[38:56.280 --> 38:58.280] 业界比较常用的做法了
[38:58.280 --> 39:00.440] 但是你到一个公司发现它不这么做的
[39:00.440 --> 39:02.360] 但这个不这么做就像刚才陶文说的
[39:02.360 --> 39:06.760] 它有各种有各种理由或者各种现实的状况
[39:06.760 --> 39:09.000] 这个是没办法避免的
[39:09.000 --> 39:10.760] 你要改成一种新的方式
[39:10.760 --> 39:12.920] 你看起来它根本就不是在我眼里
[39:12.920 --> 39:15.640] 它看起来它根本就不是个技术难题
[39:15.640 --> 39:17.720] 它不是技术难题
[39:17.720 --> 39:21.720] 我所以我刚才为什么说到是一个说服能力
[39:21.720 --> 39:24.759] 说服能力是建在你自己的知识体系基础上的
[39:24.759 --> 39:29.720] 那它的我例如说我可能认为的一个架构师的
[39:29.720 --> 39:32.200] 这方面的说服能力和沟通能力
[39:32.200 --> 39:34.839] 反而是一个特别特别重要的能力
[39:34.839 --> 39:36.439] 然后在一个故障的时候
[39:36.439 --> 39:39.240] 你想到你要为你的主主要目标服务
[39:39.240 --> 39:41.879] 让他也是个说服和引导的能力
[39:41.879 --> 39:45.480] 那这个方面是需要特别特别重要的
[39:45.480 --> 39:48.680] 如果就像上次我参加的时候也说到的是
[39:48.680 --> 39:51.480] 如果一个想做架构师的人
[39:51.480 --> 39:53.400] 你没有这方面的能力
[39:53.400 --> 39:55.240] 那你就不要期望做这份工作了
[39:55.240 --> 39:58.440] 因为你会特别痛苦
[39:58.440 --> 40:00.600] 但能力不都是后天培养的吗
[40:00.600 --> 40:03.080] 对但是有的人就是想
[40:03.080 --> 40:04.920] 我就是想专心研究技术
[40:04.920 --> 40:06.040] 我的技术做得足够好
[40:06.040 --> 40:07.960] 我就能是架构师了
[40:07.960 --> 40:09.400] 对很多人是有这种想法的
[40:09.400 --> 40:11.320] 对他只要有这个意愿
[40:11.320 --> 40:12.680] 对主要不怕没有能力
[40:12.680 --> 40:13.720] 主要是怕没这个意愿
[40:13.720 --> 40:15.720] 他觉得说我不愿意跟别人沟通
[40:15.720 --> 40:16.520] 不愿意跟他打交道
[40:16.520 --> 40:18.680] 我不愿意去施加自己影响力
[40:18.680 --> 40:20.360] 那这样的人最好还就是
[40:20.360 --> 40:22.600] 只干一目三分地的事情比较好一些
[40:22.600 --> 40:24.840] 对或者说是不是说
[40:24.840 --> 40:26.680] 比如说如果是刚毕业新同学
[40:26.680 --> 40:29.320] 就是如果你想往架构师的道路走
[40:29.320 --> 40:32.360] 那你就不能说只关心技术
[40:32.360 --> 40:34.760] 然后不去做沟通
[40:34.760 --> 40:38.040] 然后个人影响力的构建这些事情
[40:38.040 --> 40:39.560] 如果你去逃避的话
[40:39.560 --> 40:42.440] 你很难成为比较好的架构师
[40:42.440 --> 40:43.880] 我自己是这么理解的
[40:43.880 --> 40:46.200] 我倒没觉得有什么所谓的架构师
[40:46.200 --> 40:49.160] 大家无非也就是冲着说
[40:49.160 --> 40:51.160] 赚更多的钱去
[40:51.160 --> 40:54.120] 说架构师好像比一般人赚得更多一些
[40:54.120 --> 40:55.240] 但其实并不是
[40:55.240 --> 40:57.399] 而且也没有什么所谓的
[40:57.399 --> 40:59.080] 很多的架构师的岗位
[40:59.080 --> 41:01.960] 我也不觉得这个岗位有特别大的必要性
[41:01.960 --> 41:03.879] 我觉得更多人还是
[41:03.879 --> 41:07.240] 不要以这个作为什么职业规划去做
[41:07.240 --> 41:09.160] 没有这样一个岗位
[41:09.160 --> 41:10.920] 这个岗位可能根本就不存在
[41:10.920 --> 41:15.000] 或者根本就不应该存在
[41:15.000 --> 41:18.600] 所以说如果是新同学的话
[41:18.600 --> 41:23.080] 其实他的目标应该是提升自己的架构能力
[41:23.080 --> 41:25.000] 我们不说这么一个岗位
[41:25.000 --> 41:27.560] 以及说当我想去提升架构能力的时候
[41:27.560 --> 41:31.400] 势必会涉及到对我的沟通能力
[41:31.400 --> 41:33.960] 以及这种影响力
[41:33.960 --> 41:35.880] 都是有要求的
[41:35.880 --> 41:39.080] 不然的话可能就会很难
[41:39.080 --> 41:40.600] 或者是可能会跑偏
[41:40.600 --> 41:48.920] 我其实之前会遇到那种新同学
[41:48.920 --> 41:52.759] 我说的新就是可能经验不是特别多
[41:52.759 --> 41:55.319] 但是他可能会看到一些技术博客
[41:55.319 --> 41:57.240] 我想推这个东西
[41:57.240 --> 41:59.560] 为什么你们都不支持我
[41:59.560 --> 42:00.440] 你们怎么这样
[42:00.440 --> 42:06.839] 我会觉得这里面其实就是一个可能认知的问题
[42:06.840 --> 42:12.600] 不是说某个技术一定就更好
[42:12.600 --> 42:15.560] 以及说你要推一个新的东西
[42:15.560 --> 42:16.840] 天然就是很难的
[42:16.840 --> 42:20.120] 是需要你在各方面都要做出一些努力的
[42:20.120 --> 42:21.960] 对确实是这样的
[42:21.960 --> 42:26.840] 其实之前跟陶文聊的时候
[42:26.840 --> 42:28.600] 讨论一些问题的时候
[42:28.600 --> 42:30.920] 陶文经常问我你的好的标准是什么
[42:30.920 --> 42:32.440] 你在讨论一个东西的时候
[42:32.440 --> 42:33.480] 你的好的标准是什么
[42:33.480 --> 42:35.000] 把这个统一了才有讨论的必要
[42:35.000 --> 42:37.320] 大家才能讨论问题
[42:37.320 --> 42:39.080] 要不然你掰扯5个小时也没有结论
[42:39.080 --> 42:41.400] 那其实如果把这个问题扩展一下的话
[42:41.400 --> 42:45.240] 如果作为一个入行不久的工程师来说
[42:45.240 --> 42:47.560] 那我觉得也可以问的问题就是说
[42:47.560 --> 42:50.360] 那一个工程师好的标准是什么
[42:50.360 --> 42:52.920] 我追求的是什么
[42:52.920 --> 42:54.200] 你说起来还是想要什么
[42:54.200 --> 42:56.520] 那个如果说的细节一点就是说
[42:56.520 --> 42:58.280] 一个工程师好的标准是什么
[42:58.280 --> 43:00.360] 例如说你的把代码写好
[43:00.360 --> 43:01.640] 那什么叫把代码写好
[43:01.640 --> 43:04.760] 把这个随着你的经历长一点
[43:04.760 --> 43:06.040] 你随着经验长一点
[43:06.040 --> 43:08.600] 那你要把这个架构设计好
[43:08.600 --> 43:11.400] 再长一点就是你要把这个整个项目从头到尾
[43:11.400 --> 43:12.440] 带领着三五个人
[43:12.440 --> 43:14.360] 或者带领着几十人把它做好
[43:14.360 --> 43:16.840] 那这好的能力到底是什么
[43:16.840 --> 43:18.840] 那到底分哪几个维度
[43:18.840 --> 43:22.280] 这几个维度自己脑子里有没有想清楚
[43:22.280 --> 43:25.080] 那这几个维度我需要学习什么
[43:25.080 --> 43:27.800] 我觉得大家是要把这个来好好想一想的
[43:27.800 --> 43:29.400] 哪怕最开始想不清楚
[43:29.400 --> 43:31.000] 第一年第二年想不清楚
[43:31.000 --> 43:32.680] 但是先要想一想
[43:32.680 --> 43:33.880] 想清楚之后
[43:33.880 --> 43:36.760] 先把某一个维度尝试着去做
[43:36.760 --> 43:38.840] 不可能一开始所有的都能handle住的
[43:38.840 --> 43:41.880] 因为不能要求一个新毕业的人
[43:41.880 --> 43:44.120] 去施加自己的影响力的
[43:44.120 --> 43:45.080] 他可以去做
[43:45.080 --> 43:46.360] 但这个对他来说很难
[43:46.360 --> 43:48.440] 但是我们做不到
[43:48.440 --> 43:49.960] 我们做有时候我们做不到
[43:49.960 --> 43:52.760] 但是并并不意味着我们不需要知道
[43:52.760 --> 43:54.840] 我们要知道可能再过两年
[43:54.840 --> 43:56.680] 我就可以来这么做了
[43:56.680 --> 43:58.440] 我会觉得不只是新同学了
[43:58.440 --> 44:01.320] 其实是对所有的做工程的同学
[44:01.320 --> 44:03.800] 都是一个比较好的建议
[44:03.800 --> 44:07.320] 就是很多时候
[44:07.320 --> 44:09.560] 当我们在聊某个东西的时候
[44:09.560 --> 44:11.800] 都可以先想一下好的标准是什么
[44:11.800 --> 44:14.040] 怎么算好
[44:14.040 --> 44:16.840] 对以及这个本身也是可以不断迭代的
[44:16.840 --> 44:19.960] 是的但是你的逻辑推演思路要是这个样子的
[44:19.960 --> 44:21.080] 虽然我们开始想不全
[44:21.080 --> 44:23.000] 这个是陶文教给我的
[44:23.000 --> 44:25.560] 我之前有这个模糊的思路
[44:25.560 --> 44:27.480] 但是是我在问问题
[44:27.480 --> 44:29.000] 我在向陶文请教问题的时候
[44:29.000 --> 44:29.720] 他来问我
[44:29.720 --> 44:30.840] 他来问我的时候
[44:30.840 --> 44:32.600] 我会发现我自己确实没想清楚
[44:32.600 --> 44:35.160] 我会再去想一想
[44:35.160 --> 44:37.480] 对这个是熊杰教给我的
[44:37.480 --> 44:41.240] 就是重构那本书的译者熊杰
[44:41.240 --> 44:44.440] 当年我还是小朋友的时候
[44:44.440 --> 44:47.960] 我经常也会大放厥词地说
[44:47.960 --> 44:50.279] 什么什么技术是好的
[44:50.279 --> 44:52.040] 然后他就会来怼我说
[44:52.040 --> 44:55.560] 不对你先思考一下你的好的标准是什么
[44:55.560 --> 44:58.440] 这个也是对我影响比较大的一个事情
[44:58.440 --> 44:59.480] 学习了
[44:59.480 --> 45:04.280] 我其实之前在这方面没有特别
[45:04.280 --> 45:09.080] 没有这种主动的去有这么一个认知
[45:09.080 --> 45:12.040] 就是当我们在聊什么的时候
[45:12.040 --> 45:13.560] 好的标准是什么
[45:13.560 --> 45:17.400] 可能这个事情就不会故意的去想
[45:17.400 --> 45:18.920] 但是现在一想的话
[45:18.920 --> 45:22.360] 其实很多时候这个点还是模糊的
[45:22.360 --> 45:24.360] 是可以自己来去总结
[45:24.360 --> 45:25.320] 然后尝试解态
[45:25.320 --> 45:27.640] 所以经常会看到讨论一个三个小时
[45:27.640 --> 45:30.200] 几个方案在那争论讨论了三五个小时
[45:30.200 --> 45:31.240] 也没有个结论
[45:31.240 --> 45:33.000] 就是大家对好的标准不一样
[45:33.000 --> 45:34.040] 各说各话
[45:34.040 --> 45:36.359] 我觉得还是比较震撼的
[45:36.359 --> 45:37.640] 就是刚才这个好的标准
[45:37.640 --> 45:39.160] 对我来说
[45:39.160 --> 45:43.000] 刚才是一次比较剧烈的冲击
[45:43.000 --> 45:45.240] 对因为我经常看到一些技术方案
[45:45.240 --> 45:45.960] 他是怎么写的
[45:45.960 --> 45:48.279] 就是说因为我有什么背景
[45:48.279 --> 45:49.160] 我有什么问题
[45:49.160 --> 45:51.080] 所以有了ABCD这几个方案
[45:51.080 --> 45:53.000] 然后A然后分别写
[45:53.000 --> 45:53.960] A有什么优缺点
[45:53.960 --> 45:54.759] B有什么优缺点
[45:54.759 --> 45:55.799] C有什么优缺点
[45:55.800 --> 45:58.680] 然后因为A有这个优点
[45:58.680 --> 45:59.640] 没有哪个缺点
[45:59.640 --> 46:00.680] 所以我选了A
[46:00.680 --> 46:02.200] 这个逻辑根本就是不成立的
[46:02.200 --> 46:03.480] 对吧
[46:03.480 --> 46:04.760] 不成立的原因就是在于
[46:04.760 --> 46:08.840] 第一是你在你第一是最主要的原因
[46:08.840 --> 46:10.040] 就是你怎么有问题
[46:10.040 --> 46:12.440] 有你的问题推导出来这几个方案了
[46:12.440 --> 46:14.200] 这个逻辑你要写先写清晰
[46:14.200 --> 46:16.040] 推导出来这几个方案之后
[46:16.040 --> 46:17.800] 现在我有哪些约束
[46:17.800 --> 46:19.160] 我有哪些标准
[46:19.160 --> 46:20.200] 例如说我的成本
[46:20.200 --> 46:21.640] 我的人力成本
[46:21.640 --> 46:22.440] 我的资金成本
[46:22.440 --> 46:23.320] 我的可扩展性
[46:23.320 --> 46:24.360] 或者什么之类的
[46:24.360 --> 46:27.160] 或者是我们现在我们知道了一些架构的指标
[46:27.160 --> 46:28.200] 那些metrics
[46:28.200 --> 46:30.760] 那我们要舍弃哪些
[46:30.760 --> 46:32.680] 我们把这些标准要排个序
[46:32.680 --> 46:34.840] 哪个标准是必须有
[46:34.840 --> 46:35.720] 哪个标准是排第二
[46:35.720 --> 46:36.920] 哪个标准排第三的
[46:36.920 --> 46:42.280] 然后你把这些方案拉齐到一个水平面来比较
[46:42.280 --> 46:43.080] 才有意义
[46:43.080 --> 46:44.280] 不要在那分别写
[46:44.280 --> 46:47.160] 分别写那些方案真的是太垃圾了
[46:47.160 --> 46:49.320] 这个说出去会被喷吗
[46:49.320 --> 46:51.400] 你可以换个词就不会喷了
[46:51.400 --> 46:52.840] 都是值得改进的
[46:52.840 --> 46:53.800] 都是值得改进的
[46:53.800 --> 46:55.720] 可以做得更好的
[46:55.720 --> 46:58.280] 对其实是有道理的
[46:58.280 --> 46:59.960] 我的感受就是
[46:59.960 --> 47:03.800] 就是如果大家用这种思路来写方案
[47:03.800 --> 47:06.360] 也会用这种方思路来聊方案
[47:06.360 --> 47:07.640] 最后就自说自话
[47:07.640 --> 47:10.440] 因为各个方案都会有自己的优势和缺陷
[47:10.440 --> 47:11.240] 对
[47:11.240 --> 47:12.600] 为什么你选这个
[47:12.600 --> 47:13.480] 你不选这个
[47:13.480 --> 47:16.840] 我觉得A方案的优点更重要
[47:16.840 --> 47:18.120] 为什么你选了B方案
[47:18.120 --> 47:22.280] 就是大家对好的标准没有认齐
[47:22.280 --> 47:26.920] 也没在同一个框架下来聊选情
[47:26.920 --> 47:28.840] 可能最后就变成聊主观了
[47:28.840 --> 47:31.080] 就是我觉得怎么怎么样
[47:31.080 --> 47:33.240] 你觉得怎么样
[47:33.240 --> 47:34.920] 你的认知不如我
[47:34.920 --> 47:37.640] 垃圾
[47:37.640 --> 47:41.880] 感觉这也是一个比较好的经验
[47:41.880 --> 47:48.040] 就是首先是自己要搞清楚好的标准是什么
[47:48.040 --> 47:50.840] 以及说当你和别人沟通的时候
[47:50.840 --> 47:53.400] 也可以先把好的标准提出来
[47:53.400 --> 47:55.560] 就是你认不认可这个标准
[47:55.560 --> 47:57.160] 对 然后我们再来聊说
[47:57.160 --> 47:59.960] 这个标准下的更具体的选情也好
[47:59.960 --> 48:00.840] 实现也好
[48:00.840 --> 48:02.840] 对 所以就像刚才提到了
[48:02.840 --> 48:04.520] 他这是在技术方案选情上
[48:04.520 --> 48:07.240] 刚才提到的是在一个工程师的成长上
[48:07.240 --> 48:08.840] 因为工程师成长上就是说
[48:08.840 --> 48:10.760] 你要每个阶段的工程师
[48:10.760 --> 48:11.720] 你要不断的
[48:11.720 --> 48:14.360] 我觉得就是要不断的来问自己
[48:14.360 --> 48:15.800] 对于我的下一个阶段来说
[48:15.800 --> 48:17.800] 好的标准是什么
[48:17.800 --> 48:19.320] 这个好的标准不要说
[48:19.320 --> 48:21.240] 不要说一些虚无的名词
[48:21.240 --> 48:23.080] 就像所谓的那些
[48:23.080 --> 48:25.480] 什么single responsibility一样
[48:25.480 --> 48:28.200] 你要把这好的标准写下来
[48:28.200 --> 48:30.360] 它用什么可衡量
[48:30.360 --> 48:31.800] 为什么它是好的标准
[48:31.800 --> 48:34.600] 它的优先级是怎样的
[48:34.600 --> 48:38.600] 一个人说的扯的鸡汤话就是
[48:38.600 --> 48:40.040] 大家要把这个想清楚
[48:40.040 --> 48:43.480] 才知道下一步要做什么
[48:43.480 --> 48:45.800] 哪怕我想不到三五年后
[48:45.800 --> 48:49.080] 但是至少我下一周可以想清楚
[48:49.080 --> 48:51.960] 或者我下一个月可以想清楚
[48:51.960 --> 48:55.240] 我当时在这边跟小同学做了一个小的分享
[48:55.240 --> 48:56.279] 就是在说
[48:56.279 --> 48:57.240] 大家经常的
[48:57.240 --> 48:59.960] 因为我经常说
[48:59.960 --> 49:01.960] 自己的一些不成熟的管理者
[49:01.960 --> 49:04.200] 经常会对自己的下属说
[49:04.200 --> 49:05.799] 你要独立承担一个事情
[49:05.799 --> 49:07.560] 你要有owner精神
[49:07.560 --> 49:08.920] 然后我说
[49:08.920 --> 49:10.200] 他们问我这个问题
[49:10.200 --> 49:11.080] 什么叫这些
[49:11.080 --> 49:11.799] 我说
[49:11.799 --> 49:14.759] 所以当你的mentor或leader
[49:14.759 --> 49:15.960] 跟你说这些话的时候
[49:15.960 --> 49:18.840] 你要去问它的标准是什么
[49:18.840 --> 49:20.120] 大家是不是在同一个标准下
[49:20.120 --> 49:21.160] 在讨论问题
[49:21.160 --> 49:23.560] 不要说这些虚无缥缈的
[49:23.560 --> 49:25.960] 这些谁都会说的词
[49:25.960 --> 49:29.160] 引发了我有一些跑题的联想
[49:29.160 --> 49:30.840] 我在想它可能不单纯
[49:30.840 --> 49:33.240] 是一个工程经验
[49:33.240 --> 49:34.840] 就好像比如说你的care
[49:34.840 --> 49:37.240] 你的care要是可衡量的标准
[49:37.240 --> 49:40.680] 要有清晰的
[49:40.680 --> 49:42.760] 然后可衡量的标准
[49:42.760 --> 49:44.200] 然后其实我们的目标
[49:44.200 --> 49:45.480] 也不要搞一些虚的
[49:45.480 --> 49:46.600] 也要是清晰的
[49:46.600 --> 49:48.360] 然后你才能去知道
[49:48.360 --> 49:48.920] 对
[49:48.920 --> 49:52.440] 然后我们的架构
[49:52.440 --> 49:53.640] 我们的工程
[49:53.640 --> 49:55.480] 大家也要有自己好的标准
[49:55.480 --> 49:55.720] 对
[49:55.720 --> 49:58.520] 就听起来还是挺重要的
[49:58.520 --> 50:00.120] 就是你能不能自己
[50:00.120 --> 50:02.520] 清晰的描述出来
[50:02.520 --> 50:03.400] 去年年底的时候
[50:03.400 --> 50:05.320] 我就一直在想这个问题
[50:05.320 --> 50:09.480] 就是一个研发团队
[50:09.480 --> 50:10.760] 它现状是什么样子的
[50:10.760 --> 50:11.880] 它有没有变好
[50:11.880 --> 50:14.120] 我通过哪些东西可以看出来
[50:14.120 --> 50:15.000] 它的标准是什么
[50:15.000 --> 50:18.920] 其实当时我一直在想这个问题
[50:18.920 --> 50:21.800] 感觉很受用
[50:21.800 --> 50:27.880] 但是可能我的积极性没有那么高
[50:27.880 --> 50:31.160] 因为这个东西的前提是
[50:31.160 --> 50:34.120] 你首先整个人是要上进的
[50:34.120 --> 50:35.800] 为什么突然变得这么悲观
[50:35.800 --> 50:37.160] 不是我的意思是
[50:37.160 --> 50:38.200] 持续提升
[50:38.200 --> 50:42.600] 我最近一直在搞这些
[50:42.600 --> 50:45.160] 上课之类的这些东西
[50:45.160 --> 50:46.839] 可能在这方面的话
[50:46.839 --> 50:48.600] 没那么积极
[50:48.600 --> 50:49.560] 对
[50:49.560 --> 50:54.120] 这是我为什么特别感激陶文的原因
[50:54.120 --> 50:54.600] 对
[50:54.600 --> 50:57.720] 因为这也是为什么刚才我吹牛说
[50:57.720 --> 51:01.000] 自己在过去这大概半年左右的时间
[51:01.000 --> 51:03.240] 我觉得自己向上迈了一步的原因
[51:03.240 --> 51:04.279] 这是很重要的一个点
[51:04.279 --> 51:05.560] 刚才说的也是一个
[51:05.560 --> 51:07.799] 不仅是技术上的
[51:07.799 --> 51:08.040] 对
[51:08.040 --> 51:11.240] 我很光荣地完成了这样一个传承
[51:11.240 --> 51:14.200] 这个理念真的特别赞
[51:14.200 --> 51:16.200] 因为我刚说我被冲击的原因是
[51:16.200 --> 51:18.359] 我会觉得有一点点恐怖
[51:18.359 --> 51:20.919] 我觉得恐怖的原因就是
[51:20.919 --> 51:23.319] 这么一个比较重要的事情
[51:23.319 --> 51:25.799] 你之前没有意识到
[51:25.799 --> 51:29.319] 对就好像大家都不会特别意识到这个事情
[51:29.319 --> 51:32.200] 但是你一说出来你会觉得应该有
[51:32.200 --> 51:33.640] 但是之前竟然没有想过
[51:33.640 --> 51:34.839] 就会觉得比较恐怖
[51:34.839 --> 51:36.520] 因为做这个事太累了
[51:36.520 --> 51:37.479] 真是太累了
[51:37.479 --> 51:38.520] 因为你觉得你自己
[51:38.520 --> 51:39.640] 你自己的这个
[51:39.640 --> 51:41.480] 你这个事情太累了
[51:41.480 --> 51:42.520] 真是太累了
[51:42.520 --> 51:43.960] 你要不断地逼自己
[51:43.960 --> 51:44.920] 然后问到自己说
[51:44.920 --> 51:46.120] 噢我没有想清楚
[51:46.120 --> 51:47.960] 你要承认自己是无知的
[51:47.960 --> 51:49.000] 对我还有
[51:49.000 --> 51:49.400] 我没有
[51:49.400 --> 51:50.600] 你要承认自己没想清楚
[51:50.600 --> 51:51.720] 承认自己是无知的
[51:51.720 --> 51:53.000] 这一点太难了
[51:53.000 --> 51:54.520] 太反人性了
[51:54.520 --> 51:57.960] 所以听众如果有
[51:57.960 --> 51:58.680] 如果有
[51:58.680 --> 52:00.440] 比如说工作一段时间
[52:00.440 --> 52:01.560] 可以想一下
[52:01.560 --> 52:01.799] 对
[52:01.799 --> 52:05.000] 可能刚毕业的同学可能还会感触少一些
[52:05.000 --> 52:05.240] 对
[52:05.240 --> 52:08.520] 我觉得如果有听众稍微有些经验
[52:08.520 --> 52:09.400] 也可以
[52:09.400 --> 52:14.400] 有没有一些思考总结出来的好的标准
[52:14.400 --> 52:18.000] 对 然后这个标准是不是一直在持续迭代
[52:19.800 --> 52:21.200] 对 如果没有的话
[52:22.800 --> 52:25.600] 可以尝试来做一下 试一下
[52:27.900 --> 52:30.400] 这也是软件工程这个行业的特殊性
[52:30.400 --> 52:32.600] 就是别的engineering
[52:33.100 --> 52:37.400] 我妈是机械工程师 我爸是建筑工程师
[52:37.400 --> 52:40.600] 他们在别的工程领域对于metrics
[52:40.600 --> 52:43.600] 可量化的指标 定义什么是好这方面
[52:43.600 --> 52:45.600] 这个是一个基本的职业素养
[52:45.600 --> 52:50.000] engineering这个事情本身就应该是关于这个的
[52:50.000 --> 52:54.600] soft engineering感觉已经快被包装成了
[52:54.600 --> 52:57.400] 从艺术包装成了一门哲学
[52:57.400 --> 53:02.200] 它已经完全脱离了工程性的本质了
[53:02.200 --> 53:05.400] 为什么会说是哲学这个我还有点好奇
[53:05.400 --> 53:07.800] 因为我还听到挺多人说是艺术的
[53:07.800 --> 53:11.800] 可能听到哲学的说法会小一些
[53:11.800 --> 53:15.600] 因为似乎怎么做都是有道理的
[53:15.600 --> 53:19.200] 对吧 似乎我一开始上来就差100个月服务
[53:19.200 --> 53:20.400] 公司也没有垮
[53:20.400 --> 53:23.400] 那我可不是想怎么说就能怎么说吗
[53:23.400 --> 53:25.200] 我说它是一门艺术就是艺术
[53:25.200 --> 53:27.800] 我说它是一门哲学它就能是一门哲学
[53:27.800 --> 53:32.200] 就是反正大家也没有好的统一的标准
[53:32.200 --> 53:35.600] 就怎么糟蹋它都能搞出来
[53:35.600 --> 53:37.000] 它都能上线 它都能work
[53:37.000 --> 53:38.200] 需求都能做出来
[53:38.200 --> 53:40.399] 对这个时候你也不太能说什么
[53:40.399 --> 53:42.399] 因为我搞定了
[53:42.399 --> 53:44.799] 对啊是啊就是
[53:44.799 --> 53:49.399] 然后别人问你为什么需要1000个人才搞定这个事情呢
[53:49.399 --> 53:51.600] 因为我们业务是全世界上最复杂的
[53:51.600 --> 53:53.200] 独一无二的
[53:53.200 --> 53:59.799] 每个人每家公司的在一个公司呆的比较久的人都会说
[53:59.800 --> 54:04.000] 我们的业务是复杂的是比其他公司复杂很多的
[54:04.000 --> 54:06.400] 所以我们要这样这样做
[54:06.400 --> 54:08.600] 这句话所有人都可以说出来
[54:08.600 --> 54:13.600] 对我们的业务点复杂在什么和别的家的区别是啥
[54:13.600 --> 54:15.600] 所以有更复杂的原因
[54:15.600 --> 54:18.600] 但是就像对于我来说
[54:18.600 --> 54:21.400] 我其实我是不相信这句话的
[54:21.400 --> 54:23.600] 所以这是12法里面第12条
[54:23.600 --> 54:26.100] 也就是刚强贡献的最重要的一条
[54:26.100 --> 54:27.100] 因为有这样一条
[54:27.100 --> 54:29.300] 所以我们才把它强行凑到了12条
[54:29.300 --> 54:32.000] 12这个数字是提前选定好的吗
[54:32.000 --> 54:34.700] 对因为有第12条了
[54:34.700 --> 54:36.500] 我们是先把第12条写出来了
[54:36.500 --> 54:38.800] 然后再把前面11条写出来的
[54:38.800 --> 54:40.400] 是这个样子的
[54:40.400 --> 54:41.400] 对啊
[54:41.400 --> 54:43.000] 因为我们不相信前面11条
[54:43.000 --> 54:46.000] 所以我们要先把那些前面11条给编出来
[54:46.000 --> 54:49.200] 第12条不是说以上11条不适用于我们吗
[54:49.200 --> 54:51.500] 所以那我就得先编个11条出来
[54:51.500 --> 54:53.800] 才能够说明12条的分量
[54:53.800 --> 54:57.000] 所以为什么会选定12这个数字的
[54:57.000 --> 54:59.800] 因为不有12 factor什么这些东西吗
[54:59.800 --> 55:01.100] 大家都懂得这个
[55:01.100 --> 55:01.900] 对哦
[55:01.900 --> 55:03.100] 这个逻辑很有意思
[55:03.100 --> 55:06.800] 就是比如说因为业界有很多这种tile
[55:06.800 --> 55:08.400] 对比如说就12 factor
[55:08.400 --> 55:11.900] 应该是在微服务那边算比较出名的嘛
[55:11.900 --> 55:15.200] 对所以那我们也可以定12条
[55:15.200 --> 55:17.900] 对而且因为我们这个东西本身就是谬误
[55:17.900 --> 55:19.600] 所以说我们可以先定第12条
[55:19.600 --> 55:22.000] 然后再来把前面的补全
[55:22.000 --> 55:29.500] 感觉是一个很有意思的模式
[55:29.500 --> 55:36.000] 所以然后我们这还有最后一个话题
[55:36.000 --> 55:39.000] 对就是是整好这边
[55:39.000 --> 55:40.600] Manzu Saka这边之前提的
[55:40.600 --> 55:46.300] 就是说如果说我是一个一线的研发工程师
[55:46.300 --> 55:49.700] 对或者我目前对架构的感受不是特别深
[55:49.700 --> 55:54.700] 对然后我是怎么是有什么方法
[55:54.700 --> 55:58.200] 可以能让我在这种架构的设计
[55:58.200 --> 56:02.299] 然后实施能够去得到一个持续的提升
[56:02.299 --> 56:04.799] 对这个两位有什么好的建议吗
[56:04.799 --> 56:07.500] 不要不要大家自封什么架构师
[56:07.500 --> 56:09.299] 就所有人都是一线工程师
[56:09.299 --> 56:13.299] 就你首先得把一线的业务写好
[56:13.299 --> 56:17.299] 你不能够只挑你感兴趣的活来做
[56:17.300 --> 56:24.300] 应该是能够把具体的产品经济的需求
[56:24.300 --> 56:26.100] 你要能够整的明白整的清楚
[56:26.100 --> 56:28.100] 能够写出来的
[56:28.100 --> 56:30.500] 这样你才能去讨论一些其他的问题
[56:30.500 --> 56:32.700] 那些其他的问题其实不是什么架构问题
[56:32.700 --> 56:36.700] 其实就是大家一线工程师平时的痛点
[56:36.700 --> 56:39.500] 对吧你认为说我但凡做一个需求
[56:39.500 --> 56:42.300] 就得找七八个借口来开个会
[56:42.300 --> 56:45.300] 那你就会去思考说为什么会这样
[56:45.300 --> 56:47.500] 对吧你在你的日常工作中
[56:47.500 --> 56:50.500] 对这种痛点有不满对理想有追求
[56:50.500 --> 56:53.500] 你才会去做更多的思考
[56:53.500 --> 56:56.300] 这其实就是立足于你的本职工作
[56:56.300 --> 56:58.300] 而不是说有一个虚构的角色
[56:58.300 --> 57:00.100] 一个岗位叫架构师
[57:00.100 --> 57:02.500] 然后他们就专门去解决所谓的架构问题
[57:02.500 --> 57:05.300] 然后剩下的能是解决什么业务问题
[57:05.300 --> 57:06.300] 就更不存在的
[57:06.300 --> 57:09.100] 我觉得其实都是一线工程师
[57:09.100 --> 57:11.500] 就是为了让一线的工作更加
[57:11.500 --> 57:14.700] 做的更舒服一点代价更小一点
[57:14.700 --> 57:17.500] 其实就是这么一个优化问题
[57:17.500 --> 57:18.899] 如果你不做一线的工作
[57:18.899 --> 57:22.299] 你怎么知道要优化什么呢
[57:22.299 --> 57:24.700] 这一点我感触还是特别特别深的
[57:24.700 --> 57:26.700] 例如说我来新公司之后
[57:26.700 --> 57:28.100] 我公司是没有架构师的抬头
[57:28.100 --> 57:30.899] 我公司不是架构师的抬头
[57:30.899 --> 57:32.899] 我公司的抬头一直是工程师
[57:32.899 --> 57:34.700] 我也认为自己是工程师
[57:34.700 --> 57:39.100] 然后对于如何让自己变得更好一点
[57:39.100 --> 57:40.899] 我觉得刚才陶文已经说的特别清楚了
[57:40.899 --> 57:43.700] 我就举个我就在那个陶文老师的观点上
[57:43.700 --> 57:45.500] 举这个实际的case就好了
[57:45.500 --> 57:48.299] 那尤其是做业务的同学
[57:48.299 --> 57:51.100] 他们说做业务是没有挑战的
[57:51.100 --> 57:54.500] 做基础架构去研发一个消息堆裂
[57:54.500 --> 57:58.100] 去做一个什么组建库才是有挑战的
[57:58.100 --> 58:01.500] 那这一点其实我可能是有一些不同的观点
[58:01.500 --> 58:03.100] 那其实就像刚才说的
[58:03.100 --> 58:05.299] 我们要从一线的工作中
[58:05.299 --> 58:08.100] 我们一线的工作中去反思和思考
[58:08.100 --> 58:09.500] 多问几个问题
[58:09.500 --> 58:12.500] 那就像刚才陶文提到的是
[58:12.500 --> 58:14.300] 每次开会每次做一个需求
[58:14.300 --> 58:15.900] 我都要五个团队来参与
[58:15.900 --> 58:17.300] 花费特别长的时间
[58:17.300 --> 58:19.900] 那我们就可以再问自己问题
[58:19.900 --> 58:22.300] 这样真的是正常的吗
[58:22.300 --> 58:24.300] 正常的可能应该是什么样子的
[58:24.300 --> 58:26.100] 如果这样是不正常的
[58:26.100 --> 58:28.500] 那可以做什么呢
[58:28.500 --> 58:29.700] 多问自己这样几个问题
[58:29.700 --> 58:32.500] 我们举个再更细小的例子
[58:32.500 --> 58:34.700] 那每个工程师都会设计
[58:34.700 --> 58:37.100] 都会设计一些Mysql的table对吧
[58:37.100 --> 58:38.100] 一些table
[58:38.100 --> 58:40.900] 那我们就会来问自己问题
[58:40.900 --> 58:46.300] 就是说那什么叫设计一个好的table
[58:46.300 --> 58:47.700] 你Schema设计的好不好
[58:47.700 --> 58:49.300] 就是刚才说的好的标准
[58:49.300 --> 58:51.100] 你心里的标准是什么呀
[58:51.100 --> 58:54.300] 以前我仅仅是为了产品经理提一个需求
[58:54.300 --> 58:56.700] 我就设计了一个满足需求的table
[58:56.700 --> 58:58.500] 那这个够吗
[58:58.500 --> 59:00.600] 满足需求是一个标准
[59:00.600 --> 59:02.200] 那还有其他的标准吗
[59:02.200 --> 59:06.000] 什么叫设计一个好的table啊
[59:06.000 --> 59:08.500] 多问问自己这么一个问题
[59:08.500 --> 59:09.500] 问了之后再问
[59:09.500 --> 59:10.900] 再继续往下问
[59:10.900 --> 59:12.500] 然后再举个小例子
[59:12.500 --> 59:15.300] 就是说大家经常会写什么
[59:15.300 --> 59:18.900] 在Source Duo层写个Interface
[59:18.900 --> 59:20.500] 上次我也举过这个例子
[59:20.500 --> 59:21.700] 那这个Interface写在这里
[59:21.700 --> 59:24.300] 到底有什么用啊
[59:24.300 --> 59:26.300] Interface在这里的价值是什么呀
[59:26.300 --> 59:27.900] 是为了reuse吗
[59:27.900 --> 59:29.500] 它到底reuse了吗
[59:29.500 --> 59:33.300] 或者它到底真正的作用是什么呢
[59:33.300 --> 59:35.700] 或Spring里我们会有什么IoC
[59:35.700 --> 59:37.500] 或者大家经常起的看见什么
[59:37.500 --> 59:39.100] Dependency Inversion
[59:39.100 --> 59:41.100] 那这个概念我们经常会提
[59:41.100 --> 59:42.100] 天天会用
[59:42.100 --> 59:43.400] Spring里天天你要写什么
[59:43.400 --> 59:44.400] 依赖注入之类的
[59:44.400 --> 59:44.700] 是吧
[59:44.700 --> 59:45.900] Dependency Injection
[59:45.900 --> 59:47.600] 那这些东西
[59:47.600 --> 59:49.700] 这些东西到底解决了什么问题啊
[59:49.700 --> 59:51.200] 我天天在用啊
[59:51.200 --> 59:53.299] 它到底解决了什么问题啊
[59:53.299 --> 59:55.600] 我不这么用到底有没有问题啊
[59:55.600 --> 59:58.100] 它的好处到底是什么呀
[59:58.100 --> 01:00:01.600] 我觉得就在我们日常的工作中
[01:00:01.600 --> 01:00:03.799] 你天天见的东西里
[01:00:03.799 --> 01:00:05.900] 你多问自己几个问题
[01:00:05.900 --> 01:00:07.200] 你问了问题之后
[01:00:07.200 --> 01:00:08.299] 你多去找人请教
[01:00:08.300 --> 01:00:09.700] 你多去看一些书
[01:00:09.700 --> 01:00:11.800] 我觉得你的水平自然就提高了呀
[01:00:11.800 --> 01:00:13.900] 何必说要搞什么图龙计呢
[01:00:13.900 --> 01:00:15.600] 我觉得那些图龙计是不存在的
[01:00:20.000 --> 01:00:21.300] 这是我的一些观点
[01:00:21.300 --> 01:00:23.800] 在陶文老师的主要的理念下
[01:00:23.800 --> 01:00:25.200] 举几个实际的case
[01:00:30.200 --> 01:00:31.900] 因为这个问题是
[01:00:31.900 --> 01:00:33.100] 者而提的嘛
[01:00:33.100 --> 01:00:35.200] 我这边有一个小的感受啊
[01:00:35.200 --> 01:00:38.799] 我不能说是观点之类的
[01:00:38.799 --> 01:00:40.700] 就是我的观察和感受是
[01:00:40.700 --> 01:00:46.700] 如果你连函数都设计不好
[01:00:46.700 --> 01:00:48.100] 就不要谈架构了
[01:00:49.500 --> 01:00:52.799] 对就是就是很多同学会觉得架构师
[01:00:52.799 --> 01:00:54.700] 或者就是首先有没有架构师
[01:00:54.700 --> 01:00:56.299] 这个岗位是一个问题
[01:00:56.299 --> 01:00:59.000] 另外一个是可能同学会觉得说
[01:00:59.000 --> 01:01:02.899] 我这个架构是另外一个层面的知识
[01:01:04.000 --> 01:01:04.500] 对
[01:01:04.500 --> 01:01:08.700] 然后是和我具体的编码没那么相关
[01:01:08.700 --> 01:01:08.900] 对
[01:01:08.900 --> 01:01:11.300] 但是我个人的观察是
[01:01:11.300 --> 01:01:14.100] 如果你对你的函数没有良好的设计
[01:01:14.100 --> 01:01:15.700] 你是很难做好架构设计的
[01:01:16.900 --> 01:01:20.000] 对就是这就意味着你可能连小的点
[01:01:21.800 --> 01:01:24.900] 小的点都没有去思考和设计明白
[01:01:24.900 --> 01:01:25.200] 对
[01:01:25.200 --> 01:01:28.000] 然后但是你可能整天在想说
[01:01:28.000 --> 01:01:30.100] 我整体整体的架构是什么样的
[01:01:30.100 --> 01:01:33.600] 可能会说会出现经验不足的情况
[01:01:33.600 --> 01:01:33.800] 对
[01:01:33.800 --> 01:01:38.800] 然后本身研发工程师在每天接各种的需求
[01:01:38.800 --> 01:01:39.700] 做不同的业务
[01:01:39.700 --> 01:01:43.600] 其实都是我会觉得都是一个不断设计的过程
[01:01:44.600 --> 01:01:44.700] 对
[01:01:44.700 --> 01:01:47.700] 但是很多很多新同学会有误区
[01:01:47.700 --> 01:01:50.200] 我我怎么懂着在做业务
[01:01:51.500 --> 01:01:51.700] 对
[01:01:51.700 --> 01:01:53.500] 然后我什么时候能去做架构
[01:01:55.200 --> 01:01:55.800] OK
[01:01:55.800 --> 01:01:56.200] 那
[01:01:58.000 --> 01:01:59.600] 那我们就进到最后一个环节
[01:01:59.600 --> 01:02:03.900] 两位有什么想为大家推荐的
[01:02:03.900 --> 01:02:06.000] 最近看过不错的这种资料吗
[01:02:07.500 --> 01:02:09.700] 我推荐一本书吧
[01:02:09.700 --> 01:02:12.700] 叫做Principles of Neuroscience
[01:02:12.700 --> 01:02:16.100] 就是就是讲一个生物的现象
[01:02:16.100 --> 01:02:18.900] 就是在生物世界里面
[01:02:18.900 --> 01:02:20.299] 这些生物的神经系统
[01:02:21.400 --> 01:02:23.400] 这设计原则是什么
[01:02:23.400 --> 01:02:29.000] 就是为什么你的果蝇的视网膜的视觉神经
[01:02:29.000 --> 01:02:30.800] 是这样组织的
[01:02:30.800 --> 01:02:33.000] 人的大脑是这样组织的
[01:02:33.000 --> 01:02:36.400] 这样一本书叫Principles of Neuroscience
[01:02:36.400 --> 01:02:39.500] 然后有一个公众号叫超智能体
[01:02:41.500 --> 01:02:45.100] 也是讲这个跟生物进化呀
[01:02:45.100 --> 01:02:46.100] 然后跟这个
[01:02:47.700 --> 01:02:48.500] 能工智能啊
[01:02:48.500 --> 01:02:50.400] 这个相关的事情
[01:02:50.400 --> 01:02:56.200] 其实这个他的他的观点就是我我我最近的一个收获就是
[01:02:56.200 --> 01:02:58.200] 很多你认为自然界
[01:02:58.200 --> 01:03:01.000] 他比如说非常有结构的东西
[01:03:01.000 --> 01:03:03.200] 有一些structure的东西
[01:03:03.200 --> 01:03:07.399] 他不是说哪个上帝设计出来的
[01:03:07.399 --> 01:03:11.399] 他就是有根据这个最小沟通成本
[01:03:11.399 --> 01:03:14.000] minimize communication cost
[01:03:14.000 --> 01:03:17.000] 根据一些这种非常简单的原则
[01:03:17.000 --> 01:03:19.399] 他自然演化出来的结果
[01:03:19.399 --> 01:03:21.200] 所以也应用到
[01:03:21.200 --> 01:03:24.200] 比如说软件工程上来说的话
[01:03:24.200 --> 01:03:29.000] 你可能不需要一个万能的什么手机架构师来去做什么设计
[01:03:29.000 --> 01:03:31.600] 而是你应该你有一个非常simple
[01:03:31.600 --> 01:03:35.600] 非常可验证的原则指标
[01:03:35.600 --> 01:03:38.600] 然后你能够一直强制应用下去
[01:03:38.600 --> 01:03:40.600] 这个结构自然就会浮现出来
[01:03:40.600 --> 01:03:43.600] 但是对你这个事物本质的本身本质的呈现
[01:03:43.600 --> 01:03:46.200] 而不是一个轮位的设计结果
[01:03:48.600 --> 01:03:52.399] 听起来这是两个非工程领域的分享
[01:03:52.400 --> 01:03:58.400] 一个是超自然体
[01:03:58.400 --> 01:04:02.400] 还有一个可能需要陶文你待会儿麻烦发一下链接
[01:04:02.400 --> 01:04:07.400] 你提到那个nano还是nero我没有太清楚
[01:04:07.400 --> 01:04:10.400] nero就是那个神经的意思
[01:04:10.400 --> 01:04:13.400] principles of narrow defi
[01:04:13.400 --> 01:04:16.400] 我们之后会在我们的博客上附上链接
[01:04:16.400 --> 01:04:20.400] 对刚强有什么想和大家分享的吗
[01:04:20.400 --> 01:04:23.400] 我上次分享了特别特别的东西
[01:04:23.400 --> 01:04:25.400] 是不是都说过了我想想
[01:04:25.400 --> 01:04:28.400] 上次都提到了如果说再提一遍的话
[01:04:28.400 --> 01:04:30.400] 我就分享个很具体的吧
[01:04:30.400 --> 01:04:36.400] 大家可以花时间去看看一些不同的观点
[01:04:36.400 --> 01:04:37.400] 不同的观点
[01:04:37.400 --> 01:04:40.400] 例如说大家一直在倡导reuse, diy
[01:04:40.400 --> 01:04:43.400] 大家感兴趣的就可以去看看
[01:04:43.400 --> 01:04:46.400] The hints of computer system design那篇论文
[01:04:46.400 --> 01:04:50.400] 那篇论文里提了一些不同的想法
[01:04:50.400 --> 01:04:54.400] 他对于重用对于reuse
[01:04:54.400 --> 01:04:57.400] 对于尤其是对于reuse对于abstraction
[01:04:57.400 --> 01:04:58.400] 他提了一些不同的想法
[01:04:58.400 --> 01:05:00.400] 而且举了很多实际的case
[01:05:00.400 --> 01:05:03.400] 但是我印象中刚强你上次提的时候
[01:05:03.400 --> 01:05:06.400] 是不是有说这个可能对新同学来说
[01:05:06.400 --> 01:05:08.400] 要警惕一些东西
[01:05:08.400 --> 01:05:12.400] 就是传递不下去
[01:05:12.400 --> 01:05:16.400] 所以说大家该读的什么
[01:05:16.400 --> 01:05:19.400] 例如说design pattern这些基础的书
[01:05:19.400 --> 01:05:21.400] clean architecture基础的书
[01:05:21.400 --> 01:05:24.400] 该读的什么clean code这些基础的书
[01:05:24.400 --> 01:05:26.400] 该读还是读嘛
[01:05:26.400 --> 01:05:28.400] 读完之后你也看看
[01:05:28.400 --> 01:05:30.400] 其他的一些大师们
[01:05:30.400 --> 01:05:32.400] 他也提了一些不同的观点
[01:05:32.400 --> 01:05:34.400] 但是如果说你读哪篇资料
[01:05:34.400 --> 01:05:36.400] 他不一定是全对的嘛
[01:05:36.400 --> 01:05:37.400] 他可能会让你走火入魔
[01:05:37.400 --> 01:05:39.400] 如果自己想不清楚的话
[01:05:39.400 --> 01:05:41.400] 我自己的观点
[01:05:41.400 --> 01:05:43.400] 大家读的书还要读
[01:05:43.400 --> 01:05:44.400] 我只是推荐一些
[01:05:44.400 --> 01:05:46.400] 大家平常不读的东西
[01:05:46.400 --> 01:05:48.400] 和现在我们常说的观点
[01:05:48.400 --> 01:05:50.400] 不太一样的东西
[01:05:50.400 --> 01:05:52.400] 小白你有什么想
[01:05:52.400 --> 01:05:55.400] 最近和大家分享的吗
[01:05:55.400 --> 01:05:57.400] 我分享一个站点吧
[01:05:57.400 --> 01:06:04.400] 叫python tutor
[01:06:04.400 --> 01:06:06.400] 我这个英文发音也不是很准
[01:06:06.400 --> 01:06:08.400] 我先发在群里
[01:06:08.400 --> 01:06:12.400] 然后后边贴在那个shownotes里边
[01:06:12.400 --> 01:06:14.400] 这是我
[01:06:14.400 --> 01:06:16.400] 我现在给我们python课的老师
[01:06:16.400 --> 01:06:17.400] 当课代表
[01:06:17.400 --> 01:06:19.400] 所以说经常会搜一些
[01:06:19.400 --> 01:06:21.400] 课件类的东西
[01:06:21.400 --> 01:06:22.400] 这个也是我搜到的
[01:06:22.400 --> 01:06:25.400] 其中一个比较有意思的
[01:06:25.400 --> 01:06:27.400] 现在大学都有python课了
[01:06:27.400 --> 01:06:30.400] 对我们老师感觉还没有我会
[01:06:30.400 --> 01:06:31.400] 都教什么呢
[01:06:31.400 --> 01:06:34.400] 能稍微问一下
[01:06:34.400 --> 01:06:35.400] python语法
[01:06:35.400 --> 01:06:36.400] 对就是语法
[01:06:36.400 --> 01:06:38.400] 然后完了之后
[01:06:38.400 --> 01:06:41.400] 他就会带你做一些实践爬虫
[01:06:41.400 --> 01:06:43.400] 对挺碎的
[01:06:43.400 --> 01:06:44.400] 教的都挺碎的
[01:06:44.400 --> 01:06:46.400] 一点都不系统
[01:06:46.400 --> 01:06:48.400] 这是我们今天播客里
[01:06:48.400 --> 01:06:49.400] 第一次提到python
[01:06:49.400 --> 01:06:52.400] 一个以python为主题的播客里
[01:06:52.400 --> 01:06:53.400] 第一次提到python
[01:06:53.400 --> 01:06:55.400] python好
[01:06:55.400 --> 01:06:58.400] 我也写了两三年
[01:06:58.400 --> 01:07:00.400] python很好
[01:07:00.400 --> 01:07:02.400] 我写了五六年
[01:07:02.400 --> 01:07:03.400] 你们这些人
[01:07:03.400 --> 01:07:05.400] 我感觉现在所有人都是
[01:07:05.400 --> 01:07:06.400] python很好
[01:07:06.400 --> 01:07:07.400] 转头用go写的飞起
[01:07:07.400 --> 01:07:08.400] 我是type script的
[01:07:08.400 --> 01:07:09.400] 我们是前端
[01:07:09.400 --> 01:07:10.400] 我前python的朋友
[01:07:10.400 --> 01:07:12.400] 最近都在写go
[01:07:12.400 --> 01:07:14.400] 涛涛你要打招聘广告吗
[01:07:14.400 --> 01:07:15.400] 我就不用打了
[01:07:15.400 --> 01:07:16.400] 你不是python程序员吗
[01:07:16.400 --> 01:07:17.400] 这个招是什么
[01:07:17.400 --> 01:07:20.400] 我们现在都只招前端
[01:07:20.400 --> 01:07:21.400] 打一下
[01:07:21.400 --> 01:07:23.400] 我们虽然是python
[01:07:23.400 --> 01:07:26.400] 但是其实还是很多
[01:07:26.400 --> 01:07:28.400] 同学都有在听的
[01:07:28.400 --> 01:07:29.400] 听众还是比较广的
[01:07:29.400 --> 01:07:30.400] 前面不讲了一堆歪理邪说
[01:07:30.400 --> 01:07:31.400] 怎么样去组织代码
[01:07:31.400 --> 01:07:33.400] 代码防腐这些东西
[01:07:33.400 --> 01:07:34.400] 如果大家对于
[01:07:34.400 --> 01:07:35.400] 实践感兴趣的话
[01:07:35.400 --> 01:07:37.400] 然后在成都前端
[01:07:37.400 --> 01:07:39.400] 可以带我们公司考虑一下
[01:07:39.400 --> 01:07:42.400] 成都的主流的薪资水平
[01:07:42.400 --> 01:07:45.400] 可以和陶文一起共事
[01:07:45.400 --> 01:07:48.400] 听众们可以考虑一下
[01:07:48.400 --> 01:07:50.400] 我们可以把这个广告
[01:07:50.400 --> 01:07:53.400] copy一份放到开头
[01:07:53.400 --> 01:07:55.400] 高强要不要聊一下
[01:07:55.400 --> 01:07:56.400] 你这边的招聘
[01:07:56.400 --> 01:07:58.400] 我上次打过了
[01:07:58.400 --> 01:08:00.400] 我还要打
[01:08:00.400 --> 01:08:01.400] 我还要打
[01:08:01.400 --> 01:08:03.400] 我这边是
[01:08:03.400 --> 01:08:07.400] 初中资深架构师
[01:08:07.400 --> 01:08:08.400] 我们都要
[01:08:08.400 --> 01:08:10.400] 包含前端后端客户端
[01:08:10.400 --> 01:08:11.400] 我们都要
[01:08:11.400 --> 01:08:14.400] 所以我们也是在
[01:08:14.400 --> 01:08:15.400] 元辅岛大家也听说过
[01:08:15.400 --> 01:08:17.399] 我在元辅岛的班马
[01:08:17.399 --> 01:08:18.399] 这个事业部工作
[01:08:18.399 --> 01:08:20.399] 也是现在业务增长最快
[01:08:20.399 --> 01:08:23.399] 也是业界2到8岁标准的
[01:08:23.399 --> 01:08:24.399] 业务的第一名
[01:08:24.399 --> 01:08:27.399] 整体来说业务发展和技术
[01:08:27.399 --> 01:08:28.399] 和技术的演化
[01:08:28.399 --> 01:08:29.399] 也是特别快的
[01:08:29.399 --> 01:08:31.399] 如果大家有兴趣
[01:08:31.399 --> 01:08:33.399] 来跟我一起来聊一聊
[01:08:33.399 --> 01:08:36.399] 或者是有兴趣来过来看一看
[01:08:36.399 --> 01:08:37.399] 就可以随时来联系我
[01:08:37.399 --> 01:08:39.399] 这样我们待会儿
[01:08:39.399 --> 01:08:41.399] 在群里收集下两位的邮箱
[01:08:41.399 --> 01:08:42.399] 或者怎么样的
[01:08:42.399 --> 01:08:44.399] 然后也放一下地址
[01:08:44.399 --> 01:08:46.399] 不然不太好联系
[01:08:46.399 --> 01:08:47.399] 行
[01:08:47.399 --> 01:08:49.399] 对我待会儿会放一个邮箱
[01:08:49.399 --> 01:08:50.399] 因为这是我的工作
[01:08:50.399 --> 01:08:52.399] 我要招聘
[01:08:52.399 --> 01:08:53.399] OK
[01:08:53.399 --> 01:08:56.399] 那我们今天的播客就录到这
[01:08:56.399 --> 01:08:58.399] 感谢高强和高文
[01:08:58.399 --> 01:08:59.399] 两位工程师
[01:08:59.399 --> 01:09:01.399] 给我们的分享和建议
[01:09:01.399 --> 01:09:29.399] 拜拜
