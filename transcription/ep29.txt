[00:00.000 --> 00:13.560] 欢迎收听捕蛇者说节目
[00:14.000 --> 00:15.960] 我是今天的主持人Adam
[00:15.960 --> 00:17.360] 也可以叫我小斌
[00:17.920 --> 00:20.080] 本期我会和小白一起
[00:20.440 --> 00:22.680] 邀请两位嘉宾一起来聊一聊
[00:22.680 --> 00:24.720] 和架构设计相关的内容
[00:25.120 --> 00:26.960] 小白先和大家打一个招呼
[00:26.960 --> 00:27.880] Hello大家好
[00:27.880 --> 00:28.720] 我是小白
[00:28.720 --> 00:30.640] OK欢迎小白
[00:30.640 --> 00:32.199] 本期我们邀请的嘉宾
[00:32.199 --> 00:34.400] 分别是姚刚强和陶文
[00:34.400 --> 00:36.280] 先请刚强做个自我介绍
[00:37.280 --> 00:38.200] 大家好
[00:38.200 --> 00:39.440] 我叫姚刚强
[00:39.440 --> 00:41.320] 然后我有比较长的工作时间
[00:41.320 --> 00:42.840] 是在知乎工作
[00:42.840 --> 00:45.160] 然后在19年来到了元富岛
[00:45.160 --> 00:46.840] 然后也是两份工作
[00:46.840 --> 00:48.000] 都是做工程师
[00:48.320 --> 00:51.440] 对以及我们今天的重磅嘉宾陶文
[00:51.440 --> 00:52.320] 陶老师
[00:53.200 --> 00:55.320] 可能体重确实有点重
[00:55.320 --> 00:56.599] 大家好
[00:56.599 --> 00:57.840] 我是陶文
[00:57.840 --> 01:01.720] 我是06年就在SodWalks工作
[01:01.720 --> 01:04.920] 然后也就是那家比较神奇的公司
[01:04.920 --> 01:07.560] 就是我们的首席科学家是Martin Fowler
[01:08.120 --> 01:10.560] 所以在那个公司呆了5年的时间
[01:10.560 --> 01:11.880] 对我的影响是比较大的
[01:12.160 --> 01:14.520] 然后后来去了各种各样的公司
[01:14.520 --> 01:15.440] 自己创业
[01:15.440 --> 01:16.800] 然后去过腾讯
[01:16.800 --> 01:20.800] 然后在滴滴也呆了将近快4年的时间
[01:21.080 --> 01:23.240] 然后现在是自己
[01:23.680 --> 01:25.200] 实现一些自己想法
[01:25.200 --> 01:27.280] 在一家叫陈发云的小公司
[01:27.280 --> 01:29.480] OK
[01:30.040 --> 01:33.080] 然后陶老师刚才有提到说
[01:33.080 --> 01:34.840] 第一份工作是在SodWalks
[01:35.840 --> 01:38.920] 对其实是业界比较出名的
[01:38.920 --> 01:40.760] 特别是Martin Fowler
[01:40.760 --> 01:43.240] 你会觉得这家公司和我们目前常见的
[01:43.240 --> 01:44.480] 互联网公司
[01:45.040 --> 01:46.720] 有什么显著的区别
[01:46.720 --> 01:48.200] 或者是一同吗
[01:48.840 --> 01:50.800] 显著的区别非常大
[01:51.080 --> 01:55.680] 因为SodWalks本身它并没有一个非常成功的业务
[01:55.680 --> 02:00.000] 它不是像这种互联网公司业务导向的
[02:00.520 --> 02:03.960] 所以大家可能在里面的员工
[02:03.960 --> 02:07.160] 感觉来说是更加追求技术卓越一些
[02:07.840 --> 02:10.400] 大家可能喜欢倒腾一些没用的东西
[02:11.960 --> 02:13.960] 然后国内的就普遍来说
[02:13.960 --> 02:17.840] 大家离职之后去国内互联网公司的话
[02:17.840 --> 02:18.880] 都会水土不服
[02:19.200 --> 02:22.480] 就会觉得说做事方式跟我们想的不太一样
[02:22.480 --> 02:27.480] 其实这也不是SodWalks员工而已了
[02:28.160 --> 02:31.959] 之前我也看过Kent Beck的一个分享
[02:31.959 --> 02:35.880] 他分享他当年去Facebook工作的时候经历
[02:35.880 --> 02:37.799] 他也是感觉到水土不服
[02:37.799 --> 02:38.839] 非常不适
[02:38.839 --> 02:39.799] 感觉很震惊
[02:40.480 --> 02:44.040] 会不会有一种比如说来到互联网公司发现
[02:44.720 --> 02:46.679] 大家做的怎么都这么糙
[02:47.000 --> 02:48.959] 而且主要不是糙
[02:48.959 --> 02:50.679] 主要是他糙而且work
[02:50.680 --> 02:53.880] Kent Beck他当时震惊的地方在于说
[02:53.880 --> 02:55.880] 你们这样不写测试
[02:55.880 --> 02:56.960] 但是还能工作
[02:56.960 --> 02:57.920] 还跑这么快
[02:57.920 --> 02:58.880] 业务还这么成功
[02:58.880 --> 03:00.400] 难道是我错了吗
[03:00.400 --> 03:04.200] 难道是我之前的论知有问题
[03:04.200 --> 03:06.280] 所以是产生这样的自我怀疑
[03:06.280 --> 03:07.800] 据我们的了解
[03:07.800 --> 03:09.960] 国内互联网公司
[03:09.960 --> 03:12.880] 特别是业务团队写测试的
[03:12.880 --> 03:15.480] 可能真的是凤毛麟角
[03:15.480 --> 03:19.000] 然后还有些人觉得测试有害
[03:19.000 --> 03:22.600] 比如说对你的进度之类的是完全有害的
[03:22.600 --> 03:24.960] 是所以Kent Beck也反思了这个事情
[03:24.960 --> 03:27.680] 他后来也不再好像也不是
[03:27.680 --> 03:30.280] 直说说一定是要写测试
[03:30.280 --> 03:34.000] 然后就更加注重一些其他更广的一些原则这种东西
[03:34.000 --> 03:37.040] 而不是对一个具体的一个实践的一个制作
[03:37.040 --> 03:38.160] 我有些好奇
[03:38.160 --> 03:42.800] 因为softwork它本身是一个咨询公司
[03:42.800 --> 03:44.080] 就是在我们看来
[03:44.080 --> 03:46.760] 包括一些技术分享信息会透露出来
[03:46.760 --> 03:52.200] 他们可能去帮某些项目做了某些这种技术的实践的改进
[03:52.200 --> 03:54.679] 对然后他又完全没有业务
[03:54.679 --> 03:59.000] 对但是他其实听起来还是会参与到业务之中的是吗
[03:59.000 --> 04:01.399] 都是客户找来的吧
[04:01.399 --> 04:03.880] 就是跟客户签个咨询合同
[04:03.880 --> 04:06.760] 然后在这个合同期内帮别人打工呗
[04:06.760 --> 04:09.519] 但他自己本身并没有
[04:09.519 --> 04:13.680] 就知道我在的时候并没有直接的什么互联网业务
[04:13.680 --> 04:16.800] 然后有一两个产品
[04:16.800 --> 04:18.600] 但那个产品也是技术型产品
[04:18.600 --> 04:20.000] 像Mingo这样的东西
[04:20.000 --> 04:23.320] 就是给开发人员自己本身用的产品
[04:23.320 --> 04:27.880] 但是这样的话是不是就听起来softwork的员工会
[04:27.880 --> 04:32.040] 比如说在我们的可能的大概意义上你是签了合同
[04:32.040 --> 04:34.600] 然后我们去这个客户那
[04:34.600 --> 04:38.200] 去给他当一段时间的架构师设计一些架构
[04:38.200 --> 04:40.400] 然后去把它落地这种
[04:40.400 --> 04:44.359] 对你其实也可以理解为有一些
[04:44.359 --> 04:46.960] 有一些外包的性质在里面吧
[04:46.960 --> 04:50.359] 所以是一整个小团队过去
[04:50.359 --> 04:51.840] 然后来整体落地吗
[04:51.840 --> 04:57.479] 对就给你个什么交付项目这样都有
[04:57.479 --> 04:59.400] 就把整个这个项目给它做出来
[04:59.400 --> 05:03.200] 我一开始会以为说softwork更多的是
[05:03.200 --> 05:05.440] 比如说我们已经有一个工程师团队了
[05:05.440 --> 05:08.799] 但是我们可能觉得我们的工程师团队不太行
[05:08.800 --> 05:13.080] 然后我们雇一下softwork的同学过来
[05:13.080 --> 05:15.160] 给我们做一个架构的设计
[05:15.160 --> 05:17.440] 然后一起跟着落地是这种
[05:17.440 --> 05:19.680] 也有这样的也有
[05:19.680 --> 05:23.000] 就纯粹的这个以团队提升为目的的
[05:23.000 --> 05:26.880] 那会有互联网公司来找softwork咨询吗
[05:26.880 --> 05:30.200] 我当时比较早了
[05:30.200 --> 05:33.520] 我是2006年到2011年在softworks
[05:33.520 --> 05:38.320] 那个时候感觉互联网公司还不是像现在这么火吧
[05:38.320 --> 05:44.280] 那个时候可能11年web2.0刚刚兴起
[05:44.280 --> 05:46.760] 之前可能工资会少一些是吗
[05:46.760 --> 05:50.040] 对而且感觉也没有必要吧
[05:50.040 --> 05:53.760] 没有觉得必要说要请你来做些什么事情
[05:53.760 --> 05:57.080] 应该我印象中好像是没有
[05:57.080 --> 06:00.840] 我对softwork的印象比较深刻
[06:00.840 --> 06:03.480] 我不知道刚刚老师和小白会不会印象比较深刻
[06:03.480 --> 06:06.680] 因为总会各种搜技术资料
[06:06.680 --> 06:09.160] 然后搜着搜着你会发现
[06:09.160 --> 06:13.680] Martin Fuller在零几年写过类似的文章之类的
[06:13.680 --> 06:19.000] 然后就看一眼时间感觉落后了10年
[06:19.000 --> 06:22.600] 我这边对softworks的第一印象是这样子的
[06:22.600 --> 06:25.880] 然后我在刚毕业的时候要找工作
[06:25.880 --> 06:29.320] 然后我的第一印象我听说的传闻是
[06:29.320 --> 06:34.720] softworks是面试最难的一家公司
[06:34.720 --> 06:36.800] 因为它的面试十分严格
[06:36.800 --> 06:39.080] 然后这是传闻因为我也没有参加过
[06:39.080 --> 06:42.680] 从最开始的面试到最后还会有paraprogramming
[06:42.680 --> 06:45.320] 然后真实的有人坐在你旁边看你怎么变
[06:45.320 --> 06:46.600] 看你的变成习惯
[06:46.600 --> 06:48.600] 然后这是我对softworks的第一印象
[06:48.600 --> 06:51.400] 然后其他我觉得我跟小兵想的是一样的
[06:51.400 --> 06:58.400] 其实就是在于我在看一些书或者是查一些资料的时候
[06:58.400 --> 07:00.480] 例如最近在看其实我说
[07:00.480 --> 07:04.360] 那你的研发团队是不是在变好
[07:04.360 --> 07:07.760] 通过哪些metrics可以衡量
[07:07.760 --> 07:10.680] 其实我收到的好资料是从softworks传出来的
[07:10.680 --> 07:16.680] 甚至很多信息我是直接从softworks的技术雷达上获得的
[07:16.680 --> 07:18.760] 其实这方面的话其实对我个人来说
[07:18.760 --> 07:19.880] 影响也是非常大的
[07:19.880 --> 07:25.120] 同事们都有一个非常好的这种归纳总结的习惯
[07:25.120 --> 07:29.160] 大家都喜欢把自己学到的东西或者业界的东西
[07:29.160 --> 07:31.400] 虽然可能不是自己原创的
[07:31.400 --> 07:34.200] 但是把它归纳总结出来写下来
[07:34.200 --> 07:36.200] 这个习惯是非常好的
[07:36.200 --> 07:37.479] 其实大家也可以学
[07:37.479 --> 07:40.840] softworks的那种技术雷达
[07:40.840 --> 07:42.599] 技术文章 技术博客
[07:42.599 --> 07:48.200] 确实是总结了很多这种感觉很有帮助的事情
[07:48.200 --> 07:52.599] 有听众朋友们看到的话可以主动去搜索一下
[07:52.599 --> 07:56.640] 就是Martin Fowler他其实并没有太多东西是原创的
[07:56.640 --> 07:58.480] 你仔细想一下
[07:58.480 --> 08:03.280] Martin Fowler他的主要的工作就是记录大家的想法
[08:03.280 --> 08:04.880] 他去跟所有人去聊
[08:04.880 --> 08:06.880] 聊完了之后把大家想法给写下来
[08:06.880 --> 08:09.679] 我不太清楚
[08:09.679 --> 08:11.679] 但是我的印象中是
[08:11.679 --> 08:16.640] 比如说我可能对某一个技术名词
[08:16.640 --> 08:20.599] 或者是技术点或者是理念有一些疑惑
[08:20.599 --> 08:21.599] 我就去搜
[08:21.599 --> 08:24.440] 搜着搜着就会发现Martin Fowler的文章
[08:24.440 --> 08:26.599] 然后他说谁谁提出了什么
[08:26.599 --> 08:29.679] 但是这个事情它整体的框架是什么什么
[08:29.680 --> 08:33.480] 然后我就会觉得豁然开朗
[08:33.480 --> 08:36.280] 对啊这不起到一本词典的作用吗
[08:36.280 --> 08:39.480] 我印象最深的就是
[08:39.480 --> 08:43.480] 两篇文章可能对我印象特别深
[08:43.480 --> 08:46.480] 一篇叫Monolith First
[08:46.480 --> 08:55.480] 这个是我之前在之乎采过雪凌凌的经验之后才看到的这篇文章
[08:55.480 --> 08:56.480] 所以就比较后悔
[08:56.480 --> 09:00.480] 然后还有一篇是什么
[09:00.480 --> 09:02.480] Mock is not stop
[09:02.480 --> 09:10.480] 然后就会觉得有一种比较后悔没有提前看到这些文章的感觉吧
[09:10.480 --> 09:13.480] 对这些坑都采过
[09:13.480 --> 09:17.480] 但是其实这里面会有一些疑惑
[09:17.480 --> 09:19.480] 就是可能如果你不采过坑
[09:19.480 --> 09:21.480] 你可能不太清楚他在说什么
[09:21.480 --> 09:23.480] 对就是这样的
[09:23.480 --> 09:29.480] 就是所有老人家都希望说把自己一生的经验总结成几句话
[09:29.480 --> 09:31.480] 然后交给年轻人
[09:31.480 --> 09:33.480] 然后大家都知道年轻人不犯过错误之后
[09:33.480 --> 09:35.480] 是根本听不懂他们在说什么
[09:35.480 --> 09:40.480] 刚才刚才老师有提到一个和Southwalk有关的点
[09:40.480 --> 09:43.480] 我其实还挺有疑问的
[09:43.480 --> 09:49.480] 就是刚刚有提到说面试的时候会有这种Pair Programming
[09:49.480 --> 09:51.480] 对这个是真的吗
[09:51.480 --> 09:53.480] 这个是真的呀
[09:53.480 --> 09:57.480] 确实你要去现场跟面试官结对编程
[09:57.480 --> 10:04.480] 他其实是当时我的题目是先是说你在有一个自己做的
[10:04.480 --> 10:07.480] 这个Coding Interview的题目
[10:07.480 --> 10:09.480] 这个是你做好答案寄过去的
[10:09.480 --> 10:12.480] 然后你这个答案呢
[10:12.480 --> 10:15.480] 它实际上还会它是一个程序嘛
[10:15.480 --> 10:17.480] 然后他你到现场了之后
[10:17.480 --> 10:19.480] 他会给你一些新的需求
[10:19.480 --> 10:21.480] 他其实就模仿你这个实际的项目交付中
[10:21.480 --> 10:23.480] 你的客户在去变更需求的时候
[10:23.480 --> 10:27.480] 他说你要把你现有的这个Program扩展一下
[10:27.480 --> 10:30.480] 然后支持什么什么123什么什么功能
[10:30.480 --> 10:32.480] 然后你要现场去改你的代码
[10:32.480 --> 10:35.480] 然后他就会在旁边去观察你怎么去改的
[10:35.480 --> 10:36.480] 你有没有去写测试
[10:36.480 --> 10:40.480] 有没有去用什么样的方式去修改你现在的代码
[10:40.480 --> 10:45.480] 其实感觉来说的话会比你直接去考算法题考知识点
[10:45.480 --> 10:50.480] 更接近于大家日常在开发中实际应对问题的时候
[10:50.480 --> 10:51.480] 这种场景吧
[10:51.480 --> 10:54.480] 我觉得这种Coding Review的方式还是挺值得大家学习的
[10:54.480 --> 10:58.480] 我记得之前很早之前我面试之后的时候
[10:58.480 --> 11:00.480] 也是有类似的这种方式
[11:00.480 --> 11:02.480] 但是没有后续的Coding Review给了实际需求做
[11:02.480 --> 11:08.480] 但是说实在的现在是面试者的市场
[11:08.480 --> 11:11.480] 就是你给他发一个远程的笔记
[11:11.480 --> 11:13.480] 他做一个花一天时间做个小需求
[11:13.480 --> 11:15.480] 现在说人家阿里都不做
[11:15.480 --> 11:17.480] 人家Google都不做
[11:17.480 --> 11:20.480] 你这个小破公司发个这样的东西谁给你做啊
[11:20.480 --> 11:22.480] 是啊
[11:22.480 --> 11:23.480] 对了
[11:25.480 --> 11:29.480] 但是其实比如说编码习惯呀
[11:29.480 --> 11:31.480] 然后品位呀
[11:31.480 --> 11:32.480] 测试呀
[11:32.480 --> 11:34.480] 就是这些东西
[11:34.480 --> 11:37.480] 就是我理解它是一个动态的过程
[11:37.480 --> 11:40.480] 就是我之前看到就是如果一个人他在意这些
[11:40.480 --> 11:43.480] 他这些方面会自己会持续提升
[11:43.480 --> 11:44.480] 然后不在意的话
[11:44.480 --> 11:46.480] 他可能就永远都是那样
[11:46.480 --> 11:48.480] 而且还觉得无比正确
[11:48.480 --> 11:54.480] 然后这些方向可能在面试的时候都是很难考察到的
[11:54.480 --> 11:56.480] 对
[11:56.480 --> 12:01.480] 所以大家更倾向于考察一些比较容易考察的东西吗
[12:01.480 --> 12:03.480] 比如你聪不聪明之类的
[12:03.480 --> 12:06.480] 对就是更倾向于考察一些更标准化的
[12:06.480 --> 12:08.480] 然后更容易考察的东西
[12:08.480 --> 12:12.480] 这就是现在面试的一个感觉就是一个循环了
[12:12.480 --> 12:13.480] 双向的都是这样
[12:13.480 --> 12:16.480] 然后面试者也在不断的准备那些东西
[12:16.480 --> 12:17.480] 红黑处对吧
[12:17.480 --> 12:19.480] 要么就是react原理
[12:19.480 --> 12:21.480] 要不然就是什么线程进程
[12:21.480 --> 12:22.480] 斜程的什么对比
[12:22.480 --> 12:25.480] 然后背背背背一会儿都能背过吗
[12:25.480 --> 12:27.480] 你想背多深能背多深
[12:27.480 --> 12:29.480] 你甚至能背到操作系统
[12:29.480 --> 12:32.480] 背到操作系统的那个总线都能背到
[12:32.480 --> 12:38.480] 是这样我上周五和一个毕业三年的同学来聊天
[12:38.480 --> 12:40.480] 他在找工作嘛
[12:40.480 --> 12:44.480] 对然后他去面一家大公司的那种营销的组
[12:44.480 --> 12:47.480] 就做营销活动的他们主要业务
[12:47.480 --> 12:52.480] 然后一上来对方就让他写一个红黑数
[12:52.480 --> 12:54.480] 然后他就表示不想面了
[12:54.480 --> 12:56.480] 他觉得对方不尊重人
[12:56.480 --> 13:01.480] 对他觉得这个面试就是就是不是出于考察的目的
[13:01.480 --> 13:04.480] 对而且我觉得那个同学在三年的经验里还算很棒
[13:04.480 --> 13:07.480] 就是各种实践啊理念啊思想啊什么的
[13:07.480 --> 13:14.480] 对然后面完那轮之后他就和对方的hr说我不继续后面的面试了
[13:14.480 --> 13:15.480] 主要还是公司小吧
[13:15.480 --> 13:18.480] 你公司大的话你都能出题别人一样会做
[13:18.480 --> 13:20.480] 我我觉得就是因为那家公司比较大吧
[13:20.480 --> 13:23.480] 所以说他这样出题也能招到他想要的人
[13:23.480 --> 13:26.480] 对啊就是啊Google不是这样的吗
[13:26.480 --> 13:27.480] Google就是这样的
[13:27.480 --> 13:28.480] 小明说这点特别重要
[13:28.480 --> 13:35.480] 就是说如果说的招聘的话就是小中小型公司要和巨型的公司进行招聘竞争都想找到优秀的人
[13:35.480 --> 13:39.480] 如果你个中小型公司也是按照所谓的说Google是这种面试的
[13:39.480 --> 13:41.480] 那我们就模仿他阿里是这种面试的
[13:41.480 --> 13:44.480] 我就模仿他那你永远也是招不到优秀的人了
[13:44.480 --> 13:46.480] 因为你的标准是一样的
[13:46.480 --> 13:49.480] 你要想办法通过一些特殊路径来发现优秀的人才
[13:49.480 --> 13:53.480] 你不能不能摸纯模仿那些大公司的做法
[13:53.480 --> 13:54.480] 尤其是在招聘的时候
[13:54.480 --> 13:57.480] 因为你要找到自己的优势和自己想找的人
[13:57.480 --> 14:01.480] 对我不知道陶老师和刚才老师的情况是什么
[14:01.480 --> 14:04.480] 就是我在的公司严格来说算小型公司
[14:04.480 --> 14:06.480] 还没到中型公司的程度
[14:06.480 --> 14:09.480] 就是不要就先不要聊招聘标准了
[14:09.480 --> 14:12.480] 就是你简历搜集都很难
[14:12.480 --> 14:16.480] 就是你很难看到说这个人比较靠谱
[14:16.480 --> 14:22.480] 对你更不可能说去搞一个很标准化的和大公司对标的面试流程
[14:22.480 --> 14:24.480] 是啊是啊
[14:24.480 --> 14:27.480] 普遍来说都是这样扯淡了这一点
[14:27.480 --> 14:28.480] 我突然想起来了
[14:28.480 --> 14:31.480] 当时知乎的创始人周源
[14:31.480 --> 14:35.480] 他在创始他在那个他在刚开始创始创建知乎的时候
[14:35.480 --> 14:39.480] 他曾经自己亲自写过一个一个帖子
[14:39.480 --> 14:43.480] 一个一个回答说我如何招聘到优秀的员工
[14:43.480 --> 14:44.480] 尤其是优秀的工程师
[14:44.480 --> 14:45.480] 大概是这个意思
[14:45.480 --> 14:47.480] 然后都特别好玩
[14:47.480 --> 14:49.480] 我现在还记得帖子的几个点
[14:49.480 --> 14:50.480] 就是说
[14:50.480 --> 14:53.480] 例如说他说通过正规的招聘渠道
[14:53.480 --> 14:55.480] 你小型公司就是招不到好的人的
[14:55.480 --> 14:59.480] 因为你薪水和各方面可能都没有大公司有优势
[14:59.480 --> 15:00.480] 然后他说到
[15:00.480 --> 15:01.480] 嗯
[15:01.480 --> 15:04.480] 你第一是通过
[15:04.480 --> 15:05.480] 例如我记得他说了几个方式
[15:05.480 --> 15:08.480] 例如说你看他都不知道看过哪些书
[15:08.480 --> 15:10.480] 你觉得这些书是比较好的
[15:10.480 --> 15:13.480] 计算机专业优秀的人可能是应该看过的
[15:13.480 --> 15:15.480] 那你就去看谁看了这本书
[15:15.480 --> 15:17.480] 然后逐一的给他们发邮件
[15:17.480 --> 15:19.480] 然后你再看stack or follow
[15:19.480 --> 15:20.480] 或者某个技术网站
[15:20.480 --> 15:21.480] 然后怎么样
[15:21.480 --> 15:24.480] 你就通过各种的这种渠道去找
[15:24.480 --> 15:26.480] 而不是通过正规的
[15:26.480 --> 15:28.480] 正规的说猎头给我推荐
[15:28.480 --> 15:30.480] 或者是别人给我投简历
[15:30.480 --> 15:32.480] 这样你几乎是招不到好的人的
[15:32.480 --> 15:36.480] 你就是要通过这种可以证明他的方式
[15:36.480 --> 15:38.480] 或者是GitHub这种方式
[15:38.480 --> 15:41.480] 去自己主动去沟通去联系
[15:41.480 --> 15:43.480] 你不要指望通过正常的招聘渠道
[15:43.480 --> 15:44.480] 能找到优秀的人
[15:44.480 --> 15:45.480] 尤其是中小型公司
[15:45.480 --> 15:46.480] 嗯
[15:46.480 --> 15:47.480] 特别赞同
[15:47.480 --> 15:50.480] 其实你中小型公司想像大公司一样的话
[15:50.480 --> 15:54.480] 其实你的投入产出比例是特别不值的
[15:54.480 --> 15:55.480] 对
[15:55.480 --> 15:57.480] 因为你的简历水平啊
[15:57.480 --> 15:58.480] 数量啊
[15:58.480 --> 16:00.480] 其实都是不是一样的
[16:00.480 --> 16:02.480] 这种水平线就很难
[16:02.480 --> 16:04.480] 但是就这个话题
[16:04.480 --> 16:05.480] 我想到一个点
[16:05.480 --> 16:07.480] 刚才老师我不知道你有没有发现
[16:07.480 --> 16:09.480] 就是
[16:09.480 --> 16:13.480] 比如说刚才有提到的通过stack or follow啊
[16:13.480 --> 16:14.480] GitHub啊
[16:14.480 --> 16:16.480] 然后来寻找优秀的程序员
[16:16.480 --> 16:18.480] 就是这个事情在早期特别
[16:18.480 --> 16:19.480] 特别有效
[16:19.480 --> 16:22.480] 但是直到后来有人写了一个爬虫
[16:22.480 --> 16:27.480] 自动给中国区所有的GitHub的程序员发招聘邮件
[16:27.480 --> 16:30.480] 然后我就会收到很多这种
[16:30.480 --> 16:32.480] 我觉得就算垃圾邮件吧
[16:32.480 --> 16:32.480] 对
[16:32.480 --> 16:35.480] 然后可能就不太想回这种GitHub上的这种招聘了
[16:35.480 --> 16:36.480] 是的
[16:36.480 --> 16:38.480] 确实是这样
[16:38.480 --> 16:41.480] 如果发现某个人靠谱的群发绝对是不靠谱
[16:41.480 --> 16:44.480] 就像过年的时候要群发半年短信一样
[16:44.480 --> 16:46.480] 那个就是不靠谱的
[16:46.480 --> 16:48.480] 如果你招聘一个优秀的人
[16:48.480 --> 16:53.480] 大家知道一个优秀的工程师的产出和一个垃圾工程师的产出
[16:53.480 --> 16:54.480] 它的对比
[16:54.480 --> 16:56.480] 它不是什么一比一千一比一万的问题
[16:56.480 --> 16:58.480] 因为垃圾的工程师产出是负数的
[16:58.480 --> 16:59.480] 没有什么对比
[16:59.480 --> 17:03.480] 所以如果你真的在某个渠道发现了一个优秀的工程师
[17:03.480 --> 17:07.480] 你就应该加微信打电话请吃饭
[17:07.480 --> 17:09.480] 请去五星级酒店吃饭
[17:09.480 --> 17:11.480] 然后所有的都要干完了之后
[17:11.480 --> 17:12.480] 然后阐述你的理想
[17:12.480 --> 17:14.480] 阐述我的职位
[17:14.480 --> 17:15.480] 然后你才能把它搞过来
[17:15.480 --> 17:16.480] 嗯
[17:16.480 --> 17:17.480] 嗯
[17:17.480 --> 17:18.480] 对
[17:18.480 --> 17:20.480] 这基本上就是自己才是最好的猎头
[17:20.480 --> 17:21.480] 是的
[17:21.480 --> 17:23.480] 所以我经常说的是
[17:23.480 --> 17:25.480] 我很少会去那个
[17:25.480 --> 17:26.480] 例如说
[17:26.480 --> 17:27.480] 卖卖啊
[17:27.480 --> 17:29.480] 或者这种地方去
[17:29.480 --> 17:31.480] 上边去官方的去
[17:31.480 --> 17:33.480] 以一个什么官方的身份去招人或拉人
[17:33.480 --> 17:34.480] 因为我觉得
[17:34.480 --> 17:35.480] 以我的观点是说
[17:35.480 --> 17:39.480] 那样很难招到我眼里所谓的那种特别优秀的人
[17:39.480 --> 17:41.480] 这是我自己的个人观点
[17:41.480 --> 17:43.480] 但是卖卖可能也有好的渠道
[17:43.480 --> 17:45.480] 但是我更习惯通过一些
[17:45.480 --> 17:46.480] 这个人已经产出的东西
[17:46.480 --> 17:48.480] 而不是看他的简历
[17:48.480 --> 17:49.480] 哪怕是他的blog
[17:49.480 --> 17:51.480] 我觉得都是个好的产出
[17:51.480 --> 17:54.480] 对优秀的人总是可遇而不可求的
[17:54.480 --> 17:55.480] 这个太难了
[17:55.480 --> 17:57.480] 刚才老师和陶老师会比较看中
[17:57.480 --> 17:59.480] 候选人的什么特质呢
[17:59.480 --> 18:00.480] 就是优秀这方面
[18:00.480 --> 18:01.480] 呃
[18:01.480 --> 18:02.480] 我主要会看他
[18:02.480 --> 18:05.480] 如果经常写东西的话
[18:05.480 --> 18:06.480] 啊
[18:05.480 --> 18:06.480] 然后
[18:06.480 --> 18:08.480] 平常善于总结
[18:08.480 --> 18:10.480] 我感觉这样的人
[18:10.480 --> 18:13.480] 应该对自己成长是比较有要求的
[18:13.480 --> 18:18.480] 我不太会去看他具体的
[18:18.480 --> 18:21.480] 对某一项技术站的掌握程度
[18:21.480 --> 18:22.480] 对
[18:22.480 --> 18:24.480] 因为我自己本身也记不住那些东西
[18:24.480 --> 18:26.480] 那问什么JVM调优
[18:26.480 --> 18:27.480] 我自己也搞不定
[18:27.480 --> 18:30.480] 所以我也不会去对别人要这样的要求
[18:30.480 --> 18:31.480] 刚才老师你呢
[18:31.480 --> 18:32.480] 嗯
[18:32.480 --> 18:34.480] 我其实说我自己的观点
[18:34.480 --> 18:38.480] 因为我招聘的还是偏那个业务方面的工程师多一点
[18:38.480 --> 18:40.480] 例如说你真的招聘一个工程师
[18:40.480 --> 18:41.480] 他就是说
[18:41.480 --> 18:43.480] 我在一个大公司研发JVM的那种
[18:43.480 --> 18:44.480] 我也当不了面试
[18:44.480 --> 18:45.480] 因为我衡量不了他的水平
[18:45.480 --> 18:49.480] 所以只限于我招聘的在业务研发部门招聘工程师这个经验
[18:49.480 --> 18:51.480] 其实或者是技术架构的
[18:51.480 --> 18:53.480] 因为现在的技术要过也没有什么
[18:53.480 --> 18:56.480] 我我的观点就是没有没有什么精深的技术吗
[18:56.480 --> 18:58.480] 对一般公司来说开源组件这么成熟了
[18:58.480 --> 18:59.480] 那我招聘的时候
[18:59.480 --> 19:00.480] 我来面试的时候
[19:00.480 --> 19:02.480] 其实上次参加的时候也简单聊过
[19:02.480 --> 19:04.480] 其实就是说
[19:04.480 --> 19:06.480] 我一般就会先让他说
[19:06.480 --> 19:08.480] 你你最熟悉
[19:08.480 --> 19:11.480] 你最熟悉的是哪块技术或者哪个项目
[19:11.480 --> 19:12.480] 那你就去讲就好了
[19:12.480 --> 19:13.480] 他讲的过程中
[19:13.480 --> 19:15.480] 你就能看出来一个点
[19:15.480 --> 19:17.480] 第一点是他讲项目过程中
[19:17.480 --> 19:18.480] 他有没有逻辑
[19:18.480 --> 19:20.480] 有没有逻辑的意思是
[19:20.480 --> 19:21.480] 他在阐述这么一个项目
[19:21.480 --> 19:22.480] 一个问题的时候
[19:22.480 --> 19:25.480] 他是不是从他这个项目的根本原因
[19:25.480 --> 19:26.480] 例如从他的背景目的
[19:26.480 --> 19:27.480] 意义开始阐述
[19:27.480 --> 19:30.480] 然后从这些问题又引导出来了
[19:30.480 --> 19:31.480] 他为什么要做这个系统
[19:31.480 --> 19:33.480] 从这个系统要解决问题
[19:33.480 --> 19:34.480] 从而又引导出来
[19:34.480 --> 19:35.480] 他如何要拆分这些模块
[19:35.480 --> 19:38.480] 而且他知道自己依据了什么原则
[19:38.480 --> 19:39.480] 拆分这些模块
[19:39.480 --> 19:41.480] 然后同时他这个项目做完了
[19:41.480 --> 19:42.480] 他知道说我应该怎么知道
[19:42.480 --> 19:43.480] 自己的系统是好坏的
[19:43.480 --> 19:45.480] 他是不是可原化的
[19:45.480 --> 19:47.480] 然后再往下走
[19:47.480 --> 19:48.480] 然后他说我这个项目做完了
[19:48.480 --> 19:51.480] 我还能关心他的业务产出和业务价值
[19:51.480 --> 19:55.480] 那如果这是我眼里的一个很好的范式
[19:55.480 --> 19:56.480] 这不是每个人都能说出来
[19:56.480 --> 19:59.480] 但是如果一个人他能按照这种方式
[19:59.480 --> 20:01.480] 来阐述自己做过的东西
[20:01.480 --> 20:03.480] 哪怕他阐述的有一些横向
[20:03.480 --> 20:04.480] 或者深度维度不够
[20:04.480 --> 20:06.480] 但只要他具备了这个思路
[20:06.480 --> 20:08.480] 我的第一印象就会特别特别好
[20:08.480 --> 20:09.480] 然后我可能他其他的点
[20:09.480 --> 20:11.480] 我只可能只要稍微问问
[20:11.480 --> 20:12.480] 我就会把他招过来
[20:16.480 --> 20:17.480] 我的这是对对对
[20:17.480 --> 20:20.480] 这是一个如果他这方面阐述的不好
[20:20.480 --> 20:22.480] 他在只说了自己的解决方案
[20:22.480 --> 20:25.480] 那他解决方案肯定会用到了一些技术啊
[20:25.480 --> 20:27.480] 或者一些跟产品的讨论
[20:27.480 --> 20:30.480] 就会稍微的渗入往下问几个问题
[20:30.480 --> 20:32.480] 就是问他在他做过的东西里
[20:32.480 --> 20:35.480] 在他所谓的最熟悉的东西里
[20:35.480 --> 20:38.480] 他对这些东西掌握的是不是足够深入
[20:38.480 --> 20:40.480] 或者是有一定的广度
[20:40.480 --> 20:42.480] 这样就我大概就会这样知道了一个人
[20:42.480 --> 20:43.480] 他的视频是怎么样了
[20:43.480 --> 20:47.480] 我也不会一来了就会问这个什么
[20:47.480 --> 20:49.480] 问一个什么出一个算法题啊
[20:49.480 --> 20:50.480] 或者怎么怎么样
[20:50.480 --> 20:52.480] 我自己的照片风格是这个样子的
[20:52.480 --> 20:55.480] 刚才其实有提到说
[20:56.480 --> 20:59.480] 比如说他自己的项目
[20:59.480 --> 21:02.480] 他的总结沉淀以及说
[21:02.480 --> 21:05.480] 他是怎么去去陈述
[21:05.480 --> 21:08.480] 或者是怎么组织这个对项目的理解的
[21:08.480 --> 21:09.480] 对
[21:09.480 --> 21:13.480] 然后这个事情也和陶老师之前搞的那个
[21:13.480 --> 21:15.480] 12 fallacy 对吧
[21:15.480 --> 21:16.480] 对是有关联的吗
[21:16.480 --> 21:19.480] 因为我感觉刚才大家有提到的这个事情
[21:19.480 --> 21:22.480] 其实好像面试的一些隐含标准
[21:22.480 --> 21:24.480] 其实已经隐含了说
[21:25.480 --> 21:26.480] 我可能会想考察
[21:26.480 --> 21:30.480] 或者是涉及到这个候选人的一些相关的点
[21:30.480 --> 21:31.480] 其实就是那一点
[21:31.480 --> 21:32.480] 就是刚才说的
[21:32.480 --> 21:34.480] 因为每个项目他不可能是完美的
[21:34.480 --> 21:37.480] 他知道自己在过程中踩过了哪些坑
[21:37.480 --> 21:39.480] 也填了哪些坑或者哪些坑
[21:39.480 --> 21:41.480] 他做项目做完了没填上
[21:41.480 --> 21:43.480] 那这些这些所谓的坑
[21:43.480 --> 21:45.480] 或者是认为他之前认为对的
[21:45.480 --> 21:46.480] 后来做完一个东西之后
[21:46.480 --> 21:47.480] 他觉得他是不对了
[21:47.480 --> 21:49.480] 或者产生怀疑了
[21:49.480 --> 21:52.480] 那这就是一个很大的总结和进步
[21:52.480 --> 21:56.480] 例如说这些点可能就是台湾老师所写的
[21:56.480 --> 21:59.480] 那个Tribe Fallacy里边的某一两个点
[21:59.480 --> 22:00.480] 也可能是他自己总结点
[22:00.480 --> 22:02.480] 那这个就特别特别好
[22:02.480 --> 22:03.480] 我认为
[22:04.480 --> 22:07.480] 就我刚刚说的面试的标准内容
[22:07.480 --> 22:09.480] 其实我说的点是
[22:09.480 --> 22:12.480] 是说注重一个人的学习和成长的能力
[22:12.480 --> 22:15.480] 就是他可能是一种更加范的一种能力
[22:15.480 --> 22:18.480] 他不光是局限于他在工作上
[22:18.480 --> 22:19.480] 他可以在
[22:19.480 --> 22:22.480] 再比如说学习一下乐器上的话
[22:22.480 --> 22:23.480] 也可以用得上
[22:23.480 --> 22:25.480] 这是一种更加通用的能力
[22:25.480 --> 22:28.480] 然后刚才老师提到的
[22:28.480 --> 22:29.480] 可能更注重的是说
[22:29.480 --> 22:31.480] 他作为一个工程师
[22:31.480 --> 22:33.480] 工程师的本质来说是解决问题
[22:33.480 --> 22:35.480] 他解决问题是不是有套路
[22:35.480 --> 22:37.480] 那这个套路他是不是熟练
[22:37.480 --> 22:38.480] 他是不是知道说应该有
[22:38.480 --> 22:41.480] 这么样一个一个做事的方式去解决问题
[22:41.480 --> 22:43.480] 所以他是注重来说
[22:43.480 --> 22:45.480] 他的工程解题能力
[22:45.480 --> 22:46.480] 就是工程解题
[22:46.480 --> 22:51.480] 而不是说具体的某一项工程上的技术的熟练程度
[22:51.480 --> 22:53.480] 这个其实也是跟我们这个行业
[22:53.480 --> 22:57.480] 它更新换代特别快有关系
[22:57.480 --> 23:00.480] 你没办法把自己的这个职业
[23:00.480 --> 23:02.480] 笃定在某一项具体的技术
[23:02.480 --> 23:03.480] 某一项具体的API
[23:03.480 --> 23:04.480] 你是不是熟悉上了
[23:04.480 --> 23:06.480] 所以你需要更多的
[23:06.480 --> 23:11.480] 让你的技能能够随着这个世界潮流的大潮
[23:11.480 --> 23:12.480] 而不断的迁徙
[23:12.480 --> 23:15.480] 但更古不变的就是你的学习能力
[23:15.480 --> 23:17.480] 和你的工程解题能力
[23:17.480 --> 23:21.480] 所以大家会找一些这样的一些东西的去考察大家
[23:21.480 --> 23:23.480] 但这个职业上我觉得是
[23:23.480 --> 23:25.480] 对大多数人来说是超纲的
[23:25.480 --> 23:27.480] 大部分人来说的话
[23:27.480 --> 23:30.480] 还是比较满足于说我就是
[23:30.480 --> 23:32.480] 对某一个轮子特别熟悉
[23:32.480 --> 23:36.480] 我对某一个某一种代码写的特别多
[23:41.480 --> 23:42.480] 不好意思
[23:42.480 --> 23:44.480] 我小编到时候你一定要剪掉
[23:44.480 --> 23:47.480] 一定要把刚强老师两个剪掉好不好
[23:47.480 --> 23:50.480] 我们可以之后
[23:50.480 --> 23:52.480] 我支持一下一定要剪掉
[23:52.480 --> 23:54.480] 现在之后的录音尽量不说
[23:54.480 --> 23:55.480] 不然这个工作量比较大
[23:55.480 --> 23:57.480] 前面的我尽量剪掉它
[23:59.480 --> 24:00.480] 对对对
[24:00.480 --> 24:02.480] 我觉得我叫陶文老师
[24:02.480 --> 24:03.480] 这个是很正常的
[24:03.480 --> 24:04.480] 因为真的教了好东西
[24:04.480 --> 24:07.480] 我觉得陶文老师就直接叫我名字就好
[24:07.480 --> 24:08.480] 真的直接叫名字
[24:08.480 --> 24:09.480] 不要叫老师了
[24:09.480 --> 24:12.480] 大家都把老师的后者给去掉
[24:12.480 --> 24:14.480] 比较好一点就平短成代
[24:14.480 --> 24:15.480] 重复就好了
[24:16.480 --> 24:17.480] 那也可以
[24:17.480 --> 24:18.480] 那也可以
[24:18.480 --> 24:19.480] 对对对
[24:19.480 --> 24:20.480] 反正是千万不要那么叫我
[24:20.480 --> 24:21.480] 我真的很害怕
[24:22.480 --> 24:24.480] 那tell fantasy这个事情
[24:24.480 --> 24:27.480] 他我在思考这个问题
[24:27.480 --> 24:29.480] 就是为什么我会去写这样的一个事情
[24:29.480 --> 24:31.480] 其实我今天查了一下
[24:31.480 --> 24:33.480] 这个词
[24:33.480 --> 24:35.480] 他好像是说
[24:35.480 --> 24:40.480] 他是根据某一项原则
[24:40.480 --> 24:42.480] 然后你去根据这个原则
[24:42.480 --> 24:44.480] 然后去做了一些推理
[24:44.480 --> 24:45.480] 然后把它应用到了一些
[24:45.480 --> 24:48.480] 可能错误的地方
[24:48.480 --> 24:50.480] 然后得出了一些
[24:50.480 --> 24:52.480] 可能听起来有道理
[24:52.480 --> 24:53.480] 但实际上是谬误的结论
[24:54.480 --> 24:56.480] 其实我就想到了里面其中
[24:56.480 --> 24:57.480] tell fantasy其中一条
[24:57.480 --> 25:01.480] 就是说这个也是刚强贡献的那一条
[25:01.480 --> 25:04.480] 叫做你的simple design
[25:04.480 --> 25:06.480] simple design是说
[25:06.480 --> 25:08.480] 你一个微服务就只做CRUD
[25:08.480 --> 25:09.480] 这么四件事情
[25:09.480 --> 25:11.480] 然后你就是一个simple design
[25:11.480 --> 25:15.480] 这个其实就很好地说明了
[25:15.480 --> 25:18.480] 为什么会有tell fantasy这个事情
[25:18.480 --> 25:19.480] 就是说大家很多时候
[25:19.480 --> 25:22.480] 总会去总结出一些原则
[25:22.480 --> 25:24.480] 然后设计模式
[25:24.480 --> 25:25.480] 传输给大家
[25:25.480 --> 25:26.480] 然后在这个传递的过程中
[25:26.480 --> 25:28.480] 他信息就是有损的
[25:28.480 --> 25:32.480] 他可能很精练地概括出了一个东西
[25:32.480 --> 25:33.480] 比如说simple design
[25:33.480 --> 25:36.480] 或者single responsibility principle
[25:36.480 --> 25:38.480] 然后这几个词
[25:38.480 --> 25:40.480] 他可能只是一个标题
[25:40.480 --> 25:41.480] 然后这个标题后面
[25:41.480 --> 25:43.480] 应该有一大段内容解释这个标题
[25:43.480 --> 25:46.480] 但大家在这个信息传播爆炸的年代
[25:46.480 --> 25:48.480] 就只看标题不看内容了
[25:48.480 --> 25:50.480] 然后看了标题之后
[25:50.480 --> 25:51.480] 就开始文文生意
[25:51.480 --> 25:53.480] 然后就解读出自己要解读的事情
[25:53.480 --> 25:56.480] 这就会导致很多错误的reasoning
[25:56.480 --> 25:59.480] 然后把它应用到了
[25:59.480 --> 26:03.480] 可能跟作者想象的完全不同的领域
[26:03.480 --> 26:06.480] 然后得出了非常谬误的结论
[26:06.480 --> 26:10.480] 这个就跟面试的关系来说
[26:10.480 --> 26:12.480] 其实也就会体现在
[26:12.480 --> 26:15.480] 大家会不会去反思
[26:15.480 --> 26:16.480] 就是说我们可能一开始
[26:16.480 --> 26:18.480] 都会得出一些谬误的结论
[26:18.480 --> 26:19.480] 但没有关系
[26:19.480 --> 26:22.480] 其实你只要能够反思
[26:22.480 --> 26:25.480] 你总是会在后面
[26:25.480 --> 26:27.480] 你会找到正确的答案
[26:27.480 --> 26:29.480] 就怕是说不反思
[26:29.480 --> 26:31.480] 就觉得说这是对的
[26:31.480 --> 26:33.480] 然后就找着抄就好了
[26:33.480 --> 26:36.480] 我觉得这一点特别重要
[26:36.480 --> 26:37.480] 因为前段时间
[26:37.480 --> 26:39.480] 我看了一篇文章
[26:39.480 --> 26:40.480] 有个这样的观点
[26:40.480 --> 26:42.480] 我简单的说一下
[26:42.480 --> 26:43.480] 其实他上面写到了
[26:43.480 --> 26:46.480] 他那个人写了篇文章说
[26:46.480 --> 26:48.480] 他在一个大公司里工作
[26:48.480 --> 26:50.480] 然后是一个那边特别好的架构师
[26:50.480 --> 26:53.480] 然后里边的领导或者是下边的
[26:53.480 --> 26:55.480] 一些同学说
[26:55.480 --> 26:58.480] 我们开一个架构赏析课程吧
[26:58.480 --> 27:01.480] 就是业界经典架构赏析
[27:01.480 --> 27:04.480] 学学那些经典的架构是怎么设计的
[27:04.480 --> 27:06.480] 然后我们来学习一下
[27:06.480 --> 27:08.480] 然后那个人写了篇文章
[27:08.480 --> 27:10.480] 来特意的说了一下这个事情
[27:10.480 --> 27:12.480] 然后他是这么来说的
[27:12.480 --> 27:14.480] 我现在还有那个原文
[27:14.480 --> 27:15.480] 我简单的读一下
[27:15.480 --> 27:16.480] 这不是我的观点
[27:16.480 --> 27:17.480] 我借用了别人的观点
[27:17.480 --> 27:18.480] 我读一下
[27:18.480 --> 27:19.480] 他是这么说的
[27:19.480 --> 27:23.480] 就是一个业界经典架构赏析的课程
[27:23.480 --> 27:25.480] 就是对架构这个工作的误判
[27:25.480 --> 27:28.480] 我们可以找到架构作死大全
[27:28.480 --> 27:30.480] 但是这个会得罪人
[27:30.480 --> 27:32.480] 至少这个架构没有死绝
[27:32.480 --> 27:34.480] 就会有文人雅士出来咬你
[27:34.480 --> 27:37.480] 因为明显的错误是可以看到的
[27:37.480 --> 27:40.480] 所谓的赏析经典架构
[27:40.480 --> 27:43.480] 就是认为架构只是处理一个特征
[27:43.480 --> 27:45.480] 而不是处理所有细节的全集
[27:45.480 --> 27:49.480] 会让听众听这样一个主题
[27:49.480 --> 27:51.480] 让听众去听这样一个主题
[27:51.480 --> 27:52.480] 会感到误解
[27:52.480 --> 27:54.480] 我们有办法谈
[27:54.480 --> 27:56.480] 每个具体的场景下
[27:56.480 --> 27:57.480] 具体的情形下
[27:57.480 --> 27:59.480] 某个特定的架构
[27:59.480 --> 28:01.480] 我是怎么做的选择
[28:01.480 --> 28:02.480] 但是我们赏析不了
[28:02.480 --> 28:04.480] 所谓的通用的好的架构
[28:04.480 --> 28:05.480] 对
[28:06.480 --> 28:08.480] 我这读的原话差不多是
[28:09.480 --> 28:10.480] 深感赞同
[28:10.480 --> 28:11.480] 就是这样
[28:14.480 --> 28:15.480] 对
[28:15.480 --> 28:17.480] 然后就是这个其实和
[28:19.480 --> 28:21.480] 我现在要怎么称呼呢
[28:21.480 --> 28:22.480] 和陶文
[28:23.480 --> 28:25.480] 刚才提到这个点
[28:25.480 --> 28:27.480] 我刚突然想到一个
[28:27.480 --> 28:28.480] 例子
[28:28.480 --> 28:30.480] 我不知道是不是正确
[28:30.480 --> 28:31.480] 我之前
[28:32.480 --> 28:34.480] 感觉被对方反驳的无以蔽加
[28:34.480 --> 28:36.480] 是一个什么事情呢
[28:36.480 --> 28:38.480] 就是之前
[28:38.480 --> 28:39.480] 在微服务领域
[28:39.480 --> 28:41.480] 其实比如说比较出名的公司
[28:41.480 --> 28:42.480] Uber
[28:42.480 --> 28:43.480] 他们做的比较早
[28:44.480 --> 28:45.480] 对
[28:44.480 --> 28:45.480] 然后
[28:45.480 --> 28:48.480] 他们之前会有一些技术先讲
[28:48.480 --> 28:50.480] 然后是他们的中台部门来讲
[28:50.480 --> 28:51.480] 他们的这种
[28:51.480 --> 28:52.480] 微服务的基础设施
[28:52.480 --> 28:55.480] 然后说他们支撑了几千个微服务
[28:56.480 --> 28:56.480] 对
[28:56.480 --> 28:59.480] 然后有一天就有一个同学和我说
[28:59.480 --> 29:01.480] 你看人家Uber这么设计的
[29:01.480 --> 29:03.480] 就是把微服务设计成几千个
[29:03.480 --> 29:05.480] 所以我们这边的微服务设计
[29:05.480 --> 29:08.480] 也要借可能拆得小一些细一些
[29:09.480 --> 29:10.480] 对
[29:09.480 --> 29:13.480] 然后我当时可能就就愣住了
[29:13.480 --> 29:15.480] 因为因为因为其实比如说像
[29:15.480 --> 29:17.480] 这种基础平台部门
[29:17.480 --> 29:19.480] 他们提供的微服务组件
[29:19.480 --> 29:20.480] 对他们来说
[29:19.480 --> 29:21.480] 他们可能会有性能
[29:21.480 --> 29:24.480] 可维护相可维护性上的反应
[29:24.480 --> 29:25.480] 所以说他们又举例子
[29:25.480 --> 29:27.480] 他们支撑了公司多少个微服务
[29:28.480 --> 29:28.480] 对
[29:28.480 --> 29:31.480] 但是这个时候就有业务部门看到了
[29:31.480 --> 29:34.480] 我们的业务就要拆得又小又细
[29:35.480 --> 29:37.480] 一下搞上他十几个
[29:38.480 --> 29:39.480] 几十个
[29:39.480 --> 29:40.480] 然后几百个
[29:40.480 --> 29:43.480] 这样逐渐的我们也可以有几千个微服务
[29:44.480 --> 29:44.480] 对
[29:44.480 --> 29:49.480] 然后我觉得这个就是刚才陶文提到
[29:49.480 --> 29:50.480] 一个很典型的就是
[29:51.480 --> 29:54.480] 很多这种上下文的隐藏
[29:54.480 --> 29:58.480] 会导致你对这个信息的理解会有误判
[29:58.480 --> 29:58.480] 对
[29:58.480 --> 30:00.480] 对方可能是在说我的
[30:01.480 --> 30:03.480] 这个基础平台做的怎么怎么好
[30:03.480 --> 30:04.480] 对
[30:04.480 --> 30:05.480] 然后
[30:06.480 --> 30:08.480] 但是一个做业务同学看到
[30:08.480 --> 30:09.480] 他可能重点是
[30:10.480 --> 30:13.480] 我这个微服务我要尽可能做的怎么怎么怎么想
[30:15.480 --> 30:19.480] 你这个例子其实在Telfer Files里面专门有一条对应的
[30:20.480 --> 30:20.480] 是的
[30:20.480 --> 30:24.480] 我直接能反映起来
[30:26.480 --> 30:30.480] 就是你的技术成功是以你的业务成功为证明的
[30:30.480 --> 30:32.480] 就是说你看见某家公司上市了
[30:32.480 --> 30:34.480] 或者他的企业市值特别高
[30:34.480 --> 30:39.480] 然后你就会把他的这个业务成功直接联系到他的某项技术选择上
[30:39.480 --> 30:42.480] 比如说你拆微服务拆得特别细
[30:43.480 --> 30:43.480] 对
[30:43.480 --> 30:46.480] 然后这个东西它的为什么是一个Fallacy
[30:46.480 --> 30:47.480] 它是在于说
[30:47.480 --> 30:48.480] 它混淆了两个概念
[30:48.480 --> 30:50.480] 一个概念叫做Correlation
[30:50.480 --> 30:52.480] 一种概念叫做Causality
[30:52.480 --> 30:53.480] 对吧
[30:53.480 --> 30:54.480] 你看见两个事情同时出现
[30:54.480 --> 30:58.480] 但未必代表它两个之间有直接的因果关系
[30:59.480 --> 31:00.480] 这个没有没有
[31:00.480 --> 31:02.480] 只能说两个事情同时出现了
[31:02.480 --> 31:03.480] 对吧
[31:03.480 --> 31:05.480] 但并不能说明什么实际的问题
[31:05.480 --> 31:06.480] 你不能说明说
[31:06.480 --> 31:09.480] 他是因为他做了微服务拆分拆那么细
[31:09.480 --> 31:11.480] 所以导致他业务上那么成功
[31:13.480 --> 31:13.480] 对
[31:13.480 --> 31:15.480] 其实你因为Google这么做了
[31:15.480 --> 31:16.480] Uber这么做了
[31:16.480 --> 31:18.480] 这些有名的公司这么做了
[31:18.480 --> 31:20.480] 那我们就要模仿他
[31:21.480 --> 31:24.480] 那这个大家一般在讨论问题的时候
[31:24.480 --> 31:25.480] 是经常这么说的
[31:25.480 --> 31:29.480] 那这个这个因果逻辑是可能是不存在的
[31:30.480 --> 31:32.480] 反正是我觉得是证明不了的
[31:32.480 --> 31:33.480] 然后小兵说的那点
[31:33.480 --> 31:34.480] 我觉得也特别重要
[31:34.480 --> 31:37.480] 就是我们去听别人看某某个公司发的一篇文章
[31:37.480 --> 31:39.480] 或者是分享出来一个talk
[31:39.480 --> 31:41.480] 那他的时间是很短的
[31:41.480 --> 31:43.480] 或者他站在的角度也不一样的
[31:43.480 --> 31:45.480] 因为他可能只是为了打广告
[31:45.480 --> 31:46.480] 他也可能是为了招人
[31:46.480 --> 31:48.480] 他可能真实的分享技术
[31:48.480 --> 31:49.480] 那他可能是基础架构
[31:49.480 --> 31:50.480] 他可能是业务部门的
[31:50.480 --> 31:53.480] 每个人所这个这个background我们是不清楚的
[31:53.480 --> 31:54.480] 他只说了一个数字
[31:54.480 --> 31:56.480] 只说了一个我们是这么干的
[31:56.480 --> 31:57.480] 我们支持了多少
[31:57.480 --> 31:59.480] 所以我们也要这样干
[31:59.480 --> 32:01.480] 那这个逻辑也是不成立的
[32:01.480 --> 32:03.480] 其实就像刚才说到的一个架构
[32:03.480 --> 32:05.480] 架构它是要考虑它的
[32:05.480 --> 32:07.480] 它是处理所有的细节的
[32:07.480 --> 32:10.480] 它不是有所谓的某公司说的做法和某个原则
[32:10.480 --> 32:12.480] 我们看到之后我们就可以那么做的
[32:12.480 --> 32:13.480] 同意
[32:13.480 --> 32:14.480] 对
[32:14.480 --> 32:18.480] 我觉得刚才那个例子就是这两个点都反映出来了
[32:18.480 --> 32:23.480] 就是一个是你会觉得对方这么做是OK的
[32:23.480 --> 32:24.480] 所以我们应该这么做
[32:24.480 --> 32:27.480] 然后也是技术成功导致了这种业务成功
[32:27.480 --> 32:29.480] 然后第二个点是
[32:29.480 --> 32:30.480] 唉
[32:30.480 --> 32:33.480] 就是这个感觉信息的传达真的很重要
[32:33.480 --> 32:37.480] 就是有的时候你确实不知道对方隐藏了信息
[32:37.480 --> 32:40.480] 就会得出一些错误的结论
[32:40.480 --> 32:45.480] 然后也能映射到他提到了这个点
[32:45.480 --> 32:48.480] 我记得信息传达这块那个八叉说
[32:48.480 --> 32:51.480] 就是Southworks的那个CTO对吧
[32:51.480 --> 32:52.480] 陶文老师
[32:52.480 --> 32:53.480] 对
[32:53.480 --> 32:55.480] 他曾经聊过这个话题
[32:55.480 --> 32:57.480] 他说我记得他最后总结的结论
[32:57.480 --> 32:58.480] 我记不清楚
[32:58.480 --> 33:00.480] 他说信息传达最好的方式不是你在那讲
[33:00.480 --> 33:01.480] 也不是做分享
[33:01.480 --> 33:02.480] 也不是开个课
[33:02.480 --> 33:05.480] 那最好的方式其实就是这种
[33:05.480 --> 33:06.480] Pair Programming
[33:06.480 --> 33:07.480] 大家一块写的
[33:07.480 --> 33:08.480] 如果最后干过起来
[33:08.480 --> 33:10.480] Pair Programming也不好的话
[33:10.480 --> 33:12.480] 最后的方式就是和大家一起喝酒
[33:12.480 --> 33:18.480] 我当时大概是这个结论
[33:18.480 --> 33:19.480] 我记不清了
[33:19.480 --> 33:21.480] 但是它是个特别特别难的事情
[33:21.480 --> 33:23.480] 是特别特别难
[33:23.480 --> 33:25.480] 我前面也提到过
[33:25.480 --> 33:28.480] 就是行业里面老人总是希望说
[33:28.480 --> 33:30.480] 把他自己的经验给沉淀下来
[33:30.480 --> 33:33.480] 然后能够让年轻人少犯点错误
[33:33.480 --> 33:36.480] 但会发现说他们沉淀出来的一些东西
[33:36.480 --> 33:38.480] 往往会变成大家盲目去引用
[33:38.480 --> 33:41.480] 盲目去效仿的一个来源
[33:41.480 --> 33:46.480] 然后这种效仿可能会导致更大的错误
[33:46.480 --> 33:48.480] 我有一个好奇的点
[33:48.480 --> 33:52.480] 就是这个12Fallacy
[33:52.480 --> 33:55.480] 对就是这个它的副标题是
[33:55.480 --> 33:59.480] 打造杰出软件团队开发的12条建议
[33:59.480 --> 34:02.480] 对但是其实下面的那12条
[34:02.480 --> 34:06.480] 每一条都是想和你说你不要这么做
[34:06.480 --> 34:09.480] 然后当时这个副标题的
[34:09.480 --> 34:11.480] 为什么会选择这个副标题呢
[34:11.480 --> 34:15.480] 其实就在于说你说这些fallacy
[34:15.480 --> 34:19.480] 是说大家有心有意去使坏吗
[34:19.480 --> 34:22.480] 肯定是没有任何人去有意去这么做的
[34:22.480 --> 34:24.480] 我觉得很多人的出发点
[34:24.480 --> 34:25.480] 引渡这些东西的出发点
[34:25.480 --> 34:28.480] 都是说为了自己的公司好
[34:28.480 --> 34:29.480] 或者为了自己的业务好
[34:29.480 --> 34:30.480] 或者为了自己好
[34:30.480 --> 34:32.480] 然后他从某本书上
[34:32.480 --> 34:34.480] 然后学到什么东西
[34:34.480 --> 34:35.480] 然后去应用起来
[34:35.480 --> 34:38.480] 感觉起来的话就是好心办坏事
[34:38.480 --> 34:40.480] 他可能他的出发点可能就是为了打造
[34:40.480 --> 34:42.480] 真的是为了打造杰出的软件团队
[34:42.480 --> 34:44.480] 然后他去抄了一些东西
[34:44.480 --> 34:45.480] 然后没有抄对
[34:45.480 --> 34:47.480] 然后就使得说引入了一个
[34:47.480 --> 34:49.480] 更加混乱的结果
[34:50.480 --> 34:53.480] OK就是其实这12条
[34:53.480 --> 34:57.480] 都是那种乍一看出发点也是对的
[34:57.480 --> 34:58.480] 好像说的问题也不大
[34:58.480 --> 35:02.480] 但是其实是可能他不存在一些因果关系
[35:02.480 --> 35:05.480] 或者是其实他用了一些错误的方式
[35:07.480 --> 35:09.480] 对确实这样
[35:09.480 --> 35:12.480] 对我不知道会不会有同学说
[35:13.480 --> 35:17.480] 比如说我是一个工作半年的毕业生
[35:17.480 --> 35:20.480] 我首先我可能对Falafel这个词不太熟
[35:20.480 --> 35:22.480] 然后大家都在推荐这个
[35:22.480 --> 35:25.480] 我一看打造软件杰出软件
[35:25.480 --> 35:27.480] 开发团队的12条建议
[35:27.480 --> 35:29.480] 然后我就说的好有道理
[35:29.480 --> 35:30.480] 深得我心
[35:30.480 --> 35:31.480] 然后可以照着做
[35:31.480 --> 35:33.480] 不排除了这种可能性
[35:33.480 --> 35:34.480] 对难怪难怪这个
[35:34.480 --> 35:36.480] 其实我发出来之后阅读量
[35:36.480 --> 35:37.480] 其实并不是很高
[35:37.480 --> 35:38.480] 因为可能大家真的认为说
[35:38.480 --> 35:40.480] 我是在给大家观其糖
[35:40.480 --> 35:43.480] 去讲一些guidelines best practice
[35:43.480 --> 35:46.480] 所以我也在考虑换一种方式来去讲这些东西
[35:46.480 --> 35:48.480] 其实如果说真的没有一定经验
[35:48.480 --> 35:50.480] 你把这12条看了
[35:50.480 --> 35:52.480] 他可能认为绝大部分是对的
[35:52.480 --> 35:54.480] 他会有一两条来问你
[35:54.480 --> 35:56.480] 这个我认为是不对的
[35:56.480 --> 35:58.480] 那你为什么他问你把它写出来
[35:58.480 --> 35:59.480] 认为他是对的
[35:59.480 --> 36:01.480] 他可能还会问这样的问题
[36:01.480 --> 36:03.480] 其实我写下来感觉
[36:03.480 --> 36:06.480] 感觉更多的是对现状的一种失望
[36:06.480 --> 36:09.480] 其实我也有一个点就是在于
[36:09.480 --> 36:10.480] 就是这些点
[36:10.480 --> 36:14.480] 他是不是我当我刚才用到了对不对这个词
[36:14.480 --> 36:15.480] 其实我我我我
[36:15.480 --> 36:17.480] 我觉得我表述的不精准
[36:17.480 --> 36:23.480] 其实我我说说这12点写出来也有可能有几条是我帮忙贡献的
[36:23.480 --> 36:28.480] 但是我有时候我会想他不一定是不对的
[36:28.480 --> 36:31.480] 或者对或对用这个东西来评价这12条
[36:31.480 --> 36:33.480] 而是说如果你这么做了
[36:33.480 --> 36:35.480] 那也有也有人踩过这个坑
[36:35.480 --> 36:37.480] 知道他可能是有些问题的
[36:37.480 --> 36:39.480] 那我要仔细来想一想
[36:39.480 --> 36:40.480] 我这么做
[36:40.480 --> 36:42.480] 他到底是用来解决什么问题的
[36:42.480 --> 36:44.480] 我这么做是真的能解决这个问题吗
[36:44.480 --> 36:47.480] 我觉得这是我们看到看到这些这12条之后
[36:47.480 --> 36:49.480] 我们要停下来想一想
[36:49.480 --> 36:50.480] 这是我理解
[36:50.480 --> 36:52.480] 我理解的他的最大的作用
[36:52.480 --> 36:54.480] 而不是出来这么做就是不对的
[36:54.480 --> 36:55.480] 这是我的观点
[36:55.480 --> 36:58.480] 对他其实也未必是完全绝对不对的
[36:58.480 --> 37:01.480] 而是说他可能会有你意想不到的副作用
[37:01.480 --> 37:06.480] 然后这就是所谓的咨询师总是会用这样的口谈口头禅
[37:06.480 --> 37:07.480] 说你的defense
[37:07.480 --> 37:09.480] 你可能总是取决于上下文
[37:09.480 --> 37:14.480] 总是取决于某种具体的情况下的判断
[37:14.480 --> 37:18.480] 然后这就会导致说一个很大的一个沮丧的地方在于说
[37:18.480 --> 37:20.480] 这个老人们总想传递经验
[37:20.480 --> 37:22.480] 然后他们传递经验方式有两种
[37:22.480 --> 37:27.480] 一种的话就是他们把他的经验做成完全可复制的模板
[37:27.480 --> 37:28.480] 这种模板就会两种方式
[37:28.480 --> 37:33.480] 一种方式是说我把它变成一个软件工程的过程方法
[37:33.480 --> 37:35.480] 你可能每天早上起床干什么事情
[37:35.480 --> 37:36.480] 中午要干什么事情
[37:36.480 --> 37:37.480] 晚上干什么事情
[37:37.480 --> 37:40.480] 一个需求来先做什么再做什么再做什么
[37:40.480 --> 37:42.480] 他会给你事务具体的规划好
[37:42.480 --> 37:46.480] 然后他也有可能会说是一个像Ruby on Rails上的包办
[37:46.480 --> 37:49.480] 包办一切从生到死的一个开发框架
[37:49.480 --> 37:54.480] 他们可能会用这种方式来去固化沉淀他们的知识
[37:54.480 --> 37:57.480] 然后过一段时间之后就发现说这个不work
[37:57.480 --> 38:00.480] 你不管什么软件工程方法都是
[38:00.480 --> 38:03.480] 严格照抄肯定是有问题的
[38:03.480 --> 38:07.480] 所有的这种Magical的All-in-one的框架最后也是不work的
[38:07.480 --> 38:09.480] 然后他们就会推而求其次
[38:09.480 --> 38:13.480] 然后去总结一些放自私还要接准的原则
[38:13.480 --> 38:17.480] 比如说Single Responsibility Principle
[38:17.480 --> 38:20.480] 总结出这样的原则没有问题
[38:20.480 --> 38:21.480] 确实是对的
[38:21.480 --> 38:22.480] 怎么样都对
[38:22.480 --> 38:24.480] 但它问题在于说它没有用处
[38:24.480 --> 38:27.480] 因为所有这种原则的话需要人的判断
[38:27.480 --> 38:29.480] 需要人在当时当下的一个判断
[38:29.480 --> 38:32.480] 然后他如果盲目的去应用的话
[38:32.480 --> 38:34.480] 就会产生他意想不到的副作用
[38:34.480 --> 38:37.480] 然后你就会发现说你不管你的工具再好
[38:37.480 --> 38:38.480] 你的原则再好
[38:38.480 --> 38:41.480] 他最后都是靠人
[38:41.480 --> 38:43.480] 最后都回到一个根本的点
[38:43.480 --> 38:44.480] 你要有靠谱的人
[38:44.480 --> 38:45.480] 高素质的人优秀的人
[38:45.480 --> 38:47.480] 然后大家都知道这个东西是非常稀缺的
[38:47.480 --> 38:48.480] 造人是很困难的
[38:48.480 --> 38:50.480] 可遇而不可求的
[38:50.480 --> 38:53.480] 然后就回到了这个故事的原点了
[38:53.480 --> 38:55.480] 就发现说这个
[38:55.480 --> 38:58.480] 似乎没有什么事情是可以做的
[38:58.480 --> 38:59.480] 你做多了也是错
[38:59.480 --> 39:02.480] 做少了也是错
[39:02.480 --> 39:05.480] 所以我就写了这个12 Fallacies
[39:05.480 --> 39:07.480] 也是对现状的一个失望吧
[39:07.480 --> 39:11.480] 就是大家以为总结出了很多道理交给别人
[39:11.480 --> 39:15.480] 但实际上大家用的时候就会用差了
[39:20.480 --> 39:24.480] 但是如果说作为一个像我这样的
[39:24.480 --> 39:26.480] 就是没有接触过大型项目的人的话
[39:26.480 --> 39:29.480] 一些前辈总结了一些东西
[39:29.480 --> 39:32.480] 哪怕他是有些片面的
[39:32.480 --> 39:36.480] 但是他至少是给你提供了一个试措的方向
[39:36.480 --> 39:39.480] 那你这样的话总比自己去
[39:39.480 --> 39:43.480] 闭门造车的话要走出来的快一点
[39:43.480 --> 39:48.480] 就是你使用了他总结的这个方法
[39:48.480 --> 39:49.480] 然后发现了问题
[39:49.480 --> 39:51.480] 然后再自己去纠正的话
[39:51.480 --> 39:56.480] 应该是要比自己去探索一条道路要快一些的
[39:56.480 --> 39:59.480] 我是这么感觉的
[39:59.480 --> 40:01.480] 包括我最近的话
[40:01.480 --> 40:04.480] 其实也是在接触一些架构方面的东西
[40:04.480 --> 40:08.480] 因为我最一开始的编码的话
[40:08.480 --> 40:10.480] 是没有什么逻辑性的
[40:10.480 --> 40:13.480] 就是按照业务的推进
[40:13.480 --> 40:14.480] 然后往下编
[40:14.480 --> 40:17.480] 然后可能到了一定程度之后
[40:17.480 --> 40:18.480] 它就会有瓶颈了
[40:18.480 --> 40:21.480] 整个的一个系统就会出现瓶颈
[40:21.480 --> 40:25.480] 然后这个时候我会再回过头来
[40:25.480 --> 40:28.480] 去考虑学习一些架构方面的一些知识
[40:28.480 --> 40:32.480] 但是如果说是真的要求我自己去
[40:32.480 --> 40:35.480] 根据项目去总结出来这些东西的话
[40:35.480 --> 40:39.480] 我感觉他所要消耗的时间应该是要远比
[40:39.480 --> 40:44.480] 我去看一些现有的架构方面的知识
[40:44.480 --> 40:48.480] 然后再根据现在的现状去总结
[40:48.480 --> 40:53.480] 就是转换成我自己需要遵循的一些东西的话
[40:53.480 --> 40:57.480] 这样应该是要比我自己去摸索要快一些
[40:59.480 --> 41:01.480] 对我觉得你刚刚提到的说
[41:01.480 --> 41:02.480] 你遇到了一些瓶颈
[41:02.480 --> 41:03.480] 遇到了一些问题
[41:03.480 --> 41:04.480] 然后再去找解决方案
[41:04.480 --> 41:06.480] 我觉得这个做法是应该是挺对的
[41:06.480 --> 41:08.480] 应该是值得推荐的
[41:08.480 --> 41:11.480] 我是说问题在于说很多人
[41:11.480 --> 41:13.480] 他去卖一个解决方案的时候
[41:13.480 --> 41:16.480] 他经常会把他要解决的问题给屏蔽掉
[41:16.480 --> 41:18.480] 然后直接就给你一个解法
[41:18.480 --> 41:20.480] 就比如说你上来就差100个服务
[41:20.480 --> 41:23.480] 对吧像这么这样的一种解决方案
[41:23.480 --> 41:26.480] 可能是如果没有人对外补吹
[41:26.480 --> 41:29.480] 我估计没有人会一开始上来这么尝试
[41:30.480 --> 41:33.480] 这些很多一些糟糕的做法
[41:33.480 --> 41:36.480] 恰恰是因为大家在各种各样的去鼓吹
[41:36.480 --> 41:38.480] 一些解决方案造成的问题
[41:40.480 --> 41:42.480] 所以我更希望更多的人是像你说这种
[41:42.480 --> 41:44.480] 遇到了问题遇到了瓶颈
[41:44.480 --> 41:46.480] 然后我们去找解决方案
[41:46.480 --> 41:49.480] 而不是说我们去卖一个solution
[41:49.480 --> 41:52.480] 然后我们去一开始
[41:52.480 --> 41:53.480] 不管我们要解决什么问题
[41:53.480 --> 41:55.480] 我们就先implement一个解决方案
[41:56.480 --> 41:58.480] 这可能是恰恰是有问题的
[42:00.480 --> 42:02.480] 这一点我有个比较深的感触
[42:02.480 --> 42:07.480] 然后倒不是说我们卖solution
[42:07.480 --> 42:09.480] 因为我刚才听了聊天
[42:09.480 --> 42:11.480] 我觉得两位是站在不同的角度的
[42:12.480 --> 42:14.480] 就是一个是站在我要解决问题
[42:14.480 --> 42:15.480] 要牺牲的角
[42:15.480 --> 42:16.480] 一个是我在卖solution
[42:16.480 --> 42:17.480] 是不同的角度
[42:17.480 --> 42:19.480] 我突然间想起了另一个东西
[42:19.480 --> 42:22.480] 它叫一个叫应该是叫一个学习模型
[42:22.480 --> 42:24.480] 它叫Drift应该是叫Drift Model
[42:24.480 --> 42:25.480] 我的发音必定是对的
[42:25.480 --> 42:27.480] 它是把一个人的学习过程
[42:27.480 --> 42:30.480] 概括了分了几类
[42:30.480 --> 42:32.480] 第一类叫新手
[42:32.480 --> 42:35.480] 新手就是说我刚刚参加工作
[42:35.480 --> 42:37.480] 我什么东西都不需要做
[42:37.480 --> 42:38.480] 我什么东西都不需要了解
[42:38.480 --> 42:39.480] 不了外
[42:39.480 --> 42:40.480] 那是我现在需要的是
[42:40.480 --> 42:42.480] 别人就给我个solution
[42:42.480 --> 42:43.480] 你给我明确的action
[42:43.480 --> 42:44.480] 我去做
[42:44.480 --> 42:47.480] 这是一个纯新手需要做的
[42:47.480 --> 42:48.480] 因为他不可能get到
[42:48.480 --> 42:50.480] 特别多的background
[42:50.480 --> 42:52.480] 然后到最高级的
[42:52.480 --> 42:54.480] 最高级的就是专家
[42:54.480 --> 42:55.480] 专家就是说
[42:56.480 --> 42:57.480] 你们说的这些规则
[42:57.480 --> 42:58.480] 你们这些规则
[42:58.480 --> 43:00.480] 它已经完全内化了
[43:00.480 --> 43:01.480] 他知道这些规则在什么场景下用
[43:01.480 --> 43:03.480] 什么场景下不用
[43:03.480 --> 43:05.480] 或者是他能知道这些规则的局限
[43:05.480 --> 43:07.480] 然后所以上面
[43:07.480 --> 43:09.480] 那个文章就写到
[43:09.480 --> 43:12.480] 就是新手千万不要和专家一起工作
[43:13.480 --> 43:15.480] 就是纯新手千万不要和高级专家一起工作
[43:15.480 --> 43:16.480] 为什么
[43:16.480 --> 43:18.480] 因为新手总是会问
[43:18.480 --> 43:19.480] 你告诉我怎么做
[43:19.480 --> 43:20.480] 专家总是说
[43:20.480 --> 43:22.480] 这个原则也有很多tradeoff
[43:22.480 --> 43:24.480] 那个原则有很多tradeoff
[43:24.480 --> 43:25.480] 然后这两方就疯掉了
[43:25.480 --> 43:28.480] 就是我看到的一个文章是这么写的
[43:28.480 --> 43:29.480] 我觉得挺有道理的
[43:30.480 --> 43:32.480] 对这也是一个普遍的现象
[43:32.480 --> 43:35.480] 我觉得这种事情的难点在于
[43:36.480 --> 43:41.480] 比如说某一个你看到的知识方案经验
[43:41.480 --> 43:45.480] 在实施之前是很难把缺陷讨论清楚的
[43:46.480 --> 43:48.480] 我们只能去做假设
[43:49.480 --> 43:51.480] 对然后可能你硬往上套之后
[43:51.480 --> 43:52.480] 你会发现
[43:52.480 --> 43:56.480] 其实和你的场景也不是特别相符
[43:56.480 --> 43:59.480] 就会产生很多更严重的问题
[44:02.480 --> 44:05.480] 对我不知道这种就是刚强和陶温
[44:05.480 --> 44:07.480] 有没有什么比较好的经验
[44:07.480 --> 44:08.480] 就比如说涉及到一个
[44:11.480 --> 44:13.480] 选情这种类似的
[44:13.480 --> 44:17.480] 然后会觉得他和当前的问题
[44:17.480 --> 44:18.480] 其实没那么匹配
[44:18.480 --> 44:22.480] 但是其实聊的时候也只能是一些假设
[44:24.480 --> 44:26.480] 就大家总是希望说能够
[44:26.480 --> 44:28.480] 有一些固定的解决方案
[44:28.480 --> 44:31.480] 但是这个固定解决方案的问题
[44:31.480 --> 44:33.480] 就是他总是不知道你要解决什么问题
[44:33.480 --> 44:34.480] 因为他是提前写好的
[44:34.480 --> 44:36.480] 他不知道你要解决什么问题
[44:36.480 --> 44:38.480] 所以他往往能假设的
[44:38.480 --> 44:41.480] 也就是说是共性的东西
[44:41.480 --> 44:44.480] 然后共性的东西无非也就是所谓的
[44:44.480 --> 44:47.480] 跟业务不太相关的非功能性需求
[44:47.480 --> 44:52.480] 这就会导致说所谓的架构或者架构师
[44:52.480 --> 44:55.480] 很多时候就被狭义的理解为解决
[44:55.480 --> 44:58.480] 非功能性需求的人和技术
[44:58.480 --> 45:00.480] 不知道大家是不是这么看
[45:00.480 --> 45:04.480] 陶温说的比较通用化
[45:04.480 --> 45:09.480] 然后如果说我一般在跟别人讨论
[45:09.480 --> 45:10.480] 技术方案的时候
[45:10.480 --> 45:13.480] 其实一般我的整体主张就是偏保守
[45:13.480 --> 45:16.480] 保守的意思就是说
[45:16.480 --> 45:19.480] 你公司现在有啥技术
[45:19.480 --> 45:22.480] 你就尽可能先用现有的技术解决
[45:22.480 --> 45:23.480] 发现实在不行了
[45:23.480 --> 45:24.480] 我遇到了问题
[45:24.480 --> 45:25.480] 遇到了这个问题
[45:25.480 --> 45:27.480] 真的要引入一个新的方案
[45:27.480 --> 45:28.480] 新的技术的时候
[45:28.480 --> 45:31.480] 再想办法引入一个新的
[45:31.480 --> 45:32.480] 就是一句话说
[45:32.480 --> 45:35.480] 就是chose boring technology
[45:35.480 --> 45:38.480] 不要把它搞得特别fancy
[45:38.480 --> 45:42.480] 这是一个我自己在做一些判断的时候
[45:42.480 --> 45:45.480] 一个大体的方向
[45:45.480 --> 45:46.480] 我一般都很保守
[45:46.480 --> 45:47.480] 陶温刚刚提到的
[45:47.480 --> 45:49.480] 对架构师的理解
[45:49.480 --> 45:52.480] 其实就包括我现在
[45:52.480 --> 45:55.480] 都有一些疑惑
[45:55.480 --> 45:58.480] 就是架构师的工作到底是在做什么
[45:58.480 --> 46:00.480] 因为其实在我看起来
[46:00.480 --> 46:02.480] 每一次
[46:02.480 --> 46:04.480] 我先说几个前提
[46:04.480 --> 46:06.480] 我从毕业到现在
[46:06.480 --> 46:08.480] 我工作的公司里
[46:08.480 --> 46:09.480] 我还没有见到过
[46:09.480 --> 46:12.480] 某人的title是架构师
[46:12.480 --> 46:13.480] 对
[46:13.480 --> 46:15.480] 然后我会觉得你每一次
[46:15.480 --> 46:18.480] 每一个需求的改动
[46:18.480 --> 46:19.480] 不论大小
[46:19.480 --> 46:20.480] 对
[46:20.480 --> 46:22.480] 然后就不论是不是大到要出技术方案
[46:22.480 --> 46:23.480] 我都会觉得
[46:23.480 --> 46:27.480] 它其实都是在做架构的这种调整和升级
[46:27.480 --> 46:30.480] 或者是我做一个新需求
[46:30.480 --> 46:32.480] 其实我是怎么做的设计
[46:32.480 --> 46:34.480] 其实它都是一个
[46:34.480 --> 46:35.480] 简单的架构的过程
[46:35.480 --> 46:36.480] 对
[46:36.480 --> 46:39.480] 其实因为我没有接触过这种说
[46:39.480 --> 46:44.480] 就是它的岗位是架构师的这种同学
[46:44.480 --> 46:46.480] 其实我确实不太清楚
[46:46.480 --> 46:50.480] 就是架构师的工作内容主要是什么
[46:50.480 --> 46:51.480] 对
[46:50.480 --> 46:53.480] 所以也不太确定是不是架构师
[46:53.480 --> 46:56.480] 他的主要职责就是去
[46:56.480 --> 46:57.480] 比如说
[46:57.480 --> 47:00.480] 专注在非业务的那种
[47:00.480 --> 47:04.480] 更偏通用技术的这种设计上
[47:04.480 --> 47:06.480] 我不知道
[47:06.480 --> 47:08.480] 就是
[47:08.480 --> 47:10.480] 大家有接触过这种架构师
[47:10.480 --> 47:13.480] 他们是偏在这种通用技术上的吗
[47:13.480 --> 47:16.480] 我觉得广泛的误解来说的话就是
[47:16.480 --> 47:18.480] 架构师就是属于
[47:18.480 --> 47:20.480] 你花很大的价钱
[47:20.480 --> 47:22.480] 然后拉个人来搭架子
[47:22.480 --> 47:23.480] 然后剩下来的人
[47:23.480 --> 47:25.480] 你可以招便宜一点人
[47:25.480 --> 47:27.480] 帮他去填一些具体的内容
[47:27.480 --> 47:29.480] 然后就可以了
[47:29.480 --> 47:31.480] 去达到一个更高的性价比的结果
[47:31.480 --> 47:34.480] 就是所谓的架构师搭架子
[47:34.480 --> 47:36.480] 别人来填内容这种思路
[47:36.480 --> 47:39.480] 我觉得是一个比较常见的误解吧
[47:42.480 --> 47:44.480] 因为实际造成结果就是说
[47:44.480 --> 47:46.480] 你会发现说架构师画了一张图
[47:46.480 --> 47:49.480] 然后就是这个架构图存在于文档里
[47:49.480 --> 47:51.480] 然后他跑路了
[47:51.480 --> 47:52.480] 然后接下来
[47:52.480 --> 47:54.480] 过了两三年之后
[47:54.480 --> 47:56.480] 这个系统跟这个架构图一点关系都没有
[47:56.480 --> 47:59.480] 然后这个架构师产生的作用可能是负的
[47:59.480 --> 48:02.480] 他也没有做出任何影响
[48:02.480 --> 48:03.480] 按照这种思路
[48:03.480 --> 48:05.480] 结果大概率是这样的一个结果
[48:05.480 --> 48:07.480] 就是产生出了一个完全跟你架构图
[48:07.480 --> 48:08.480] 没有任何关系的一个系统
[48:08.480 --> 48:10.480] 然后只有架构图是漂亮的
[48:10.480 --> 48:12.480] 然后实际东西是一塌糊涂的
[48:12.480 --> 48:14.480] 比如说怎么样会更好呢
[48:14.480 --> 48:16.480] 就是对架构师来说
[48:16.480 --> 48:18.480] 就是听起来
[48:18.480 --> 48:21.480] 架构师如果只负责顶层设计
[48:21.480 --> 48:22.480] 其他都不care
[48:22.480 --> 48:24.480] 那听起来其实是可能
[48:24.480 --> 48:26.480] 就是大概率会让这个架构
[48:26.480 --> 48:28.480] 因为和业务的发展不匹配
[48:28.480 --> 48:30.480] 或者其他原因导致
[48:30.480 --> 48:32.480] 就是最后会造成失败
[48:32.480 --> 48:36.480] 对那怎么样会更好一些呢
[48:36.480 --> 48:38.480] 其实还挺好奇的
[48:38.480 --> 48:39.480] 对其实就是
[48:39.480 --> 48:40.480] 我也在思考这个问题
[48:40.480 --> 48:42.480] 就是如果你提前做设计
[48:42.480 --> 48:44.480] 就是你提前预想将来可能怎么样
[48:44.480 --> 48:46.480] 这个问题可能就会面临到
[48:46.480 --> 48:48.480] 实际的业务的发展
[48:48.480 --> 48:50.480] 跟你预想的肯定是不一样的
[48:50.480 --> 48:51.480] 所以这条路肯定是被封死了
[48:51.480 --> 48:52.480] 然后第二条的话
[48:52.480 --> 48:54.480] 如果你不做具体的设计
[48:54.480 --> 48:56.480] 然后只给一些指导性原则
[48:56.480 --> 49:00.480] 然后只给一些reusable tools
[49:00.480 --> 49:01.480] 那这就会导致说
[49:01.480 --> 49:03.480] 什么时候用这些原则
[49:03.480 --> 49:05.480] 就像Lobb Martin for Lobb Martin
[49:05.480 --> 49:08.480] 总结的那些guidelines
[49:08.480 --> 49:10.480] 它非常取决于每一个人
[49:10.480 --> 49:12.480] 在实际当下的一个判断
[49:12.480 --> 49:13.480] 然后判断又有可能出错
[49:13.480 --> 49:14.480] 所以就会发现说
[49:14.480 --> 49:16.480] 你架构是想做一些事情
[49:16.480 --> 49:19.480] 但发现却没有一些什么
[49:19.480 --> 49:22.480] 具体可以干的事情可以做
[49:22.480 --> 49:25.480] 这样的一个结果
[49:25.480 --> 49:29.480] 然后我的思想是怎么样呢
[49:29.480 --> 49:36.480] 我们可以从别的工程行业去找灵感
[49:36.480 --> 49:39.480] 比如说桥梁工程师
[49:39.480 --> 49:40.480] Bridge Construction
[49:40.480 --> 49:43.480] 他们其实在设计的时候
[49:43.480 --> 49:47.480] 我感觉主要是以
[49:47.480 --> 49:50.480] 预防灾难性的结果
[49:50.480 --> 49:52.480] 为主要的出发点
[49:52.480 --> 49:55.480] 所以他们会定义一些经典的
[49:55.480 --> 49:56.480] 一些失败的场景
[49:56.480 --> 50:00.480] 比如说你在某一个海峡上
[50:00.480 --> 50:01.480] 去架一座大桥的时候
[50:01.480 --> 50:03.480] 你要考虑侧峰
[50:03.480 --> 50:06.480] 侧峰的锋利到一定程度之后
[50:06.480 --> 50:08.480] 它就会使得你发生什么共振
[50:08.480 --> 50:10.480] 然后这个共振就可能会导致
[50:10.480 --> 50:12.480] 你的桥梁的结构被破坏
[50:12.480 --> 50:15.480] 然后你就会去搞一些措施
[50:15.480 --> 50:19.480] 来去对这种自然现象进行预防
[50:19.480 --> 50:22.480] 这个对我的启发是比较大的
[50:22.480 --> 50:24.480] 然后我是觉得说
[50:24.480 --> 50:28.480] 架构师的应该主要的目标来说的话
[50:28.480 --> 50:33.480] 也是去预防这些灾难性的后果
[50:33.480 --> 50:36.480] 这个后果当然就包括非常常见的
[50:36.480 --> 50:38.480] 大家可能能够预见到的
[50:38.480 --> 50:42.480] 比如说你的网站突然一下就火了
[50:42.480 --> 50:45.480] 然后大量的用户就涌进来了
[50:45.480 --> 50:47.480] 你怎么去应对
[50:47.480 --> 50:49.480] 你怎么就不把它冲垮
[50:49.480 --> 50:52.480] 这个大家都能够去预想到
[50:52.480 --> 50:54.480] 这样的一些后果
[50:54.480 --> 50:56.480] 然后还有一些后果就可能
[50:56.480 --> 50:59.480] 是大家平时不怎么去考虑
[50:59.480 --> 51:02.480] 去应对或者去预防了
[51:02.480 --> 51:04.480] 我主要总结两点
[51:04.480 --> 51:08.480] 一点的话是叫做
[51:08.480 --> 51:11.480] 叫做你成天在开会
[51:11.480 --> 51:13.480] 成天在开会的话
[51:13.480 --> 51:16.480] 你会感觉说你的工程师
[51:16.480 --> 51:17.480] 越招越多
[51:17.480 --> 51:19.480] 一百人不够要招一千个
[51:19.480 --> 51:20.480] 但是你招的人越多
[51:20.480 --> 51:22.480] 他们花更多的时间在会议上
[51:22.480 --> 51:23.480] 然后做任何一个事情
[51:23.480 --> 51:26.480] 都需要大量的人在一起开会讨论
[51:26.480 --> 51:28.480] 然后每个人都只做其中一点点
[51:28.480 --> 51:30.480] 这是一个我觉得是一个非常普遍的
[51:30.480 --> 51:32.480] 一个后果吧
[51:32.480 --> 51:34.480] 就是你的投入产出
[51:34.480 --> 51:37.480] 比明显显著的是下降的
[51:37.480 --> 51:40.480] 之前可能你小团队十个人干的事情
[51:40.480 --> 51:41.480] 你一百个人才能干
[51:41.480 --> 51:44.480] 因为你花大量的额外的精力
[51:44.480 --> 51:46.480] 都花在沟通上了
[51:46.480 --> 51:47.480] 然后另外一个沾沾自信的后果
[51:47.480 --> 51:50.480] 就是特别是在大公司里面
[51:50.480 --> 51:52.480] 你会发现你改代码的话
[51:52.480 --> 51:54.480] 要非常小心翼翼
[51:54.480 --> 51:57.480] 你基本上你只要去上线的话
[51:57.480 --> 51:58.480] 你都会有一种罪罪不安
[51:58.480 --> 52:00.480] 心生恐惧的感觉
[52:00.480 --> 52:02.480] 然后这种感觉就会导致
[52:02.480 --> 52:05.480] 大家有很多动作是变形的
[52:05.480 --> 52:08.480] 就可能很多能改或者不能改
[52:08.480 --> 52:10.480] 能优化不能优化的
[52:10.480 --> 52:12.480] 就尽量选择不优化
[52:12.480 --> 52:15.480] 因为我反正我只要一动代码就会挂
[52:15.480 --> 52:17.480] 那我只要不是高优的需求
[52:17.480 --> 52:19.480] 不是领导的需求我就不做
[52:19.480 --> 52:21.480] 然后另外一种就是说
[52:21.480 --> 52:23.480] 我以复制粘贴的方式去实现需求
[52:23.480 --> 52:25.480] 我来滴滴之后就有这个老员工
[52:25.480 --> 52:28.480] 教我怎么去在业务里面去加代码
[52:28.480 --> 52:29.480] 他跟我演示了
[52:29.480 --> 52:30.480] 如何用Ctrl-C和Ctrl-V
[52:30.480 --> 52:32.480] 来完成一个需求
[52:32.480 --> 52:33.480] 这样很好的避免了说
[52:33.480 --> 52:36.480] 你的新需求对旧需求造成影响
[52:36.480 --> 52:39.480] 这就是因为这种恐惧造成的
[52:39.480 --> 52:41.480] 一种技术动作的变形
[52:41.480 --> 52:45.480] 这两种现象我觉得是非常非常常见
[52:45.480 --> 52:48.480] 也是非常不好的一种后果
[52:53.480 --> 52:55.480] 就是这个Ctrl-C,Ctrl-V
[52:55.480 --> 52:57.480] 我是有亲身经历的
[52:57.480 --> 52:59.480] 对吧,因为挂过对吧
[52:59.480 --> 53:00.480] 不是挂过是这样的
[53:00.480 --> 53:02.480] 我刚毕业的时候
[53:02.480 --> 53:07.480] 刚来北京第一家公司是猎豹
[53:07.480 --> 53:09.480] 对,然后我在里面待了大概
[53:09.480 --> 53:11.480] 大概不到一个月
[53:11.480 --> 53:13.480] 就是从入职到提离职
[53:13.480 --> 53:15.480] 原因就是我当时
[53:15.480 --> 53:17.480] 我当时去了之后
[53:17.480 --> 53:22.480] 被一个老人交接了一个需要维护的项目
[53:22.480 --> 53:25.480] 对,那个项目就是全是Ctrl-C,Ctrl-V
[53:25.480 --> 53:27.480] 所以我根本就维护不起来
[53:27.480 --> 53:30.480] 你想我一个刚毕业的应届生
[53:30.480 --> 53:33.480] 对业务知识完全没有了解入职
[53:33.480 --> 53:38.480] 对,然后就只能一边熟悉
[53:38.480 --> 53:39.480] 一边改
[53:39.480 --> 53:40.480] 然后就是你会发现
[53:40.480 --> 53:42.480] 你觉得你找对了改动的地方
[53:42.480 --> 53:43.480] 你发现改了没有效果
[53:43.480 --> 53:46.480] 你改的是别的接口的实现
[53:46.480 --> 53:49.480] 或者是别的业务点的实现
[53:49.480 --> 53:52.480] 但是你看这个逻辑呢
[53:52.480 --> 53:53.480] 就感觉没有错呀
[53:53.480 --> 53:54.480] 就是这个点啊
[53:54.480 --> 53:56.480] 然后你再一搜索
[53:56.480 --> 53:59.480] 你发现哇还有十几处
[53:59.480 --> 54:02.480] 写的一模一样的地方
[54:02.480 --> 54:05.480] 然后你就只能抓入口
[54:05.480 --> 54:08.480] 然后一点点的跟进去改
[54:08.480 --> 54:10.480] 改完发现只改了一小部分
[54:10.480 --> 54:11.480] 就是其实根据需求
[54:11.480 --> 54:14.480] 你要把N个地方都要改
[54:14.480 --> 54:18.480] 然后就觉得和我之前看的书上的
[54:18.480 --> 54:22.480] 以及了解到的博客上的这些内容
[54:22.480 --> 54:23.480] 好像不太一样
[54:23.480 --> 54:24.480] 这个项目
[54:24.480 --> 54:25.480] 然后我就跑路了
[54:27.480 --> 54:29.480] 其实这种行为的直接的原因
[54:29.480 --> 54:31.480] 就是大家不敢改代码
[54:31.480 --> 54:33.480] 大家不敢在已有的代码上进行修改
[54:33.480 --> 54:35.480] 因为一改就挂
[54:38.480 --> 54:39.480] 对有可能
[54:39.480 --> 54:41.480] 我其实不清楚历史原因了
[54:41.480 --> 54:44.480] 但是我作为一个中途加入到这个项目的
[54:44.480 --> 54:46.480] 维护者
[54:46.480 --> 54:47.480] 我确实是
[54:48.480 --> 54:49.480] 是觉得
[54:49.480 --> 54:51.480] 就是很难吧
[54:51.480 --> 54:53.480] 就是在我面前就几条路
[54:53.480 --> 54:55.480] 因为就是要不然我就沿着这个模式改下去
[54:55.480 --> 54:59.480] 因为我不知道之前的原因
[54:59.480 --> 55:01.480] 然后我也不清楚整个全局
[55:01.480 --> 55:03.480] 就是我立刻接手的话
[55:03.480 --> 55:06.480] 我是没有机会说能把它重新去
[55:06.480 --> 55:07.480] 所谓的重构一把
[55:07.480 --> 55:10.480] 而且可能投入产出比也不高
[55:11.480 --> 55:15.480] 对因为我可能比如说花很久很久搞清楚
[55:15.480 --> 55:17.480] 然后把它重构完
[55:17.480 --> 55:18.480] 就是至少运行的效果
[55:18.480 --> 55:20.480] 其实和之前是没有区别
[55:21.480 --> 55:22.480] 对业务来说
[55:22.480 --> 55:23.480] 可能是没有产出的
[55:23.480 --> 55:24.480] 然后呢
[55:25.480 --> 55:26.480] 那对我来说
[55:26.480 --> 55:27.480] 我其实就两条路
[55:27.480 --> 55:29.480] 要不然我就选择继续搞下去
[55:29.480 --> 55:30.480] 沿着这个模式
[55:30.480 --> 55:31.480] 要不然我就跑路
[55:32.480 --> 55:33.480] 然后我评估了一下
[55:33.480 --> 55:36.480] 我觉得我可能没有能力继续搞下去
[55:37.480 --> 55:39.480] 然后我就跑路了
[55:39.480 --> 55:40.480] 对还有很重要点是
[55:41.480 --> 55:42.480] 你花了好心思
[55:42.480 --> 55:44.480] 你是个追求走跃的工程师
[55:44.480 --> 55:46.480] 然后你花了很多心思
[55:46.480 --> 55:48.480] 花了一两周的时间把它重构完了
[55:48.480 --> 55:50.480] 但是这个理论上
[55:50.480 --> 55:52.480] 这个功劳看起来是我们自己的追求
[55:52.480 --> 55:53.480] 对不对
[55:52.480 --> 55:55.480] 但其实对于这个工程
[55:55.480 --> 55:57.480] 对于这个系统来说
[55:57.480 --> 56:01.480] 它只是暂时性的喘了一口气
[56:01.480 --> 56:02.480] 或者它根本就没有喘口气
[56:02.480 --> 56:04.480] 因为你可能还重构出bug来了
[56:04.480 --> 56:05.480] 它不解决根本性问题
[56:05.480 --> 56:08.480] 或者你认为的问题可能不是问题
[56:08.480 --> 56:10.480] 它可能业务来说的话
[56:10.480 --> 56:12.480] 你能快速地响应需求
[56:13.480 --> 56:14.480] 这是它最重要的事情
[56:15.480 --> 56:17.480] 然后你认为上的那些工程上的原则
[56:17.480 --> 56:19.480] 你要你认为看到的那些问题
[56:19.480 --> 56:21.480] 在整个业务的优先级里面
[56:21.480 --> 56:22.480] 是非常低的
[56:22.480 --> 56:24.480] 这也就跟前面说的那个问题是相关的
[56:24.480 --> 56:26.480] 就是你经常看见一个东西
[56:26.480 --> 56:28.480] 它业务上是非常成功
[56:28.480 --> 56:30.480] 然后你认为它工程技术上是很成功
[56:30.480 --> 56:32.480] 这可能恰恰是相反的
[56:32.480 --> 56:35.480] 它有可能工程上是实现的非常差的
[56:35.480 --> 56:37.480] 但它的业务
[56:37.480 --> 56:39.480] 这并不耽误它的业务上成功
[56:39.480 --> 56:43.480] 这就是因为我们这个时代
[56:43.480 --> 56:45.480] 这个红利太丰厚了
[56:45.480 --> 56:48.480] 就是你花可能10倍100倍的代价
[56:48.480 --> 56:49.480] 去做一个事情
[56:49.480 --> 56:51.480] 它仍然是有利可图的
[56:51.480 --> 56:54.480] 仍然可能是非常值得去做的
[56:54.480 --> 56:55.480] 只要你强行占到市场
[56:55.480 --> 56:57.480] 然后拿到了market share
[56:57.480 --> 56:58.480] 然后拿到垄断地位
[56:58.480 --> 57:00.480] 你所有的一切做事的方式
[57:00.480 --> 57:02.480] 都可以得到一个合法性的证明
[57:02.480 --> 57:04.480] 你都会觉得说这是正确的做法
[57:04.480 --> 57:06.480] 就看看公司的财报就知道了
[57:06.480 --> 57:08.480] 看看研发支出是多少
[57:08.480 --> 57:12.480] 然后是不是我们在灌输
[57:12.480 --> 57:15.480] 让从事这个行业的新同学
[57:15.480 --> 57:18.480] 是不是有了一股不太好的期望
[57:18.480 --> 57:20.480] 天天说这些
[57:20.480 --> 57:22.480] 对 这是要控制大家期望
[57:22.480 --> 57:24.480] 大家的期望是说
[57:24.480 --> 57:26.480] 你这个软件工程什么这些东西
[57:26.480 --> 57:27.480] 是很重要的技术
[57:27.480 --> 57:28.480] 我们要告诉大家
[57:28.480 --> 57:30.480] 一个正确的观点就是
[57:30.480 --> 57:32.480] 这个可能不是那么重要的技术
[57:32.480 --> 57:33.480] 如果你从业务的角度出发
[57:33.480 --> 57:35.480] 你真的是要业务成功的话
[57:35.480 --> 57:37.480] 你更应该去抓其他东西
[57:37.480 --> 57:38.480] 而不是抓这个
[57:38.480 --> 57:40.480] 这个可能只是在其中
[57:40.480 --> 57:41.480] 占很小的一部分
[57:41.480 --> 57:43.480] 哪怕它可能只是对你的研发支出
[57:43.480 --> 57:44.480] 可能会占持一些影响
[57:44.480 --> 57:47.480] 但它可能并不会对你的业务成功
[57:47.480 --> 57:49.480] 造成任何决定性的影响
[57:49.480 --> 57:51.480] 其实我这个想法
[57:51.480 --> 57:52.480] 其实是越来
[57:52.480 --> 57:54.480] 随着工作时间越长
[57:54.480 --> 57:55.480] 对于一个公司来说
[57:55.480 --> 57:59.480] 对于我说对于国内的大部分公司来说
[57:59.480 --> 58:01.480] 研发或者你研发的系统怎么样
[58:01.480 --> 58:03.480] 然后我的想法就是
[58:03.480 --> 58:06.480] 你不拖后腿就行了
[58:06.480 --> 58:08.480] 大部分东西也拖不了后腿
[58:08.480 --> 58:09.480] 因为总体来说
[58:09.480 --> 58:12.480] 大家虽然都说自己公司的业务是复杂的
[58:12.480 --> 58:15.480] 但是这一点我是持有怀疑的
[58:15.480 --> 58:16.480] 那说我们需要复杂的架构
[58:16.480 --> 58:17.480] 这个我也是持有怀疑的
[58:17.480 --> 58:20.480] 其实大家的业务研发
[58:20.480 --> 58:21.480] 一般也就那样了
[58:21.480 --> 58:22.480] 这是我个人的观点
[58:22.480 --> 58:24.480] 然后一般就那样
[58:24.480 --> 58:26.480] 其实不需要什么高深的架构
[58:26.480 --> 58:27.480] 高深的技术
[58:27.480 --> 58:31.480] 你用任何方式都能把这个需求做出来
[58:31.480 --> 58:32.480] 这是
[58:32.480 --> 58:34.480] 但它对于整个业务的发展来说
[58:34.480 --> 58:38.480] 它是个微操
[58:38.480 --> 58:40.480] 它不影响根本性的结果
[58:40.480 --> 58:41.480] 我也是越来越这么想的
[58:41.480 --> 58:45.480] 但是如果我们作为做这个行业的人
[58:45.480 --> 58:49.480] 我觉得是应该有自己的追求的
[58:49.480 --> 58:50.480] 你应该知道什么是好的
[58:50.480 --> 58:51.480] 什么是坏的
[58:51.480 --> 58:52.480] 自己该朝哪个方向走
[58:52.480 --> 58:55.480] 应该去怎么避免自己的系统腐化的
[58:55.480 --> 58:57.480] 这是一个职业素养的要求
[58:57.480 --> 59:00.480] 并不是认为我的东西
[59:00.480 --> 59:03.480] 我的东西实际影响不了业务的巨大的
[59:03.480 --> 59:05.480] 给业务产生不了巨大的影响
[59:05.480 --> 59:06.480] 我就放弃了
[59:06.480 --> 59:08.480] 这是不应该的
[59:08.480 --> 59:09.480] 因为我们是干这个行业的
[59:09.480 --> 59:12.480] 我们对自己要有职业素养的要求
[59:12.480 --> 59:14.480] 对 刚才提到了职业素养
[59:14.480 --> 59:17.480] 也就是我今天早上又重新再读了一下
[59:17.480 --> 59:20.480] 洛佩尔马丁讲的professionalism
[59:20.480 --> 59:23.480] 他其实就是一直在提倡这个观点
[59:23.480 --> 59:25.480] 你医生是一个职业
[59:25.480 --> 59:28.480] 是一个非常高尚的一个行当
[59:28.480 --> 59:30.480] 他就有一些职业操守
[59:30.480 --> 59:32.480] 他这个职业操守就比如包括
[59:32.480 --> 59:34.480] 在做手术之前一定要去
[59:34.480 --> 59:36.480] 用这个七步洗手法去洗手
[59:36.480 --> 59:37.480] 要把手洗得非常干净
[59:37.480 --> 59:39.480] 这样才能够避免
[59:39.480 --> 59:43.480] 病人因为感染到病菌而死去
[59:43.480 --> 59:47.480] 对吧 他是有professional的东西在里面
[59:47.480 --> 59:51.480] 其实我们在软件行业里面
[59:51.480 --> 59:53.480] 这个职业太年轻了
[59:53.480 --> 59:55.480] 这个职业性其实并不是很高
[59:55.480 --> 59:57.480] 大家对于说这个职业应该做些什么事情
[59:57.480 --> 01:00:00.480] 应该要避免哪些bad outcome
[01:00:00.480 --> 01:00:02.480] 就是像这种你不洗手
[01:00:02.480 --> 01:00:05.480] 可能会造成的一些这种bad outcome是什么
[01:00:05.480 --> 01:00:06.480] balance是不清楚的
[01:00:06.480 --> 01:00:08.480] 然后以及我们要做哪些事情
[01:00:08.480 --> 01:00:10.480] 去避免这些bad outcome
[01:00:10.480 --> 01:00:12.480] 然后让你这个事情更加职业化
[01:00:12.480 --> 01:00:15.480] 这个方面是不够的
[01:00:15.480 --> 01:00:18.480] 而且因为业务上巨大的成功
[01:00:18.480 --> 01:00:21.480] 导致了很多一些可能不professional的做法
[01:00:21.480 --> 01:00:23.480] 反而是得到了推崇
[01:00:23.480 --> 01:00:26.480] 比如呢 我其实还挺好奇的
[01:00:26.480 --> 01:00:28.480] 就是咱们能分享一些
[01:00:28.480 --> 01:00:31.480] 比如说什么是不professional的吗
[01:00:31.480 --> 01:00:35.480] 就ctrl c ctrl v就是一个
[01:00:35.480 --> 01:00:37.480] 对对对 比如说这样的做法的话
[01:00:37.480 --> 01:00:41.480] 可能就不是非常职业化的一种做法
[01:00:41.480 --> 01:00:43.480] 它可能是在当下
[01:00:43.480 --> 01:00:46.480] 它迫于这个稳定性的要求
[01:00:46.480 --> 01:00:49.480] 它也没有别的其他这种保障
[01:00:49.480 --> 01:00:52.480] 然后使得在这种恐惧下做的操作的变形吧
[01:00:52.480 --> 01:00:54.480] 就是害怕挂嘛
[01:00:54.480 --> 01:00:56.480] 就是怕把系统给挂了
[01:00:56.480 --> 01:00:58.480] 所以我宁愿复制一份代码
[01:00:58.480 --> 01:01:00.480] 那也不要改一有的东西
[01:01:00.480 --> 01:01:03.480] 这个也是可以理解的
[01:01:03.480 --> 01:01:05.480] 所以我的想法就是说
[01:01:05.480 --> 01:01:09.480] 我们其实更多的是要去避免这种
[01:01:09.480 --> 01:01:11.480] 这种这个恐惧本身
[01:01:11.480 --> 01:01:13.480] 就是你不要让大家感觉
[01:01:13.480 --> 01:01:15.480] 感觉说改代码非常恐惧
[01:01:15.480 --> 01:01:17.480] 不要让大家整天都在开会
[01:01:17.480 --> 01:01:19.480] 就我们应该更多的
[01:01:19.480 --> 01:01:21.480] 就不用去告诉大家应该做什么
[01:01:21.480 --> 01:01:24.480] 是说应该去搞一些这种safety measure
[01:01:24.480 --> 01:01:26.480] 就比如说这种安全措施
[01:01:26.480 --> 01:01:30.480] 来去避免大家做出这种
[01:01:30.480 --> 01:01:35.480] 动作变形的这种结果的事情吧
[01:01:35.480 --> 01:01:38.480] 其实就像有点像那种工地里面
[01:01:38.480 --> 01:01:41.480] 一些保卫这个员工安全的一些事情
[01:01:41.480 --> 01:01:43.480] 比如说你要一定要戴安全帽
[01:01:43.480 --> 01:01:44.480] 一定要有围栏
[01:01:44.480 --> 01:01:46.480] 什么你一定要干什么事情怎么样
[01:01:46.480 --> 01:01:48.480] 其实就是防止大家做一些
[01:01:48.480 --> 01:01:49.480] 错误的决定
[01:01:49.480 --> 01:01:50.480] 一些错误的设计
[01:01:50.480 --> 01:01:53.480] 然后回过头来伤害到自己
[01:01:53.480 --> 01:01:56.480] 大概想到一些这种bad case
[01:01:56.480 --> 01:02:00.480] 对然后可能就是像陶芬说的
[01:02:00.480 --> 01:02:02.480] 就是一旦造成了这种环境
[01:02:02.480 --> 01:02:04.480] 然后这个环境可能会影响
[01:02:04.480 --> 01:02:07.480] 这个处于环境中的所有的工程同学
[01:02:07.480 --> 01:02:10.480] 导致大家不得不接受
[01:02:10.480 --> 01:02:14.480] 以一种不太合理的方式来持续做下去
[01:02:14.480 --> 01:02:16.480] 对然后又因为比如说
[01:02:16.480 --> 01:02:18.480] 现实的业务压力
[01:02:18.480 --> 01:02:22.480] 可能就会导致大家也没有机会调整
[01:02:22.480 --> 01:02:24.480] 这也是一个观察
[01:02:24.480 --> 01:02:29.480] 就是你在你以这种起死回生的角度
[01:02:29.480 --> 01:02:33.480] 被请进来说你去改进一个已有的系统吧
[01:02:33.480 --> 01:02:34.480] 然后你会发现说
[01:02:34.480 --> 01:02:36.480] 你去后期做一些逆操作的时候
[01:02:36.480 --> 01:02:38.480] 代价是非常大的
[01:02:38.480 --> 01:02:40.480] 你在已经形成了这样一个
[01:02:40.480 --> 01:02:42.480] 一个惯性的情况下
[01:02:42.480 --> 01:02:44.480] 你要去彻底的去改变它
[01:02:44.480 --> 01:02:46.480] 是非常非常困难的
[01:02:46.480 --> 01:02:48.480] 这也就是我为什么会去提出
[01:02:48.480 --> 01:02:49.480] 代码防腐
[01:02:49.480 --> 01:02:52.480] 代码防腐使用技术的这个出发点
[01:02:52.480 --> 01:02:54.480] 就是你要做工程的话
[01:02:54.480 --> 01:02:56.480] 应该是先把这些precaution
[01:02:56.480 --> 01:03:00.480] 把这种预防的措施先做到位
[01:03:00.480 --> 01:03:04.480] 然后使得不会产生这两个主要的这个后果
[01:03:04.480 --> 01:03:05.480] 一个就是大家不敢改代码
[01:03:05.480 --> 01:03:07.480] 另外一个就是大家整天在开会
[01:03:07.480 --> 01:03:10.480] 你不要去产生这样的一个工作氛围
[01:03:10.480 --> 01:03:11.480] 一种结果
[01:03:11.480 --> 01:03:14.480] 你一开始你能做些什么事情去避免它
[01:03:17.480 --> 01:03:19.480] 提到这个代码防腐
[01:03:19.480 --> 01:03:24.480] 所以听起来它更核心的出发点是
[01:03:24.480 --> 01:03:29.480] 就是其实代码可能始终都有可能倾向于
[01:03:29.480 --> 01:03:34.480] 或者说它始终会往倾向于腐败的那个方向走
[01:03:34.480 --> 01:03:36.480] 对 然后我们的设计目标可能是
[01:03:36.480 --> 01:03:41.480] 比如说减缓或者是降低它的这种可能性是吗
[01:03:41.480 --> 01:03:42.480] 对 是的
[01:03:42.480 --> 01:03:44.480] 就是伤针是不可避免的
[01:03:44.480 --> 01:03:45.480] 你只要是一直在维护
[01:03:45.480 --> 01:03:46.480] 能力越来越多
[01:03:46.480 --> 01:03:48.480] 它肯定是越来越乱的
[01:03:48.480 --> 01:03:51.480] 那只是我们去用一些措施
[01:03:51.480 --> 01:03:54.480] 延缓它这个衰老的速度而已
[01:03:54.480 --> 01:03:57.480] 就像你在铁的表面做了一些防腐处理之后
[01:03:57.480 --> 01:03:59.480] 它可能锈齿的速度会变慢
[01:03:59.480 --> 01:04:01.480] 但它并仍然最终会锈齿掉
[01:04:01.480 --> 01:04:04.480] 这是无可避免的事情
[01:04:04.480 --> 01:04:09.480] 这一点还是之前也一直在思考这个问题
[01:04:09.480 --> 01:04:11.480] 就是说包含在面试的时候
[01:04:11.480 --> 01:04:13.480] 其实有时候会问一些经验特别多的人
[01:04:13.480 --> 01:04:15.480] 就是工作10年以上的
[01:04:15.480 --> 01:04:17.480] 然后面试的时候就会经常问一个问题
[01:04:17.480 --> 01:04:21.480] 就是说我觉得跟这个架构腐化和代码腐化是相关的
[01:04:21.480 --> 01:04:23.480] 我经常思考一起好像跟别人聊的
[01:04:23.480 --> 01:04:25.480] 或面试的时候喜欢跟别人聊
[01:04:25.480 --> 01:04:28.480] 就是说你的系统是这么来设计的
[01:04:28.480 --> 01:04:30.480] 或者你的模块是这么来拆分的
[01:04:30.480 --> 01:04:32.480] 架构这么来设计
[01:04:32.480 --> 01:04:35.480] 我经常会问的一个问题就是说
[01:04:35.480 --> 01:04:38.480] 你的系统为什么拆成了ABCD模块
[01:04:38.480 --> 01:04:42.480] 而不是拆成了ABCD EFG这个模块
[01:04:42.480 --> 01:04:44.480] 你怎么知道自己大概是对的
[01:04:44.480 --> 01:04:46.480] 或者是你不知道自己现在大概是对的
[01:04:46.480 --> 01:04:48.480] 但是你怎么知道我的代码
[01:04:48.480 --> 01:04:50.480] 我现在可能是理想化的
[01:04:50.480 --> 01:04:52.480] 但是你怎么知道我的架构我的代码
[01:04:52.480 --> 01:04:54.480] 它逐渐的在腐化掉
[01:04:54.480 --> 01:04:56.480] 你是怎么看出来的
[01:04:56.480 --> 01:04:58.480] 然后我特别喜欢聊这些问题
[01:04:58.480 --> 01:05:02.480] 因为工程其实大家追求的是个精确
[01:05:02.480 --> 01:05:04.480] 但是我们不是做数学的
[01:05:04.480 --> 01:05:06.480] 你又那么精确不了
[01:05:06.480 --> 01:05:10.480] 但是我觉得这个结果是值得一个有经验的工程师
[01:05:10.480 --> 01:05:12.480] 或者所谓的架构师来思考的
[01:05:12.480 --> 01:05:15.480] 你不能靠感觉来判断自己的代码
[01:05:15.480 --> 01:05:17.480] 自己的架构是不是对的
[01:05:17.480 --> 01:05:19.480] 你脑子里需要有一个自洽的标准
[01:05:19.480 --> 01:05:21.480] 每个人自洽的标准不一样
[01:05:21.480 --> 01:05:26.480] 但是是每个人应该有追求的资深工程师和架构师
[01:05:26.480 --> 01:05:28.480] 应该好好思考过的问题
[01:05:28.480 --> 01:05:30.480] 对
[01:05:30.480 --> 01:05:34.480] 这也就是之前一些标准很难以操作的原因
[01:05:34.480 --> 01:05:38.480] 就比如说高内聚低偶合对吧
[01:05:38.480 --> 01:05:40.480] 这个标准大家都认为是对的
[01:05:40.480 --> 01:05:43.480] 但这种标准它却在实践中很难去落地
[01:05:43.480 --> 01:05:46.480] 因为没有人知道怎么去计算高内聚的高
[01:05:46.480 --> 01:05:48.480] 低偶合的低
[01:05:48.480 --> 01:05:50.480] 然后你就没有办法具有实操性
[01:05:50.480 --> 01:05:53.480] 你就只能变成一个你的dependency这样的一个东西
[01:05:53.480 --> 01:05:56.480] 如果一下dependency呢
[01:05:56.480 --> 01:05:58.480] 它就又回到了依赖于优秀的人
[01:05:58.480 --> 01:05:59.480] 靠谱的人
[01:05:59.480 --> 01:06:01.480] 又回到了这个老路上
[01:06:01.480 --> 01:06:03.480] 是的
[01:06:03.480 --> 01:06:05.480] 所以到这儿我觉得
[01:06:05.480 --> 01:06:07.480] 在讨论那些讨论架构的时候
[01:06:07.480 --> 01:06:10.480] 我就退一步跟别人说
[01:06:10.480 --> 01:06:13.480] 或者我自己先要求自己不说那些
[01:06:13.480 --> 01:06:17.480] 那些没有准确指导意义的那些principle
[01:06:17.480 --> 01:06:19.480] 虽然我知道我也看过那些书
[01:06:19.480 --> 01:06:23.480] 但是我会尽量要求自己不说那些
[01:06:23.480 --> 01:06:25.480] 尽量给一些在这个具体场景下
[01:06:25.480 --> 01:06:31.480] 可能的有具体的一些具体的问题和具体的方法
[01:06:31.480 --> 01:06:38.480] 而不是说我说你的架构要满足solid principle
[01:06:38.480 --> 01:06:41.480] 这些我认为是对大家的帮助是很小的
[01:06:41.480 --> 01:06:44.480] 或者是对自己判断一个架构的好坏也是很小的
[01:06:44.480 --> 01:06:45.480] 对
[01:06:45.480 --> 01:06:47.480] 所以我也在一直在思考说
[01:06:47.480 --> 01:06:51.480] 能不能有一些更具有时操性的一些指标的东西
[01:06:51.480 --> 01:06:55.480] 然后我觉得说如果我们拍脑袋想了一个什么指标
[01:06:55.480 --> 01:06:57.480] 比如说想了一个什么公式
[01:06:57.480 --> 01:07:00.480] 你又如何能说服大家说这个指标是对的呢
[01:07:00.480 --> 01:07:02.480] 或者说这个指标是好的呢
[01:07:02.480 --> 01:07:05.480] 所以我觉得还是应该
[01:07:05.480 --> 01:07:08.480] 任何工程都应该从工程的问题出发
[01:07:08.480 --> 01:07:09.480] 就是你要解决什么问题
[01:07:09.480 --> 01:07:11.480] 我们刚刚已经提出了两个问题
[01:07:11.480 --> 01:07:14.480] 一个是说大家不敢改代码
[01:07:14.480 --> 01:07:16.480] 另外一个是说大家整天在开会
[01:07:16.480 --> 01:07:18.480] 那我们从这两个问题的现象
[01:07:18.480 --> 01:07:20.480] 那我们能不能反推出什么东西来
[01:07:20.480 --> 01:07:23.480] 其实我觉得说你大部分人不敢改代码
[01:07:23.480 --> 01:07:25.480] 它的核心原因就是说
[01:07:25.480 --> 01:07:28.480] 它没有办法做一个小规模的改动
[01:07:28.480 --> 01:07:30.480] 就是它没有办法把它的change
[01:07:30.480 --> 01:07:32.480] 这个的impact
[01:07:32.480 --> 01:07:34.480] 限制在一个非常可控的范围内
[01:07:34.480 --> 01:07:37.480] 就比如说我只影响到北京市的用户
[01:07:37.480 --> 01:07:41.480] 或者我只影响到北京市某一个区的用户
[01:07:41.480 --> 01:07:42.480] 对吧
[01:07:42.480 --> 01:07:45.480] 所以它经常它的上限是一个全局性的
[01:07:45.480 --> 01:07:48.480] 对任何的改动它可能都很害怕
[01:07:48.480 --> 01:07:50.480] 那这就是一个非常大的原因
[01:07:50.480 --> 01:07:51.480] 然后另外可能就是说
[01:07:51.480 --> 01:07:54.480] 它没有办法在线下做任何有意义的测试
[01:07:54.480 --> 01:07:57.480] 它可能什么东西都得在线上才能够去测
[01:07:57.480 --> 01:08:01.480] 然后它就更有可能去break这些东西
[01:08:01.480 --> 01:08:04.480] 所以那我们就可以从这样一个现象
[01:08:04.480 --> 01:08:05.480] 然后得出一些指标
[01:08:05.480 --> 01:08:10.480] 就比如说你能够多大程度上去控制你一个
[01:08:10.480 --> 01:08:11.480] 比如说一次上限操作
[01:08:11.480 --> 01:08:13.480] 一次变更操作影响的规模
[01:08:13.480 --> 01:08:17.479] 比如说是50% 20%或者1%或者千分之一
[01:08:17.479 --> 01:08:18.479] 对吧
[01:08:18.479 --> 01:08:19.479] 如果你能够很自信的说
[01:08:19.479 --> 01:08:23.479] 我这次改动最多也就是损失掉GMV的千分之一
[01:08:23.479 --> 01:08:25.479] 那可能是损失得起的
[01:08:25.479 --> 01:08:26.479] 对吧
[01:08:26.479 --> 01:08:28.479] 大家都可能说我千分之一的GMV挂10分钟
[01:08:28.479 --> 01:08:30.479] 30分钟都是可以理解的
[01:08:30.479 --> 01:08:34.479] 那这样的话就使得大家不会那么恐惧了
[01:08:34.479 --> 01:08:37.479] 那成天去开会的这种现象的话
[01:08:37.479 --> 01:08:39.479] 我认为来说的话
[01:08:39.479 --> 01:08:43.479] 它更多的是在于说是软件开发团队
[01:08:43.479 --> 01:08:45.479] 分成了很多团队之后
[01:08:45.479 --> 01:08:47.479] 团队与团队之间
[01:08:47.479 --> 01:08:51.479] 它经常需要变更他们的这个分工边界
[01:08:51.479 --> 01:08:54.479] 就可能你做一些事情
[01:08:54.479 --> 01:08:56.479] 发现说它以前的接口满足不了
[01:08:56.479 --> 01:08:58.479] 然后你就给它改接口
[01:08:58.479 --> 01:09:01.479] 那你其实就会最后的这种东西都会体现为说
[01:09:01.479 --> 01:09:04.479] 大家彼此之间的接口具体化一点
[01:09:04.479 --> 01:09:07.479] 可能就是一些RPC接口
[01:09:07.479 --> 01:09:09.479] 成天都在变
[01:09:09.479 --> 01:09:12.479] 它天天都得去加新的业务字段进去
[01:09:12.479 --> 01:09:16.479] 然后这就会体现出为他们天天都得去开会
[01:09:16.479 --> 01:09:18.479] 花更多的时间在沟通上面
[01:09:18.479 --> 01:09:23.479] 那可能我们可以从这个角度来去做一些量化的标准
[01:09:23.479 --> 01:09:25.479] 来去度量说它是不是花了
[01:09:25.479 --> 01:09:28.479] 绝大多数时间都花在沟通上
[01:09:28.479 --> 01:09:29.479] 对
[01:09:29.479 --> 01:09:34.479] 就是这个有什么更好的经验可以给到大家来
[01:09:34.479 --> 01:09:36.479] 让大家帮助改进吗
[01:09:36.479 --> 01:09:38.479] 经验来说的话就是
[01:09:38.479 --> 01:09:42.479] 我之前提到过两种方式
[01:09:42.479 --> 01:09:44.479] 一种是说你帮他把代码都写了
[01:09:44.479 --> 01:09:48.479] 或者你给他一个framework
[01:09:48.479 --> 01:09:49.479] 这个framework可能是流程性的
[01:09:49.479 --> 01:09:51.479] 可能是技术性的
[01:09:51.479 --> 01:09:52.479] 对吧
[01:09:52.479 --> 01:09:53.479] 然后这种方式是不work的
[01:09:53.479 --> 01:09:55.480] 另外一种方式是说你给他一堆guidelines
[01:09:55.480 --> 01:09:57.480] 然后他去follow是不work的
[01:09:57.480 --> 01:09:59.480] 所以我觉得我现在觉得的话
[01:09:59.480 --> 01:10:00.480] 那解决这些问题
[01:10:00.480 --> 01:10:02.480] 我们能够给他的一些方式
[01:10:02.480 --> 01:10:04.480] 就是说你能够给他一些安全措施
[01:10:04.480 --> 01:10:05.480] 一些safety measures
[01:10:05.480 --> 01:10:07.480] 然后他能够把这些东西给
[01:10:07.480 --> 01:10:11.480] 一开始就植入到他的代码里面去
[01:10:11.480 --> 01:10:13.480] 然后从而就使得说他
[01:10:13.480 --> 01:10:17.480] 他不会在后期引起这样的结果
[01:10:17.480 --> 01:10:18.480] 就比如说
[01:10:18.480 --> 01:10:22.480] 就比如说大家不敢变更这个事情
[01:10:22.480 --> 01:10:25.480] 这个就取决于说你从一开始是不是
[01:10:25.480 --> 01:10:27.480] 按照分set的方式
[01:10:27.480 --> 01:10:30.480] 或者分租户的方式去设计你的架构
[01:10:30.480 --> 01:10:32.480] 如果你发现说你在后期
[01:10:32.480 --> 01:10:34.480] 你表结构变动不动了
[01:10:34.480 --> 01:10:36.480] 因为你任何一个字段的修改
[01:10:36.480 --> 01:10:38.480] 他可能都是对上一级的
[01:10:38.480 --> 01:10:40.480] 这样的一个记录的修改
[01:10:40.480 --> 01:10:42.480] 那他就可能会导致线上的
[01:10:42.480 --> 01:10:45.480] 这个不稳定性的出现
[01:10:45.480 --> 01:10:46.480] 但如果你把你的数据库
[01:10:46.480 --> 01:10:48.480] 是一开始就分成了很多种
[01:10:48.480 --> 01:10:51.480] 很多个set或者很多个租户
[01:10:51.480 --> 01:10:55.480] 那你将来去做任何的业务变更
[01:10:55.480 --> 01:10:57.480] 数据变更的时候都会简单很多
[01:10:57.480 --> 01:10:59.480] 规模要小很多
[01:10:59.480 --> 01:11:00.480] 那这个决定的话
[01:11:00.480 --> 01:11:01.480] 如果你是后期加进去的话
[01:11:01.480 --> 01:11:02.480] 就非常困难
[01:11:02.480 --> 01:11:04.480] 但如果一开始前期
[01:11:04.480 --> 01:11:06.480] 你就把它植入进去的话
[01:11:06.480 --> 01:11:08.480] 这个就很容易了
[01:11:08.480 --> 01:11:11.480] 然后另外一个就是比如说
[01:11:11.480 --> 01:11:15.480] 如何控制大家天天都去开会
[01:11:15.480 --> 01:11:19.480] 那这个就是你要去控制一个
[01:11:19.480 --> 01:11:23.480] 控制一下你这个接口参数
[01:11:23.480 --> 01:11:24.480] 对吧
[01:11:24.480 --> 01:11:25.480] 就如果你发现说
[01:11:25.480 --> 01:11:27.480] 你有一些基础设施
[01:11:27.480 --> 01:11:28.480] 比如说一些组件库啊
[01:11:28.480 --> 01:11:29.480] 什么之类的
[01:11:29.480 --> 01:11:31.480] 它的接口参数是不断膨胀的
[01:11:31.480 --> 01:11:32.480] 那你就会发现说
[01:11:32.480 --> 01:11:33.480] 它可能是不是说
[01:11:33.480 --> 01:11:35.480] 把一些非常具体的业务
[01:11:35.480 --> 01:11:37.480] 变成了一些可复用的模块去了
[01:11:37.480 --> 01:11:40.480] 如果我们要有一个
[01:11:40.480 --> 01:11:42.480] 稳定的分工的基础的话
[01:11:42.480 --> 01:11:44.480] 你要么就是让你的需求更一致
[01:11:44.480 --> 01:11:45.480] 那要么就是
[01:11:45.480 --> 01:11:46.480] 你就不要去尝试
[01:11:46.480 --> 01:11:47.480] 把这种不一致的需求
[01:11:47.480 --> 01:11:49.480] 给归纳成可复用的组件
[01:11:49.480 --> 01:11:50.480] 前段时间
[01:11:50.480 --> 01:11:51.480] 我不是发了一篇文章
[01:11:51.480 --> 01:11:53.480] 去喷这个现象吗
[01:11:53.480 --> 01:11:54.480] 也就是说实际上
[01:11:54.480 --> 01:11:56.480] 大家感觉说代码自己写的
[01:11:56.480 --> 01:11:57.480] 实际上很多时候
[01:11:57.480 --> 01:11:59.480] 你不过是产品经理的笔
[01:11:59.480 --> 01:12:02.480] 很多需求实际上是产品经理定的
[01:12:02.480 --> 01:12:04.480] 如果产品需求本能不一致的话
[01:12:04.480 --> 01:12:05.480] 就不要强行的
[01:12:05.480 --> 01:12:06.480] 把它归纳成一致的东西
[01:12:06.480 --> 01:12:08.480] 这个就可以通过
[01:12:08.480 --> 01:12:11.480] 通过你去搞一个监测的程序
[01:12:11.480 --> 01:12:12.480] 比如说你去
[01:12:12.480 --> 01:12:15.480] 有一个统计你这个组件参数的
[01:12:15.480 --> 01:12:16.480] 这样一个东西
[01:12:16.480 --> 01:12:17.480] 然后你就能够知道说
[01:12:17.480 --> 01:12:18.480] 这个参数如果一直在膨胀
[01:12:18.480 --> 01:12:19.480] 那说明就有问题啊
[01:12:19.480 --> 01:12:20.480] 对
[01:12:20.480 --> 01:12:22.480] 这就是一个很好的一个信号
[01:12:22.480 --> 01:12:23.480] 然后去指导你
[01:12:23.480 --> 01:12:26.480] 什么东西是不应该成电为组件的
[01:12:26.480 --> 01:12:27.480] 什么东西是应该
[01:12:27.480 --> 01:12:30.480] 直接就写成一次性的业务的
[01:12:30.480 --> 01:12:31.480] 这样的一些事情
[01:12:31.480 --> 01:12:34.480] 就是可以去提前去做的事情
[01:12:34.480 --> 01:12:37.480] 刚才那个产品经理的笔的
[01:12:37.480 --> 01:12:41.480] 我会觉得这个是不是对
[01:12:41.480 --> 01:12:42.480] 对我们的研发同学
[01:12:42.480 --> 01:12:44.480] 会有一个很高的要求啊
[01:12:44.480 --> 01:12:46.480] 就是相当于是我能理解业务
[01:12:46.480 --> 01:12:47.480] 然后预判业务
[01:12:47.480 --> 01:12:49.480] 然后才能确定说
[01:12:49.480 --> 01:12:51.480] 我这个东西我要求怎么实现
[01:12:51.480 --> 01:12:53.480] 不然的话就是产品提一个需求
[01:12:53.480 --> 01:12:54.480] 我就往里累一点
[01:12:54.480 --> 01:12:55.480] 提一个需求就累一点
[01:12:55.480 --> 01:12:59.480] 然后就很快这个项目也好
[01:12:59.480 --> 01:13:01.480] 或者是这个API也好
[01:13:01.480 --> 01:13:03.480] 它就会变得臃肿复杂
[01:13:03.480 --> 01:13:05.480] 而且很难维护
[01:13:05.480 --> 01:13:07.480] 其实是不需要预判的
[01:13:07.480 --> 01:13:09.480] 其实你一开始你无非就做两种决定
[01:13:09.480 --> 01:13:10.480] 一开始就是说
[01:13:10.480 --> 01:13:11.480] 当你挨个需求之后
[01:13:11.480 --> 01:13:14.480] 你把它认为说它这是可复用需求
[01:13:14.480 --> 01:13:15.480] 你把它变成一个组件库这样的东西
[01:13:15.480 --> 01:13:16.480] 可复用的
[01:13:16.480 --> 01:13:17.480] 对吧
[01:13:17.480 --> 01:13:18.480] 然后你这个判断有可能是错的
[01:13:18.480 --> 01:13:20.480] 因为你可能过了一段时间之后
[01:13:20.480 --> 01:13:22.480] 发现说这个组件参数在不断的膨胀
[01:13:22.480 --> 01:13:24.480] 你实在是抖不住需求了
[01:13:24.480 --> 01:13:27.480] 你要各种各样的去用技巧性的方式去绕过去
[01:13:27.480 --> 01:13:29.480] 这个时候你就应该果断的把它从
[01:13:29.480 --> 01:13:31.480] 从这种所谓的组件库
[01:13:31.480 --> 01:13:33.480] 可复用的技术设施里面给剔除掉
[01:13:33.480 --> 01:13:35.480] 你就直接把它复制N份
[01:13:35.480 --> 01:13:38.480] 然后到各自的地方去直接去写就好了
[01:13:38.480 --> 01:13:39.480] 对吧
[01:13:39.480 --> 01:13:41.480] 这个实际上不需要你预先判断
[01:13:41.480 --> 01:13:44.480] 而是更多是你能够事后去归纳总结
[01:13:44.480 --> 01:13:45.480] 你发现说你一开始做错了
[01:13:45.480 --> 01:13:46.480] 没有关系
[01:13:46.480 --> 01:13:48.480] 你到时候你再去改进它就行了
[01:13:48.480 --> 01:13:50.480] 也有另外一种极端可能就是
[01:13:50.480 --> 01:13:53.480] 你一开始没有意识到这个东西是一个pattern
[01:13:53.480 --> 01:13:56.480] 就比如说它是一种特殊的布局模式
[01:13:56.480 --> 01:13:58.480] 然后在很多个页面里面其实都是这个样子的
[01:13:58.480 --> 01:14:01.480] 然后你一开始把它当成一个特殊业务写进去了
[01:14:01.480 --> 01:14:04.480] 然后你在很多地方都看见它是类似的
[01:14:04.480 --> 01:14:08.480] 那你这个时候你就得再把它沉淀归纳总结
[01:14:08.480 --> 01:14:11.480] 然后再变成一个组件库
[01:14:11.480 --> 01:14:14.480] 这个应该不是预先判断的
[01:14:14.480 --> 01:14:16.480] 没有人能够做出预先判断
[01:14:16.480 --> 01:14:20.480] 只是更多的是你能够通过监测某些指标
[01:14:20.480 --> 01:14:22.480] 然后发现它有异常
[01:14:22.480 --> 01:14:26.480] 然后在事后进行一些归纳总结
[01:14:27.480 --> 01:14:29.480] 我这个陶文说的这个
[01:14:29.480 --> 01:14:33.480] 我还有一个当时跟陶文一起聊到一个特别好的点
[01:14:33.480 --> 01:14:34.480] 我自己的理解
[01:14:34.480 --> 01:14:37.480] 然后就是说因为作为一个工程师
[01:14:37.480 --> 01:14:42.480] 我们从刚开始学计算机进入计算机行业后
[01:14:42.480 --> 01:14:43.480] 刚开始毕业后
[01:14:43.480 --> 01:14:45.480] 我们就听到了各种名词
[01:14:45.480 --> 01:14:48.480] 例如最听到最多的名词叫reuse
[01:14:48.480 --> 01:14:52.480] 就是我们总是在尝试的去追求
[01:14:52.480 --> 01:14:55.480] 我们尝试的追求附用追求reuse
[01:14:55.480 --> 01:14:57.480] DRY这些原则
[01:14:57.480 --> 01:15:00.480] 所以工程师经常想的就是说
[01:15:00.480 --> 01:15:03.480] OK我看着这两个class
[01:15:03.480 --> 01:15:05.480] 只有一个failed是不一样的
[01:15:05.480 --> 01:15:08.480] 那么他把公共的部分是不是要抽出来呢
[01:15:08.480 --> 01:15:12.480] 那产品今天提了个A需求
[01:15:12.480 --> 01:15:15.480] 发现它有一块和以前做过的B需求是一样的
[01:15:15.480 --> 01:15:17.480] 那是不是先把它抽出来呢
[01:15:17.480 --> 01:15:19.480] 这是工程师对于我的理解
[01:15:19.480 --> 01:15:21.480] 就是工程师对于reuse
[01:15:21.480 --> 01:15:24.480] reuseable这个追求是特别特别强烈的
[01:15:24.480 --> 01:15:26.480] 就像design pattern
[01:15:26.480 --> 01:15:29.480] design pattern那本书的远处的英文名
[01:15:29.480 --> 01:15:32.480] 应该是也用了reuseable这个词
[01:15:32.480 --> 01:15:33.480] 也是在追求附用
[01:15:33.480 --> 01:15:36.480] 但是这个附用就像刚才陶文说的
[01:15:36.480 --> 01:15:40.480] 它不是工程师能决定的
[01:15:40.480 --> 01:15:43.480] 它不是工程师能决定的
[01:15:43.480 --> 01:15:45.480] 它是PM来决定
[01:15:45.480 --> 01:15:47.480] 那当你有更多的这些
[01:15:47.480 --> 01:15:49.480] 同复的现象出现的时候
[01:15:49.480 --> 01:15:52.480] 你才要慎重地考虑要不要做抽象
[01:15:52.480 --> 01:15:55.480] 要不要做一个reuseable object
[01:15:55.480 --> 01:15:58.480] 那同样的一个观点也出现在了
[01:15:58.480 --> 01:16:01.480] 上次我参加的时候也提到那篇论文
[01:16:01.480 --> 01:16:05.480] 就是叫The Hints of Computer System Design
[01:16:05.480 --> 01:16:06.480] 那边特别老的一篇论文
[01:16:06.480 --> 01:16:07.480] 是一个图灵奖
[01:16:07.480 --> 01:16:08.480] 忘了那个作者了
[01:16:08.480 --> 01:16:10.480] 一个图灵奖得主写的
[01:16:10.480 --> 01:16:12.480] 它里边就反复地提到了一个点
[01:16:12.480 --> 01:16:15.480] 就是说你要对abstraction
[01:16:15.480 --> 01:16:17.480] 对reuse保持警惕
[01:16:17.480 --> 01:16:22.480] 因为它很多时候比你不抽象
[01:16:22.480 --> 01:16:23.480] 带来的复杂度更高
[01:16:23.480 --> 01:16:26.480] 带来的系统的复杂度更高
[01:16:26.480 --> 01:16:29.480] 而且更难维护
[01:16:29.480 --> 01:16:31.480] 当然当时我读了那篇论文之后
[01:16:31.480 --> 01:16:32.480] 我也写了一点
[01:16:32.480 --> 01:16:34.480] 就是这篇论文
[01:16:34.480 --> 01:16:35.480] 就是类似的这些点
[01:16:35.480 --> 01:16:37.480] 我们现在例如说我阐述了
[01:16:37.480 --> 01:16:43.480] 但是就是说我们刚入行的小同学的话
[01:16:43.480 --> 01:16:45.480] 该去读第三pattern的
[01:16:45.480 --> 01:16:46.480] 我认为还是要去读
[01:16:46.480 --> 01:16:48.480] 该去了解第二y是什么的
[01:16:48.480 --> 01:16:49.480] 还要去了解
[01:16:49.480 --> 01:16:52.480] 但是并不代表你可以无脑地套用它
[01:16:55.480 --> 01:16:56.480] 对 然后大家就会问
[01:16:56.480 --> 01:16:57.480] 什么时候应该套用
[01:16:57.480 --> 01:16:59.480] 然后你就会扔一句说
[01:16:59.480 --> 01:17:00.480] It depends
[01:17:00.480 --> 01:17:02.480] 然后就走回到了同样的轮廓
[01:17:02.480 --> 01:17:03.480] 是的
[01:17:03.480 --> 01:17:07.480] 由于本期节目的录制时间比较长
[01:17:07.480 --> 01:17:10.480] 我们将节目分为上下两期播出
[01:17:10.480 --> 01:17:33.480] 我们下期再见
