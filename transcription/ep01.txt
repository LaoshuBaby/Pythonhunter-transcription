[00:30.000 --> 00:34.000] 我们播客的主题是编程 程序员 以及 Python
[00:34.000 --> 00:37.000] 希望各位听众能够喜欢
[00:37.000 --> 00:39.000] 今天第一期节目
[00:39.000 --> 00:42.000] 我们四位主创会和大家聊聊编程初学者到底需要什么
[00:42.000 --> 00:46.000] 希望我们的节目能帮助到一些刚开始学习编程的朋友
[00:46.000 --> 00:48.000] 当然 节目的内容不止于此
[00:48.000 --> 00:50.000] 如果你是老程序员也请不要走开
[00:50.000 --> 00:53.000] 我是Like9M 目前在Google工作
[00:53.000 --> 00:56.000] 下面请其他几位主创也来介绍一下自己
[00:56.000 --> 01:03.000] 我就是大家可能都知道一些比较喜欢4B的Majusaka
[01:03.000 --> 01:08.000] 我现在是在鄂尔摩 做中间件这一块的开发
[01:08.000 --> 01:12.000] 大家和他们几个也认识很久了
[01:12.000 --> 01:14.000] 但是我们都有一个共同的难题
[01:14.000 --> 01:17.000] 选民难 还有选择难
[01:17.000 --> 01:19.000] 我们都是选择困难症
[01:19.000 --> 01:22.000] 这就是我们今天补舌者说这个名字的由来
[01:22.000 --> 01:24.000] 下一位
[01:24.000 --> 01:29.000] 我叫Adam Weng 目前在知乎
[01:29.000 --> 01:32.000] 主要在做问答这边的开发
[01:32.000 --> 01:34.000] 当然大家可能也已经听说过
[01:34.000 --> 01:36.000] 比如说我们签过了之类的
[01:36.000 --> 01:40.000] 其实Python在知乎还是有很多的应用的
[01:40.000 --> 01:42.000] 可以和大家来做一些简单的分享
[01:42.000 --> 01:44.000] 我发现你们在持续不断的屁咬
[01:48.000 --> 01:53.000] 没有 我们还是比较多的领域在用Python的
[01:53.000 --> 01:56.000] 每次看见你们在知乎上回答问题
[01:56.000 --> 01:59.000] 就会说我们还是在用Python的
[01:59.000 --> 02:04.000] 因为所有人都觉得我们是一个勾浪的公司了
[02:08.000 --> 02:10.000] 知乎的勾浪之路
[02:10.000 --> 02:13.000] 让赖心涛介绍完吧
[02:17.000 --> 02:20.000] 我是最后一个 我叫赖心涛
[02:20.000 --> 02:22.000] 好像只有我自己用真名
[02:22.000 --> 02:24.000] 你们好像都用ID
[02:24.000 --> 02:26.000] 我是一直用ID的
[02:26.000 --> 02:31.000] 我没有ID 我在网络上的ID基本上都是名字的拼音
[02:31.000 --> 02:33.000] 其实我觉得很好
[02:35.000 --> 02:37.000] 我现在在蚂蚁金服工作
[02:37.000 --> 02:40.000] 然后是一个SRE
[02:40.000 --> 02:42.000] 我们组的项目是用Python的
[02:42.000 --> 02:44.000] 所以我平时写Python比较多
[02:44.000 --> 02:47.000] 其实我差不多基本上只会Python吧
[02:47.000 --> 02:49.000] 其他的语言像是
[02:49.000 --> 02:53.000] 我会一点Java C Lua
[02:53.000 --> 02:54.000] Skim也会一点
[02:54.000 --> 02:58.000] 但是这些都没有太多的生产的经验
[02:58.000 --> 03:01.000] 写的能跑的代码基本上就是Python
[03:01.000 --> 03:04.000] 我在回家录音频之前
[03:04.000 --> 03:07.000] 在公司调一个CR加的问题
[03:07.000 --> 03:11.000] 你不是过去写NodeJS的吗
[03:11.000 --> 03:13.000] 没有啊 Google里不用NodeJS
[03:13.000 --> 03:15.000] 我之前写过一段时间Dart
[03:15.000 --> 03:18.000] 然后后来写CR加比较多
[03:18.000 --> 03:20.000] 哇可以可以
[03:20.000 --> 03:24.000] 我觉得CR加和Python比起来不是一个难度
[03:24.000 --> 03:26.000] 不是一个数量级的调试难度
[03:26.000 --> 03:27.000] 好吧好吧
[03:27.000 --> 03:30.000] 我们不废话
[03:30.000 --> 03:33.000] 我们这个Podcast有一个固定环节
[03:33.000 --> 03:38.000] 就是让几位参与者给大家推荐一点东西
[03:38.000 --> 03:43.000] 然后我们想的是推荐一个Python相关的库
[03:43.000 --> 03:47.000] 然后以及一篇文章或者视频或者音频
[03:47.000 --> 03:50.000] 大家可以之后再去看
[03:50.000 --> 03:52.000] 那谁先开始说一下
[03:55.000 --> 03:56.000] 我来吧
[03:56.000 --> 03:59.000] 那我是一号选手我就来吧
[03:59.000 --> 04:02.000] 我推荐的库叫做AP schedule
[04:02.000 --> 04:04.000] 然后的话是一个Python库
[04:04.000 --> 04:05.000] 然后这个库的话
[04:05.000 --> 04:08.000] 它最大的好处就是说是可以方便的帮你自己去
[04:08.000 --> 04:11.000] 就是说直接做一些那些contact的东西
[04:11.000 --> 04:14.000] 就是说你去周期性的运行一些任务
[04:14.000 --> 04:15.000] 这个库的话
[04:15.000 --> 04:19.000] 而且它自带了一些持久化和就简单的分布式的功能
[04:19.000 --> 04:21.000] 所以说这一点的话
[04:21.000 --> 04:23.000] 大家如果说是有一些简单的离线脚本
[04:23.000 --> 04:25.000] 离线任务的东西的话
[04:25.000 --> 04:27.000] 可以用这个库去解决它
[04:27.000 --> 04:29.000] 然后的视频的话
[04:29.000 --> 04:30.000] 视频的话
[04:30.000 --> 04:36.000] 我就是还是推荐去年Python2018的一个Python3历史的一个视频
[04:36.000 --> 04:40.000] 因为很多选手可能都是直接写Python3开始
[04:40.000 --> 04:44.000] 可能对之前的那一段就是说Python的发展史并不了解
[04:44.000 --> 04:46.000] 如果我建议的话可以去看一下
[04:46.000 --> 04:49.000] 然后你可以对Python整个发展的过程
[04:49.000 --> 04:53.000] 以及现在的一些坑大概有一些认知
[04:53.000 --> 04:55.000] 是Credo讲的吗
[04:55.000 --> 04:57.000] 我忘了那个名字了
[04:57.000 --> 04:59.000] 我回去发YouTube的链接
[04:59.000 --> 05:03.000] 然后他是对Python2018 US上面的Python3的
[05:03.000 --> 05:05.000] 我记得我写过文章去推荐他了
[05:05.000 --> 05:06.000] 好的
[05:06.000 --> 05:08.000] 你那个库是叫
[05:08.000 --> 05:09.000] AP schedule
[05:09.000 --> 05:11.000] 我稍等一下
[05:11.000 --> 05:12.000] 我把那个
[05:12.000 --> 05:13.000] 你们先继续
[05:13.000 --> 05:15.000] 然后我们之后会传
[05:15.000 --> 05:17.000] 对我看到那个了
[05:17.000 --> 05:18.000] 对OK
[05:18.000 --> 05:19.000] Advanced Python Scheduler
[05:19.000 --> 05:20.000] 对
[05:20.000 --> 05:23.000] 那他想比CronTab就是多一些持久化是吧
[05:23.000 --> 05:24.000] 对持久化
[05:24.000 --> 05:26.000] 他可以将这些任务
[05:26.000 --> 05:28.000] 比如说持久化到比如说MongoReduce
[05:28.000 --> 05:29.000] 然后和其他的
[05:29.000 --> 05:33.000] 而且他支持他内建了比较好的支持
[05:33.000 --> 05:35.000] 对就是说是OSYNC GEVENT这些的东西
[05:35.000 --> 05:37.000] 就是说比CronTab更多的话
[05:37.000 --> 05:39.000] 就是说是语法上的一个熟悉性
[05:39.000 --> 05:41.000] 以及一些特性上的加强
[05:41.000 --> 05:44.000] 这个我之前也用过
[05:44.000 --> 05:45.000] 但是我遇到一个问题
[05:45.000 --> 05:49.000] 就是你假如在两台机器上跑AP Scheduler
[05:49.000 --> 05:50.000] 你怎么保证
[05:50.000 --> 05:52.000] 这个的话说它是一个简单的
[05:52.000 --> 05:54.000] 就只能你人肉去保证的
[05:54.000 --> 05:55.000] 对比如说
[05:55.000 --> 05:57.000] 所以当时我们
[05:57.000 --> 05:59.000] 就是你得靠第三方的
[05:59.000 --> 06:00.000] 比如说你加一个Reduce
[06:00.000 --> 06:01.000] 加一个Lock之类的东西
[06:01.000 --> 06:02.000] 对就是这样
[06:02.000 --> 06:04.000] 但说实话它是一个简单的一个分布式
[06:04.000 --> 06:06.000] 就是说是更多的去用来你
[06:06.000 --> 06:07.000] 作为一个持久化的一个节点
[06:07.000 --> 06:09.000] 然后你自己跑任务什么的
[06:09.000 --> 06:12.000] 就比CronTab这些要更易用一些
[06:15.000 --> 06:19.000] 对而且相比起像Salary这种
[06:19.000 --> 06:22.000] 依赖第三方一个中间键做Broker的
[06:22.000 --> 06:23.000] 我记得AP Scheduler
[06:23.000 --> 06:26.000] 好像直接可以用那层作为一个Broker
[06:26.000 --> 06:28.000] 对说实话它是比较轻量的
[06:28.000 --> 06:30.000] 然后相对来说更好用一些的
[06:30.000 --> 06:32.000] 我发现这个跟我要推荐的东西好像
[06:32.000 --> 06:34.000] 没事没事没事
[06:34.000 --> 06:36.000] 行行那下面我来说一下吧
[06:36.000 --> 06:39.000] 我推荐一个东西叫做一个库叫做Hue
[06:39.000 --> 06:42.000] 就是拼写是Hue
[06:42.000 --> 06:46.000] 然后它的就是这个作者
[06:46.000 --> 06:48.000] 这个Hue这个库可能大家不是很熟悉
[06:48.000 --> 06:50.000] 但是这个作者还写过一个东西
[06:50.000 --> 06:51.000] 一个东西是Peewee
[06:51.000 --> 06:53.000] 就是那个ORM
[06:53.000 --> 06:55.000] 我觉得这个大家应该比较熟
[06:55.000 --> 06:59.000] 然后它的库的特点就是比较轻量级
[06:59.000 --> 07:01.000] 就是Hue这个库
[07:01.000 --> 07:04.000] 其实就是个轻量级的任务队列
[07:04.000 --> 07:08.000] 但是就是你能想到的用其他东西
[07:08.000 --> 07:11.000] 比如什么XXXMQ之类能实现的东西
[07:11.000 --> 07:13.000] 它都能实现
[07:13.000 --> 07:15.000] 然后比如说多进程
[07:15.000 --> 07:16.000] 然后多现成
[07:16.000 --> 07:17.000] 然后写程
[07:17.000 --> 07:20.000] 包括就是说去
[07:20.000 --> 07:23.000] 就是定时去跑一个任务
[07:23.000 --> 07:24.000] Retry这些东西
[07:24.000 --> 07:28.000] 然后它其实你可以完全是用Python来做
[07:28.000 --> 07:29.000] 不依赖任何库
[07:29.000 --> 07:31.000] 但它推荐的是用Redis
[07:31.000 --> 07:33.000] 作为它的一个底层的
[07:33.000 --> 07:35.000] 也是相当于个Broker
[07:35.000 --> 07:37.000] 反正我觉得这个东西
[07:37.000 --> 07:39.000] 就是用起来感觉非常轻量
[07:39.000 --> 07:42.000] 不像非要去安装一个Rabbit MQ
[07:42.000 --> 07:44.000] 或者Zero MQ这种东西
[07:44.000 --> 07:46.000] 我觉得挺好的
[07:46.000 --> 07:48.000] 你这是在黑Salary吗
[07:48.000 --> 07:50.000] 但我觉得应该Salary可以做到
[07:50.000 --> 07:52.000] 能做到所有东西
[07:52.000 --> 07:54.000] 是 但是它就是太重了
[07:54.000 --> 07:55.000] 就如同刚才老文说的一样
[07:55.000 --> 07:59.000] 然后的话它也强行要依赖很多外部的东西
[07:59.000 --> 08:02.000] 其实我都没有正式用过Salary
[08:02.000 --> 08:03.000] 对
[08:03.000 --> 08:04.000] 好吧
[08:04.000 --> 08:05.000] 来我们下一位
[08:05.000 --> 08:09.000] 我觉得Salary可能在我看来确实有点重
[08:09.000 --> 08:11.000] 就是你选任何一个Broker
[08:11.000 --> 08:15.000] 其实你都能找到一个更轻量级的这种框架来替代它
[08:15.000 --> 08:17.000] 对Salary的话
[08:17.000 --> 08:20.000] 我觉得我对于Salary也是觉得它太重了
[08:20.000 --> 08:21.000] 而且它太重导致了一个东西
[08:21.000 --> 08:25.000] 有些时候你去最开始想简单用一下的时候
[08:25.000 --> 08:27.000] 对于一些配置项或者其他的
[08:27.000 --> 08:28.000] 是的
[08:28.000 --> 08:29.000] 我考那个配置项
[08:29.000 --> 08:31.000] 我一看我就想死
[08:31.000 --> 08:32.000] 对
[08:32.000 --> 08:33.000] 所以说我觉得
[08:37.000 --> 08:39.000] 它的配置项有一个特别蛋疼的地方
[08:39.000 --> 08:40.000] 就是它有两种
[08:40.000 --> 08:43.000] 就是好像3.X和4.X配置上是
[08:43.000 --> 08:45.000] 那个名字是不同的
[08:45.000 --> 08:50.000] 然后有的一些配置上大写是一种形式
[08:50.000 --> 08:51.000] 小写是另一种形式
[08:51.000 --> 08:52.000] 是
[08:52.000 --> 08:56.000] 它三和四之间其实相当于说是一个Broken Change了
[08:56.000 --> 08:57.000] 然后的话
[08:57.000 --> 08:58.000] 对
[08:58.000 --> 09:01.000] 而且它其实每一个小版本之间
[09:01.000 --> 09:03.000] 它可能一些配置项的变化
[09:03.000 --> 09:07.000] 就是说具体还有就是说某一个方式性的一个含义的变化
[09:07.000 --> 09:08.000] 我一般喜欢叫它语意
[09:08.000 --> 09:10.000] 就是说语意的一个功能的变化
[09:10.000 --> 09:14.000] 有些时候它文档都是可能是微定义的
[09:14.000 --> 09:17.000] 所以说有些时候被坑是日常吧
[09:18.000 --> 09:20.000] 看来你们都很惨痛的经历
[09:20.000 --> 09:24.000] 我们可以下期做一个吐槽那些不太好的库
[09:24.000 --> 09:25.000] 我觉得可以
[09:25.000 --> 09:26.000] 可以
[09:26.000 --> 09:28.000] 那我们有请下一位选手
[09:29.000 --> 09:31.000] 等会我还没介绍文章
[09:31.000 --> 09:33.000] 来来来
[09:33.000 --> 09:34.000] 不急不急
[09:34.000 --> 09:36.000] 那个什么我推荐的文章是
[09:36.000 --> 09:37.000] Raymond Hettinger
[09:37.000 --> 09:39.000] 他在11年写的一篇文章
[09:39.000 --> 09:42.000] 名字是Python Super Considered Super
[09:42.000 --> 09:49.000] 这篇文章如果就是大家之前有想了解Super这个函数的使用的话
[09:49.000 --> 09:51.000] 应该是有读过的
[09:51.000 --> 09:54.000] 那就是比如说就很多人有一个误解
[09:54.000 --> 09:57.000] 就是说Super是调用负类里的一个方法
[09:57.000 --> 09:58.000] 其实对吧
[09:58.000 --> 10:00.000] 你看这篇文章就知道完全不是这样子的
[10:00.000 --> 10:02.000] 然后我觉得他最好的是
[10:02.000 --> 10:07.000] 就是介绍了一个很实际的Super应该怎么用的
[10:07.000 --> 10:09.000] Super用法吧
[10:09.000 --> 10:11.000] 就是说你把它放进你的
[10:11.000 --> 10:14.000] 你的类的这样一个初始化的
[10:14.000 --> 10:16.000] 初始化的序列里面吧
[10:16.000 --> 10:17.000] 就每个类
[10:17.000 --> 10:21.000] 然后就是用Super来初始化它的负类
[10:21.000 --> 10:22.000] 然后这样子
[10:22.000 --> 10:25.000] 就是我觉得还是很值得一读的
[10:25.000 --> 10:28.000] 不知道你们读没读过这篇文章
[10:28.000 --> 10:30.000] 之前是在知乎上推荐过这篇文章对吧
[10:30.000 --> 10:31.000] 可能是吧
[10:31.000 --> 10:32.000] 对
[10:32.000 --> 10:34.000] 对我这篇文章的确是很经典的
[10:34.000 --> 10:38.000] 它就是关于其实它我感觉它其实并不关于是Super
[10:38.000 --> 10:43.000] 它其实是对于那个Python的类的MRO体系有一个
[10:43.000 --> 10:47.000] 对对他讲了他讲了很多关于MRO的东西
[10:47.000 --> 10:48.000] 对对对
[10:48.000 --> 10:50.000] 所以说我觉得这篇文章的确很棒
[10:50.000 --> 10:52.000] 好没有看过
[10:52.000 --> 10:54.000] 好下一位来推荐一下
[10:54.000 --> 10:56.000] 我来吧
[10:56.000 --> 11:00.000] 来我们老文或者说是小来来
[11:00.000 --> 11:01.000] 谁来
[11:01.000 --> 11:02.000] 我先说
[11:02.000 --> 11:06.000] 我先给大家推荐一个视频吧
[11:06.000 --> 11:08.000] 叫Techlead
[11:08.000 --> 11:11.000] 是一个前谷歌雇员拍的视频
[11:11.000 --> 11:13.000] 视频名字就叫Techlead吗
[11:13.000 --> 11:14.000] 我最近
[11:14.000 --> 11:15.000] 哦
[11:15.000 --> 11:16.000] 对
[11:16.000 --> 11:20.000] 他的开场读白非常经典
[11:20.000 --> 11:23.000] 一般都是Welcome to Techlead
[11:23.000 --> 11:24.000] This is Techlead
[11:24.000 --> 11:26.000] And I am Techlead
[11:26.000 --> 11:28.000] 我们要学习一下这个开场
[11:28.000 --> 11:29.000] 三个原因
[11:29.000 --> 11:34.000] 是一个是一个日本人写的
[11:34.000 --> 11:37.000] 日本人做的一个博客
[11:37.000 --> 11:39.000] 会讲一些很搞笑的东西
[11:39.000 --> 11:43.000] 其中有一些是非常非常非常夸张的
[11:43.000 --> 11:46.000] 比如说他会讲
[11:46.000 --> 11:50.000] 一些新人程序员经常犯的错误
[11:50.000 --> 11:53.000] 怎么保护你的代码
[11:53.000 --> 11:55.000] 让别人改不了
[11:55.000 --> 11:58.000] 就是说你怎么可以用最简单的反模式来
[11:58.000 --> 11:59.000] 怎么感觉好邪恶的样子
[11:59.000 --> 12:01.000] 用东西
[12:01.000 --> 12:04.000] 还有介绍一些弯曲的生活之类的
[12:04.000 --> 12:06.000] 挺有意思的一个poster
[12:06.000 --> 12:08.000] 现在在哪里
[12:08.000 --> 12:12.000] 现在应该是从Google去了
[12:12.000 --> 12:14.000] Netflix
[12:14.000 --> 12:18.000] 这哥们有很多吐槽Google的博客
[12:18.000 --> 12:20.000] 说到这个你刚刚就开始说
[12:20.000 --> 12:22.000] 他是一个前谷歌雇员的
[12:22.000 --> 12:23.000] 那个创办的一个
[12:23.000 --> 12:26.000] 就是说是一个YouTube的一个视频节目
[12:26.000 --> 12:27.000] 然后我突然想到
[12:27.000 --> 12:28.000] 我们的节目是一个
[12:28.000 --> 12:31.000] 在职谷歌雇员创办的一个博客
[12:31.000 --> 12:32.000] 所以说我突然想到
[12:32.000 --> 12:36.000] 你昨天晚上是不是跟9M吵架了呀
[12:36.000 --> 12:40.000] 你知道黑谷歌黑的最黑的
[12:40.000 --> 12:43.000] 就是我们这些在职员工一般
[12:43.000 --> 12:46.000] 各个场部都是这样的
[12:46.000 --> 12:48.000] 之前应该是在YouTube
[12:48.000 --> 12:50.000] 都是黑自己最狠
[12:50.000 --> 12:51.000] 对啊
[12:51.000 --> 12:54.000] 就因为我们经常比如说一个
[12:54.000 --> 12:56.000] 就说什么外界的东西
[12:56.000 --> 12:57.000] 都是我们最后知道的
[12:57.000 --> 13:00.000] 然后又经常吐槽Google
[13:00.000 --> 13:02.000] 又要做一个messaging app什么的
[13:02.000 --> 13:04.000] 然后最新出的那个stadia吧
[13:04.000 --> 13:06.000] 你们看了吗
[13:06.000 --> 13:07.000] 对然后我们就说
[13:07.000 --> 13:10.000] 两年之后看看它在不在再用
[13:13.000 --> 13:14.000] 可以可以
[13:14.000 --> 13:15.000] 有一个网站不是叫
[13:15.000 --> 13:17.000] 所有Google杀死的东西
[13:17.000 --> 13:18.000] 里面
[13:18.000 --> 13:19.000] 唉
[13:19.000 --> 13:20.000] Google家呀
[13:20.000 --> 13:22.000] 我们先不聊这么沉重的话题
[13:22.000 --> 13:23.000] 继续继续
[13:23.000 --> 13:24.000] OK
[13:24.000 --> 13:26.000] 我第一个推荐的是一个视频
[13:26.000 --> 13:29.000] 第二个推荐的一个酷叫Starlight
[13:29.000 --> 13:32.000] 是一个web framework
[13:32.000 --> 13:34.000] 类似Flask Jungle
[13:34.000 --> 13:38.000] 是一个ASCI的framework
[13:38.000 --> 13:41.000] 就是说一部的支持web socket的
[13:41.000 --> 13:42.000] 这种场景的用法
[13:42.000 --> 13:44.000] 而且这个酷代码非常少
[13:44.000 --> 13:46.000] 你去看一下特大嘛
[13:46.000 --> 13:48.000] 基本上就知道ASCI的一个
[13:48.000 --> 13:50.000] web框架是怎么样的
[13:50.000 --> 13:53.000] 它的这个代码酷的
[13:53.000 --> 13:55.000] 我推荐大家不是推荐大家去用啊
[13:55.000 --> 13:58.000] 因为可能还没发布1.0版本
[13:58.000 --> 13:59.000] 嗯
[13:59.000 --> 14:02.000] 但是这个酷的代码质量特别好
[14:02.000 --> 14:03.000] 如果你想了解ASCI的话
[14:03.000 --> 14:05.000] 你可以直接去看这个酷
[14:05.000 --> 14:08.000] 这个酷的作者是Incode
[14:08.000 --> 14:12.000] 一个Open Source Software的一个组织
[14:12.000 --> 14:15.000] 然后它里面最主要的那个人Tom
[14:15.000 --> 14:19.000] 写了Jungle REST Framework
[14:19.000 --> 14:20.000] 嗯
[14:20.000 --> 14:21.000] 就是很有名的DRF
[14:21.000 --> 14:25.000] 然后贡献了很多像API Star
[14:25.000 --> 14:28.000] UV Cron这种东西
[14:28.000 --> 14:30.000] 是一个非常有经验的人
[14:30.000 --> 14:32.000] 然后这个酷
[14:32.000 --> 14:34.000] 首先它是质量高
[14:34.000 --> 14:35.000] 我说的质量高是因为
[14:35.000 --> 14:37.000] 它是百分之百测试覆盖的
[14:37.000 --> 14:40.000] 百分之百添加类型注视的
[14:41.000 --> 14:42.000] 对
[14:42.000 --> 14:44.000] 然后现在也有很多
[14:44.000 --> 14:46.000] Feature的艺术开着
[14:46.000 --> 14:47.000] 大家如果有兴趣的话
[14:47.000 --> 14:50.000] 也可以去尝试一下PR
[14:50.000 --> 14:53.000] 我只搜到一个Star
[14:53.000 --> 14:55.000] 你就直接搜那个
[14:55.000 --> 14:57.000] 你直接搜API Star
[14:57.000 --> 15:00.000] 然后它的作者Incode下面的
[15:00.000 --> 15:02.000] 所有这里面就有
[15:02.000 --> 15:03.000] 叫做
[15:04.000 --> 15:06.000] 对Starlight
[15:06.000 --> 15:07.000] STAR
[15:07.000 --> 15:09.000] 我们
[15:09.000 --> 15:10.000] 我们节目结束之后
[15:10.000 --> 15:11.000] 会把我们推荐的东西
[15:11.000 --> 15:13.000] 都整理在网站上
[15:13.000 --> 15:16.000] 那所以这个的主要优点是啥
[15:16.000 --> 15:18.000] 就是用了ASGI
[15:18.000 --> 15:19.000] 嗯
[15:19.000 --> 15:21.000] 优点的话
[15:21.000 --> 15:22.000] 哦
[15:22.000 --> 15:23.000] 这个跟其他
[15:23.000 --> 15:25.000] 就比如说你如果要去
[15:25.000 --> 15:27.000] 告诉一个人
[15:27.000 --> 15:29.000] 就是不要用
[15:29.000 --> 15:30.000] 用Flask
[15:30.000 --> 15:31.000] 不要用Django
[15:31.000 --> 15:32.000] 用这个
[15:32.000 --> 15:34.000] 就是你会怎么说
[15:34.000 --> 15:36.000] 首先它
[15:36.000 --> 15:38.000] 你如果这样这么说的话
[15:38.000 --> 15:40.000] 就是WSGI跟ASGI的比较
[15:40.000 --> 15:43.000] 首先你像WebSocket的这种
[15:43.000 --> 15:45.000] 服务器会跟客户端主动发通知的
[15:45.000 --> 15:47.000] 这种你要做一个实时的网页
[15:47.000 --> 15:48.000] 你肯定
[15:48.000 --> 15:49.000] 如果你用WSGI的话
[15:49.000 --> 15:51.000] 你只能用HTTP协议
[15:51.000 --> 15:52.000] 这样的话
[15:52.000 --> 15:53.000] 你客户端必须轮寻
[15:53.000 --> 15:55.000] 但是如果你用ASync的一个模式的话
[15:55.000 --> 15:58.000] 你的服务器就可以直接跟客户端发
[15:58.000 --> 15:59.000] 你会省很多资源
[15:59.000 --> 16:00.000] 第二个
[16:00.000 --> 16:01.000] 假如说你想
[16:01.000 --> 16:03.000] 我服务器收到了一个东西
[16:03.000 --> 16:04.000] 我先返回客户端
[16:04.000 --> 16:06.000] 然后我过后再处理这个任务
[16:06.000 --> 16:07.000] 那你要怎么做
[16:07.000 --> 16:09.000] 你肯定要加一个任务对列
[16:09.000 --> 16:11.000] 像AP Scheduler或者Celerate
[16:11.000 --> 16:12.000] 或者什么东西
[16:12.000 --> 16:14.000] 会让你的框架更复杂
[16:14.000 --> 16:16.000] 但是如果你用ASGI的话
[16:16.000 --> 16:18.000] 因为你本身就有一个事件循环在这里
[16:18.000 --> 16:19.000] 你可以
[16:19.000 --> 16:20.000] 就很容易做到
[16:20.000 --> 16:22.000] 你可以直接返回客户端
[16:22.000 --> 16:24.000] 然后你在你的事件循环里面
[16:24.000 --> 16:26.000] 再添加更多的任务
[16:26.000 --> 16:29.000] 比如说它就像一个自带任务
[16:29.000 --> 16:32.000] 其实我还一直挺想去了解一下ASGI的
[16:32.000 --> 16:34.000] 但是就还没时间去看
[16:34.000 --> 16:35.000] 对
[16:35.000 --> 16:38.000] 它的基本的像WSGI一样
[16:38.000 --> 16:41.000] 是一个很简单的协议
[16:41.000 --> 16:42.000] 然后这个
[16:43.000 --> 16:44.000] 酷你可以看一下
[16:44.000 --> 16:48.000] 它是怎么把一层一层的东西给组合起来的
[16:48.000 --> 16:53.000] 其实就是不停的在创建ASGI协议的一个对象
[16:53.000 --> 16:55.000] 然后这些对象可以串起来
[16:55.000 --> 16:56.000] 有一句很有名的话
[16:56.000 --> 16:58.000] 就是讲这个东西的
[16:58.000 --> 16:59.000] 有一个
[17:01.000 --> 17:02.000] 可以说笑话吧
[17:02.000 --> 17:05.000] 就是说一个科学家在跟一群人普及
[17:07.000 --> 17:08.000] 就是这个世界是什么样子的
[17:08.000 --> 17:10.000] 然后有个老太太说
[17:10.000 --> 17:13.000] 这个世界
[17:13.000 --> 17:15.000] 就是那个老太太反对科学家说
[17:15.000 --> 17:19.000] 这个世界是建立在一个乌龟的背上的
[17:20.000 --> 17:22.000] 然后那个科学家就反问他
[17:22.000 --> 17:24.000] 那乌龟是在哪里的
[17:24.000 --> 17:26.000] 然后那个老太太说
[17:26.000 --> 17:28.000] It's a turtle all the way down
[17:28.000 --> 17:29.000] 就是乌龟上面都是乌龟
[17:29.000 --> 17:30.000] 其实
[17:33.000 --> 17:34.000] 其实
[17:34.000 --> 17:36.000] It's a turtle all the way down
[17:36.000 --> 17:39.000] 就是来形容这个ASGI特别合适
[17:39.000 --> 17:41.000] ASGI上面全都是ASGI
[17:41.000 --> 17:42.000] 串起来
[17:42.000 --> 17:45.000] ASGI其实现在还是处于那个朝暗期
[17:45.000 --> 17:48.000] 它应该是还没有进标准部提案的
[17:48.000 --> 17:49.000] 对吧
[17:49.000 --> 17:50.000] 这个东西
[17:50.000 --> 17:52.000] 这个我们可以下一期再说
[17:52.000 --> 17:53.000] 这个东西蛋疼的是
[17:53.000 --> 17:54.000] 你假如用了这个东西
[17:54.000 --> 17:55.000] 我再说一个缺点
[17:55.000 --> 17:56.000] 就算是缺点
[17:56.000 --> 17:57.000] 你如果用了这个东西
[17:57.000 --> 17:59.000] 你用到的所有的库都要
[17:59.000 --> 18:01.000] 对这个我已经黑过了
[18:01.000 --> 18:03.000] 对我已经黑过无数次了
[18:03.000 --> 18:04.000] SYNC了
[18:04.000 --> 18:05.000] 是的
[18:05.000 --> 18:07.000] 感觉AIO这个事情很难推
[18:07.000 --> 18:08.000] 主要是
[18:08.000 --> 18:11.000] 对主要是他给你语法强行绑定了之后
[18:11.000 --> 18:13.000] 你想做monkey派系都不太好做
[18:13.000 --> 18:15.000] 对那个in code
[18:15.000 --> 18:18.000] 其实也搞了很多AIO的东西
[18:18.000 --> 18:20.000] 比如说他们一个新项目叫OIM
[18:20.000 --> 18:21.000] 就是一个ASync的
[18:21.000 --> 18:23.000] 他必须得把这一套
[18:23.000 --> 18:25.000] 全部换掉才好
[18:27.000 --> 18:29.000] 其实这个对像那个
[18:29.000 --> 18:31.000] 信涛说的这个库我也很推荐的
[18:31.000 --> 18:32.000] 然后的话
[18:32.000 --> 18:34.000] 因为他原本其实starlato的话
[18:34.000 --> 18:36.000] 他其实就是那个API star的
[18:36.000 --> 18:37.000] 他原本叫做API star
[18:37.000 --> 18:39.000] 后面API star给拆分出来了
[18:39.000 --> 18:40.000] 一部分就是保留
[18:40.000 --> 18:41.000] 原本API star
[18:41.000 --> 18:44.000] 他就只是一个工具起了
[18:44.000 --> 18:46.000] 然后另外一个就是拆出来的starlato
[18:46.000 --> 18:47.000] 然后的话这个库
[18:47.000 --> 18:49.000] 我当时觉得最舒服的一点
[18:49.000 --> 18:51.000] 就是说是像信涛说的
[18:51.000 --> 18:54.000] 他的那个代码质量非常棒
[18:54.000 --> 18:55.000] 然后的话就说是
[18:55.000 --> 18:58.000] 当时是我在17年年末
[18:58.000 --> 18:59.000] 18年年初的时候就在关注他
[18:59.000 --> 19:02.000] 当时他就是包括他前身API star
[19:02.000 --> 19:05.000] 还有他后面的配套UVconn
[19:05.000 --> 19:07.000] 就是说ASJ的网关
[19:07.000 --> 19:10.000] 然后他们的都是全部的type hint的覆盖
[19:10.000 --> 19:12.000] 就是说标注的覆盖
[19:12.000 --> 19:14.000] 而且测出覆盖率也很高
[19:14.000 --> 19:16.000] 所以说这一点当时就觉得很眼前一亮
[19:16.000 --> 19:18.000] 还有的话就是说是他的设计
[19:18.000 --> 19:21.000] 使用起来很舒服
[19:21.000 --> 19:23.000] 就跟那个jenga REST framework一样
[19:23.000 --> 19:25.000] 他就是说相对比较舒服
[19:25.000 --> 19:26.000] 设计很合理
[19:26.000 --> 19:30.000] 所以说我觉得当时就在整个Python周边里面
[19:30.000 --> 19:32.000] 算是真正能称得上
[19:32.000 --> 19:34.000] 就是说是for human的
[19:34.000 --> 19:35.000] 就是说是request for human
[19:35.000 --> 19:38.000] 就是for human这样的一个库
[19:38.000 --> 19:40.000] 我刚才看到看了一个他的example
[19:40.000 --> 19:43.000] 我觉得好像和flask更像
[19:43.000 --> 19:45.000] 这种轻量级的一个空间
[19:45.000 --> 19:47.000] 你没发现现在的所有framework
[19:47.000 --> 19:50.000] 接口都做成flask那种吗
[19:50.000 --> 19:51.000] flask
[19:51.000 --> 19:52.000] 赤脸的
[19:52.000 --> 19:53.000] 对
[19:53.000 --> 19:55.000] 但是他里面内置
[19:55.000 --> 19:58.000] 他只是在像外形的像flask这块
[19:58.000 --> 20:01.000] 但是他其实后面的就比如说
[20:01.000 --> 20:03.000] 直接使用jenga的ORM
[20:03.000 --> 20:06.000] 然后包括后面的一些数据
[20:06.000 --> 20:07.000] 数据交易案
[20:07.000 --> 20:08.000] 然后序列化
[20:08.000 --> 20:09.000] 返序列化
[20:09.000 --> 20:12.000] 还有一些类似就直接生成rest API这样的东西
[20:12.000 --> 20:17.000] 他其实是依旧是从jenga REST framework那一套
[20:17.000 --> 20:18.000] 沿用了很多
[20:18.000 --> 20:19.000] 然后设计
[20:19.000 --> 20:22.000] 然后整体来说是相对比较成熟好用的
[20:22.000 --> 20:23.000] 我刚才想说
[20:23.000 --> 20:27.000] 那个我本来想问他和unicore是什么
[20:27.000 --> 20:28.000] 怎么比较
[20:28.000 --> 20:31.000] 然后发现unicore也是这个组织做的
[20:31.000 --> 20:33.000] 对unicore他其实只是一个那个网关
[20:33.000 --> 20:34.000] ASCII网关而已
[20:34.000 --> 20:38.000] 就类似于说我flask里面的那个VecRoot
[20:38.000 --> 20:40.000] 然后jenga里面自带的
[20:40.000 --> 20:42.000] 还有就是统一的那个
[20:42.000 --> 20:45.000] 其他像gunico这样的网关的存在
[20:45.000 --> 20:47.000] 对他就像
[20:47.000 --> 20:48.000] 我来解释一下吧
[20:48.000 --> 20:50.000] 他是应该是uvconn
[20:50.000 --> 20:51.000] 对吧
[20:51.000 --> 20:55.000] uvconn他是一个相当于是外部服务器
[20:55.000 --> 20:59.000] 他们两个的职责就是一个是服务器
[20:59.000 --> 21:03.000] 另一个是写代码的框架
[21:03.000 --> 21:04.000] 就比如说
[21:06.000 --> 21:08.000] 你的代码跑在服务器上
[21:08.000 --> 21:10.000] 你实际跑的是一个进程
[21:10.000 --> 21:11.000] 是uvconn的进程
[21:11.000 --> 21:14.000] 他uvconn帮你起来世界循环
[21:14.000 --> 21:17.000] 帮你处理socket这些东西
[21:18.000 --> 21:20.000] 然后uvconn后面对接的
[21:20.000 --> 21:23.000] 那个你的passing应用是一个ascii的app
[21:23.000 --> 21:26.000] 你的ascii的app只要符合ascii的标准就可以
[21:26.000 --> 21:29.000] 你不用dll
[21:29.000 --> 21:31.000] 就相当于uViskey和jungle的关系
[21:31.000 --> 21:32.000] 是吧
[21:32.000 --> 21:33.000] 类似于
[21:33.000 --> 21:34.000] 对对对
[21:34.000 --> 21:38.000] 就是gunico uViskey和jungle flex的关系
[21:38.000 --> 21:39.000] 那我就理解了
[21:39.000 --> 21:43.000] 对uvconn就是一个uViskey的服务器
[21:45.000 --> 21:47.000] jungle也出了一个这样的服务器
[21:47.000 --> 21:49.000] 叫diffie
[21:51.000 --> 21:52.000] 我一下说怎么
[21:52.000 --> 21:53.000] 对类似的
[21:53.000 --> 21:55.000] 一般这种就是
[21:55.000 --> 21:57.000] 比如说不管是Viskey还是ASCII
[21:57.000 --> 22:01.000] 他的就是这种服务的前面都会有
[22:01.000 --> 22:03.000] 另外一个真正的服务器
[22:03.000 --> 22:05.000] 就比如说nginx之类的
[22:05.000 --> 22:06.000] 对吧
[22:07.000 --> 22:08.000] 对
[22:08.000 --> 22:09.000] 一个是
[22:09.000 --> 22:12.000] web框架只是让你写web应用更简单
[22:12.000 --> 22:13.000] 其实你不需要web框架
[22:13.000 --> 22:15.000] 你只需要符合ascii的协议
[22:15.000 --> 22:16.000] 就行了
[22:16.000 --> 22:19.000] ascii的协议就是你定义一个函数
[22:19.000 --> 22:21.000] 这个函数的输入是什么
[22:21.000 --> 22:22.000] 输出是什么
[22:22.000 --> 22:23.000] 对吧
[22:23.000 --> 22:27.000] 然后你就直接用这个函数来写你的应用就行了
[22:27.000 --> 22:31.000] 只不过你要处理http header
[22:31.000 --> 22:33.000] 处理responses header这些
[22:33.000 --> 22:35.000] 有一些公用的东西
[22:35.000 --> 22:39.000] 然后就相当于这些库帮你把这些东西给已经实现了
[22:39.000 --> 22:40.000] 一般的这种
[22:40.000 --> 22:42.000] 一般这种三层架构
[22:42.000 --> 22:44.000] 比如说我们上面会有nginx这种
[22:44.000 --> 22:49.000] 但是其实感觉各自的任务还是不太一样
[22:49.000 --> 22:49.000] 对
[22:49.000 --> 22:51.000] 比如说像我们这边
[22:51.000 --> 22:55.000] nginx最前层可能会做这个
[22:55.000 --> 22:56.000] 首先就是静态资源
[22:56.000 --> 22:58.000] 我们肯定不会给到给到后边
[22:58.000 --> 23:00.000] 所以最上面会有一个nginx
[23:00.000 --> 23:00.000] 对
[23:00.000 --> 23:04.000] 然后还有就比如说像https的这种解包
[23:04.000 --> 23:07.000] 就是你再往后走就没必要继续用https了
[23:07.000 --> 23:08.000] 对
[23:08.000 --> 23:11.000] 一般都会在nginx这层就会搞完
[23:11.000 --> 23:19.000] 然后反向代理就是会搞到n多的不同的业务的这种whisky的网关上
[23:19.000 --> 23:20.000] 对
[23:20.000 --> 23:23.000] 可能是这个内扣可能是usb这种
[23:23.000 --> 23:24.000] 对
[23:24.000 --> 23:25.000] 对
[23:25.000 --> 23:26.000] 其实
[23:26.000 --> 23:33.000] 这nginx usb jungle这三个东西里面你只需要usb
[23:33.000 --> 23:35.000] 没有jungle你可以直接写函数
[23:35.000 --> 23:38.000] 没有nginx usb可以提供http服务
[23:38.000 --> 23:42.000] 但是我想再多说一点nginx跟usb
[23:42.000 --> 23:45.000] 是因为nginx是一个非常专业的web服务器
[23:45.000 --> 23:50.000] 你像处理socket或者处理tcp这种
[23:50.000 --> 23:53.000] 它会凑起来一个完整的http再转化到后端
[23:53.000 --> 23:55.000] 如果是uwhisky这种模式
[23:55.000 --> 23:58.000] uwhisky是默认是阻塞的
[23:58.000 --> 24:00.000] 比如说你只有八个线程的话
[24:00.000 --> 24:04.000] 你最多只能同时服务八个
[24:04.000 --> 24:06.000] 如果有一个http请求发过来特别慢
[24:06.000 --> 24:08.000] 那这个就被占用了
[24:08.000 --> 24:09.000] 对吧
[24:09.000 --> 24:11.000] 所以主要是nginx的话
[24:11.000 --> 24:12.000] 它更多是完整
[24:12.000 --> 24:16.000] 其实它的区别就是说是nginx的话
[24:16.000 --> 24:18.000] 更多关注于L4和L7
[24:18.000 --> 24:21.000] 包括定制L7上面写意的一些内容的东西
[24:21.000 --> 24:25.000] 而我后端的像不管ASGI还是WSGL
[24:25.000 --> 24:28.000] 它就只专注于L7上面的东西
[24:28.000 --> 24:30.000] 而且它很多时候都不再需要
[24:30.000 --> 24:32.000] 对这个L7的请求做一些
[24:32.000 --> 24:34.000] 那我比较好奇
[24:34.000 --> 24:37.000] 就比如说大家用这种uwhisky这一层的时候
[24:37.000 --> 24:40.000] 除了比如说进程数timeout之外
[24:40.000 --> 24:43.000] 还会自己去定制一些别的配置吗
[24:44.000 --> 24:46.000] 你是说其他配置是指
[24:47.000 --> 24:52.000] 因为其实uwhisky这层也是whisky网关的
[24:52.000 --> 24:53.000] 就比如说也会去
[24:53.000 --> 24:56.000] 可以支持加载一些middleware这种
[24:56.000 --> 25:00.000] 我在博客上是用了这套的
[25:00.000 --> 25:03.000] 然后我看看我当时配了什么
[25:03.000 --> 25:08.000] 因为我发现大家就自作配一个进程数
[25:08.000 --> 25:09.000] 超时
[25:09.000 --> 25:10.000] 然后
[25:12.000 --> 25:16.000] 对因为其实你有三个东西
[25:16.000 --> 25:18.000] 你在uwhisky配的东西
[25:18.000 --> 25:20.000] 有一部分jungle也可以配
[25:20.000 --> 25:22.000] 有一部分engx也可以配
[25:22.000 --> 25:24.000] 主要就是进程数
[25:24.000 --> 25:28.000] 然后包括它进程数里面具体使用什么样的worker
[25:28.000 --> 25:30.000] 然后或者说是还有一些超时
[25:30.000 --> 25:33.000] 还有一些就说日之收起类的主要配置
[25:33.000 --> 25:36.000] 对我感觉我那些就设置了一个进程数
[25:36.000 --> 25:38.000] 然后以及log要超到哪
[25:38.000 --> 25:40.000] 就更多的优化
[25:40.000 --> 25:42.000] 大家用的方法还是挺一致的
[25:42.000 --> 25:45.000] 就不像上面的engx或者后面的代码实现
[25:45.000 --> 25:50.000] 对更多的配置像instagram那样的
[25:50.000 --> 25:52.000] 就是说是需要去魔改的配置的话
[25:52.000 --> 25:54.000] 我觉得还是挺少的
[25:56.000 --> 25:59.000] 好吧那这个话题我们就其实聊了挺久了
[25:59.000 --> 26:01.000] 然后应该大家都讲过了
[26:01.000 --> 26:02.000] 对吧
[26:02.000 --> 26:03.000] 还有老文没有讲
[26:03.000 --> 26:04.000] ok
[26:04.000 --> 26:07.000] 那我就先来推荐一个视频吧
[26:07.000 --> 26:09.000] Pycon 2015
[26:09.000 --> 26:11.000] 我觉得很多人都会看过
[26:11.000 --> 26:13.000] 但是我们也是很多
[26:13.000 --> 26:17.000] 比如说初级或中级工程师的时候
[26:17.000 --> 26:19.000] 去问一些
[26:20.000 --> 26:22.000] 什么是串行
[26:22.000 --> 26:23.000] 什么是并行
[26:23.000 --> 26:24.000] 对什么是同步
[26:24.000 --> 26:25.000] 什么是异步
[26:25.000 --> 26:26.000] 什么是并发
[26:26.000 --> 26:28.000] 什么是并行的时候
[26:28.000 --> 26:30.000] 感觉就很多人就哎
[26:30.000 --> 26:31.000] 讲着讲着就乱了
[26:31.000 --> 26:34.000] 对其实还挺推荐这个
[26:35.000 --> 26:38.000] David Bevely在Pycon 2015年的时候
[26:38.000 --> 26:41.000] 分享的那个特别出名的视频
[26:41.000 --> 26:44.000] 就是Python concurrency from the ground up
[26:44.000 --> 26:48.000] 他的视频我真的是觉得太烧脑了
[26:48.000 --> 26:50.000] 对就是徒手录代码
[26:50.000 --> 26:52.000] 对就是现场带着你写代码
[26:52.000 --> 26:54.000] 告诉你什么是Ioloop
[26:54.000 --> 26:56.000] 对什么是并发
[26:56.000 --> 26:57.000] 对这些东西
[26:57.000 --> 26:59.000] 对还是挺推荐的
[26:59.000 --> 27:03.000] 他的那个CURIO你们有人用过吗
[27:03.000 --> 27:04.000] 我不知道应该怎么念
[27:04.000 --> 27:06.000] CURIO那是啥
[27:06.000 --> 27:08.000] 就是Curio的替代品对吧
[27:08.000 --> 27:11.000] 就是他David Bevely
[27:11.000 --> 27:14.000] 撸的一个异步的框架
[27:14.000 --> 27:16.000] 那个我没用过
[27:16.000 --> 27:19.000] 我知道但是我没有怎么用过
[27:19.000 --> 27:20.000] OK
[27:20.000 --> 27:23.000] 他反正他的意思是
[27:23.000 --> 27:27.000] 他这个比官方那套要make sense的多
[27:27.000 --> 27:31.000] 但我不知道是不是这样
[27:31.000 --> 27:33.000] 对但是我用过他写的另外一个工具
[27:33.000 --> 27:36.000] 特别好用叫PLY
[27:36.000 --> 27:38.000] Netflix
[27:38.000 --> 27:39.000] 对
[27:41.000 --> 27:44.000] 对他的其实David Bevely的视频
[27:44.000 --> 27:46.000] 我觉得就你真的是
[27:46.000 --> 27:49.000] 我觉得我是觉得不是很适合新手了
[27:49.000 --> 27:52.000] 对但是就是如果你
[27:52.000 --> 27:54.000] 想对这个主题有深入了解的话
[27:54.000 --> 27:56.000] 肯定是很值得看
[27:56.000 --> 27:59.000] 对说到CURIO的话
[27:59.000 --> 28:02.000] 他那个有个好到什么样呢
[28:02.000 --> 28:03.000] 就是你们知道的
[28:03.000 --> 28:05.000] SyncIO存在的一个bug
[28:05.000 --> 28:07.000] 叫做那个SL连接泄露吗
[28:07.000 --> 28:09.000] 你之前说过对
[28:09.000 --> 28:11.000] 对之前可能大家
[28:11.000 --> 28:13.000] 就是听的这个朋友都不太清楚
[28:13.000 --> 28:15.000] 我就大概说一下
[28:15.000 --> 28:16.000] SyncIO的话
[28:16.000 --> 28:18.000] 它存在一个SL的泄露的问题
[28:18.000 --> 28:21.000] 就是说是就你在处理一些特定的HTTPS
[28:21.000 --> 28:23.000] 就是比如说这样的连接
[28:23.000 --> 28:26.000] 会造成连接泄露它没法正确的关闭
[28:26.000 --> 28:27.000] 然后这个时候的话
[28:27.000 --> 28:30.000] 它是从16年还是16年
[28:30.000 --> 28:33.000] 就开始SyncIO出来那一刻
[28:33.000 --> 28:35.000] 就开始存在的一个问题到现在
[28:35.000 --> 28:37.000] 前段时间有人
[28:37.000 --> 28:39.000] 就是说是大概去年12月份的时候
[28:39.000 --> 28:40.000] 有人有哥们问
[28:40.000 --> 28:43.000] 然后这个东西处理的怎么样了呢
[28:43.000 --> 28:45.000] 然后官方就说
[28:45.000 --> 28:47.000] 我们这个问题现在还在修复之中
[28:47.000 --> 28:49.000] 你可以等到我们Python3.8
[28:49.000 --> 28:50.000] 或者说你可以先去用一下
[28:50.000 --> 28:52.000] CURIO这样的第三方固
[28:52.000 --> 28:55.000] 你就能完美解决你的问题了
[28:55.000 --> 28:56.000] Good
[28:57.000 --> 29:00.000] 对所以说这就是正好老文提到CURIO的话
[29:00.000 --> 29:01.000] 然后不是
[29:01.000 --> 29:03.000] 那凯杰拉曼提到CURIO
[29:03.000 --> 29:06.000] 那么我就正好来吐槽了一下这个问题
[29:06.000 --> 29:08.000] 对也推荐一下CURIO
[29:08.000 --> 29:10.000] 官方自黑
[29:10.000 --> 29:12.000] 对然后来老文
[29:13.000 --> 29:14.000] 还有一个酷
[29:14.000 --> 29:16.000] 推荐了酷
[29:16.000 --> 29:18.000] 前一段时间在用的吧
[29:18.000 --> 29:21.000] 对其实一个
[29:21.000 --> 29:23.000] 做profiling的酷就是Pyflink
[29:23.000 --> 29:25.000] 对Uber酷的
[29:25.000 --> 29:26.000] 有几个优势吧
[29:26.000 --> 29:28.000] 对当时选行选了很多
[29:28.000 --> 29:30.000] 是因为其实
[29:30.000 --> 29:32.000] 我们去做一些profiling的时候
[29:32.000 --> 29:34.000] 会面临着一些场景是面向用户的场景
[29:34.000 --> 29:37.000] 你很难说自己去模拟啊之类的
[29:37.000 --> 29:39.000] 我们通常会选择
[29:39.000 --> 29:43.000] 去拷贝一些TCP流量或者是
[29:43.000 --> 29:44.000] 或者是你又想办法
[29:44.000 --> 29:45.000] 直接profiling线上的机器吧
[29:45.000 --> 29:47.000] 对但是其实后者是不推荐的
[29:47.000 --> 29:49.000] 那你拷贝了流量之后呢
[29:49.000 --> 29:51.000] 如果你想去做一些profiling
[29:51.000 --> 29:54.000] 常见的一些profiler的工具
[29:54.000 --> 29:56.000] 可能会要求你去改代码
[29:56.000 --> 29:58.000] 比如说我在某个地方开启profiling
[29:58.000 --> 30:00.000] 然后在某个地方关闭
[30:00.000 --> 30:04.000] 对然后Pyflink这个酷的优势
[30:04.000 --> 30:07.000] 就是它其实是基于C++和Linux
[30:07.000 --> 30:09.000] 这个Ptrace接口来实现的
[30:09.000 --> 30:11.000] 就是你不需要改你原本的
[30:11.000 --> 30:13.000] Python的任何代码
[30:13.000 --> 30:15.000] 对你可以直接用Pyflink这个工具
[30:15.000 --> 30:17.000] 去attach到那个进程上
[30:17.000 --> 30:19.000] 对我看到它可以attach到
[30:19.000 --> 30:21.000] 对attach之后
[30:21.000 --> 30:24.000] 它就可以去通过你那个Ptrace的hook
[30:24.000 --> 30:27.000] 然后去收集你的一些站的信息
[30:27.000 --> 30:30.000] 对其实对于你代码的变更
[30:30.000 --> 30:32.000] 是没有侵入性的
[30:32.000 --> 30:34.000] 这个我好像也用过一次
[30:34.000 --> 30:36.000] 对另外一点就是
[30:36.000 --> 30:39.000] 其实它对GEvent是非常友好的
[30:39.000 --> 30:41.000] 对我不知道
[30:41.000 --> 30:43.000] 我不知道大家有没有去尝试profiling
[30:43.000 --> 30:46.000] 一些GEvent的这种web server
[30:46.000 --> 30:48.000] 那完全是地狱
[30:48.000 --> 30:50.000] 如果说是之前没有
[30:50.000 --> 30:53.000] 类似于这样的一个优化的话
[30:53.000 --> 30:55.000] 是的就是如果你用其他的工具
[30:55.000 --> 30:57.000] 你其实根本不知道你的代码在干嘛
[30:57.000 --> 31:00.000] 你那个结果你其实是没有任何参考意义的
[31:00.000 --> 31:02.000] 大部分的工具
[31:02.000 --> 31:05.000] 它这个是可以把你那个
[31:05.000 --> 31:07.000] 就是我们用了非阻塞IO之后的
[31:07.000 --> 31:09.000] 那个空闲的时间
[31:09.000 --> 31:12.000] 就是切走的时间可以单独的列出来
[31:12.000 --> 31:14.000] 对然后你可以看到的就是
[31:14.000 --> 31:17.000] 你CPU在那个解释器上
[31:17.000 --> 31:21.000] 然后去执行的时候的各个执行站
[31:21.000 --> 31:23.000] 对然后主要因为它是从
[31:23.000 --> 31:25.000] 比较底层来做的对吧
[31:25.000 --> 31:27.000] 所以对对是这样的
[31:27.000 --> 31:29.000] 主要是另外有一些可能更
[31:29.000 --> 31:31.000] 也是从底层来做的话
[31:31.000 --> 31:33.000] 可能就是说是对GEvent的那个
[31:33.000 --> 31:37.000] 因为GEvent它其实站是各种站的切换
[31:37.000 --> 31:39.000] 然后的话那个时候对于
[31:39.000 --> 31:42.000] 其实对于那种profile工具来说
[31:42.000 --> 31:43.000] 是相当不友好的
[31:43.000 --> 31:46.000] 有些时候我们把它叫做GEvent的地域
[31:48.000 --> 31:49.000] 是
[31:50.000 --> 31:52.000] 它并没有专门
[31:52.000 --> 31:54.000] 它有专门对GEvent做优化吗
[31:54.000 --> 31:57.000] 还是就是它的构建方法
[31:57.000 --> 32:00.000] 已经能天然满足GEvent
[32:02.000 --> 32:04.000] 这个我可以再确认一下
[32:04.000 --> 32:07.000] 对但是它其实我当然看它的Dock
[32:07.000 --> 32:10.000] 它是专门是对GEvent做了一些优化
[32:10.000 --> 32:16.000] 对我对当时反正那个就是去年
[32:16.000 --> 32:18.000] 去年PyCon的时候
[32:18.000 --> 32:21.000] 张老师不是也提到好多吗
[32:21.000 --> 32:23.000] 这个也应该是其中之一吧
[32:23.000 --> 32:28.000] 对我翔哥的那个张翔老师的那个
[32:28.000 --> 32:33.000] 他就说是他也是对于GEvent远点颇深
[32:33.000 --> 32:36.000] 但是PYprofile它应该是Uber出了吧
[32:36.000 --> 32:39.000] 然后国内现在用的可能还挺多的
[32:39.000 --> 32:42.000] 不是叫PYprofile叫Pyflame
[32:42.000 --> 32:44.000] 对我一下读错对
[32:44.000 --> 32:46.000] 然后它是Uber出了嘛
[32:46.000 --> 32:48.000] 然后的话是说它的确是非常好用
[32:48.000 --> 32:50.000] 这一点我可以给老文作证
[32:50.000 --> 32:53.000] 因为我们之前查线上性能问题的时候
[32:53.000 --> 32:55.000] 基本上是必备的工具
[32:56.000 --> 32:57.000] 不过我有个concern
[32:57.000 --> 33:00.000] 我看到他的最后一次commit的时间
[33:00.000 --> 33:02.000] 是18年6月份
[33:04.000 --> 33:07.000] 这个对因为不是这种框架工具
[33:07.000 --> 33:12.000] 不会说我用着用着突然发现很多bug之类的
[33:12.000 --> 33:15.000] 大部分人还是去来直接使用的
[33:15.000 --> 33:17.000] 就是像这种库
[33:17.000 --> 33:21.000] 其实我会发现它的这个更新的频率确实是很低的
[33:21.000 --> 33:23.000] 你可以去看他那个
[33:24.000 --> 33:26.000] 看他那个整个的commit
[33:26.000 --> 33:30.000] 你会发现已经进入比较低频的一个时期了
[33:30.000 --> 33:32.000] 是的是相当低频
[33:32.000 --> 33:33.000] 其实是这样
[33:33.000 --> 33:36.000] 他第一个是走Ptrace的一个接口
[33:36.000 --> 33:37.000] 第二个
[33:37.000 --> 33:41.000] 他是其实是用了python的一部分CAPI来做解析的
[33:41.000 --> 33:42.000] 然后也就是说
[33:42.000 --> 33:44.000] 其实你如果版本里面你的CAPI
[33:44.000 --> 33:46.000] 不会有太大的broken那个前提的话
[33:46.000 --> 33:48.000] 那么其实对于他来讲
[33:48.000 --> 33:51.000] 是不再需要额外的去改什么东西了
[33:55.000 --> 33:58.000] 我觉得他画的那个火焰图帮助还是挺大的
[33:58.000 --> 33:59.000] 对他画火焰图
[33:59.000 --> 34:02.000] 其实是用了另外一个PAL写的工具
[34:02.000 --> 34:05.000] 火焰图那个其实是你需要自己去使用
[34:05.000 --> 34:07.000] 另外一个工具
[34:07.000 --> 34:08.000] 然后才能搞出来
[34:08.000 --> 34:11.000] 对但是他是会给出主要的那个信息出来
[34:12.000 --> 34:13.000] 好的
[34:13.000 --> 34:16.000] 他如果没有火焰不输出火焰图的话
[34:16.000 --> 34:17.000] 输出的是啥
[34:19.000 --> 34:21.000] 他其实是输出的一段
[34:21.000 --> 34:22.000] 类似于文本信息的
[34:22.000 --> 34:24.000] 就是说是各种调用信息的
[34:24.000 --> 34:25.000] 我明白明白
[34:25.000 --> 34:28.000] 然后他只是一个那个flame graph的输入
[34:28.000 --> 34:29.000] 对吧
[34:29.000 --> 34:31.000] 对对flame graph输入
[34:31.000 --> 34:33.000] 但是你用那个PAL工具的话
[34:33.000 --> 34:35.000] 它会产生一丝微积的火焰图
[34:35.000 --> 34:36.000] 好的
[34:36.000 --> 34:37.000] 今天这些推荐的库
[34:37.000 --> 34:39.000] 我觉得都是对于用户来说很有用的库
[34:39.000 --> 34:42.000] 希望各位听众下去之后可以尝试一下
[34:42.000 --> 34:44.000] 那我们就进入今天的主题
[34:44.000 --> 34:47.000] 今天主题是探讨一下新人程序员
[34:47.000 --> 34:50.000] 或者转行学习编程的同学需要什么
[34:50.000 --> 34:53.000] 我们会从自己的经历入手
[34:53.000 --> 34:54.000] 给出一些建议
[34:54.000 --> 34:56.000] 然后谈一谈有哪些坑
[34:56.000 --> 34:59.000] 比如说我不知道我们这边有几个人
[34:59.000 --> 35:01.000] 是就是本科学的
[35:01.000 --> 35:03.000] 就是计算机
[35:03.000 --> 35:04.000] 至少我不是
[35:04.000 --> 35:06.000] 我是你是
[35:06.000 --> 35:08.000] 对我是本科学的计算机
[35:08.000 --> 35:12.000] 但是因为我觉得其实我上学的时候
[35:12.000 --> 35:14.000] 教的也比较水了
[35:14.000 --> 35:16.000] 可以归类到和大家自学
[35:16.000 --> 35:18.000] 其实没有什么太大区别
[35:18.000 --> 35:20.000] 我觉得科班和非科班
[35:20.000 --> 35:23.000] 其实还是有挺大差别的
[35:23.000 --> 35:24.000] 对我来说
[35:24.000 --> 35:27.000] 其实python这边和科班
[35:27.000 --> 35:31.000] 其实真的是两条线
[35:31.000 --> 35:34.000] 然后对学校不会教
[35:34.000 --> 35:38.000] 对然后比如说如果说自学这条线的话
[35:38.000 --> 35:41.000] 我会觉得给大家推荐一篇文章
[35:41.000 --> 35:45.000] 对于是对我自学影响意义深远的
[35:45.000 --> 35:48.000] 叫做提问的智慧
[35:48.000 --> 35:55.000] 对对就是就是在看完这篇文章之后
[35:55.000 --> 35:58.000] 你瞬间会觉得你融入到了技术社区里
[35:58.000 --> 36:03.000] 对我对我其实最推荐的就是新人学编程
[36:03.000 --> 36:05.000] 就不论有没有计算机技术
[36:05.000 --> 36:08.000] 都应该看一下这个提问的智慧
[36:08.000 --> 36:11.000] 对就是你会学到很多
[36:11.000 --> 36:14.000] 在一些技术社区如何高效的沟通
[36:14.000 --> 36:16.000] 以及面对一些问题的时候
[36:16.000 --> 36:17.000] 你该怎么做
[36:17.000 --> 36:20.000] 对这个其实并不局限于python了
[36:20.000 --> 36:23.000] 它会方便快速的
[36:23.000 --> 36:26.000] 首先让你自己去找到很多
[36:26.000 --> 36:28.000] 自己能够找到答案的方式
[36:28.000 --> 36:31.000] 如果你找不到也能去正确的提问
[36:31.000 --> 36:33.000] 也能和其他社区里的人
[36:33.000 --> 36:36.000] 比较友好的共同的一种方式
[36:36.000 --> 36:40.000] 是的我其实但是有一个问题
[36:40.000 --> 36:43.000] 就比如说小白他提问的话
[36:43.000 --> 36:46.000] 他会就可能他不敢提问
[36:46.000 --> 36:49.000] 对吧然后就怕被人笑之类的
[36:49.000 --> 36:51.000] 其实有很多这样的情况
[36:51.000 --> 36:54.000] 可能一看你就是没去混过那种新手群的
[36:54.000 --> 36:57.000] 新手群的还不存在的那种
[36:57.000 --> 36:59.000] 就说是不敢提问什么
[36:59.000 --> 37:00.000] 他一般是这样
[37:00.000 --> 37:03.000] 然后突然冒出一句
[37:03.000 --> 37:05.000] 我怎么这个叉叉叉代码
[37:05.000 --> 37:07.000] 这个框架怎么运行不了了
[37:07.000 --> 37:09.000] 是的对然后还有就说是
[37:09.000 --> 37:11.000] 突然发一个截图
[37:11.000 --> 37:13.000] 我这个代码到底错在哪了
[37:13.000 --> 37:17.000] 有的有的有的对对对
[37:17.000 --> 37:19.000] 其实我其实老的那个我也很赞同
[37:19.000 --> 37:24.000] 然后我现在提问方式其实是我和一个新生学的
[37:24.000 --> 37:26.000] 然后的话他当时做的非常棒
[37:26.000 --> 37:27.000] 他是什么呢
[37:27.000 --> 37:29.000] 他是几段论
[37:29.000 --> 37:32.000] 他首先是把自己就说是的问题
[37:32.000 --> 37:33.000] 结合图发出来
[37:33.000 --> 37:35.000] 然后他想获得什么
[37:35.000 --> 37:36.000] 他很清楚的说明
[37:36.000 --> 37:38.000] 然后他然后列出了
[37:38.000 --> 37:40.000] 然后他自己现在看了
[37:40.000 --> 37:43.000] 就是哪些资料上面没有理解的东西
[37:43.000 --> 37:44.000] 然后最后还给了
[37:44.000 --> 37:46.000] 还给了就是类似于写补课一样
[37:46.000 --> 37:47.000] 给了一个reference
[37:47.000 --> 37:50.000] 把他的问题的那个代码的那个连接
[37:50.000 --> 37:53.000] 包括他的就是看的资料的连接都全部列出来了
[37:53.000 --> 37:55.000] 这个真的是范文了
[37:55.000 --> 37:57.000] 对这样简直我当时一看
[37:57.000 --> 37:59.000] 我很直接清晰明了的就看出来
[37:59.000 --> 38:01.000] 他到底问题在哪
[38:01.000 --> 38:03.000] 我该怎么样去帮他
[38:03.000 --> 38:07.000] 然后最后的话他能不能就是解决他这个问题
[38:07.000 --> 38:09.000] 就看的简直是身心瑜
[38:09.000 --> 38:11.000] 是这样的
[38:11.000 --> 38:12.000] 是
[38:12.000 --> 38:16.000] 而且新人会面临一个就是常见的就是XY问题
[38:16.000 --> 38:17.000] 对
[38:17.000 --> 38:20.000] 对这个就就很难解
[38:20.000 --> 38:22.000] 你可以简单介绍一下XY问题
[38:22.000 --> 38:25.000] 因为给听众朋友科普一下
[38:25.000 --> 38:26.000] 不知道的话
[38:26.000 --> 38:28.000] XY问题就是
[38:28.000 --> 38:32.000] 比如说我想要结果
[38:32.000 --> 38:36.000] 我想要得到的结果是A吧
[38:36.000 --> 38:40.000] 或者说我想要得到的结果应该是Y
[38:40.000 --> 38:44.000] 然后我自己选了一个方式是X
[38:44.000 --> 38:47.000] 这个方式本身可能就是错误的
[38:47.000 --> 38:49.000] 然后我在X上遇到了问题
[38:49.000 --> 38:53.000] 然后我就来问大家这个X到底是怎么了呀
[38:53.000 --> 38:55.000] 为什么这样不停啊
[38:55.000 --> 38:56.000] 对
[38:56.000 --> 39:00.000] 然后其实距离你真正想要的结果隔着超级超级远
[39:00.000 --> 39:01.000] 对
[39:01.000 --> 39:03.000] 然后
[39:03.000 --> 39:05.000] 你再去往Y的路上
[39:05.000 --> 39:07.000] 然后你本身就走偏到了X
[39:07.000 --> 39:09.000] 然后就遇到很多问题
[39:09.000 --> 39:12.000] 我这样解释清楚吗
[39:12.000 --> 39:16.000] 我们都知道所以我也不知道你解释的清不清楚
[39:16.000 --> 39:18.000] 我就去看提问的智慧吧
[39:18.000 --> 39:21.000] 我记得那里面有很明确的表述
[39:21.000 --> 39:27.000] 所以提问的智慧它是专门针对编程学习者的吗
[39:27.000 --> 39:29.000] 还是说它是一个general的
[39:29.000 --> 39:31.000] 是专门针对编程学习者的
[39:31.000 --> 39:32.000] OK
[39:32.000 --> 39:36.000] 但是其实我觉得那本书它也可以说是一本
[39:36.000 --> 39:40.000] 就是说是相当于就是说通用性的一个纸板
[39:40.000 --> 39:41.000] 那是一本书吗
[39:41.000 --> 39:44.000] 应该是一本书提问的智慧那是一本书
[39:44.000 --> 39:47.000] 我看的是一个开源的在线的文档
[39:47.000 --> 39:50.000] 对我印象中有20多个语言
[39:50.000 --> 39:53.000] 它其实是一本书提问的智慧
[39:53.000 --> 39:55.000] 不那个叫提问的艺术吧
[39:55.000 --> 39:56.000] 还是提问的智慧
[39:56.000 --> 39:58.000] 它的确最开始是一本书
[39:58.000 --> 40:00.000] 那个仓库可能是受到了启发
[40:00.000 --> 40:02.000] OK
[40:02.000 --> 40:06.000] 行之后别忘了把这篇文章的链接那个发过来
[40:06.000 --> 40:07.000] 好
[40:07.000 --> 40:11.000] 对提问的智慧的作者应该是那个
[40:11.000 --> 40:15.000] The Art of Unix Programming
[40:15.000 --> 40:18.000] 对那个Unix编程艺术的那个
[40:18.000 --> 40:19.000] 是个作者
[40:19.000 --> 40:21.000] 应该是同一个作者
[40:21.000 --> 40:24.000] 所以其实你们就觉得需要
[40:24.000 --> 40:28.000] 就新手需要解决的一个问题是怎么样
[40:28.000 --> 40:32.000] 自己去获得答案
[40:32.000 --> 40:34.000] 或者说从别人那里获得答案
[40:34.000 --> 40:35.000] 对吧
[40:35.000 --> 40:38.000] 我觉得就是你要学会正确提问吧
[40:38.000 --> 40:40.000] 就如果你的提问是不正确的
[40:40.000 --> 40:42.000] 就比如说我这个代码怎么总是有问题啊
[40:42.000 --> 40:43.000] 为什么贵啊
[40:43.000 --> 40:45.000] 这个框架是不是不太行啊
[40:45.000 --> 40:48.000] 那可能即使有人知道答案
[40:48.000 --> 40:50.000] 他也很少愿意去回答你
[40:50.000 --> 40:53.000] 对甚至还有可能跳出来喷你一顿
[40:53.000 --> 40:56.000] 对而且我觉得可能他更多的是一个态度问题吧
[40:56.000 --> 40:58.000] 很多时候新人
[40:58.000 --> 41:01.000] 特别是你如果是在那种图书的售后群之类的
[41:01.000 --> 41:03.000] 你会发现其实很多新人
[41:03.000 --> 41:05.000] 他并不是把自己当做一个新人
[41:05.000 --> 41:08.000] 而是把自己当做一个大爷来看的
[41:08.000 --> 41:09.000] 就说是对
[41:09.000 --> 41:12.000] 然后他有些时候没有回答就就给个代码
[41:12.000 --> 41:16.000] 我求大佬们求看看我这个代码有没有什么问题啊
[41:16.000 --> 41:18.000] 然后大家基本上都难得去理他
[41:18.000 --> 41:20.000] 然后最后他还会跳出来喷你一顿
[41:20.000 --> 41:22.000] 你们这个群有没有大佬啊
[41:22.000 --> 41:23.000] 你们这群什么群啊
[41:23.000 --> 41:24.000] 怎么都是菜鸡啊
[41:24.000 --> 41:25.000] 我的问题怎么没有回答
[41:25.000 --> 41:27.000] 大概就是这样
[41:27.000 --> 41:29.000] 你描述的太形象了
[41:29.000 --> 41:34.000] 但是我觉得我们还是应该从就是给建议这个方向入手
[41:34.000 --> 41:38.000] 而不是仅仅就是去抱怨新人怎么怎么样啊
[41:38.000 --> 41:39.000] 因为这种对吧
[41:39.000 --> 41:42.000] 我们还是要从正面的角度去说
[41:42.000 --> 41:43.000] 对
[41:43.000 --> 41:46.000] 所以就按照老温说的吧
[41:46.000 --> 41:49.000] 我觉得他可能就说是新人最开始可能最重要一本书
[41:49.000 --> 41:51.000] 就是提问的智慧吧
[41:51.000 --> 41:53.000] 关于提问我再补充一点
[41:53.000 --> 41:56.000] 就是我发现不好的问题就是
[41:56.000 --> 42:01.000] 要么你你没有给别人表达出来你遇到的问题
[42:01.000 --> 42:03.000] 因为很多人一贴就贴很多代码
[42:03.000 --> 42:05.000] 就是跟问题无关的一贴上
[42:05.000 --> 42:07.000] 有一个技巧就是你一定
[42:07.000 --> 42:10.000] 不论你设计什么框架什么库也好
[42:10.000 --> 42:13.000] 你一定要提供一个最小的能复现的案例
[42:13.000 --> 42:16.000] 首先有两点
[42:16.000 --> 42:18.000] 这句话第一是能复现
[42:18.000 --> 42:19.000] 这个是肯定的嘛
[42:19.000 --> 42:22.000] 第二是最小化的一定要是最小的
[42:22.000 --> 42:27.000] 假如说你的你提供的代码里面跟你要问的问题是没有关系的
[42:27.000 --> 42:31.000] 但是你懒得把你自己的逻辑给去掉
[42:31.000 --> 42:32.000] 这就是一个不好的问题
[42:32.000 --> 42:34.000] 你就是一个深受的
[42:34.000 --> 42:37.000] 有可能其实你提供出来这个最小的案例
[42:37.000 --> 42:41.000] 你已经很多时候你就基本上可以发现问题了
[42:41.000 --> 42:42.000] 对吧
[42:42.000 --> 42:45.000] 对我所以我其实觉得
[42:45.000 --> 42:47.000] 就是最基础的debug
[42:47.000 --> 42:52.000] 其实也是尽早越早掌握越好的一个事情
[42:52.000 --> 42:54.000] 就比如说print
[42:54.000 --> 42:57.000] 如果没有其他变身基础
[42:57.000 --> 42:59.000] 那我建议就是多打print
[42:59.000 --> 43:01.000] print12345也ok
[43:01.000 --> 43:04.000] 对新人来说是能够定位的
[43:04.000 --> 43:06.000] 像很多大牛
[43:06.000 --> 43:09.000] 我见到他们就说就比如说credo吧
[43:09.000 --> 43:11.000] 他说他从来不用调试工具
[43:11.000 --> 43:12.000] 就只靠print
[43:12.000 --> 43:13.000] 我记得他是这样说的
[43:13.000 --> 43:16.000] 所以然后关于print的一个建议就是
[43:16.000 --> 43:18.000] 我记得我以前刚刚自学的时候
[43:18.000 --> 43:19.000] 如果你要打print
[43:19.000 --> 43:23.000] 那你在比如说第10行打印了print1
[43:23.000 --> 43:26.000] 那你在下一行千万不要直接复制这个print1
[43:26.000 --> 43:27.000] 是的
[43:27.000 --> 43:30.000] 反正区别一下就好了
[43:30.000 --> 43:34.000] 如果可以的话学习一下logger
[43:34.000 --> 43:35.000] logger会用一辈子的
[43:35.000 --> 43:37.000] 比print好一点
[43:37.000 --> 43:43.000] 我反而建议说print之后可以尝试一下pdb
[43:43.000 --> 43:47.000] 因为logger可能需要
[43:47.000 --> 43:52.000] 我建议logger可能需要你去看python官方的文档
[43:52.000 --> 43:55.000] 然后真正的用在生产环境上会好一些
[43:55.000 --> 43:57.000] 你们这真的是给新手在推荐吗
[43:57.000 --> 44:00.000] 我觉得你pdb太硬核了
[44:00.000 --> 44:01.000] 虽然我用pdb
[44:01.000 --> 44:03.000] 但是不是特别新手
[44:03.000 --> 44:06.000] 我觉得其实就是说是
[44:06.000 --> 44:09.000] 他可以去把pycharm用好就行了
[44:09.000 --> 44:14.000] 因为pycharm其实针对那个python的调试工具
[44:14.000 --> 44:15.000] 其实做了蛮多优化
[44:15.000 --> 44:17.000] 其实已经非常非常易用了
[44:17.000 --> 44:19.000] 如果说新手的话
[44:19.000 --> 44:20.000] 就像老王刚刚说的
[44:20.000 --> 44:23.000] 如果说新手想要去学调试工具的话
[44:23.000 --> 44:25.000] 可能我更多的推荐就是pycharm
[44:25.000 --> 44:27.000] 你去把pycharm用好
[44:27.000 --> 44:30.000] 对其实我觉得新手用IDE入门
[44:30.000 --> 44:32.000] 就比如pycharm会好一点
[44:32.000 --> 44:33.000] 不知道你们怎么
[44:33.000 --> 44:36.000] 你是说编辑代码还是说调试
[44:36.000 --> 44:40.000] 因为编辑和写代码和调试是一体的
[44:40.000 --> 44:42.000] 所以你肯定
[44:44.000 --> 44:48.000] 我们还确认说要不要编辑和调试分开
[44:48.000 --> 44:50.000] 但是我的建议是
[44:50.000 --> 44:56.000] 你要把折腾编辑器和IDE和你学习编程这件事分开
[44:57.000 --> 44:59.000] 对对对这个我很同意的
[44:59.000 --> 45:01.000] 千万不要说我学python
[45:01.000 --> 45:02.000] 然后我花了一周时间
[45:02.000 --> 45:04.000] 把我的vim搞成什么什么样子
[45:04.000 --> 45:09.000] 然后你的python其实没有任何进步
[45:10.000 --> 45:12.000] 这个我有相反的观点
[45:12.000 --> 45:14.000] 因为我只用vim
[45:14.000 --> 45:19.000] 我的建议是你可以跟python跟vim分开学
[45:19.000 --> 45:21.000] 你学vim的话可能要学一个月
[45:21.000 --> 45:23.000] 但是你学python
[45:23.000 --> 45:25.000] 你比如说花一个星期配置一下环境
[45:25.000 --> 45:27.000] 学一下相关的插件
[45:27.000 --> 45:31.000] 你配置vim其实是配置python的一些lint工具
[45:31.000 --> 45:33.000] 格式化工具
[45:33.000 --> 45:36.000] 我建议就这两件事你要分开走
[45:36.000 --> 45:40.000] 明确的是我在配置vim和学python
[45:40.000 --> 45:42.000] 而不是说我学python的前置条件
[45:42.000 --> 45:45.000] 是我先去把工具搞得特别齐全
[45:45.000 --> 45:48.000] 对对我觉得这个是正常的
[45:48.000 --> 45:49.000] 因为就有很多人说
[45:49.000 --> 45:52.000] 我去折腾vim是为了更好的学python
[45:52.000 --> 45:54.000] 我觉得在最开始抱有这样的想法
[45:54.000 --> 45:56.000] 其实是不太ok的
[45:59.000 --> 46:00.000] okok
[46:00.000 --> 46:02.000] 但是我现在一般
[46:02.000 --> 46:06.000] 比如说我去写loll可能花上一天的时间
[46:06.000 --> 46:07.000] 配置一下vim
[46:07.000 --> 46:10.000] 或者去写go去写rust
[46:10.000 --> 46:12.000] 我可能都要花很长时间先配置一下
[46:12.000 --> 46:13.000] 我觉得是值得的
[46:13.000 --> 46:15.000] 我觉得你不算新人了
[46:15.000 --> 46:17.000] 你已经是有经验的
[46:17.000 --> 46:19.000] 是experienced programmer
[46:19.000 --> 46:21.000] 对我觉得你是能很清楚的知道
[46:21.000 --> 46:23.000] 你想要什么
[46:23.000 --> 46:25.000] 然后你有很明确的一个
[46:25.000 --> 46:27.000] 就是说是自己的一个导向
[46:27.000 --> 46:29.000] 而新人很多时候是并不知道的
[46:29.000 --> 46:31.000] 就是陷入无意义的折腾之中
[46:31.000 --> 46:33.000] 对我觉得新人最需要的
[46:33.000 --> 46:35.000] 就是一个开箱即用的东西
[46:35.000 --> 46:37.000] 不管它是VS code
[46:37.000 --> 46:40.000] 还是pycharm还是vim也好
[46:40.000 --> 46:42.000] 然后你开箱即用
[46:42.000 --> 46:44.000] 你就开始学那些你最应该去学的东西
[46:44.000 --> 46:46.000] 而不是花时间在
[46:46.000 --> 46:49.000] 其实并不是真正核心的东西上面
[46:49.000 --> 46:50.000] 然后你有可能就比如说
[46:50.000 --> 46:52.000] 你配置一个什么
[46:52.000 --> 46:53.000] 就比如配置vim吧
[46:53.000 --> 46:55.000] 然后你一直配置不好
[46:55.000 --> 46:57.000] 然后你就很沮丧
[46:57.000 --> 46:59.000] 但是其实你这些都是和学习编程
[46:59.000 --> 47:01.000] 并没有直接关系的事情
[47:01.000 --> 47:03.000] 对
[47:03.000 --> 47:06.000] 但是长期来说工具
[47:06.000 --> 47:09.000] 作为一个人一辈子用的东西吧
[47:09.000 --> 47:11.000] 对这个当然是
[47:11.000 --> 47:13.000] 一开始的话
[47:13.000 --> 47:15.000] 一开始的话要怎么快怎么来
[47:15.000 --> 47:17.000] 对但其实就是
[47:17.000 --> 47:19.000] Jupiter也不错
[47:19.000 --> 47:20.000] Jupiter也不错对吧
[47:20.000 --> 47:23.000] 对我觉得Jupiter很适合新手
[47:23.000 --> 47:25.000] 我也觉得
[47:25.000 --> 47:27.000] Jupiter真的很好用
[47:27.000 --> 47:30.000] 对Jupiter的话
[47:30.000 --> 47:32.000] 所见即所得
[47:32.000 --> 47:34.000] 然后想弄什么
[47:34.000 --> 47:36.000] 直接打出来就好了
[47:36.000 --> 47:38.000] 它很多时候可以适合用来
[47:38.000 --> 47:41.000] 当做看书上练习的一个操作本
[47:41.000 --> 47:44.000] 是很多课程现在都用Jupiter了
[47:44.000 --> 47:45.000] 对对对
[47:45.000 --> 47:47.000] 说实话我也很推荐Jupiter
[47:47.000 --> 47:49.000] 的确很适合新手
[47:49.000 --> 47:50.000] 而且还有个好处
[47:50.000 --> 47:51.000] 你如果用Jupiter
[47:51.000 --> 47:53.000] 你把你自己代码可以发给别人
[47:53.000 --> 47:56.000] 然后就很容易看到你错误在哪里
[47:56.000 --> 47:58.000] 对的确是
[47:58.000 --> 48:00.000] 是然后
[48:00.000 --> 48:03.000] 那我来聊一聊我对于新手什么建议吧
[48:03.000 --> 48:06.000] 对我觉得我对于新手的建议
[48:06.000 --> 48:08.000] 其实是两点
[48:08.000 --> 48:12.000] 第一个的话其实是把目标放明确
[48:12.000 --> 48:15.000] 就是说你学编程你到底是为了什么
[48:15.000 --> 48:16.000] 因为我见过
[48:16.000 --> 48:18.000] 其实大家可能知道我在知乎上
[48:18.000 --> 48:20.000] 会有一些人邀请我提问
[48:20.000 --> 48:22.000] 或者是有些人私信问我
[48:22.000 --> 48:23.000] 然后其实我更多的时候
[48:23.000 --> 48:25.000] 发现很多大家觉得
[48:25.000 --> 48:26.000] 就是说是他有
[48:26.000 --> 48:28.000] 他没有一个明确的认知
[48:28.000 --> 48:30.000] 就很多比如说英届大学生来问我
[48:30.000 --> 48:32.000] 哎我找不到工作了
[48:32.000 --> 48:34.000] 我要不要去学一下编程
[48:34.000 --> 48:35.000] 或者说是
[48:35.000 --> 48:36.000] 就是说是
[48:36.000 --> 48:38.000] 其他转行的人来说
[48:38.000 --> 48:41.000] 我自己觉得本专业也不太好了
[48:41.000 --> 48:43.000] 我听说编程人傻钱多
[48:43.000 --> 48:45.000] 他们IT行业的人傻钱多
[48:45.000 --> 48:46.000] 然后速来
[48:46.000 --> 48:47.000] 然后我就去了
[48:47.000 --> 48:49.000] 然后培训班告诉我说
[48:49.000 --> 48:51.000] 我毕业之后每个月能2万块钱的工资
[48:51.000 --> 48:52.000] 对吧
[48:52.000 --> 48:54.000] 所以说我觉得他们不能说
[48:54.000 --> 48:55.000] 我的思想是错误的
[48:55.000 --> 48:56.000] 但是我可能觉得
[48:56.000 --> 48:58.000] 他可能还是要给自己
[48:58.000 --> 49:01.000] 一个更清晰的一个说是目标
[49:01.000 --> 49:03.000] 就是我学编程是为了什么
[49:03.000 --> 49:06.000] 不管你说是我学编程是为了进大厂
[49:06.000 --> 49:07.000] 还是我学编程
[49:07.000 --> 49:09.000] 只是为了解决我某一个问题
[49:09.000 --> 49:12.000] 或者说学编程只是好玩也好
[49:12.000 --> 49:13.000] 但是需要有个明确的目标
[49:13.000 --> 49:16.000] 而不是听别人怎么怎么说
[49:16.000 --> 49:17.000] 我就来了
[49:17.000 --> 49:19.000] 所以我觉得这个东西是在
[49:19.000 --> 49:20.000] 对整个编程生涯
[49:20.000 --> 49:22.000] 都很有用的一个东西
[49:22.000 --> 49:23.000] 不然可能因为
[49:23.000 --> 49:25.000] 就是说是你遇到了一点问题
[49:25.000 --> 49:26.000] 你就会觉得
[49:26.000 --> 49:27.000] 我操当时那个给我说的
[49:27.000 --> 49:29.000] 是骗我不学了不学了不学了
[49:29.000 --> 49:30.000] 这个要剪掉
[49:30.000 --> 49:32.000] 这个脏话要剪掉
[49:32.000 --> 49:33.000] 好好好
[49:33.000 --> 49:36.000] 就说是那个就不可能说是
[49:36.000 --> 49:38.000] 遇到一点困难就说
[49:38.000 --> 49:42.000] 我去这个他当时绝对是在骗我
[49:42.000 --> 49:44.000] 然后我就不学了不学了
[49:44.000 --> 49:45.000] 所以我觉得
[49:45.000 --> 49:47.000] 如果想在这一行走的
[49:47.000 --> 49:48.000] 就是说是深入一些
[49:48.000 --> 49:49.000] 或者走的发展的好一些
[49:49.000 --> 49:51.000] 最开始一个明确的目标
[49:51.000 --> 49:52.000] 是非常重要的
[49:52.000 --> 49:55.000] 而且可能就是说是明确的目标
[49:55.000 --> 49:57.000] 就包括了给自己定几个
[49:57.000 --> 49:59.000] 关键的任务和关键的时间链
[49:59.000 --> 50:01.000] 我当时学python的时候就这样
[50:01.000 --> 50:03.000] 我给我自己列了些任务
[50:03.000 --> 50:05.000] 目前看起来完成度还不错
[50:05.000 --> 50:06.000] 然后的话就说
[50:06.000 --> 50:08.000] 有这样的任务在手
[50:08.000 --> 50:09.000] 我就能很清楚的知道
[50:09.000 --> 50:10.000] 我什么时候该学什么
[50:10.000 --> 50:12.000] 什么时候当时列了什么任务
[50:12.000 --> 50:15.000] 我当时列了任务
[50:15.000 --> 50:16.000] 我想一想
[50:16.000 --> 50:17.000] 大概是这样
[50:17.000 --> 50:18.000] 稍等一下
[50:18.000 --> 50:20.000] 我来看一下我的note
[50:20.000 --> 50:22.000] 然后我
[50:22.000 --> 50:23.000] 没有你先找
[50:23.000 --> 50:24.000] 其实关于你说的这个
[50:24.000 --> 50:26.000] 我是很赞同
[50:26.000 --> 50:27.000] 但是我也有一个问题
[50:27.000 --> 50:28.000] 就是说
[50:28.000 --> 50:31.000] 因为我们经常会遇到的一个问题
[50:31.000 --> 50:33.000] 是就是你并不知道
[50:33.000 --> 50:35.000] 你不知道的那些东西
[50:35.000 --> 50:37.000] 比如说比如说举个例子
[50:37.000 --> 50:38.000] 就在我们看来
[50:38.000 --> 50:41.000] 我们就是能很清晰的看到
[50:41.000 --> 50:42.000] 一个新手
[50:42.000 --> 50:43.000] 比如说应该学些什么
[50:43.000 --> 50:45.000] 然后他学到
[50:45.000 --> 50:46.000] 包括学到什么样的程度
[50:46.000 --> 50:49.000] 就可以去试着找一下工作了
[50:49.000 --> 50:52.000] 然后就是包括短板在哪里
[50:52.000 --> 50:53.000] 一些这种什么的
[50:53.000 --> 50:55.000] 但是就比如说一个
[50:55.000 --> 50:58.000] 对于一个初入门学编程的人来说
[50:58.000 --> 50:59.000] 他前面这些信息
[50:59.000 --> 51:01.000] 他是并不知道
[51:01.000 --> 51:04.000] 就他并不并不能很清晰的定位
[51:04.000 --> 51:05.000] 自己到底处在一个什么位置
[51:05.000 --> 51:07.000] 就我是不是学的足够了
[51:07.000 --> 51:08.000] 然后能不能去找工作
[51:08.000 --> 51:10.000] 所以你也经常能看到这种问题
[51:10.000 --> 51:11.000] 就是说
[51:11.000 --> 51:12.000] 就是我做一些什么项目
[51:12.000 --> 51:13.000] 然后我
[51:13.000 --> 51:14.000] 但是我并不知道
[51:14.000 --> 51:15.000] 我能不能进大厂
[51:15.000 --> 51:17.000] 或者怎么样
[51:17.000 --> 51:18.000] 就其实对吧
[51:18.000 --> 51:21.000] 这个也是一个问题
[51:21.000 --> 51:23.000] 对这的确是一个问题
[51:23.000 --> 51:26.000] 但是可能这种问题的话
[51:26.000 --> 51:28.000] 这种问题其实很常见
[51:28.000 --> 51:29.000] 每个人都会有
[51:29.000 --> 51:30.000] 就包括我自己
[51:30.000 --> 51:32.000] 就是说可能我自己写了两年python
[51:32.000 --> 51:33.000] 但是在去年面试的时候
[51:33.000 --> 51:36.000] 有些时候我自己也会问我自己很多问题
[51:36.000 --> 51:38.000] 但是我觉得可能说
[51:38.000 --> 51:41.000] 你自己对于关于你这个目标来说
[51:41.000 --> 51:43.000] 你可能是一个不太正确的
[51:43.000 --> 51:44.000] 或者说你可能是一个太过于短视的
[51:44.000 --> 51:45.000] 或者说是
[51:45.000 --> 51:48.000] 你可能是一个稍微就是说是偏一些
[51:48.000 --> 51:50.000] 或者说是艰难一些的目标
[51:50.000 --> 51:52.000] 但是是一定要有的
[51:52.000 --> 51:53.000] 就是很明确的
[51:53.000 --> 51:54.000] 对
[51:54.000 --> 51:57.000] 然后你自己一定要按照这个目标去行去做
[51:57.000 --> 52:02.000] 然后这样即便说是你在那个后面突然遇到了一些问题
[52:02.000 --> 52:06.000] 可能说我自己需要去改一下我自己的希望
[52:06.000 --> 52:07.000] 或者说什么样的东西
[52:07.000 --> 52:10.000] 那么你之前的努力也不是白费的
[52:10.000 --> 52:12.000] 而不是说你像一头乱麻一样
[52:12.000 --> 52:14.000] 别人说编程好学
[52:14.000 --> 52:16.000] 我就马上来学别人
[52:16.000 --> 52:17.000] 我先学了Java
[52:17.000 --> 52:19.000] 然后突然发现Java找不到工作
[52:19.000 --> 52:22.000] 然后我听说别人说Python现在是人工智能的
[52:22.000 --> 52:23.000] 然后高科技
[52:23.000 --> 52:24.000] 我马上又去学Python
[52:24.000 --> 52:26.000] 结果发现自己又找不到工作
[52:26.000 --> 52:30.000] 我觉得这样东西就是一个完全一个做的无用功
[52:30.000 --> 52:32.000] 我大概是这样认为的
[52:32.000 --> 52:33.000] OK
[52:33.000 --> 52:35.000] 现在是区块链对吧
[52:35.000 --> 52:37.000] 对现在是区块链
[52:37.000 --> 52:40.000] 现在还是区块链吗
[52:40.000 --> 52:41.000] 还是区块链
[52:41.000 --> 52:42.000] 区块链已经不火了吧
[52:42.000 --> 52:44.000] 区块链和人工智能吧
[52:44.000 --> 52:45.000] 人工智能吧现在是
[52:45.000 --> 52:46.000] 对人工智能
[52:46.000 --> 52:51.000] 我怎么感觉几乎上说AI已经什么又是泡沫了
[52:51.000 --> 52:56.000] 对说实话我觉得的话可能就是说是一个目标很重要
[52:56.000 --> 52:58.000] 我当时我找一下
[52:58.000 --> 53:02.000] 我当时在那个差不多就是说是刚学
[53:02.000 --> 53:05.000] 因为我是刚学了一两个星期Python就是工作
[53:05.000 --> 53:06.000] 然后刚工作的时候
[53:06.000 --> 53:10.000] 我给自己的目标是组织一场Python的活动
[53:10.000 --> 53:12.000] 公开做一次分享
[53:12.000 --> 53:14.000] 然后组织一次Python channel
[53:14.000 --> 53:16.000] 然后在Python channel上做一次主题分享
[53:16.000 --> 53:19.000] 然后去Python US做一次主题分享
[53:19.000 --> 53:22.000] 然后最后晋升成为Python的Core
[53:22.000 --> 53:24.000] 然后对这是我当时的目标
[53:24.000 --> 53:27.000] 目前看起来我1234都完成了
[53:27.000 --> 53:29.000] 然后现在还缺五和六
[53:29.000 --> 53:32.000] 希望你可以完成
[53:32.000 --> 53:35.000] 我觉得你已经不属于一般的新人了
[53:35.000 --> 53:37.000] 很多新人可能都不知道
[53:37.000 --> 53:40.000] 说PyCon甚至不知道去哪找学习资料
[53:40.000 --> 53:45.000] 对然后其实这也是我关于
[53:45.000 --> 53:48.000] 我关于说Python的第二点的东西
[53:48.000 --> 53:51.000] 其实我觉得因为我当时其实到现在
[53:51.000 --> 53:54.000] 我师父也让我当时其实是跟一个
[53:54.000 --> 53:56.000] 就说是算是我现在是教师父
[53:56.000 --> 53:59.000] 当时他虽然没有明确的这种他是带我
[53:59.000 --> 54:01.000] 但是我之前在问他问题的时候
[54:01.000 --> 54:04.000] 他给我培养了一个就是说非常好的习惯
[54:04.000 --> 54:08.000] 就是说这个是在我职业早期培养的非常好的习惯
[54:08.000 --> 54:11.000] 到现在依旧受用而且会受用很久
[54:11.000 --> 54:13.000] 就是说是遇到不懂的问题之前
[54:13.000 --> 54:16.000] 一定要先靠自己去搜索看文档
[54:16.000 --> 54:19.000] 因为我见过很多新人的一个问题在于
[54:19.000 --> 54:22.000] 就是说因为我可能会有些时候会去
[54:22.000 --> 54:24.000] 在各种群里面去帮新人
[54:24.000 --> 54:28.000] 然后的话我见过新人可能最大的一个问题是在于
[54:28.000 --> 54:31.000] 他们很多的问题是在文档
[54:31.000 --> 54:34.000] 或者说是在某一些网站一些个人博客
[54:34.000 --> 54:38.000] 或者说其他的东西都是有过明确记录的
[54:38.000 --> 54:40.000] 但是他们就不去搜索
[54:40.000 --> 54:45.000] 然后的话就选择来自己去问一下
[54:45.000 --> 54:48.000] 这个东西其实是一个很耗费时间的一个过程
[54:48.000 --> 54:51.000] 不知道你们见过鸟哥那个表情包没有
[54:51.000 --> 54:56.000] 之前有人在PHP里面PHP群里面问题
[54:56.000 --> 54:57.000] 鸟哥当时就说
[54:57.000 --> 54:58.000] 他在写事情
[54:58.000 --> 55:01.000] 我原来也写PHP的
[55:01.000 --> 55:02.000] 然后的话对
[55:02.000 --> 55:07.000] 然后两个当时就说这么简单的问题
[55:07.000 --> 55:09.000] 你不百度不谷歌
[55:09.000 --> 55:12.000] 选取了最低效的方式在群里来问
[55:12.000 --> 55:13.000] 你说你傻不傻
[55:13.000 --> 55:14.000] 这是两则的原话
[55:14.000 --> 55:17.000] 所以说我觉得可能新人更多的就是说是
[55:17.000 --> 55:20.000] 主观的一个冷冻性
[55:20.000 --> 55:24.000] 以及一些就是说养成去看文档
[55:24.000 --> 55:27.000] 优先去文档里面找答案这样一个习惯
[55:27.000 --> 55:30.000] 对于新人来说是非常重要的
[55:30.000 --> 55:32.000] 对这个我是非常同意的
[55:32.000 --> 55:35.000] 就我觉得其实你们两个说的
[55:35.000 --> 55:39.000] 归结起来一点就是要让新人
[55:39.000 --> 55:43.000] 最主要的是需要知道怎么样去更有效的获取信息
[55:43.000 --> 55:45.000] 然后我还听过一个很有意思的说法
[55:45.000 --> 55:50.000] 就是说为什么你从来没有见到那些大牛去在网上提问题
[55:50.000 --> 55:55.000] 然后因为他们在提问题之前自己就把问题解决了
[55:55.000 --> 55:58.000] 就通过比如说搜索或者自己研究的方式
[55:58.000 --> 56:01.000] 所以就也是一个很有意思的说法
[56:01.000 --> 56:04.000] 我觉得这其实是一个必备的技能
[56:04.000 --> 56:06.000] 其实不只是编程
[56:06.000 --> 56:08.000] 就是你要学会自己去找答案
[56:08.000 --> 56:12.000] 对这应该是新时代人类要必备的技能
[56:12.000 --> 56:14.000] 对我也赞同
[56:14.000 --> 56:17.000] 然后就说可能这个东西并不仅限于编程
[56:17.000 --> 56:20.000] 就是你自己的主东西来讲
[56:20.000 --> 56:22.000] 就是说是非常非常重要
[56:22.000 --> 56:27.000] 对然后我就再次安利一下提问的智慧
[56:27.000 --> 56:29.000] 他在提问之前也会告诉你
[56:29.000 --> 56:32.000] 我印象中有很多种方法
[56:32.000 --> 56:34.000] 就是你要先去搜答案
[56:34.000 --> 56:36.000] 你要先去看手册
[56:36.000 --> 56:38.000] 你要看完手册你还是不OK
[56:38.000 --> 56:40.000] 你要尝试去看代码
[56:40.000 --> 56:42.000] 你看不懂了你再去提问
[56:42.000 --> 56:44.000] 对就说是这样
[56:44.000 --> 56:46.000] 你们还记得我刚才说的
[56:46.000 --> 56:47.000] 我之前一个遇到一个新人
[56:47.000 --> 56:49.000] 他可以说是在这方面算我老师
[56:49.000 --> 56:50.000] 你们还记得刚才那个新人吗
[56:50.000 --> 56:53.000] 是对就说是他非常棒的
[56:53.000 --> 56:55.000] 就说是他自己去找了资料
[56:55.000 --> 56:57.000] 然后他把自己找的资料
[56:57.000 --> 56:59.000] 这些东西全部列出来
[56:59.000 --> 57:00.000] 列出来之后他把自己
[57:00.000 --> 57:01.000] 而且很明确告诉你
[57:01.000 --> 57:03.000] 这个资料上面哪些东西他不懂
[57:03.000 --> 57:04.000] 就说是他问题是什么
[57:04.000 --> 57:05.000] 他哪些不懂了
[57:05.000 --> 57:07.000] 然后他需要得到什么样的答案
[57:07.000 --> 57:10.000] 对吧然后的话他列出来之后
[57:10.000 --> 57:11.000] 然后这个东西有一个好处
[57:11.000 --> 57:13.000] 你先去主动找了之后有什么好处
[57:13.000 --> 57:16.000] 这样就不用在别人再去先找一次
[57:16.000 --> 57:17.000] 因为大家都有个惰性
[57:17.000 --> 57:19.000] 就是你在提问的时候
[57:19.000 --> 57:22.000] 如果说我要去先帮你去搜索引擎上查一下
[57:22.000 --> 57:24.000] 这个问题很多时候我更
[57:24.000 --> 57:26.000] 很多时候都不愿意
[57:26.000 --> 57:27.000] 但是如果你在提问的时候
[57:27.000 --> 57:30.000] 把你自己去努力过的这些结果
[57:30.000 --> 57:32.000] 做一个提问的一个部分
[57:32.000 --> 57:33.000] 给他提出来
[57:33.000 --> 57:35.000] 大家一看你这有一些资料了
[57:35.000 --> 57:36.000] 我来先看一看
[57:36.000 --> 57:38.000] 这个时候就会帮助你
[57:38.000 --> 57:40.000] 获得更多更有效的回答
[57:40.000 --> 57:41.000] 这是非常有帮助的
[57:41.000 --> 57:45.000] 是你们知道那个很出名的工具吗
[57:45.000 --> 57:46.000] 哪个
[57:46.000 --> 57:48.000] Let me google that
[57:48.000 --> 57:50.000] 我正想说那个呢
[57:50.000 --> 57:52.000] 我还真不知道
[57:52.000 --> 57:53.000] Let me google that for you
[57:53.000 --> 57:55.000] 就是你可以搜一下
[57:55.000 --> 57:58.000] 总之就是说它是一个网站
[57:58.000 --> 58:01.000] 然后就是你输入一段话
[58:01.000 --> 58:02.000] 然后它会有一个动画
[58:02.000 --> 58:04.000] 就是它跳转到Google
[58:04.000 --> 58:05.000] 然后帮你搜索
[58:07.000 --> 58:08.000] 叫什么来着
[58:08.000 --> 58:11.000] Let me google that for you
[58:11.000 --> 58:13.000] 我查到我们的群里
[58:13.000 --> 58:14.000] 你可以看一下
[58:14.000 --> 58:15.000] 好我找到了
[58:15.000 --> 58:18.000] 这个东西就是就是我对我
[58:18.000 --> 58:22.000] 我之前有那个在stackoverflow上面看见
[58:22.000 --> 58:25.000] 然后就有人问了一个很傻的问题
[58:25.000 --> 58:27.000] 然后底下就有人贴了一个
[58:27.000 --> 58:28.000] Let me google that for you的链接
[58:28.000 --> 58:29.000] 就很嘲讽
[58:32.000 --> 58:33.000] 好吧
[58:33.000 --> 58:34.000] 这个的确很嘲讽
[58:34.000 --> 58:35.000] 对
[58:35.000 --> 58:36.000] 然后这个工具
[58:36.000 --> 58:39.000] 现在其实已经很有事了
[58:39.000 --> 58:41.000] 对他现在是that's it
[58:41.000 --> 58:43.000] 我当年刚用的时候
[58:43.000 --> 58:45.000] 我也经历过别人甩了一个链接
[58:45.000 --> 58:46.000] 给我的过程
[58:47.000 --> 58:49.000] 然后他的最后一句叫
[58:49.000 --> 58:52.000] 他的最后一句叫is that hard
[58:52.000 --> 58:54.000] 就是这个事很难吗
[58:55.000 --> 58:56.000] 已经没有了吗
[58:56.000 --> 58:57.000] 对现在是that's it
[58:57.000 --> 58:59.000] 就是告诉你就这样就可以了
[58:59.000 --> 59:02.000] OK对之前是一种更嘲讽的语气
[59:02.000 --> 59:04.000] 我觉得我觉得很好玩
[59:04.000 --> 59:06.000] 我觉得这个是我必备了
[59:07.000 --> 59:10.000] 我靠你要去打击新人了
[59:10.000 --> 59:12.000] 不过不过不过说回来
[59:12.000 --> 59:14.000] 其实我有一个观点
[59:14.000 --> 59:15.000] 我不知道你们认不认同
[59:15.000 --> 59:17.000] 就是我总觉得
[59:18.000 --> 59:21.000] 就是要看一个人适不适合编程
[59:21.000 --> 59:24.000] 就是有没有自己的
[59:24.000 --> 59:27.000] 就是自己去搜索的能力和意愿
[59:27.000 --> 59:28.000] 其实是很重要的
[59:29.000 --> 59:30.000] 就是你会发现有些人
[59:30.000 --> 59:33.000] 其实他也算是程序员
[59:33.000 --> 59:36.000] 但是他还是并不会去自己搜索问题
[59:36.000 --> 59:40.000] 然后就就只能是一直在低水平
[59:40.000 --> 59:42.000] 进行重复这样子
[59:44.000 --> 59:45.000] 我一半赞同一半不赞同
[59:45.000 --> 59:48.000] 然后我觉得的话可能更多的
[59:48.000 --> 59:49.000] 他适不适合编程
[59:49.000 --> 59:52.000] 我觉得适合这个东西来说
[59:52.000 --> 59:54.000] 就是说是可能
[59:54.000 --> 59:56.000] 我觉得这个适合这个东西
[59:56.000 --> 59:57.000] 我觉得可能要限定一下
[59:57.000 --> 59:58.000] 我觉得可能说是
[59:58.000 --> 01:00:01.000] 他的态度适不适合这个编程
[01:00:01.000 --> 01:00:02.000] 因为是对对
[01:00:02.000 --> 01:00:03.000] 因为刚才你只是说
[01:00:03.000 --> 01:00:04.000] 适不适合编程的话
[01:00:04.000 --> 01:00:06.000] 其实有很多种解释
[01:00:06.000 --> 01:00:09.000] 就可能说这个人可能基础上的较差
[01:00:09.000 --> 01:00:12.000] 或者说是可能没啥人聪明
[01:00:12.000 --> 01:00:13.000] 这种东西
[01:00:13.000 --> 01:00:14.000] 这种我都觉得OK的
[01:00:14.000 --> 01:00:15.000] 但是我觉得可能说
[01:00:15.000 --> 01:00:17.000] 如果他态度差的话
[01:00:17.000 --> 01:00:19.000] 他绝对不太适合做编程
[01:00:19.000 --> 01:00:21.000] 或者说是他不适合做
[01:00:21.000 --> 01:00:23.000] 世界上的任何一种行业
[01:00:23.000 --> 01:00:25.000] 如果说他没有一个良好的态度的话
[01:00:25.000 --> 01:00:27.000] 所以说我觉得可能更多的事要讨论
[01:00:27.000 --> 01:00:29.000] 就是说他态度适不适合编程
[01:00:29.000 --> 01:00:31.000] 我觉得你说这个态度倒是有点宽泛
[01:00:31.000 --> 01:00:33.000] 其实我指的就是指这种
[01:00:33.000 --> 01:00:36.000] 自己去尝试解决问题的
[01:00:36.000 --> 01:00:38.000] 这样一种愿望
[01:00:38.000 --> 01:00:40.000] 或者叫求知欲
[01:00:40.000 --> 01:00:41.000] 或者叫好奇心
[01:00:41.000 --> 01:00:42.000] 或者怎么样
[01:00:42.000 --> 01:00:43.000] 对
[01:00:43.000 --> 01:00:44.000] 对我觉得也OK
[01:00:44.000 --> 01:00:46.000] 对我觉得的确是
[01:00:46.000 --> 01:00:47.000] 我觉得可能说
[01:00:47.000 --> 01:00:49.000] 你要在一个新兴的行业
[01:00:49.000 --> 01:00:50.000] 可能要发展得很好
[01:00:50.000 --> 01:00:52.000] 可能比较旺盛的求知欲和主动性
[01:00:52.000 --> 01:00:53.000] 是非常重要的
[01:00:53.000 --> 01:00:54.000] 如果没有的话可能挺
[01:00:54.000 --> 01:00:57.000] 因为程序员行业特别需要
[01:00:57.000 --> 01:00:59.000] 相对于其他一些变化
[01:00:59.000 --> 01:01:01.000] 没有那么剧烈的行业
[01:01:01.000 --> 01:01:04.000] 对你的知识可能一年就过期了
[01:01:04.000 --> 01:01:06.000] 但是我会这样觉得
[01:01:06.000 --> 01:01:08.000] 我观察身边的人就如果一个人
[01:01:08.000 --> 01:01:10.000] 有旺盛的好奇心
[01:01:10.000 --> 01:01:12.000] 然后有很主动的求知欲
[01:01:12.000 --> 01:01:14.000] 其实他学啥都比较快
[01:01:14.000 --> 01:01:17.000] 是就不局限于编程了
[01:01:17.000 --> 01:01:20.000] 对但是我会觉得你刚刚说
[01:01:20.000 --> 01:01:22.000] 就是能自己搜索找到答案
[01:01:22.000 --> 01:01:25.000] 是一个编程初期者
[01:01:25.000 --> 01:01:28.000] 转到就是初级工程师的一个
[01:01:28.000 --> 01:01:31.000] 过渡的必然之路吧
[01:01:31.000 --> 01:01:32.000] 就包括你要学会
[01:01:32.000 --> 01:01:33.000] 学会用搜索
[01:01:33.000 --> 01:01:35.000] 学会自己调试
[01:01:35.000 --> 01:01:36.000] 学会看log
[01:01:36.000 --> 01:01:39.000] 我觉得这三个真的是可以淘汰掉
[01:01:39.000 --> 01:01:41.000] 一大批初级的程序员
[01:01:41.000 --> 01:01:45.000] 不只是编程学习者同意
[01:01:45.000 --> 01:01:47.000] 光光用白光用谷歌
[01:01:47.000 --> 01:01:49.000] 不要用白读就能淘汰
[01:01:49.000 --> 01:01:50.000] 很大一群
[01:01:50.000 --> 01:01:54.000] 我这是一个这是一个
[01:01:54.000 --> 01:01:56.000] 比较半层的问题
[01:01:56.000 --> 01:01:59.000] 就是你现在告诉他们要这么做
[01:01:59.000 --> 01:02:01.000] 但是这个东西很大
[01:02:01.000 --> 01:02:02.000] 一部分门槛
[01:02:02.000 --> 01:02:05.000] 我觉得这个其实是对
[01:02:05.000 --> 01:02:07.000] 这个也是不可抗力吧
[01:02:07.000 --> 01:02:10.000] 其实这个东西我有点不太抗
[01:02:10.000 --> 01:02:12.000] 就是意见
[01:02:12.000 --> 01:02:15.000] 因为其实我觉得很多时候新人
[01:02:15.000 --> 01:02:18.000] 因为中国有个比较特殊的环境
[01:02:18.000 --> 01:02:20.000] 是他的编程入本
[01:02:20.000 --> 01:02:22.000] 更多是靠中文类型的书籍
[01:02:22.000 --> 01:02:24.000] 而对于中文类型的书籍
[01:02:24.000 --> 01:02:26.000] 大家母语是中文来讲
[01:02:26.000 --> 01:02:28.000] 新人去用百度
[01:02:28.000 --> 01:02:31.000] 可能会去比去用谷歌更友好一些
[01:02:31.000 --> 01:02:33.000] 这是我自己测试的一个结果
[01:02:33.000 --> 01:02:36.000] 可能就对于目前程序人圈来说
[01:02:36.000 --> 01:02:38.000] 可能并不太所谓的正确
[01:02:38.000 --> 01:02:39.000] 对吧
[01:02:39.000 --> 01:02:40.000] 但是我自己觉得的话
[01:02:40.000 --> 01:02:41.000] 对于新人来讲
[01:02:41.000 --> 01:02:43.000] 其实用好百度已经是一件非常难的事
[01:02:43.000 --> 01:02:45.000] 而且是一件非常棒的事
[01:02:45.000 --> 01:02:48.000] 他我先不要求他能去翻墙用谷歌了
[01:02:48.000 --> 01:02:50.000] 但是可能说他去把百度用好
[01:02:50.000 --> 01:02:52.000] 我觉得这都是一个非常好的数据
[01:02:52.000 --> 01:02:55.000] 对
[01:02:55.000 --> 01:02:58.000] 我觉得能去用百度也也不错
[01:02:58.000 --> 01:02:59.000] 对对
[01:02:59.000 --> 01:03:01.000] 因为其实百度目前
[01:03:01.000 --> 01:03:04.000] 能不能在国内收到的一些资料来说
[01:03:04.000 --> 01:03:07.000] 相对来说可能没有国外的那么新那么权威
[01:03:07.000 --> 01:03:10.000] 但是对于新人来说是足够使用的
[01:03:10.000 --> 01:03:14.000] 那有个问题就是百度
[01:03:14.000 --> 01:03:17.000] 一百度出来前几个全都是CSDN博客怎么办
[01:03:17.000 --> 01:03:20.000] 我觉得这个东西的话
[01:03:20.000 --> 01:03:23.000] 其实要那个要就辩证来看吧
[01:03:23.000 --> 01:03:25.000] 其实CSDN博客
[01:03:25.000 --> 01:03:27.000] 其实也有很多很棒的内容
[01:03:27.000 --> 01:03:29.000] 我举个例子
[01:03:29.000 --> 01:03:32.000] 有一个人叫陶辉你们知道吗
[01:03:32.000 --> 01:03:35.000] 不是很清楚
[01:03:35.000 --> 01:03:39.000] 陶辉的话他是Nginx一本书的作者
[01:03:39.000 --> 01:03:41.000] 然后的话
[01:03:41.000 --> 01:03:44.000] 现在是CSDN早期影响力比较大的博主
[01:03:44.000 --> 01:03:47.000] 他的博客来可以说是目前
[01:03:47.000 --> 01:03:50.000] 就是大家学Nginx相关的东西
[01:03:50.000 --> 01:03:52.000] 是没法避免的东西
[01:03:52.000 --> 01:03:54.000] 就是包括看代码写扩展
[01:03:54.000 --> 01:03:56.000] 他写的那本书我一下忘了
[01:03:56.000 --> 01:03:58.000] 我等下回去发出来
[01:03:58.000 --> 01:03:59.000] 其实我觉得CSDN
[01:03:59.000 --> 01:04:00.000] 我只想举这个例子
[01:04:00.000 --> 01:04:02.000] 还有我认识的其他
[01:04:02.000 --> 01:04:05.000] 比如说一些比如说做Spring
[01:04:05.000 --> 01:04:07.000] Java Spring相关的一些东西
[01:04:07.000 --> 01:04:08.000] 然后还有一些博主
[01:04:08.000 --> 01:04:09.000] 还有其他
[01:04:09.000 --> 01:04:12.000] 其实现在依旧是在CSDN博客上活跃的
[01:04:12.000 --> 01:04:15.000] 所以说我觉得去CSDN博客上看东西
[01:04:15.000 --> 01:04:16.000] 其实也是一个蛮正常
[01:04:16.000 --> 01:04:18.000] 而且是非常
[01:04:18.000 --> 01:04:20.000] 其实也是OK的一个东西
[01:04:20.000 --> 01:04:22.000] 它里面还是有很多干货的
[01:04:22.000 --> 01:04:23.000] 我觉得
[01:04:23.000 --> 01:04:25.000] 但是就我就举一个例子
[01:04:25.000 --> 01:04:26.000] 比如说之前我们提到
[01:04:26.000 --> 01:04:28.000] 说并发并行的问题
[01:04:28.000 --> 01:04:30.000] 你要是用百度搜
[01:04:30.000 --> 01:04:32.000] 我不太相信你能搜出
[01:04:32.000 --> 01:04:34.000] 特别正确的结果
[01:04:34.000 --> 01:04:36.000] 就是至少在前几个
[01:04:36.000 --> 01:04:37.000] 可能
[01:04:37.000 --> 01:04:38.000] 当然我没试过
[01:04:38.000 --> 01:04:40.000] 我只是这样猜测
[01:04:40.000 --> 01:04:43.000] 这个东西就其实提到了
[01:04:43.000 --> 01:04:44.000] 你刚才提到的一个问题
[01:04:44.000 --> 01:04:47.000] 就是说新人
[01:04:47.000 --> 01:04:49.000] 新人就是说是怎么样去知道
[01:04:49.000 --> 01:04:51.000] 自己获取的是不是正确的
[01:04:51.000 --> 01:04:53.000] 其实我觉得来讲的话
[01:04:53.000 --> 01:04:55.000] 我觉得这个认知的话
[01:04:55.000 --> 01:04:56.000] 它不是一步到位的
[01:04:56.000 --> 01:04:59.000] 就如同就包括你们刚才说的并发并行
[01:04:59.000 --> 01:05:01.000] 在我职业就开始一出
[01:05:01.000 --> 01:05:03.000] 其实也是错误的认识
[01:05:03.000 --> 01:05:06.000] 但是后面随着自己工作经济的发展
[01:05:06.000 --> 01:05:08.000] 或者是其他这种东西
[01:05:08.000 --> 01:05:10.000] 这种就是说是内容
[01:05:10.000 --> 01:05:12.000] 这种认知是能够足够改过来
[01:05:12.000 --> 01:05:14.000] 而且是进一步深化的
[01:05:14.000 --> 01:05:16.000] 所以说我觉得可能说对于新人来讲的话
[01:05:16.000 --> 01:05:18.000] 这部分东西就是说
[01:05:18.000 --> 01:05:20.000] 不违反原则性的东西的情况下
[01:05:20.000 --> 01:05:21.000] 有一些错误
[01:05:21.000 --> 01:05:24.000] 或者说其他的东西可能说是更容易被接受的
[01:05:24.000 --> 01:05:27.000] 然后并不严谨的东西可能是更容易被接受
[01:05:27.000 --> 01:05:29.000] 然后更利于它发展
[01:05:31.000 --> 01:05:32.000] 好吧
[01:05:32.000 --> 01:05:33.000] 但总之对
[01:05:33.000 --> 01:05:36.000] 其实反正我觉得能用百度也
[01:05:36.000 --> 01:05:39.000] 就是能用百度总比什么都不用好的吧
[01:05:39.000 --> 01:05:41.000] 对的确是这样
[01:05:41.000 --> 01:05:42.000] 对对对
[01:05:42.000 --> 01:05:44.000] 能用好百度其实已经很棒了
[01:05:45.000 --> 01:05:48.000] 那我们继续聊下一个话题吧
[01:05:48.000 --> 01:05:51.000] 就是我想的是我们可以聊一下
[01:05:51.000 --> 01:05:53.000] 就是你们对于算法
[01:05:53.000 --> 01:05:59.000] 以及比如说操作系统计算机网络这种更偏基础一点的
[01:05:59.000 --> 01:06:02.000] 的计算机方面的知识
[01:06:02.000 --> 01:06:05.000] 对于新人是否要学习这个话题
[01:06:05.000 --> 01:06:06.000] 你们是怎么看的
[01:06:06.000 --> 01:06:07.000] 对
[01:06:07.000 --> 01:06:08.000] 这也是个很有意思的话题
[01:06:08.000 --> 01:06:11.000] 我觉得我觉得是要学习
[01:06:11.000 --> 01:06:15.000] 我觉得是而且是非常重要的一个数字吧
[01:06:15.000 --> 01:06:16.000] 就是说你不要去
[01:06:16.000 --> 01:06:19.000] 我自己的看法是你不要求学习的有多深
[01:06:19.000 --> 01:06:21.000] 就比如说你自己
[01:06:21.000 --> 01:06:23.000] 比如说去看网络协议这些
[01:06:23.000 --> 01:06:28.000] 我不要求你会把每一个就是说是把他的报文结构手写一遍什么的
[01:06:28.000 --> 01:06:32.000] 然后但是我觉得就是说是你最起码有个基本的认知
[01:06:32.000 --> 01:06:34.000] 就包括算法和数据结构一样
[01:06:34.000 --> 01:06:40.000] 你最起码是你对于性能和空间消耗的这些东西有个基本的认知
[01:06:40.000 --> 01:06:43.000] 我觉得这样对于你职业发展是非常有帮助的
[01:06:43.000 --> 01:06:45.000] 然后就包括你自己平常写代码
[01:06:45.000 --> 01:06:47.000] 你自己平常去排查问题
[01:06:47.000 --> 01:06:49.000] 然后就可能就非常有帮助
[01:06:49.000 --> 01:06:50.000] 我举个例子
[01:06:50.000 --> 01:06:54.000] 就大家可能觉得协议去去了解协议什么的东西
[01:06:54.000 --> 01:06:57.000] 可能都是只有大厂或者说是那些
[01:06:57.000 --> 01:07:01.000] 就是说是经验非常多的工程师才会遇到问题
[01:07:01.000 --> 01:07:01.000] 对吧
[01:07:01.000 --> 01:07:03.000] 但是实际上并不是这样
[01:07:03.000 --> 01:07:05.000] 就我之前在老公家的时候
[01:07:05.000 --> 01:07:10.000] 我之前就处理过很多问题是需要去就按照去跟协议和底层有关的
[01:07:10.000 --> 01:07:11.000] 就包括泄露
[01:07:11.000 --> 01:07:13.000] 包括可能操作系统内存泄露
[01:07:13.000 --> 01:07:17.000] 然后就是内存泄露和连接泄露这一整套东西
[01:07:17.000 --> 01:07:21.000] 所以说我觉得可能说这个东西经验来对于你自己的发展来说
[01:07:21.000 --> 01:07:22.000] 你学一些
[01:07:22.000 --> 01:07:23.000] 然后有足够的认知
[01:07:23.000 --> 01:07:26.000] 就基本的基础的足够的认知
[01:07:26.000 --> 01:07:30.000] 然后对于你之后在深造也好
[01:07:30.000 --> 01:07:32.000] 我说排查问题也好
[01:07:32.000 --> 01:07:33.000] 都是非常有帮助
[01:07:35.000 --> 01:07:38.000] 我跟你讲其实在Google反而很难遇到这种问题
[01:07:38.000 --> 01:07:43.000] 我就感觉太我就感觉我经常做的太脱离实际了
[01:07:43.000 --> 01:07:45.000] 都是假设底层能够work
[01:07:45.000 --> 01:07:48.000] 然后在这个基础上写程序
[01:07:48.000 --> 01:07:50.000] 就这不是很幸福吗
[01:07:50.000 --> 01:07:51.000] 这不是很幸福吗
[01:07:51.000 --> 01:07:53.000] 我知道我的意思是
[01:07:53.000 --> 01:07:58.000] 其实我理解是应该这些当然都是很重要
[01:07:58.000 --> 01:08:02.000] 但是就在一个别人已经把底层都包装好的地方
[01:08:02.000 --> 01:08:04.000] 你就反而可能接触不到
[01:08:04.000 --> 01:08:06.000] 但是就和我们聊的话题其实没啥关系
[01:08:06.000 --> 01:08:11.000] 对我比较建议新手能够在自己简单的做点东西之后
[01:08:11.000 --> 01:08:13.000] 再来学这个东西吧
[01:08:15.000 --> 01:08:16.000] 对就是除非你是课班吧
[01:08:16.000 --> 01:08:18.000] 这个那你就上课认真学就好了
[01:08:18.000 --> 01:08:19.000] 老师不好
[01:08:19.000 --> 01:08:20.000] 你就去搜更好的教材
[01:08:20.000 --> 01:08:21.000] 更好的公开课
[01:08:21.000 --> 01:08:23.000] 这个有海量的知识
[01:08:23.000 --> 01:08:25.000] 而且学完之后这样可以考高分
[01:08:26.000 --> 01:08:28.000] 对但是你如果是非课班的话
[01:08:28.000 --> 01:08:32.000] 我建议是你先能自己简单的做出一点小东西
[01:08:32.000 --> 01:08:34.000] 先给自己一些激励
[01:08:34.000 --> 01:08:35.000] 对
[01:08:35.000 --> 01:08:38.000] 然后你确认了说你想往这个行业发展
[01:08:38.000 --> 01:08:43.000] 那你就可以或者说你就必须要去学这些东西了
[01:08:44.000 --> 01:08:47.000] 对这个其实我对我我很同意
[01:08:47.000 --> 01:08:52.000] 我觉得就你嗯我们可以把这些就是包括算法
[01:08:52.000 --> 01:08:58.000] 然后以及各种计算机的基础知识作为嗯就第二步
[01:08:58.000 --> 01:09:03.000] 就第一步你首先要确认自己是不是想真的想进入这个行业
[01:09:03.000 --> 01:09:04.000] 对
[01:09:04.000 --> 01:09:06.000] 你可能可能可能比如说做一个项目
[01:09:06.000 --> 01:09:07.000] 你发现很有成就感
[01:09:07.000 --> 01:09:10.000] 然后你觉得我真的是想做一个程序员
[01:09:10.000 --> 01:09:13.000] 然后第二步进一步你再去学习一些知识
[01:09:13.000 --> 01:09:15.000] 可能会比较合适
[01:09:15.000 --> 01:09:18.000] 对我记得上大学不是经常说就这一系列的东西
[01:09:18.000 --> 01:09:20.000] 我们叫做内功吗
[01:09:20.000 --> 01:09:24.000] 对就是什么算法数据结构操作系统网络原理
[01:09:25.000 --> 01:09:27.000] 对包括计算机体系结构
[01:09:27.000 --> 01:09:31.000] 对那其实你要看你学编程是为了什么
[01:09:31.000 --> 01:09:35.000] 你如果只是你你其实也不想进这个行业
[01:09:35.000 --> 01:09:37.000] 你可能就是自己想做一些小东西
[01:09:37.000 --> 01:09:41.000] 对那你学会一些简单的框架和语言的使用
[01:09:41.000 --> 01:09:42.000] 其实就够了
[01:09:42.000 --> 01:09:46.000] 对你决定你如果是的
[01:09:46.000 --> 01:09:49.000] 你决定想往这个行业发展的这些东西
[01:09:49.000 --> 01:09:51.000] 你是肯定避不开的
[01:09:51.000 --> 01:09:53.000] 你要自己有意识的不断去学习
[01:09:53.000 --> 01:09:54.000] 嗯
[01:09:54.000 --> 01:09:58.000] 对其实我觉得这方面就这些嗯东西吧
[01:09:58.000 --> 01:10:03.000] 也算是就我们暂且不提说面试会考
[01:10:03.000 --> 01:10:06.000] 就说你在日常工作中
[01:10:06.000 --> 01:10:10.000] 嗯如果你对一个话一个问题完全就一个概念
[01:10:10.000 --> 01:10:11.000] 完全不了解的话
[01:10:11.000 --> 01:10:15.000] 那是就是肯定是肯定会有问题的
[01:10:15.000 --> 01:10:20.000] 就就因为因为这方面就是你多多少少都会涉及到
[01:10:20.000 --> 01:10:22.000] 虽然可能并不是那么深
[01:10:22.000 --> 01:10:26.000] 但是就是你需要有一个在脑中有一个概念
[01:10:26.000 --> 01:10:30.000] 我觉得是最重要
[01:10:30.000 --> 01:10:31.000] 对我也赞同
[01:10:31.000 --> 01:10:38.000] 就说是可能那个可能这边那个就是有个最基本的认知是非常重要的
[01:10:38.000 --> 01:10:40.000] 而不是说我一马黑
[01:10:40.000 --> 01:10:43.000] 然后一文三不知这样的东西
[01:10:43.000 --> 01:10:46.000] 我觉得就是说是更好一些
[01:10:46.000 --> 01:10:48.000] 对就比如说以算法为例的话
[01:10:48.000 --> 01:10:52.000] 他其实你了解就是一些基础的算法
[01:10:52.000 --> 01:10:56.000] 包括时间空间复杂度这方面的知识的话
[01:10:56.000 --> 01:11:01.000] 你其实写出来的程序就会比较像一个正常的程序
[01:11:01.000 --> 01:11:04.000] 而不是比如说把一个循环跑很多遍
[01:11:04.000 --> 01:11:08.000] 然后就是多重循环这样子
[01:11:08.000 --> 01:11:11.000] 嗯就会避免一些很愚蠢的问题吧
[01:11:11.000 --> 01:11:16.000] 我觉得对一旦你踏入行业中
[01:11:16.000 --> 01:11:21.000] 其实就是说你的算法数学结构网络很容易和没有这些技术的
[01:11:21.000 --> 01:11:23.000] 人拉开差距
[01:11:23.000 --> 01:11:25.000] 就不论是你在编码过程中
[01:11:25.000 --> 01:11:29.000] 还是说你在debug过程中或者是优化过程中
[01:11:29.000 --> 01:11:34.000] 对你可以想象一个了解时间复杂度的人和不了解时间复杂度的人
[01:11:34.000 --> 01:11:36.000] 对代码的优化肯定是不一样的
[01:11:36.000 --> 01:11:40.000] 对就不需要说算法数学结构
[01:11:40.000 --> 01:11:45.000] 对我觉得其实这方面也是就是说
[01:11:45.000 --> 01:11:53.000] 就是很多只靠培训班的学员欠缺的吧
[01:11:53.000 --> 01:11:59.000] 就是也是因为培训班也不太会教这些吗我不知道
[01:11:59.000 --> 01:12:02.000] 不太会就我本身是不太会
[01:12:02.000 --> 01:12:06.000] 嗯所以这个比较难塑成吧三个月
[01:12:06.000 --> 01:12:12.000] 对我觉得可能就是说是培训班的同学可能就说是
[01:12:12.000 --> 01:12:14.000] 因为就不怪培训班同学
[01:12:14.000 --> 01:12:19.000] 但是可能说那些老师教的很多时候都是一些暴力出奇迹
[01:12:19.000 --> 01:12:21.000] 对吧暴力出奇迹暴力a
[01:12:21.000 --> 01:12:23.000] 然后对然后a上去赢了
[01:12:23.000 --> 01:12:26.000] 然后就这样的一个一个模式
[01:12:26.000 --> 01:12:30.000] 所以说我觉得就可能不可能就直接蒙吧
[01:12:30.000 --> 01:12:32.000] 就是说是遇到问题就直接蒙一把就赢了
[01:12:32.000 --> 01:12:37.000] 对然后所以我觉得可能这个东西对于在日常工作中
[01:12:37.000 --> 01:12:40.000] 可能并不是一个太好的一个思路和手段
[01:12:40.000 --> 01:12:45.000] 所以所以那么对于一些比如说他不是科班出身的同学
[01:12:45.000 --> 01:12:48.000] 那么有没有什么建议学习的手段呢
[01:12:48.000 --> 01:12:51.000] 其实我个人是很推荐去看一些公开课的
[01:12:51.000 --> 01:12:56.000] 我觉得这个是很有效的学习计算机技术知识的手段
[01:12:56.000 --> 01:12:58.000] 不知道你们怎么看
[01:12:58.000 --> 01:13:05.000] 我我同意我比较推荐造轮子造轮子挺有效的
[01:13:05.000 --> 01:13:07.000] 造轮子你一次只能造一个轮子
[01:13:07.000 --> 01:13:11.000] 我觉得造轮子的前提是你要知道轮子长啥样
[01:13:11.000 --> 01:13:14.000] 对对非科班先看一下
[01:13:14.000 --> 01:13:17.000] 对你可以先去看一下其他轮子
[01:13:17.000 --> 01:13:18.000] 然后再造轮子
[01:13:18.000 --> 01:13:19.000] 刚开始有点慢
[01:13:19.000 --> 01:13:20.000] 但是你会越造越快的
[01:13:20.000 --> 01:13:21.000] 你不用管质量
[01:13:21.000 --> 01:13:22.000] 是轮子吗
[01:13:22.000 --> 01:13:23.000] 学习一下就行了
[01:13:23.000 --> 01:13:24.000] 我打个小广告
[01:13:24.000 --> 01:13:28.000] 其实我会觉得就包括我近期也不断的在看书
[01:13:28.000 --> 01:13:31.000] 我有的时候确实会通过知乎来找书
[01:13:31.000 --> 01:13:36.000] 嗯就是比如说我想你会看到很多这样问题
[01:13:36.000 --> 01:13:40.000] 就是想学操作系统哪本书比较好
[01:13:40.000 --> 01:13:44.000] 找到之后有答案不要直接去看
[01:13:44.000 --> 01:13:46.000] 接着去豆瓣再确认一下评分
[01:13:46.000 --> 01:13:48.000] 对对对我会跟你干一样的事情
[01:13:48.000 --> 01:13:51.000] 对然后对
[01:13:51.000 --> 01:13:54.000] 然后其实你你能把这本书啃完
[01:13:54.000 --> 01:13:56.000] 以及找到相应的公开课
[01:13:56.000 --> 01:13:58.000] 那你学完之后
[01:13:58.000 --> 01:14:02.000] 你是要比大部分国内课班出身的人要扎实的
[01:14:02.000 --> 01:14:05.000] 那当然真的是因为因为可能非科班的同学
[01:14:05.000 --> 01:14:07.000] 没有了解过科班同学用的教材
[01:14:07.000 --> 01:14:10.000] 都是各种妖魔鬼怪
[01:14:10.000 --> 01:14:12.000] 我大概有所了解
[01:14:12.000 --> 01:14:18.000] 然后对因为之前比如说像四川那边
[01:14:18.000 --> 01:14:22.000] 像他们那个他们有个大学叫做四川师范大学
[01:14:22.000 --> 01:14:23.000] 你们知道吗
[01:14:23.000 --> 01:14:26.000] 就全是四川师范大学
[01:14:26.000 --> 01:14:29.000] 我记得他们的C语言的教材是他们自编的
[01:14:29.000 --> 01:14:34.000] 然后他们的环境依旧是Tuber C2
[01:14:34.000 --> 01:14:36.000] 我上大学的时候就是啊
[01:14:36.000 --> 01:14:38.000] 可以太强了
[01:14:38.000 --> 01:14:41.000] 对就是而且就是现在高校很变态的
[01:14:41.000 --> 01:14:42.000] 应该就是这种
[01:14:42.000 --> 01:14:46.000] 比如说老师出书会和老师的晋升考核相关联
[01:14:46.000 --> 01:14:49.000] 所以说很多学校的教材
[01:14:49.000 --> 01:14:51.000] 都是自己学院的老师出的书
[01:14:51.000 --> 01:14:53.000] 对的对这种是有利益关系的
[01:14:53.000 --> 01:14:57.000] 对这这就是为什么我很推荐一些公开课
[01:14:57.000 --> 01:15:03.000] 因为公开课基本上都是比较就是名校老师教的
[01:15:03.000 --> 01:15:06.000] 然后你也还可能看到别人对这个课的评价
[01:15:06.000 --> 01:15:08.000] 就是他能保证一个下限
[01:15:08.000 --> 01:15:10.000] 就可能比你学校老师教的还好
[01:15:10.000 --> 01:15:12.000] 对我觉得可能就是说
[01:15:12.000 --> 01:15:15.000] 我也是推荐公开课以及那个书
[01:15:15.000 --> 01:15:18.000] 但是我觉得可能还有一个非常好的手段
[01:15:18.000 --> 01:15:19.000] 大家可能都会忽略掉
[01:15:19.000 --> 01:15:21.000] 就是说一定要做题
[01:15:21.000 --> 01:15:23.000] 就做题吗
[01:15:23.000 --> 01:15:26.000] 对做题就包括你去学一门书上的东西
[01:15:26.000 --> 01:15:28.000] 然后就可能说书后的习题
[01:15:28.000 --> 01:15:30.000] 你千万不要就是忽略掉
[01:15:30.000 --> 01:15:32.000] 我看一眼就过了
[01:15:32.000 --> 01:15:36.000] 我觉得可能说你要去按照书上的东西去过一遍
[01:15:36.000 --> 01:15:37.000] 上面的立题什么的
[01:15:37.000 --> 01:15:39.000] 我觉得也是一个非常棒的手段
[01:15:39.000 --> 01:15:41.000] 这个还挺有意思
[01:15:41.000 --> 01:15:44.000] 因为我其实很少去做题这种
[01:15:44.000 --> 01:15:46.000] 你做过哪些书的题
[01:15:46.000 --> 01:15:50.000] 比如说算导的题我做过一部分
[01:15:50.000 --> 01:15:54.000] 然后我之前我其实我我看一下
[01:15:54.000 --> 01:15:58.000] 还有那个python那个python编程
[01:15:58.000 --> 01:16:00.000] 就是说是他是两本商场本的上面的题
[01:16:00.000 --> 01:16:02.000] 做过
[01:16:02.000 --> 01:16:05.000] 还有就是说我现在我就是说去年刷的两本书
[01:16:05.000 --> 01:16:06.000] 一本是UMP
[01:16:06.000 --> 01:16:09.000] 还有是那个AOP两本书的提议也做过
[01:16:09.000 --> 01:16:10.000] 然后当然是没有全部做完
[01:16:10.000 --> 01:16:12.000] 是做了一部分就是我感兴趣
[01:16:12.000 --> 01:16:13.000] UMP是
[01:16:13.000 --> 01:16:15.000] 那个UNIX Network Programming
[01:16:15.000 --> 01:16:16.000] 就说是对
[01:16:16.000 --> 01:16:20.000] 然后AUP是Advanced UNIX Programming
[01:16:20.000 --> 01:16:23.000] 哇那这个他是用C的是吗
[01:16:23.000 --> 01:16:24.000] 对用C的对用C的
[01:16:24.000 --> 01:16:27.000] 但是但是其实语言没什么关系了吧
[01:16:27.000 --> 01:16:30.000] 你python也只是在C上面包了一层而已
[01:16:30.000 --> 01:16:32.000] 对然后对我觉得做题
[01:16:32.000 --> 01:16:34.000] 对于你自己去想这个东西来讲
[01:16:34.000 --> 01:16:38.000] 其实是有非常有非常正面的促进作用的
[01:16:38.000 --> 01:16:40.000] 对公开课
[01:16:40.000 --> 01:16:42.000] 其实也会有一些课后作业什么的
[01:16:42.000 --> 01:16:44.000] 那种都还挺有意义的
[01:16:44.000 --> 01:16:46.000] 对我也觉得是
[01:16:46.000 --> 01:16:48.000] 是
[01:16:48.000 --> 01:16:51.000] 所以对我们觉得还是
[01:16:51.000 --> 01:16:53.000] 这个还是挺必要的吧
[01:16:53.000 --> 01:16:56.000] 就是你总得不管是书还是
[01:16:56.000 --> 01:17:00.000] 习题还是公开课就需要去花时间
[01:17:00.000 --> 01:17:03.000] 然后来从某一个方面
[01:17:03.000 --> 01:17:06.000] 从某种途径去学习一些这个知识
[01:17:06.000 --> 01:17:07.000] 对
[01:17:07.000 --> 01:17:08.000] 其实
[01:17:08.000 --> 01:17:10.000] 我觉得对不管是找工作呀
[01:17:10.000 --> 01:17:14.000] 还是就是真正踏入这个行业都是
[01:17:14.000 --> 01:17:16.000] 都是必不可少的吧
[01:17:18.000 --> 01:17:20.000] 好其实我想还有一个话题想聊一下
[01:17:20.000 --> 01:17:22.000] 就是因为我们之前聊的都是
[01:17:22.000 --> 01:17:24.000] 比如说编程学习
[01:17:24.000 --> 01:17:31.000] 而是那么就如果只针对python的新入门来讲
[01:17:31.000 --> 01:17:36.000] 会不会有什么和其他语言不同的地方呢
[01:17:36.000 --> 01:17:37.000] 你们觉得
[01:17:37.000 --> 01:17:40.000] 还有一个不同的地方就是入门非常简单
[01:17:40.000 --> 01:17:41.000] 比较友好
[01:17:44.000 --> 01:17:46.000] 这个简单友好你可以解释一下
[01:17:47.000 --> 01:17:49.000] 就是你想
[01:17:49.000 --> 01:17:52.000] 首先第一个学的是print嘛
[01:17:52.000 --> 01:17:55.000] print很简单对吧
[01:17:57.000 --> 01:17:59.000] 不像java你写一个print的时候
[01:17:59.000 --> 01:18:00.000] 你还得有一个类
[01:18:00.000 --> 01:18:02.000] 然后你还有一个命方法
[01:18:02.000 --> 01:18:04.000] 命方法还要写那么长
[01:18:06.000 --> 01:18:08.000] python就一行print就行了
[01:18:08.000 --> 01:18:10.000] 如果你然后你接下来会学
[01:18:11.000 --> 01:18:12.000] 1加1等于2
[01:18:12.000 --> 01:18:13.000] for循环
[01:18:13.000 --> 01:18:15.000] if这些都很简单对吧
[01:18:15.000 --> 01:18:18.000] 我觉得就是python可以让你
[01:18:20.000 --> 01:18:21.000] 就有两点吧
[01:18:21.000 --> 01:18:23.000] 第一个是刚才信涛讲的
[01:18:23.000 --> 01:18:26.000] 它可以让你就是抛弃掉一些
[01:18:27.000 --> 01:18:28.000] 不那么必要的部分
[01:18:28.000 --> 01:18:31.000] 直接去学习最核心的知识
[01:18:31.000 --> 01:18:33.000] 比如说控制流
[01:18:33.000 --> 01:18:34.000] 然后运算服
[01:18:34.000 --> 01:18:38.000] 然后包括就是要怎么
[01:18:38.000 --> 01:18:41.000] 要怎么把你的程序就写的更好
[01:18:41.000 --> 01:18:46.000] 另外一个我想说就是它确实python这本语言能够让你
[01:18:46.000 --> 01:18:51.000] 用很短的时间去真正构建一个对你有用的东西
[01:18:51.000 --> 01:18:54.000] 就我比如说我一开始学python
[01:18:54.000 --> 01:18:56.000] 就我为什么想学python
[01:18:56.000 --> 01:18:59.000] 是因为我想做一个去下载漫画的东西
[01:19:02.000 --> 01:19:07.000] 就是对就是当时做了一个是拿tkinter
[01:19:07.000 --> 01:19:11.000] 做了一个windows上带图形界面
[01:19:11.000 --> 01:19:14.000] 然后可以去某一个网站下漫画的东西
[01:19:14.000 --> 01:19:16.000] 就你输入那个网址
[01:19:16.000 --> 01:19:19.000] 然后他就把每一话的列表列在上面
[01:19:19.000 --> 01:19:21.000] 然后你就是选几个打几个勾
[01:19:21.000 --> 01:19:23.000] 然后点下载就可以去下了
[01:19:23.000 --> 01:19:27.000] 所以这套流程我大概是熟悉了
[01:19:27.000 --> 01:19:29.000] 可能一两周
[01:19:29.000 --> 01:19:32.000] 然后就就开始做了吧
[01:19:32.000 --> 01:19:34.000] 反正就很快
[01:19:34.000 --> 01:19:37.000] 对之前我也没有没有去学过python
[01:19:37.000 --> 01:19:38.000] 这样子
[01:19:38.000 --> 01:19:43.000] 我觉得还是就这个算是很大的一个优点吧
[01:19:43.000 --> 01:19:46.000] 那我就来黑一下python吧
[01:19:46.000 --> 01:19:50.000] 我觉得对于新手而言
[01:19:50.000 --> 01:19:52.000] python可能最不友好的地方
[01:19:52.000 --> 01:19:54.000] 就是很多文档微记录行为
[01:19:54.000 --> 01:19:56.000] 就是说影视操作
[01:19:56.000 --> 01:20:02.000] 就很多对我想我想大家可能都遇到过很多这种方面的东西
[01:20:02.000 --> 01:20:07.000] 然后就有些时候我觉得可能我更在这种情况发展的情况下
[01:20:07.000 --> 01:20:09.000] 很多时候我可能更多的时候
[01:20:09.000 --> 01:20:12.000] 我更倾向于新手第一门语言千万别学python这样
[01:20:12.000 --> 01:20:18.000] 如果说对如果当然如果只是就觉得只是临时用语用或者其他
[01:20:18.000 --> 01:20:20.000] 如果说是喜欢python来找工作
[01:20:20.000 --> 01:20:23.000] 就想去在这个找研发方面的工作的话
[01:20:23.000 --> 01:20:27.000] 可能说我更多觉得是觉得新手第一门语言千万别学python
[01:20:27.000 --> 01:20:30.000] 第一个就是说可能他的影视的操作
[01:20:30.000 --> 01:20:34.000] 可能会对没有变成经验的同学造成很多的困惑
[01:20:34.000 --> 01:20:38.000] 那影视操作那CR加那更多这种东西
[01:20:38.000 --> 01:20:40.000] 但是但是
[01:20:40.000 --> 01:20:47.000] 对你说实话你C++的UB其实是相对于python来讲的话
[01:20:47.000 --> 01:20:49.000] 我的理解是这样
[01:20:49.000 --> 01:20:51.000] 因为我写C++其实比较少
[01:20:51.000 --> 01:20:53.000] 然后我写C遇到过一些UB
[01:20:53.000 --> 01:20:54.000] 我觉得UB的话
[01:20:54.000 --> 01:20:57.000] 其实如果说你按照正常的模式去走的话
[01:20:57.000 --> 01:20:59.000] 其实你去遇到一些UB
[01:20:59.000 --> 01:21:02.000] 就是说去涉及到编译器的一些行为的话
[01:21:02.000 --> 01:21:04.000] 我觉得其实是不太少见
[01:21:04.000 --> 01:21:06.000] 就是说不太常见的
[01:21:06.000 --> 01:21:08.000] 然后但是你对于python来讲
[01:21:08.000 --> 01:21:13.000] 可能说你自己去就会日常的去遇到一些UB
[01:21:13.000 --> 01:21:15.000] 就是说是文档微记录
[01:21:15.000 --> 01:21:17.000] 或者说是一些偏影视的操作
[01:21:17.000 --> 01:21:21.000] 我觉得这一点的话就可能说是对于新手来讲
[01:21:21.000 --> 01:21:23.000] 其实是一个不太OK的情况
[01:21:23.000 --> 01:21:24.000] 而且第二的话
[01:21:24.000 --> 01:21:27.000] 我觉得可能就是说是从市场来讲的话
[01:21:27.000 --> 01:21:30.000] 我觉得可能说目前以目前国内的情况
[01:21:30.000 --> 01:21:33.000] 对学python来的
[01:21:33.000 --> 01:21:35.000] 想走python web这一块的人来说
[01:21:35.000 --> 01:21:37.000] 可能并不是个太友好的选项
[01:21:37.000 --> 01:21:39.000] 它容错率比较少
[01:21:39.000 --> 01:21:42.000] 所以说我觉得可能说我现在更倾向于
[01:21:42.000 --> 01:21:46.000] 是推荐新入行的朋友去学Java
[01:21:46.000 --> 01:21:48.000] PHP什么的都OK
[01:21:48.000 --> 01:21:51.000] PHP真的好吗
[01:21:51.000 --> 01:21:52.000] 新入行
[01:21:55.000 --> 01:21:57.000] 还有什么之前在知乎上看
[01:21:57.000 --> 01:22:01.000] PHP第一版是拿文件名长度作为hash
[01:22:01.000 --> 01:22:03.000] 对那个名字所以要长短不一
[01:22:03.000 --> 01:22:05.000] 才能保证hash均匀
[01:22:05.000 --> 01:22:07.000] 那个是吗
[01:22:07.000 --> 01:22:09.000] 就把文件名设计的错落
[01:22:09.000 --> 01:22:11.000] 有致什么的
[01:22:11.000 --> 01:22:14.000] 我其实还挺推荐python入门的
[01:22:14.000 --> 01:22:17.000] 就是我理解python
[01:22:17.000 --> 01:22:18.000] 我们说的python入门
[01:22:18.000 --> 01:22:20.000] 大部分都是指自学编程
[01:22:20.000 --> 01:22:22.000] 对其实会帮你抛掉很多
[01:22:22.000 --> 01:22:25.000] 你前期不会接触到的概念
[01:22:25.000 --> 01:22:29.000] 对你专注于你去实现的东西
[01:22:29.000 --> 01:22:32.000] 对以及python本身在各个语言里边
[01:22:32.000 --> 01:22:38.000] 其实已经算是库的种类比较齐全了
[01:22:38.000 --> 01:22:40.000] 对你想去涉及到各方面
[01:22:40.000 --> 01:22:42.000] 其实你都能找到对应的库直接去操作
[01:22:42.000 --> 01:22:47.000] 不需要全部自己来从头来倒轮子
[01:22:47.000 --> 01:22:50.000] 对以及我会其实对比一些
[01:22:50.000 --> 01:22:52.000] 不论是python啊golang啊
[01:22:52.000 --> 01:22:53.000] 还是java的库
[01:22:53.000 --> 01:22:56.000] 就是python会有很多所谓的这种for human being
[01:22:56.000 --> 01:22:59.000] 就是对人类真的很友好的这种
[01:22:59.000 --> 01:23:03.000] 虽然它给你封装了很多
[01:23:03.000 --> 01:23:06.000] 对你成长有帮助的细节
[01:23:06.000 --> 01:23:09.000] 对但是其实前期你根本不会用到
[01:23:09.000 --> 01:23:11.000] 你也不知道这是个什么东西
[01:23:11.000 --> 01:23:14.000] 你可以去专注于你的实现
[01:23:14.000 --> 01:23:16.000] 举例子就是request嘛
[01:23:16.000 --> 01:23:18.000] 就是这个http请求库
[01:23:18.000 --> 01:23:22.000] 在没有接触这个库之前
[01:23:22.000 --> 01:23:26.000] 比如说我想用python的UIL open啊
[01:23:26.000 --> 01:23:28.000] 这个东西我简直快疯掉了
[01:23:28.000 --> 01:23:32.000] 对你会发现UIL lib
[01:23:32.000 --> 01:23:33.000] UIL lib 2
[01:23:33.000 --> 01:23:35.000] 对你都不知道他们在干嘛
[01:23:35.000 --> 01:23:38.000] 对那个时候我还是个新手
[01:23:38.000 --> 01:23:40.000] 所以说不可能说
[01:23:40.000 --> 01:23:43.000] 我想要去请求某一个网页
[01:23:43.000 --> 01:23:44.000] 我就把那个库去了解
[01:23:44.000 --> 01:23:46.000] 然后那个库又涉及到我很多
[01:23:46.000 --> 01:23:48.000] 当时还不会的知识
[01:23:48.000 --> 01:23:51.000] 对就是它python的生态
[01:23:51.000 --> 01:23:53.000] 确实是算比较成熟的吧
[01:23:53.000 --> 01:23:57.000] 对就是各方面你想做的事情
[01:23:57.000 --> 01:23:59.000] 基本都有人帮你做过了
[01:23:59.000 --> 01:24:01.000] 所以你可以真的
[01:24:01.000 --> 01:24:03.000] 我还挺建议说入门学python的
[01:24:03.000 --> 01:24:06.000] 当然如果比如说你是算法入门的话
[01:24:06.000 --> 01:24:09.000] 那我建议你要选一个带指针的语言
[01:24:09.000 --> 01:24:13.000] 我当时连google算法题都用python写的
[01:24:13.000 --> 01:24:16.000] 因为没有指针真的很痛苦啊
[01:24:16.000 --> 01:24:17.000] 就是你想直接指过去
[01:24:17.000 --> 01:24:18.000] 你发现你指不过去
[01:24:18.000 --> 01:24:20.000] 那你只能搞个外部锁影啊
[01:24:20.000 --> 01:24:22.000] 然后再占个空间啊这种
[01:24:22.000 --> 01:24:23.000] 对
[01:24:23.000 --> 01:24:27.000] 这个当然千言千语
[01:24:27.000 --> 01:24:28.000] 我们算法可能特殊技术在这一类吧
[01:24:28.000 --> 01:24:29.000] 对对对
[01:24:29.000 --> 01:24:35.000] 其实就我觉得python入门好的一点
[01:24:35.000 --> 01:24:37.000] 真的是就是很多东西
[01:24:37.000 --> 01:24:39.000] 它能够帮你做的
[01:24:39.000 --> 01:24:40.000] 就是我们说的battery included
[01:24:40.000 --> 01:24:42.000] 但是不好的一点就是
[01:24:42.000 --> 01:24:44.000] 它能python这门语言
[01:24:44.000 --> 01:24:47.000] 它提供的特性确实是比较多
[01:24:47.000 --> 01:24:50.000] 就可能我不知道和CR家相比
[01:24:50.000 --> 01:24:51.000] 可能还是CR家多一点
[01:24:51.000 --> 01:24:55.000] 但是python本身也是就特性非常复杂的
[01:24:55.000 --> 01:24:57.000] 你可能就是很多东西
[01:24:57.000 --> 01:25:00.000] 你发现有很多东西可以用
[01:25:00.000 --> 01:25:02.000] 但是你并不知道要用什么
[01:25:02.000 --> 01:25:03.000] 对相对来讲的话
[01:25:03.000 --> 01:25:04.000] 如果是C的话
[01:25:04.000 --> 01:25:08.000] 就是它的功能就非常精简
[01:25:08.000 --> 01:25:10.000] 然后你也可以就相对来讲
[01:25:10.000 --> 01:25:12.000] 你并不需要去考虑
[01:25:12.000 --> 01:25:14.000] 你需要用什么这种问题
[01:25:14.000 --> 01:25:17.000] 我觉得就是有好处坏处
[01:25:17.000 --> 01:25:18.000] 对
[01:25:18.000 --> 01:25:20.000] 但是我觉得可能说
[01:25:20.000 --> 01:25:21.000] 如果说这样
[01:25:21.000 --> 01:25:23.000] 大家说的确都是
[01:25:23.000 --> 01:25:25.000] 我也是挺觉得python
[01:25:25.000 --> 01:25:29.000] 的确是对人来说挺友好的
[01:25:29.000 --> 01:25:30.000] 但是我觉得就是说
[01:25:30.000 --> 01:25:32.000] 可能说如果说大家
[01:25:32.000 --> 01:25:34.000] 因为现在其实有一个风气
[01:25:34.000 --> 01:25:35.000] 不知道大家注意到没有
[01:25:35.000 --> 01:25:39.000] 就是说是python基本上跟转行
[01:25:39.000 --> 01:25:41.000] 或者说是入门找工作什么的
[01:25:41.000 --> 01:25:42.000] 绑定在了一起
[01:25:42.000 --> 01:25:43.000] 而我觉得这个东西的话
[01:25:43.000 --> 01:25:46.000] 可能对于目前国内的朋友来说
[01:25:46.000 --> 01:25:49.000] 可能认知需要更改一下
[01:25:49.000 --> 01:25:50.000] 就是说我觉得可能说
[01:25:50.000 --> 01:25:52.000] 就目前的环境而言的话
[01:25:52.000 --> 01:25:55.000] python可能并不太适合新手
[01:25:55.000 --> 01:25:56.000] 用来作为转行
[01:25:56.000 --> 01:25:58.000] 或者说是转行语言
[01:25:58.000 --> 01:26:00.000] 准确说是怎么样
[01:26:00.000 --> 01:26:04.000] 我提一个现在用python入门
[01:26:04.000 --> 01:26:05.000] 可能的一个缺点
[01:26:05.000 --> 01:26:09.000] 对我刚好最近有朋友的朋友在学
[01:26:09.000 --> 01:26:10.000] 对是我朋友在学
[01:26:10.000 --> 01:26:13.000] 花了一下午才搞出一个print word
[01:26:13.000 --> 01:26:15.000] 才搞出一个什么
[01:26:15.000 --> 01:26:17.000] print hello world
[01:26:17.000 --> 01:26:19.000] 为什么对
[01:26:19.000 --> 01:26:21.000] 其实他是打印的是你好
[01:26:21.000 --> 01:26:22.000] 这涉及到几个问题
[01:26:22.000 --> 01:26:25.000] 首先是编码问题
[01:26:25.000 --> 01:26:27.000] 我们就说python2吗
[01:26:27.000 --> 01:26:28.000] 编码问题之外
[01:26:28.000 --> 01:26:31.000] 还涉及到python2和python3的问题
[01:26:31.000 --> 01:26:32.000] 他也有意愿有能力
[01:26:32.000 --> 01:26:35.000] 但是他查到他用的是python3
[01:26:35.000 --> 01:26:36.000] 查到的是python2
[01:26:36.000 --> 01:26:37.000] 这就很尴尬
[01:26:37.000 --> 01:26:38.000] 这是个问题
[01:26:38.000 --> 01:26:40.000] 对就是三和二的分裂
[01:26:40.000 --> 01:26:44.000] 可能对新人的学习没那么友好
[01:26:44.000 --> 01:26:45.000] 他本身不能判断
[01:26:45.000 --> 01:26:47.000] 这个feature是python3还是python2
[01:26:47.000 --> 01:26:49.000] 所以也不确定这个资料
[01:26:49.000 --> 01:26:52.000] 对他到底是不是合适的版本
[01:26:52.000 --> 01:26:55.000] 我觉得可能是一个隐患
[01:26:55.000 --> 01:26:57.000] 对就像我现在从python3
[01:26:57.000 --> 01:26:58.000] 一下学python2
[01:26:58.000 --> 01:27:00.000] 我觉得很恶心
[01:27:00.000 --> 01:27:02.000] 我其实我一二年
[01:27:02.000 --> 01:27:04.000] 我一二年学的python
[01:27:04.000 --> 01:27:06.000] 然后我入门就是用的python3
[01:27:06.000 --> 01:27:10.000] 所以不过当然现在你
[01:27:10.000 --> 01:27:11.000] 比如说你搜stackoverflow
[01:27:11.000 --> 01:27:13.000] 还是有很多那种
[01:27:13.000 --> 01:27:16.000] python2实际的答案会在哪
[01:27:16.000 --> 01:27:17.000] 然后你会发现他都
[01:27:17.000 --> 01:27:19.000] 不是很符合现在的情况
[01:27:19.000 --> 01:27:22.000] 主要很多公司都还是python2
[01:27:22.000 --> 01:27:24.000] 就比如说我们饿了吗
[01:27:24.000 --> 01:27:25.000] 现在的python项目
[01:27:25.000 --> 01:27:27.000] 其实都还是python2的
[01:27:27.000 --> 01:27:29.000] 那你们要deprecation吗
[01:27:29.000 --> 01:27:31.000] 你说deprecation是指
[01:27:31.000 --> 01:27:33.000] 我就说把
[01:27:33.000 --> 01:27:37.000] 就是这个项目之后会用python3维护
[01:27:37.000 --> 01:27:38.000] 还是就不维护
[01:27:38.000 --> 01:27:41.000] 目前来讲是倾向于
[01:27:41.000 --> 01:27:43.000] 就全部转成加了
[01:27:43.000 --> 01:27:44.000] ok
[01:27:44.000 --> 01:27:46.000] 对然后对
[01:27:46.000 --> 01:27:48.000] 然后好像多半也是python2
[01:27:48.000 --> 01:27:49.000] 头条也是python2大户
[01:27:49.000 --> 01:27:50.000] 就不过头条
[01:27:50.000 --> 01:27:52.000] 现在也是转开始转golang了
[01:27:52.000 --> 01:27:53.000] 然后知乎
[01:27:53.000 --> 01:27:55.000] 我记得也应该是python2加tornado
[01:27:55.000 --> 01:27:57.000] 我们也是python2大户
[01:27:57.000 --> 01:28:00.000] 对我们在逐步的推
[01:28:00.000 --> 01:28:01.000] 底层的库先上三
[01:28:01.000 --> 01:28:02.000] 不然的话
[01:28:02.000 --> 01:28:03.000] 上面的音乐层
[01:28:03.000 --> 01:28:04.000] 就上不了python3
[01:28:04.000 --> 01:28:06.000] 是对这个话题
[01:28:06.000 --> 01:28:07.000] 我感觉我们可以专门
[01:28:07.000 --> 01:28:08.000] 拉一起出来聊
[01:28:08.000 --> 01:28:10.000] 因为google其实内部
[01:28:10.000 --> 01:28:11.000] 也是有这样一个过程
[01:28:11.000 --> 01:28:14.000] 然后我又还有想吐槽的地方
[01:28:14.000 --> 01:28:16.000] 我觉得可以单独拉一起出来
[01:28:16.000 --> 01:28:18.000] 然后大家一起黑一下
[01:28:18.000 --> 01:28:22.000] 行那我们就是也是来
[01:28:22.000 --> 01:28:23.000] 来总结一下
[01:28:23.000 --> 01:28:25.000] 如果你想推荐新手
[01:28:25.000 --> 01:28:26.000] 一门入门的语言
[01:28:26.000 --> 01:28:28.000] 就是任何语言
[01:28:28.000 --> 01:28:30.000] 你推荐哪个
[01:28:30.000 --> 01:28:31.000] java
[01:28:31.000 --> 01:28:32.000] 简单粗暴
[01:28:32.000 --> 01:28:33.000] java
[01:28:33.000 --> 01:28:36.000] 我的话我会推荐skim
[01:28:36.000 --> 01:28:38.000] skim有两本书
[01:28:38.000 --> 01:28:41.000] 第一本是the little skim
[01:28:41.000 --> 01:28:42.000] 非常非常简单
[01:28:42.000 --> 01:28:43.000] 看完之后
[01:28:43.000 --> 01:28:45.000] 你可以去看一本比较难的
[01:28:45.000 --> 01:28:47.000] 就是那个srcp
[01:28:47.000 --> 01:28:53.000] 对不过srcp也有python版的
[01:28:53.000 --> 01:28:56.000] 有python版的
[01:28:56.000 --> 01:28:59.000] 有的我之前还听过他那个课
[01:28:59.000 --> 01:29:00.000] 行我去看一下
[01:29:00.000 --> 01:29:01.000] 有的
[01:29:01.000 --> 01:29:04.000] 我的话
[01:29:04.000 --> 01:29:07.000] 我会推荐c或者python
[01:29:07.000 --> 01:29:09.000] 对我觉得c的话
[01:29:09.000 --> 01:29:15.000] 就是你不需要去学习很多的feature
[01:29:15.000 --> 01:29:17.000] 但是他也有一些蛋疼的
[01:29:17.000 --> 01:29:19.000] 比如内存管理的问题
[01:29:19.000 --> 01:29:20.000] 然后python的话
[01:29:20.000 --> 01:29:22.000] 就是更易于上手
[01:29:22.000 --> 01:29:23.000] 这两门
[01:29:23.000 --> 01:29:25.000] 对其实我还挺坚定
[01:29:25.000 --> 01:29:27.000] 想推荐大家上手的时候
[01:29:27.000 --> 01:29:29.000] 就可以考虑python
[01:29:29.000 --> 01:29:30.000] 对除了我刚才说的
[01:29:30.000 --> 01:29:33.000] 比如说对编码友好
[01:29:33.000 --> 01:29:34.000] 以及简洁之外
[01:29:34.000 --> 01:29:36.000] 我觉得还有一个比较大的优势
[01:29:36.000 --> 01:29:39.000] 就是解释器
[01:29:39.000 --> 01:29:40.000] 这个事情
[01:29:40.000 --> 01:29:42.000] 其实对新人入门来说
[01:29:42.000 --> 01:29:44.000] 你写着写着编译错误
[01:29:44.000 --> 01:29:45.000] 然后执行不下去
[01:29:45.000 --> 01:29:46.000] 和你在解释器里
[01:29:46.000 --> 01:29:49.000] 可以先去执行部分过程
[01:29:49.000 --> 01:29:53.000] 其实还是挺不一样的感觉的
[01:29:53.000 --> 01:29:55.000] 其实我并没有特别觉得
[01:29:55.000 --> 01:29:58.000] 就是解释器能简化你的调试
[01:29:58.000 --> 01:29:59.000] 或者怎么样
[01:29:59.000 --> 01:30:02.000] 就是当然他确实少了一个编译的过程
[01:30:02.000 --> 01:30:05.000] 可能对新人更友好一点
[01:30:05.000 --> 01:30:07.000] 对我不知道大家会不会有这种经历
[01:30:07.000 --> 01:30:09.000] 就是比如说我还记得
[01:30:09.000 --> 01:30:10.000] 我刚开始学的时候
[01:30:10.000 --> 01:30:15.000] 我有一段代码
[01:30:15.000 --> 01:30:18.000] 然后总是在某一点报错
[01:30:18.000 --> 01:30:20.000] 对我其实是可以在解释器里
[01:30:20.000 --> 01:30:23.000] 不断的去尝试说调整这个地方
[01:30:23.000 --> 01:30:25.000] 来看他是因为什么报错
[01:30:25.000 --> 01:30:27.000] 或者让他不报错
[01:30:27.000 --> 01:30:30.000] 你说的是那个repl吧
[01:30:30.000 --> 01:30:32.000] repl对
[01:30:32.000 --> 01:30:36.000] 但他本身其实并不等于解释器
[01:30:36.000 --> 01:30:38.000] 就是我还见过C++的repl
[01:30:38.000 --> 01:30:42.000] 但是我没有用过C++的repl
[01:30:42.000 --> 01:30:44.000] 我找过一些功能的repl
[01:30:44.000 --> 01:30:46.000] 真的比较难用
[01:30:46.000 --> 01:30:48.000] 对这个其实是工程问题
[01:30:48.000 --> 01:30:50.000] 就是如果解释器的话
[01:30:50.000 --> 01:30:54.000] 可能更容易去build一个更好的repl
[01:30:54.000 --> 01:30:58.000] 对我觉得这也是的确解释器
[01:30:58.000 --> 01:31:01.000] 对于临时打一些草稿
[01:31:01.000 --> 01:31:04.000] 或者是去试一些东西来说的话
[01:31:04.000 --> 01:31:32.000] 很多时候可能更为友好一些
[01:31:34.000 --> 01:31:37.000] 以上就是捕蛇者说第一期的全部内容
[01:31:37.000 --> 01:31:40.000] 我们的网站是pythonhunter.org
[01:31:40.000 --> 01:31:43.000] 我们的推特和直呼账号名字都叫做捕蛇者说
[01:31:43.000 --> 01:31:46.000] 欢迎留言告诉我们你的想法
[01:31:46.000 --> 01:32:07.000] 各位听众我们下期再见
