[00:00.000 --> 00:19.200] Hello大家好
[00:19.200 --> 00:21.440] 欢迎来到捕蛇者说
[00:21.440 --> 00:25.440] 这是我们第37期节目
[00:25.440 --> 00:27.400] 对EP37
[00:27.400 --> 00:30.040] 我确认了的现场
[00:30.040 --> 00:31.200] 我是manju saka
[00:31.200 --> 00:32.640] 好久不见了
[00:33.239 --> 00:35.839] 然后我们今天是有两位主播
[00:35.839 --> 00:39.760] 一位是我们的慈信声音担当
[00:39.760 --> 00:41.280] Nike9M来给大家打招呼
[00:41.280 --> 00:42.280] 按照惯例
[00:42.280 --> 00:43.599] 什么惯例
[00:43.599 --> 00:44.640] 这是什么介绍
[00:44.640 --> 00:45.519] Hello大家好
[00:45.519 --> 00:46.320] 我是Nike9M
[00:46.320 --> 00:47.800] 然后很久不录音了
[00:47.800 --> 00:48.599] 非常激动
[00:49.080 --> 00:50.560] 好的
[00:50.560 --> 00:52.440] 然后另外一位是
[00:52.440 --> 00:54.640] 正在剑谷创业途中的
[00:54.640 --> 00:55.640] Anthem老师
[00:55.640 --> 00:58.000] 他也很久没有和大家见面
[00:58.000 --> 00:59.400] 来给大家打个招呼
[01:00.520 --> 01:01.480] Hello大家好
[01:01.480 --> 01:02.280] 我是Anthem
[01:03.280 --> 01:04.480] 好的
[01:04.480 --> 01:05.239] 说实话
[01:05.239 --> 01:06.600] 今天嘉宾很特殊
[01:06.600 --> 01:08.280] 然后大家可能他在社区
[01:08.280 --> 01:09.840] 其实也是有很多的贡献
[01:09.840 --> 01:11.920] 而且他对于我个人来讲
[01:11.920 --> 01:13.120] 也有很重要的意义
[01:13.120 --> 01:14.440] 某种意义上来讲
[01:14.440 --> 01:16.960] 我自己现在很多很好的习惯
[01:16.960 --> 01:18.520] 然后都是他在职业初期
[01:18.520 --> 01:19.560] 是帮我培养的
[01:19.560 --> 01:21.520] 说说让我们掌声欢迎
[01:21.520 --> 01:22.480] 他也是我们的听众
[01:22.480 --> 01:23.960] 然后让我们掌声欢迎
[01:23.960 --> 01:24.960] Greycode
[01:24.960 --> 01:25.679] Hello
[01:25.679 --> 01:26.600] 来给大家打个招呼
[01:28.320 --> 01:29.440] Hi大家好
[01:29.440 --> 01:30.360] 我是Grey
[01:30.919 --> 01:31.440] 好
[01:33.479 --> 01:34.919] 你要不要先给观众
[01:34.919 --> 01:36.639] 来做个自我介绍
[01:37.080 --> 01:38.000] 然后聊一聊
[01:38.000 --> 01:40.039] 你现在你自己的个人一些经历
[01:40.039 --> 01:41.520] 然后目前在做了一些
[01:41.520 --> 01:42.919] 好玩的东西什么的
[01:44.479 --> 01:45.080] 好的
[01:45.360 --> 01:47.520] 我和Saka是大学认识的
[01:47.520 --> 01:48.520] 我是他好朋友
[01:48.520 --> 01:50.160] 然后我们一起入门了Python
[01:50.160 --> 01:52.520] 然后后来也一起学习Go
[01:52.839 --> 01:54.600] 目前我在Shopee工作
[01:54.600 --> 01:56.080] 做一些编排系统
[01:56.080 --> 01:57.759] 容器方面的事情
[01:58.440 --> 01:59.039] 没了
[01:59.640 --> 02:02.960] 我去你这个简短来
[02:02.960 --> 02:03.679] 对
[02:03.679 --> 02:06.199] 然后我和Grey的话是大学认识的
[02:06.199 --> 02:10.240] 然后他的学习方法很特很特殊
[02:10.240 --> 02:11.920] 而且也很有效
[02:11.920 --> 02:13.480] 我记得你好像是转行的
[02:13.480 --> 02:13.959] 对吧
[02:15.120 --> 02:15.799] 对
[02:15.799 --> 02:17.959] 我本科学的土木
[02:17.959 --> 02:20.640] 然后毕业之后还去非洲
[02:20.840 --> 02:22.240] 干土木干了一年
[02:22.240 --> 02:25.680] 然后之后才转行写Python的
[02:26.000 --> 02:28.240] 然后第一份前几份工作写Python
[02:28.240 --> 02:29.680] 后来是写Go
[02:29.680 --> 02:30.080] 对
[02:30.080 --> 02:32.000] OK
[02:32.000 --> 02:34.480] 然后我其实突然好奇一点
[02:34.480 --> 02:38.120] 你觉得你的转行有什么经验可以给大家分享
[02:38.120 --> 02:38.560] 没有
[02:38.960 --> 02:41.920] 我们很好奇在非洲搞土木的经历
[02:41.920 --> 02:42.480] 对
[02:42.480 --> 02:43.880] 我也其实我也很好奇
[02:43.880 --> 02:45.440] 要不然来先给大家聊一聊
[02:45.440 --> 02:47.280] 这算OT吗
[02:47.280 --> 02:47.800] 不是吧
[02:47.800 --> 02:48.480] 来
[02:48.480 --> 02:52.799] 你能聊聊你在非洲搞土木的经历吗
[02:54.000 --> 02:58.120] 非洲搞土木其实挺辛苦的
[02:58.120 --> 02:59.720] 不仅是996
[02:59.720 --> 03:03.359] 而且是全一周都没有休息
[03:03.359 --> 03:04.079] 周末都没有
[03:04.079 --> 03:05.519] 一个月休息一天
[03:05.839 --> 03:06.640] 大概这样
[03:07.200 --> 03:09.799] 然后白天忙施工
[03:09.799 --> 03:10.720] 就是管现场
[03:10.720 --> 03:13.359] 作为现场的工程师
[03:13.359 --> 03:16.799] 你要管各种中国工厂
[03:16.800 --> 03:18.600] 他们做的事情对不对
[03:18.600 --> 03:19.760] 你要看设计
[03:19.760 --> 03:21.440] 然后晚上做内页
[03:21.440 --> 03:26.160] 从补施工设计图到各种钱的管理
[03:26.520 --> 03:28.040] 到出各种文件
[03:28.400 --> 03:31.000] 到对上头写各种报告
[03:31.000 --> 03:31.200] 对
[03:31.200 --> 03:31.680] 都是这样
[03:31.680 --> 03:33.640] 所以白天往外页
[03:33.640 --> 03:35.520] 然后晚上忙内页
[03:35.960 --> 03:37.840] 全能的一个工作
[03:37.840 --> 03:41.840] 从会计到报告到施工到设计到画图
[03:42.200 --> 03:44.720] 在非洲就是全面去做所有的事情
[03:44.720 --> 03:47.480] 包括和业主开会说英语这些
[03:47.480 --> 03:47.720] 对
[03:47.720 --> 03:49.600] 这都是在非洲那边去锻炼的
[03:49.600 --> 03:51.360] 所以说是一个非常锻炼人
[03:51.360 --> 03:52.680] 非常辛苦的工作
[03:53.440 --> 03:54.680] 我当时转行
[03:54.680 --> 03:57.160] 其实有一个最主要的契机
[03:57.160 --> 04:00.520] 是因为分道的地区不是特别好
[04:00.520 --> 04:03.600] 就是和我同一年进公司的
[04:03.600 --> 04:06.760] 分道不同地区的我的好朋友拿到了钱
[04:06.760 --> 04:08.560] 第一年就是我的两倍到三倍
[04:09.079 --> 04:14.520] 然后主要是这个原因导致我就直接辞职了
[04:14.520 --> 04:16.600] 对直接裸辞去写代码了
[04:16.600 --> 04:19.400] 你想打断一下
[04:19.400 --> 04:22.400] 就是Gray你当时是在哪个国家
[04:22.920 --> 04:24.560] 我在东非的卢旺达
[04:24.560 --> 04:27.440] 在东非5国里面是一个很小很小的国家
[04:27.440 --> 04:29.320] 对就是卢旺达饭店
[04:29.320 --> 04:32.040] 1990年大屠杀的那个
[04:34.560 --> 04:38.520] 感觉环境是不是的确听起来就会很糟糕
[04:39.960 --> 04:43.800] 大屠杀之后他们国家就完全浑然一新了
[04:43.800 --> 04:45.680] 因为大屠杀对大家的伤害都很深
[04:45.680 --> 04:47.480] 现在已经过了30多年了
[04:47.480 --> 04:49.560] 已经完全看不出大屠杀的样子了
[04:49.560 --> 04:53.160] 现在他们搞那种清洁的管理方式
[04:53.160 --> 04:55.120] 禁止使用任何的塑料袋
[04:55.120 --> 04:57.320] 你去超市的话全部都是给你纸袋子
[04:57.320 --> 04:59.000] 非常干净非常整洁
[04:59.600 --> 05:01.320] 我觉得还是而且治安也很好
[05:01.320 --> 05:03.200] 我晚上12点1点的时候
[05:03.200 --> 05:06.920] 有时候出门去收建筑材料
[05:06.920 --> 05:08.640] 对我说走路出门不开车
[05:09.040 --> 05:11.080] 街上都很安全没有任何问题
[05:11.080 --> 05:13.480] 对所以说我觉得如果大家现在疫情
[05:13.480 --> 05:15.080] 就算了如果以后疫情好了
[05:15.080 --> 05:17.320] 有机会可以去那边自驾游什么的
[05:17.320 --> 05:18.520] 那边风景也很有趣
[05:19.360 --> 05:20.360] ok
[05:20.680 --> 05:22.360] 然后我们是不是可以总结一个
[05:22.360 --> 05:24.720] Great 说话处事哲学
[05:24.720 --> 05:28.160] 然后转马之前先去非洲呆一年
[05:31.320 --> 05:31.800] ok
[05:32.040 --> 05:33.720] 然后我其实很好奇
[05:33.720 --> 05:36.760] 因为我之前其实我跟你在也聊过
[05:36.760 --> 05:38.640] 其实我很好奇在你转行
[05:38.640 --> 05:40.560] 也是很多观众可能会比较窃喜
[05:40.560 --> 05:41.960] 就可能是稍微了解一下
[05:41.960 --> 05:44.000] 你觉得你在转行之中
[05:44.000 --> 05:45.280] 遇到过最大的困难
[05:45.280 --> 05:50.400] 或者说你就觉得印象最深的一些东西是啥
[05:51.799 --> 05:52.960] 这可能会有点抽象
[05:52.960 --> 05:55.359] 但是我不太确定你get到我意思没有
[05:56.200 --> 05:57.359] 我明白
[05:57.359 --> 05:59.120] 印象最深的我觉得还是
[06:00.280 --> 06:03.719] 后来在我入行一年零一个月的时候
[06:03.719 --> 06:06.080] 遇到了教授就是豆瓣那个洪教授
[06:06.080 --> 06:06.479] 对
[06:06.760 --> 06:08.599] 对洪教授
[06:09.039 --> 06:10.880] 对遇到是什么
[06:10.880 --> 06:12.520] 我加入他的公司
[06:12.520 --> 06:14.280] 那个爱音互动
[06:14.719 --> 06:15.719] 对
[06:15.719 --> 06:16.760] 对
[06:16.760 --> 06:17.880] 加入他公司的时候
[06:17.880 --> 06:19.320] 然后我才意识到
[06:19.320 --> 06:22.719] 就之前一直很努力的学习东西太
[06:23.440 --> 06:24.360] 太不工程了
[06:24.360 --> 06:24.600] 对
[06:24.600 --> 06:27.440] 就是我太以前太注重各种语法细节
[06:27.760 --> 06:29.400] 什么语法魔法
[06:29.400 --> 06:31.520] 或者是各种语法律师
[06:31.520 --> 06:31.960] 对
[06:32.400 --> 06:33.840] 或者各种各样这些细节
[06:33.840 --> 06:37.200] 但是实际上真正做工程这些东西
[06:37.480 --> 06:38.600] 不是那么重要
[06:38.600 --> 06:38.880] 对
[06:38.880 --> 06:40.120] 不是最重要的事情
[06:40.120 --> 06:43.680] 所以说从那个时候开始去知道
[06:43.680 --> 06:45.880] 去想怎么去做好工程
[06:45.880 --> 06:47.440] 所以那个时候在这之前
[06:47.440 --> 06:49.000] 我其实就像无头苍蝇一样
[06:49.000 --> 06:51.000] 去买各种各样的pattern的书
[06:51.000 --> 06:52.360] 去看各种东西
[06:52.360 --> 06:52.840] 对
[06:53.000 --> 06:54.520] 去了解网络
[06:54.520 --> 06:55.400] 了解
[06:55.800 --> 06:56.840] 操作系统
[06:57.000 --> 06:58.840] 但是实际上并没有个方向
[06:58.840 --> 07:00.280] 就是觉得因为自己什么都不懂
[07:00.440 --> 07:01.160] 什么都要学
[07:01.160 --> 07:02.680] 然后就什么都看
[07:02.720 --> 07:06.320] 然后就一学就想把什么都学通
[07:06.320 --> 07:07.840] 但是怎么用起来也不是很清楚
[07:07.840 --> 07:10.640] 写的代码其实也写的不是很好
[07:10.640 --> 07:13.440] 然后后来才知道应该怎么去做好这些事情
[07:13.880 --> 07:14.080] 对
[07:14.080 --> 07:15.599] 所以我觉得转行我的
[07:15.919 --> 07:19.000] 最大的挑战是这个
[07:19.000 --> 07:20.479] 在最开始一年的时候
[07:21.799 --> 07:23.799] 就是当时
[07:24.080 --> 07:26.359] 因为洪教授应该是cto对吧
[07:26.359 --> 07:28.080] 他会直接指导你们吗
[07:28.080 --> 07:28.599] 还是
[07:29.200 --> 07:30.719] 洪教授是cto
[07:30.719 --> 07:31.159] 对
[07:31.159 --> 07:33.080] 然后因为当时面试面到了我
[07:33.080 --> 07:35.000] 所以说给了我一些建议
[07:35.000 --> 07:36.159] 然后后来入职之后
[07:36.160 --> 07:38.520] 他其实实际上有什么问题
[07:38.520 --> 07:39.560] 可以直接问洪教授
[07:39.560 --> 07:40.720] 是很扁平的问题
[07:40.720 --> 07:41.840] 虽然洪教授很忙
[07:42.040 --> 07:43.520] 如果你去问他技术问题
[07:43.520 --> 07:46.440] 他是会给出一些想法的
[07:46.640 --> 07:49.160] 然后如果他稍微不那么忙一点
[07:49.160 --> 07:52.880] 也会去管一些稍微具体一点的技术细节
[07:52.880 --> 07:55.320] 所以说对团队是有很大的帮助
[07:55.520 --> 07:55.880] 对
[07:55.880 --> 07:58.920] 我记得你当时早期的时候
[07:58.920 --> 08:02.000] 你还跟我吐槽过你早期的
[08:02.000 --> 08:03.440] 当时我还记得说
[08:03.560 --> 08:05.680] 你吐槽当时你的回想
[08:05.680 --> 08:07.520] 你当时写的东西
[08:07.520 --> 08:09.760] 用了太多无意义的黑魔法
[08:09.760 --> 08:11.880] 比如说什么meta class之类的
[08:12.440 --> 08:13.360] 对
[08:13.360 --> 08:15.360] 因为开始学python的时候
[08:15.360 --> 08:17.800] 当时其实市面上的书不是特别多
[08:17.960 --> 08:19.240] 不像现在就很多了
[08:19.240 --> 08:23.480] 当时一本比较流行的书是python cookbook
[08:23.840 --> 08:27.080] 然后我现在依然比较喜欢这本书
[08:27.080 --> 08:27.440] 对
[08:27.440 --> 08:32.280] 然后里面就介绍了大量的python的高等的语法
[08:32.280 --> 08:33.200] 什么原编程
[08:33.640 --> 08:35.400] 什么yield之类的
[08:35.400 --> 08:35.880] 对
[08:36.400 --> 08:40.000] 还有标束符这些都是从这本书里面去学到的
[08:40.000 --> 08:42.280] 我先从那本书里面了解到它能做什么
[08:42.280 --> 08:44.959] 然后再去仔细的看文档去学
[08:45.160 --> 08:47.600] 然后学了之后就想在项目中去用
[08:47.600 --> 08:51.480] 然后就出现那些滥用的倾向
[08:51.480 --> 08:53.240] 但也还好
[08:53.240 --> 08:55.040] 也没造成过多的污染
[08:55.319 --> 08:56.079] ok
[08:56.079 --> 09:01.560] 我还记得里面最深的一个是当时我们俩有天晚上一起聊
[09:01.560 --> 09:04.319] 里面那一章是怎么样用yield的
[09:04.320 --> 09:06.720] 就是生生系写一个rx数对吧
[09:06.720 --> 09:07.640] rx数变厉
[09:08.200 --> 09:09.000] 对
[09:09.000 --> 09:13.600] yield的rx数的话好说是可以消除了这种低规限制
[09:13.600 --> 09:14.000] 对
[09:14.000 --> 09:16.600] 它表面上是个低规
[09:16.600 --> 09:18.480] 实际上它已经完全展平了
[09:18.480 --> 09:19.680] 而且用yield打平
[09:20.280 --> 09:21.120] 是这么个事情
[09:21.120 --> 09:24.760] 后来通过yield其实能学会很多事情
[09:24.760 --> 09:26.640] 包括后面的async的东西
[09:26.640 --> 09:30.720] 其实实际上你可以通过yield的from来实现这一套
[09:30.720 --> 09:31.080] 对
[09:31.080 --> 09:37.240] cookbook上有一节是教你用yield的去实现一个异步的tcp server
[09:37.240 --> 09:39.120] 其实你把内节搞懂了之后
[09:39.120 --> 09:43.200] 后面3.5的asyncio这一套实际上是一样的
[09:43.680 --> 09:44.000] 对
[09:44.000 --> 09:44.520] 是的
[09:44.520 --> 09:44.880] 没错
[09:44.880 --> 09:47.240] 它asyncio实际上就裹了一层语法糖
[09:47.240 --> 09:49.200] 对
[09:49.680 --> 09:50.680] 回到正题
[09:50.680 --> 09:53.080] 我突然想到你刚才聊到一个就是说
[09:53.080 --> 09:58.360] 你觉得你当时转行第一年的时候是工程能力上
[09:58.360 --> 10:01.360] 就是说包括学习方法上的一些缺失
[10:01.360 --> 10:02.320] 其实我很好奇
[10:02.320 --> 10:05.720] 在你看来你觉得什么样是一个工程能力
[10:07.000 --> 10:09.240] 我觉得工程能力
[10:10.440 --> 10:12.840] 是我现在觉得也不一定对
[10:12.840 --> 10:18.040] 我是觉得是程序员通过需求从零开始规划项目
[10:18.040 --> 10:19.760] 然后他能够划分结构
[10:19.760 --> 10:21.120] 做好建模和抽象
[10:21.120 --> 10:22.080] 最后交付
[10:22.080 --> 10:24.560] 并且维护好交付的项目
[10:24.560 --> 10:25.640] 修理一些bug
[10:26.000 --> 10:27.800] 我觉得这是一个工程能力
[10:27.800 --> 10:28.000] 对
[10:28.000 --> 10:29.640] 能够做好这些事情
[10:29.640 --> 10:31.560] 我觉得他是一个好的程序员
[10:31.560 --> 10:33.000] 然后如果我是面试官的话
[10:33.000 --> 10:34.400] 我也注重这些事情
[10:34.400 --> 10:36.840] 他实际上他实际的做事能力
[10:37.360 --> 10:37.840] 对
[10:38.280 --> 10:42.200] 我感觉这个定义是不是可以
[10:42.200 --> 10:45.840] 就是之前姚光强讲的他面试的时候
[10:45.840 --> 10:50.040] 对一个比如说比较高级的工程师的要求有点像
[10:50.280 --> 10:53.040] 就比如说一个比较新的工程师
[10:53.040 --> 10:55.000] 他不仅是要会写代码
[10:55.000 --> 10:58.480] 还要能够在接到一个需求之后
[10:58.480 --> 11:00.360] 去知道怎么分析
[11:00.360 --> 11:01.760] 然后怎么样推进项目
[11:01.760 --> 11:05.080] 以及想到之后怎么去维护监控
[11:05.080 --> 11:07.320] 就保证项目能平稳的运行
[11:08.160 --> 11:10.600] 就有点类似的感觉对吧
[11:10.600 --> 11:11.160] 对
[11:11.160 --> 11:12.240] 有一点类似的感觉
[11:12.240 --> 11:15.760] 但是我这个更加注重一点
[11:15.760 --> 11:20.200] 就是是在开发和最后维护的环节
[11:20.200 --> 11:24.800] 我会比较由于我个人性格和我工作属性的原因
[11:24.800 --> 11:29.800] 会稍微不那么重视需求的分析和最后的监控
[11:29.800 --> 11:32.839] 因为最后监控我们有整体的工程来集成
[11:32.839 --> 11:33.319] 对
[11:33.319 --> 11:39.199] 所以说我会比较更加重视项目的从零的开发能力
[11:39.199 --> 11:41.120] 和最后的解决问题能力
[11:41.120 --> 11:41.599] 对
[11:41.599 --> 11:42.760] 所以说是这样的
[11:43.520 --> 11:44.439] OK
[11:44.839 --> 11:47.400] 我觉得那你觉得就说
[11:47.400 --> 11:50.160] 你觉得比如说你要去评估一个
[11:50.160 --> 11:51.479] 你刚才给了一些定义
[11:51.640 --> 11:53.800] 然后你觉得如果说你
[11:53.800 --> 11:57.199] 在什么情况下你会觉得说你的同事
[11:57.199 --> 12:01.079] 他是一个有工程能力的一个合格素养的一个开发
[12:01.079 --> 12:02.680] 或者说你怎么样觉得一个人
[12:02.680 --> 12:05.079] 他算是有了合格的一个工程能力
[12:09.520 --> 12:10.199] 我这样来说
[12:10.359 --> 12:13.319] 我觉得工程能力有这么几个特征
[12:13.520 --> 12:17.359] 就第1个它是和技术选项无关的
[12:17.359 --> 12:18.599] 这就选择包括很多方面
[12:18.599 --> 12:19.479] 首先是语言
[12:19.479 --> 12:20.880] 它和编程语言无关
[12:20.880 --> 12:23.079] 这么说也不完全对
[12:23.080 --> 12:25.600] 因为实际上编程语言自己的方式
[12:25.600 --> 12:27.160] 会影响你的开发模式
[12:27.160 --> 12:28.360] 如果你用函数去语言
[12:28.480 --> 12:30.000] 肯定就和过程是不一样
[12:30.000 --> 12:30.200] 对
[12:30.200 --> 12:31.080] 那可对
[12:31.080 --> 12:32.720] 这肯定是有关系的
[12:32.720 --> 12:36.720] 但是我们就说就更高层一点的话去看这个问题
[12:36.920 --> 12:38.640] 它是和语言无关的
[12:38.640 --> 12:39.560] 我举个简单例子
[12:39.680 --> 12:41.120] 比如说GoF
[12:41.240 --> 12:45.120] 就是四人帮的模式设计
[12:45.120 --> 12:46.080] 那本书对
[12:46.080 --> 12:49.840] 它上来就讲抽象工厂和工厂方法
[12:49.840 --> 12:50.720] 我们就说抽象工厂
[12:50.720 --> 12:51.080] 对
[12:51.080 --> 12:56.200] 如果你真的去理解了抽象工厂是要做什么事情
[12:56.480 --> 12:58.200] 你会知道他做的事情就一句话
[12:58.200 --> 13:00.360] 他是为了屏蔽实力细节
[13:00.520 --> 13:04.600] 也就是说客户端只知道自己在操作一个interface的实力
[13:04.600 --> 13:07.600] 但不知道这个实力具体是怎样的一个实力
[13:07.800 --> 13:09.640] 其实理解了这一点之后
[13:09.640 --> 13:15.000] 你实现抽象工厂并不需要在那本书里面用加把什么几个
[13:15.120 --> 13:16.960] factory class去实现
[13:16.960 --> 13:18.280] 像在Go里面
[13:18.280 --> 13:22.480] 你可以直接用function返回一个interface的实力就好了
[13:22.480 --> 13:22.760] 对
[13:22.760 --> 13:25.400] 其实你要理解他要做什么
[13:25.400 --> 13:26.760] 要解决怎样的问题
[13:26.760 --> 13:28.800] 然后具体的去做就好了
[13:28.800 --> 13:33.800] 不需要教条的去套用那些书上或者很经典的知识的方法
[13:34.360 --> 13:35.760] 所以说我觉得对
[13:35.760 --> 13:36.720] 这是我给的一个例子
[13:36.720 --> 13:38.800] 就是说要解决的问题
[13:38.800 --> 13:41.160] 实际上这种思想是和技术无关的
[13:41.160 --> 13:41.600] 对
[13:42.040 --> 13:46.800] 那另外一个就是说这个技术学院先也关注到你用的具体的
[13:46.800 --> 13:48.800] 数据库数据存储
[13:48.800 --> 13:50.479] 数据存储或者中心件
[13:50.479 --> 13:53.280] 比如说不管是你是用关键性数据库
[13:53.280 --> 13:54.800] 还是radius
[13:54.800 --> 13:56.160] KV这种
[13:56.160 --> 13:56.760] 对
[13:56.760 --> 13:59.839] 当然它里面有很多重要的知识
[13:59.839 --> 14:00.560] 你需要掌握
[14:00.560 --> 14:00.719] 对
[14:00.719 --> 14:01.880] 我没有说它不重要
[14:01.880 --> 14:05.479] 或者说技术选行本身选怎样的形式很重要的
[14:05.479 --> 14:06.240] 这当然很重要
[14:06.240 --> 14:08.199] 但我说最后选出来之后
[14:08.199 --> 14:10.800] 它的更高在开发的时候
[14:10.800 --> 14:14.479] 它所需要的思想怎么把项目做好
[14:14.479 --> 14:16.079] 这个是和选行无关的
[14:16.079 --> 14:16.680] 对
[14:16.680 --> 14:17.880] 我要说的是这一点
[14:19.520 --> 14:20.520] OK
[14:21.120 --> 14:21.719] 那还有吗
[14:21.719 --> 14:24.640] 除了就比如说最基础的
[14:24.640 --> 14:27.199] 就是说是相关的一些基础的选行
[14:27.199 --> 14:29.319] 或者说是一些其他的concept
[14:29.319 --> 14:31.880] 你觉得说如果说我去评估一个人
[14:31.880 --> 14:35.439] 比如说我去面试时评估一个候选人
[14:35.439 --> 14:36.880] 他有着不错的工程能力
[14:36.880 --> 14:38.239] 还可以从哪些方面入手
[14:39.920 --> 14:46.120] 我觉得工程能力还是要看目标
[14:46.120 --> 14:48.240] 因为工程能力最终要
[14:48.240 --> 14:49.360] 我认为有两个目标
[14:49.360 --> 14:55.440] 第一个是为了稳定并且正确的实现工程
[14:55.440 --> 14:57.920] 第二个是为了解决工程上的问题
[14:57.920 --> 15:00.120] 这个问题可能是在开发中遇到了
[15:00.120 --> 15:02.240] 也有可能是开发完成上线之后遇到的
[15:02.240 --> 15:02.720] 对
[15:04.000 --> 15:07.280] 所以说从这样两个目标来看的话
[15:07.280 --> 15:10.920] 我们就从这两点去测试好了
[15:10.920 --> 15:12.800] 比如说如何解决问题
[15:12.800 --> 15:17.319] 只要是程序员在开发或者上线都会遇到各种各样的问题
[15:17.319 --> 15:20.719] 所以说就看他如何去解决一些问题
[15:20.719 --> 15:22.560] 或者是如何开发一些东西
[15:22.560 --> 15:23.560] 所以这方面实际上
[15:23.560 --> 15:25.640] 因为实际上我没有参加Shopee面试
[15:25.760 --> 15:28.400] 我也推了很多次
[15:28.400 --> 15:29.920] 我觉得我不是一个好的面试官
[15:29.920 --> 15:31.280] 所以我没有参加面试
[15:31.680 --> 15:32.240] 对
[15:32.920 --> 15:35.920] 但是我觉得如果我是面试官
[15:35.920 --> 15:37.479] 我能够做一些决定的话
[15:37.480 --> 15:42.840] 我会觉得让候选人去做一个小的项目
[15:43.120 --> 15:44.800] 是一个不错的方式
[15:44.800 --> 15:46.240] 虽然这个方式有很多槽点
[15:46.240 --> 15:49.480] 比如说大家会觉得是公司在白嫖项目
[15:49.480 --> 15:52.320] 说一个真的需要做的项目不想做了
[15:52.320 --> 15:54.360] 就交给候选人面试的时候去写
[15:54.360 --> 15:56.040] 对有很多这方面的
[15:56.240 --> 15:57.480] 这方面的吐槽在里面
[15:57.480 --> 15:58.280] 但我觉得
[15:59.200 --> 16:01.120] 抛开这些吐槽来看的话
[16:01.560 --> 16:05.520] 我觉得这个方面是真的能考察一个候选人的工程能力的
[16:05.520 --> 16:08.199] 看他从零开始构建一个项目
[16:08.199 --> 16:10.960] 看他最后做出来的东西
[16:10.960 --> 16:12.360] 怎样的形式
[16:12.360 --> 16:14.000] 看他解决了怎样的问题
[16:14.000 --> 16:15.040] 用了怎样的方法
[16:15.480 --> 16:16.240] 所以我觉得
[16:16.880 --> 16:18.439] 其实我是比较喜欢这个方式的
[16:19.120 --> 16:20.520] 不过我不是面试官
[16:20.520 --> 16:22.520] 所以说就只是这么说一说而已
[16:22.840 --> 16:23.240] 对
[16:23.840 --> 16:25.520] 对我其实挺喜欢
[16:25.520 --> 16:27.480] 我之前面试有一家公司
[16:27.480 --> 16:28.199] 当然我挂了
[16:28.319 --> 16:31.760] 然后其实就是当时就2B
[16:31.760 --> 16:35.760] 然后我很早之前就经理人的时候去聊过一下
[16:35.760 --> 16:38.840] 然后他们会给你一个
[16:39.480 --> 16:42.280] 比如说让你实现一个CRUD的API
[16:42.280 --> 16:45.800] 然后就说让你在差不多在两个小时内
[16:45.800 --> 16:47.360] 然后去实现完成
[16:47.680 --> 16:48.600] 然后对
[16:48.600 --> 16:51.480] 然后当时我其实就犯了不少这方面
[16:51.480 --> 16:55.760] 放了就包括在设计和实现路径上的选择
[16:56.080 --> 16:57.920] 然后上面犯了不少的错误
[16:57.920 --> 17:01.480] 然后最后其实我后面也在反思
[17:01.480 --> 17:05.360] 其实这某种意义上也就说是工程经验上的一些缺失
[17:06.800 --> 17:10.880] 提到做一个小项目的这个题
[17:10.880 --> 17:12.120] 我记得之前
[17:12.680 --> 17:16.280] 我们和陶文以及刚强聊过聊的那些
[17:16.280 --> 17:17.960] 其实他们也比较喜欢这个
[17:18.480 --> 17:20.640] 对我前几天还遇到了另外一个
[17:20.640 --> 17:23.520] 我觉得有点类似的思路
[17:23.960 --> 17:26.160] 但是我觉得可能成本更高
[17:26.160 --> 17:29.120] 就是有的公司会有一个现成的小项目
[17:29.120 --> 17:32.280] 然后在上面给你一个很简单的需求
[17:32.280 --> 17:35.840] 就是这个项目可能它就是独立能直接运行的一个程序
[17:35.840 --> 17:39.000] 它不需要任何外部的数据库连接之类的
[17:39.439 --> 17:42.879] 然后它会让你去做一个需求改动
[17:42.879 --> 17:45.040] 你做的时候你会发现这个需求
[17:45.719 --> 17:49.080] 如果你能意识到这个项目本身是分层的
[17:49.080 --> 17:52.919] 那在上中下三层你都可以去实现这个需求
[17:52.919 --> 17:54.479] 然后让你来做
[17:54.479 --> 17:58.040] 然后你可以会看到这个人有很多的考量
[17:58.040 --> 18:00.920] 对是的是的没错
[18:00.920 --> 18:02.960] 我可以聊一下我托比当时的那一次
[18:02.960 --> 18:06.440] 当时他们其实是设计一个就CRUD的API
[18:06.440 --> 18:08.320] 但是具体内容因为NDA的关系
[18:08.320 --> 18:10.040] 我就没法去先透露了
[18:10.040 --> 18:12.360] 然后当时其实我的实现路径
[18:12.360 --> 18:13.480] 其实就有很大问题
[18:13.480 --> 18:14.680] 包括方案选行
[18:14.680 --> 18:17.960] 当时我直接是我当时
[18:17.960 --> 18:20.040] 因为其实在这种情况下简单CRUD
[18:20.040 --> 18:24.040] 可能说你在后面的DB那一层可能更适合去选
[18:24.040 --> 18:25.680] 合适的一个ORM对吧
[18:25.680 --> 18:28.760] 然后但是我当时不知道为啥我当时脑抽
[18:28.760 --> 18:36.320] 然后直接选择去那个去做去选择那个zore circle的
[18:36.320 --> 18:39.600] 就是circle academy加上一个zore circle去写
[18:39.600 --> 18:44.240] 对然后而且就是说是我花费了当时就是说实现路径
[18:44.240 --> 18:48.800] 按道理说你其实是应该是一个API的网上写对吧
[18:48.800 --> 18:50.720] 但是之前按照在阿里的习惯
[18:50.720 --> 18:53.560] 因为我们没有那么其他的就规范化的东西
[18:53.560 --> 18:54.400] 也不要求测试
[18:54.400 --> 18:56.840] 所以说我是选择一层一层的去写
[18:56.840 --> 19:00.480] 就是先把下面的source那一层去写
[19:00.480 --> 19:07.240] 然后写完之后去写上面的那一层就是内存业务逻辑
[19:07.240 --> 19:08.760] 最后再去写controller
[19:08.760 --> 19:15.360] 对而且花费了很多不必要的时间去写一些config
[19:15.360 --> 19:19.960] utils就是我想一开始就是想是把他这个项目做的精神精美
[19:19.960 --> 19:24.320] 但是就在限定时间的情况下去考虑说
[19:24.320 --> 19:26.919] 没有那么多时间去完成所有的东西
[19:26.919 --> 19:29.320] 然后没有去做合适的一个tradeoff
[19:29.320 --> 19:33.080] 最后就想一下其实也还是在工程
[19:33.080 --> 19:35.439] 就是说实业工程上面的一些能力缺失
[19:35.439 --> 19:38.760] 我觉得我这个例子其实是挺反面的一个例子
[19:40.480 --> 19:44.280] 不是就我不想特别深入一些细节
[19:44.280 --> 19:48.760] 但是他们就希望你是怎么样做的
[19:49.439 --> 19:53.560] 他们其实希望的就是说是按照功能去划分
[19:53.560 --> 19:57.280] 而且就说是能够做好合适的TDD
[19:57.280 --> 19:59.919] 然后他们是比较看重test drive
[19:59.919 --> 20:02.800] 然后对然后就对是的
[20:02.800 --> 20:06.840] 就因为你这样你从上往下就自顶向下去设置的话
[20:06.840 --> 20:10.919] 你中间的test case和其他的东西其实是比较好做的
[20:10.919 --> 20:12.879] 但是我当时选择程序
[20:12.879 --> 20:16.760] 而且是花费了很多不必要的时间去那种就是concur case上面去
[20:16.760 --> 20:21.639] 就导致说我最后就可能说因为我就相当于说我从头去撸
[20:21.640 --> 20:25.720] 就从0到1开始脚手甲没有去接触已有的一些基础设施
[20:25.720 --> 20:27.400] 就导致说我自己
[20:27.880 --> 20:31.640] 然后最后那个就没有时间
[20:31.640 --> 20:34.640] 我最后功能整个工程完全是function是完成了
[20:34.640 --> 20:37.600] 但是就说可能没有时间
[20:37.600 --> 20:40.080] 最后足够时间去写测试之类的
[20:40.440 --> 20:41.680] 就我觉得你这个例子很好
[20:41.680 --> 20:44.960] 就是是不是不知道Grey同不同意
[20:44.960 --> 20:46.080] 就是工程能力
[20:46.240 --> 20:50.160] 我觉得很重要一部分就是分清什么是主要的
[20:50.160 --> 20:51.760] 然后什么是应该先完成的
[20:51.760 --> 20:55.800] 就是要能够去prioritize一些东西
[20:55.800 --> 20:57.200] 因为可做的东西是无穷的
[20:58.920 --> 20:59.840] 对是的
[20:59.840 --> 21:03.120] 但是我觉得在公司里面优先级的话
[21:03.120 --> 21:05.200] 可能对大公司还好
[21:05.200 --> 21:08.240] 对我来说我手上有太多的不同的工作了
[21:08.240 --> 21:09.560] 有各种各样的任务
[21:09.560 --> 21:12.120] 就是我觉得如果在一个中小型公司
[21:12.120 --> 21:14.640] 你手上有很多很多不同的任务的时候
[21:14.640 --> 21:17.240] 更重要的是你分清任务之间的优先级
[21:17.240 --> 21:17.760] 对
[21:17.760 --> 21:20.240] 然后其次再来说做哪一个任务
[21:20.240 --> 21:21.240] 任务本身的优先级
[21:22.080 --> 21:23.120] 是这样的
[21:24.440 --> 21:25.120] 对是的
[21:25.120 --> 21:29.840] 我觉得其实就是去选择合适的一个实现路径
[21:29.840 --> 21:32.960] 其实是衡量他工程能力的很重要的一个手段
[21:32.960 --> 21:36.720] 就是说我之前其实就像我举的Tubi这个例子对吧
[21:36.720 --> 21:39.680] 然后我其实当时可能说有各种客观因素
[21:39.680 --> 21:41.360] 包括说我昨天晚上没睡好
[21:41.360 --> 21:42.480] 但是或者是其他的
[21:42.480 --> 21:45.080] 但是可能我最直接的因素
[21:45.080 --> 21:48.720] 就还是说我之前其实系统化去积累这方面的
[21:48.720 --> 21:51.000] 就是说是设置顶向下的一个
[21:51.000 --> 21:55.320] 就是说是在就一个很紧急的情况上去做一个
[21:55.320 --> 21:57.720] 设计的能力还是很欠缺的
[21:57.720 --> 22:00.639] 是说其实我觉得这个可以给听众分享出来
[22:00.639 --> 22:02.919] 当做一个很反面的例子
[22:03.960 --> 22:05.800] 但我觉得这个说实话
[22:05.800 --> 22:09.040] 就是可能也是不同公司他有一些
[22:09.040 --> 22:10.480] 嗯倾向
[22:10.480 --> 22:13.520] 比如说Tubi可能就很重视TDD
[22:13.520 --> 22:14.720] 然后如果是阿里的话
[22:14.720 --> 22:18.920] 可能就是他就喜欢你先去就是把东西
[22:18.920 --> 22:20.240] 比如说content case考虑的多一点
[22:20.240 --> 22:21.000] 这个也有可能
[22:22.760 --> 22:23.120] 对
[22:23.120 --> 22:25.360] 然后我其实当时就是按照精神自媒的
[22:25.360 --> 22:27.240] 包括就各种东西去做
[22:27.240 --> 22:29.960] 结果就发现很多东西其实花费在了不必要的
[22:29.960 --> 22:31.320] 因为这还是需求
[22:31.320 --> 22:34.320] 就是说是可能就跟姚老师提到的需求分析的问题
[22:34.840 --> 22:36.760] 对刚才其实ok
[22:36.760 --> 22:38.920] 然后回来其实我其实挺好奇
[22:38.920 --> 22:42.040] 刚才我们其实聊的都是可能说有一些宏观的东西
[22:42.040 --> 22:45.240] 然后就比如说你去怎么样去做技术选行
[22:45.240 --> 22:47.879] 怎么样去选择实现路径去做tradeoff
[22:47.879 --> 22:50.480] 其实我很好奇就比如说大家在
[22:50.480 --> 22:55.040] 你们怎么样去一些很具象的一些东西
[22:55.040 --> 22:59.040] 比如说他的开发能力或者说一些具体的日常工作里面
[22:59.040 --> 23:01.840] 你们怎么样去评估自己和别人的工作能力
[23:01.840 --> 23:02.840] 其实我很好奇
[23:05.560 --> 23:06.639] 那我先说吧
[23:06.639 --> 23:11.240] 就是你的问题是在工作中怎么评估自己的是吧
[23:11.240 --> 23:12.480] 对是的
[23:12.480 --> 23:15.760] 你觉得或者说你觉得你如果说你觉得你自己是一个
[23:15.760 --> 23:17.720] 有的不错工作
[23:17.720 --> 23:19.960] 不错的一个工程能力的一个开发
[23:19.960 --> 23:23.600] 或者说你觉得同时你觉得说你们会从哪些方面体现出来
[23:23.600 --> 23:28.160] 或者说就你觉得你会从哪些方面比其他人有着更好的一些
[23:28.160 --> 23:31.960] 就是说特性特质数字之类的
[23:32.800 --> 23:33.600] 我先说一点
[23:33.760 --> 23:38.840] 就是自己写代码反而有时候会陷入盲区
[23:38.840 --> 23:40.400] 就是说自己很明白
[23:40.400 --> 23:43.760] 就如果这个代码是别人交给你去review的
[23:43.760 --> 23:45.920] 你眼睛看说就有问题就有问题
[23:45.920 --> 23:47.600] 但如果你自己写出来之后
[23:47.600 --> 23:50.280] 你自己写的过程中反而有时候会忘记
[23:50.280 --> 23:55.920] 我记得我以前总是嘲笑别人说怎么可能open一个file不close
[23:55.920 --> 23:57.680] 结果我真的干了干出这种事情
[23:57.680 --> 23:58.840] open一个file不close
[23:58.840 --> 23:59.280] 对
[23:59.280 --> 24:01.560] 结果这件事情如果代码交给我去review的话
[24:01.560 --> 24:03.400] 我一眼就能看出你这个channel
[24:03.400 --> 24:05.360] create make了之后没有close
[24:05.360 --> 24:07.120] 你这个file没有close之类的
[24:07.120 --> 24:10.360] 我很关注这些这种这种闭环的东西
[24:10.360 --> 24:11.000] 对
[24:11.000 --> 24:14.639] 但是自己写的时候反而会忘了这些事情
[24:14.639 --> 24:16.360] 包括gluten leak
[24:16.360 --> 24:18.159] gluten shallow这些事情
[24:18.159 --> 24:18.520] 对
[24:18.520 --> 24:20.520] 就写的时候反而会忘记
[24:20.520 --> 24:24.360] 所以说我觉得这方面评估自己的能力
[24:24.360 --> 24:27.679] 首先第一点还是要去总结反思
[24:27.679 --> 24:30.840] 偶尔还是就自己写出代码pr上去
[24:30.840 --> 24:32.800] 要自己去看一遍
[24:32.800 --> 24:35.320] 自己去看自己的pull request
[24:35.320 --> 24:35.719] 对
[24:35.719 --> 24:37.560] github的话就是merge request
[24:37.560 --> 24:42.879] 然后第二点是如果你在改功能
[24:42.879 --> 24:45.440] 在加功能的时候
[24:45.440 --> 24:46.720] 在扩展代码的时候
[24:46.720 --> 24:48.320] 你发现你在复制代码
[24:48.320 --> 24:51.600] 或者说有些东西就不太对
[24:51.600 --> 24:52.480] 你感觉不太对劲
[24:52.480 --> 24:53.879] 就是有code smell
[24:53.879 --> 24:54.159] 对
[24:54.159 --> 24:55.840] 所以实际上有code smell的时候
[24:55.840 --> 24:58.000] 你也能感觉到这东西是不对劲的
[24:58.000 --> 24:59.000] 是需要改的
[24:59.000 --> 24:59.399] 对
[24:59.399 --> 25:01.120] code smell有很多
[25:01.120 --> 25:02.960] 重要的地方是有code smell
[25:02.960 --> 25:04.679] 比如说复制代码
[25:04.679 --> 25:04.960] 对
[25:04.960 --> 25:06.720] 所以就是为了加功能
[25:06.720 --> 25:08.800] 你是从另一块复制一个代码过来
[25:08.800 --> 25:09.240] 对
[25:09.240 --> 25:10.160] 就是code smell
[25:10.160 --> 25:13.840] 或者是一些功能在不正确的地方
[25:13.840 --> 25:16.600] 比如说manager有个方法叫subscribe
[25:16.600 --> 25:21.800] 结果unsubscribe出现在了一个更底层的模型的方法里面
[25:21.800 --> 25:22.000] 对
[25:22.000 --> 25:25.280] 那之类的东西都是这种东西都是code smell
[25:25.280 --> 25:28.640] 但是要理解这些
[25:28.640 --> 25:31.200] 首先还是需要去想
[25:31.200 --> 25:32.960] 不管是或者去看
[25:32.960 --> 25:36.920] 包括看自己的代码或者看别人的代码
[25:36.920 --> 25:37.200] 对
[25:37.200 --> 25:38.400] 你不去看不去想
[25:38.400 --> 25:40.520] 你就意识不到它是有问题
[25:40.520 --> 25:42.320] 或者说怎么做出更好的
[25:42.320 --> 25:44.280] 就是这样
[25:44.280 --> 25:46.280] 对
[25:46.280 --> 25:48.000] 我其实刚才听到一个很重要的东西
[25:48.000 --> 25:52.320] 就你觉得说你去那个
[25:52.320 --> 25:56.840] 比如说你觉得一些code smell是觉得可能说它的抽象和设计不合理
[25:56.840 --> 26:01.120] 比如说把底层的一些具体的行为暴露给上层
[26:01.120 --> 26:03.040] 就好像涉及到建模的问题
[26:03.040 --> 26:04.040] 分层建模的问题
[26:04.040 --> 26:04.560] 对吧
[26:04.560 --> 26:06.639] 然后其实就我们聊一点微观的
[26:06.639 --> 26:09.600] 其实你比如说你在项目里面
[26:09.600 --> 26:13.239] 你会怎么样去对一个项目进行一个合理的抽象
[26:13.239 --> 26:15.439] 还是说进行一个建模的设计
[26:15.439 --> 26:18.520] 先说分层
[26:18.520 --> 26:22.000] 对项目的设计还是分层比较重要
[26:22.000 --> 26:22.360] 对
[26:22.360 --> 26:26.239] 然后一般其实我这个人是不叫调整
[26:26.239 --> 26:29.840] 就阿里可能会主张什么几个分层
[26:29.840 --> 26:31.639] 然后一些比较流行的观点
[26:31.639 --> 26:32.919] 什么滴滴滴之类的
[26:32.919 --> 26:33.520] 对
[26:33.520 --> 26:36.639] 领域驱动会给你讲有这么几个层
[26:36.639 --> 26:39.679] 其实我觉得都无所谓了
[26:39.679 --> 26:43.280] 重点是你要最终的结果要反映出来
[26:43.280 --> 26:44.360] 你的扩展性要好
[26:44.360 --> 26:45.840] 你的项目维护性要好
[26:45.840 --> 26:46.080] 对
[26:46.080 --> 26:48.560] 开放封闭是一个目标
[26:48.560 --> 26:48.800] 对
[26:48.800 --> 26:49.959] 是我们的考核标准
[26:49.959 --> 26:52.199] 最终的过程我倒是觉得不用叫调
[26:52.199 --> 26:53.600] 你怎样来放都行
[26:53.600 --> 26:55.120] 但不管怎么样
[26:55.120 --> 26:56.320] 层与层之间
[26:56.320 --> 26:56.600] 对
[26:56.600 --> 26:59.399] 你分出来层的目的是说
[26:59.400 --> 27:02.240] 第一是能够方便的换掉东西
[27:02.240 --> 27:04.600] 比如说如果你要换掉database
[27:04.600 --> 27:06.040] 数据存储这一层的话
[27:06.040 --> 27:06.360] 对
[27:06.360 --> 27:09.840] 你会发现换掉这一层不会影响业务代码
[27:09.840 --> 27:12.160] 你会发现这就是我们说的GL对吧
[27:12.160 --> 27:14.920] 开放封闭就是你在改变东西的时候
[27:14.920 --> 27:16.960] 你只改你要改的那一层
[27:16.960 --> 27:21.200] 但是对业务引用它的那一层没有什么变化
[27:21.200 --> 27:21.400] 对
[27:21.400 --> 27:23.200] 那么这么就是开放封闭的
[27:23.200 --> 27:25.560] 所以我觉得你不乘一层
[27:25.560 --> 27:27.800] 包括乘一层之间要用interface联系
[27:27.800 --> 27:29.240] 而不是具体的实力
[27:29.240 --> 27:31.680] 或者是用依赖注入或者依赖倒置
[27:31.680 --> 27:33.040] 这种各种各样的
[27:33.040 --> 27:35.200] 各种各样的
[27:35.200 --> 27:36.960] 叫做原则也好
[27:36.960 --> 27:37.200] 对
[27:37.200 --> 27:40.960] 我觉得你要理解它本质的一点是来解偶
[27:40.960 --> 27:43.680] 是要解决开放封闭的问题
[27:43.680 --> 27:44.720] 然后
[27:44.720 --> 27:46.680] 你就可以这样来考虑
[27:46.680 --> 27:48.040] 我觉得我在做的时候我就想
[27:48.240 --> 27:49.240] 如果未来
[27:49.240 --> 27:51.480] 我要把这一块的实现给换掉
[27:51.480 --> 27:52.800] 比如今天我在用etcd
[27:52.800 --> 27:56.400] 明天我要换成radius cluster来做数据存储
[27:56.400 --> 27:58.400] 那如果我这么一换的话
[27:58.400 --> 28:01.120] 那它会影响哪些模块的代码
[28:01.120 --> 28:02.640] 它会影响哪一层的代码
[28:02.640 --> 28:04.160] 那这合理吗
[28:04.160 --> 28:05.160] 我改个数据存储
[28:05.160 --> 28:07.600] 结果影响到最顶层的业务的代码了
[28:07.600 --> 28:09.640] 那实际上业务和数据存储应该没关系
[28:09.720 --> 28:11.920] 中间应该是用interface来联系起来的
[28:11.920 --> 28:12.680] 对吧
[28:12.680 --> 28:13.280] 对
[28:13.280 --> 28:15.160] 我会这样去考虑
[28:15.160 --> 28:20.920] 来怎样去解偶这些不应该有关系的层之间的问题
[28:21.360 --> 28:23.840] 这个是想说的分层的问题
[28:23.840 --> 28:24.960] 可以举个实际例子
[28:24.960 --> 28:26.680] 比如说jango里面
[28:26.680 --> 28:27.760] jango里面
[28:27.760 --> 28:29.280] 应该大家都写过
[28:29.280 --> 28:32.480] 对它的MVC或者它自己号称MVC
[28:32.480 --> 28:33.000] 对
[28:33.000 --> 28:34.400] 在写view里面的时候
[28:34.400 --> 28:36.400] 我们会import它的models
[28:36.400 --> 28:37.600] 对它的模型
[28:37.600 --> 28:39.720] 那这个import models
[28:39.720 --> 28:44.080] 实际上这个models的底层是怎样的backend engine
[28:44.080 --> 28:47.560] 实际上是通过jango的配置文件配的
[28:47.560 --> 28:50.080] 大部分大家都是配成mysql
[28:50.080 --> 28:51.280] 实际上你可以配成别的
[28:51.280 --> 28:51.840] 对
[28:51.840 --> 28:56.920] 那你会发现就算我们配成了别的数据存储的backend engine
[28:56.920 --> 28:59.920] 实际上我们的业务的代码是不变的
[28:59.920 --> 29:01.720] 我们依然是import model
[29:01.720 --> 29:03.200] 点什么对吧
[29:03.200 --> 29:04.840] 这部分东西是不变的
[29:04.840 --> 29:07.000] 所以说这就是一个解偶的
[29:07.000 --> 29:07.960] 好的解偶
[29:07.960 --> 29:09.160] 不好的解偶就是说
[29:09.160 --> 29:12.040] 如果你在业务的view里面import的不是这个东西
[29:12.040 --> 29:15.640] 你import的是import.models.mysql
[29:15.640 --> 29:16.360] 点什么
[29:16.360 --> 29:19.040] 你会发现如果你要换掉mysql
[29:19.040 --> 29:21.480] 那你整个import这些东西
[29:21.480 --> 29:22.720] 包括上面的模型
[29:22.720 --> 29:24.800] 下面的行法可能都会变掉的话
[29:24.800 --> 29:26.120] 那这个就是呕合了
[29:26.120 --> 29:27.120] 这就不好
[29:27.120 --> 29:30.719] 所以我觉得要理解分层解偶
[29:30.719 --> 29:33.600] 包括层云层间要用interface来联系
[29:33.600 --> 29:34.959] 它的目的是什么
[29:34.959 --> 29:36.280] 你要理解这一点之后
[29:36.280 --> 29:37.719] 那就灵活了
[29:37.719 --> 29:38.719] 你四路就打开了
[29:38.719 --> 29:40.639] 能够知道我为什么要这么做
[29:40.639 --> 29:43.560] 所以我觉得还是要理解本质的动机是什么
[29:43.560 --> 29:44.120] 对
[29:45.000 --> 29:46.080] 对
[29:46.080 --> 29:47.199] 但是你这我打断一下
[29:47.199 --> 29:48.919] 但是我觉得你正好提到这样
[29:48.919 --> 29:51.000] 但是我其实也一直在想一个问题
[29:51.000 --> 29:54.840] 就是说我们有些时候一定程度上的抽象泄露
[29:54.840 --> 29:56.520] 是不是也是不可避免的
[29:56.520 --> 30:02.760] 或者说是反而说是有有一定程度上有利于就是说呃用户的
[30:02.760 --> 30:04.080] 因为我举个例子
[30:04.080 --> 30:06.919] 就比如说那就刚才我们举到jungle的例子对吧
[30:06.919 --> 30:09.439] 然后你说然后他我们model内存
[30:09.439 --> 30:11.600] 我们就直接去比如说model呃
[30:11.600 --> 30:13.240] we use 依赖model
[30:13.240 --> 30:16.040] 然后model内存去就是说是import
[30:16.040 --> 30:17.639] 就去定义它的数据
[30:17.639 --> 30:20.399] 数据模型的时候去import它的一些定义好的
[30:20.399 --> 30:23.240] 比如说intel或xxxx的资源
[30:23.240 --> 30:25.800] 但是我们知道就可能说你my circle
[30:25.800 --> 30:27.560] circle light或者说是pg circle
[30:27.560 --> 30:29.720] 然后他们之间各自的特性是不一样的
[30:29.720 --> 30:33.080] 有些时候你需要去care你具体的
[30:33.080 --> 30:37.520] 就是说呃就下面的就是说一个backend的
[30:37.520 --> 30:39.600] 然后比如说我用pg circle的时候
[30:39.600 --> 30:43.200] 我就没法去或者说是my circle低于特定版本的时候
[30:43.200 --> 30:45.880] 我就没法去引入一个json field
[30:45.880 --> 30:48.680] 就是说是把它一个自动动作json来做
[30:48.680 --> 30:51.320] 然后或者说我去一些
[30:51.320 --> 30:53.800] 比如说那个pg circle里面的一些plugin
[30:53.800 --> 30:56.560] 比如说gis这种在my circle里面去没法用的
[30:56.560 --> 30:57.919] 那这种情况下
[30:57.919 --> 31:00.840] 我不太确定这种一定程度上的泄露
[31:00.840 --> 31:02.879] 是不是不可避免的
[31:02.879 --> 31:05.960] 或者说是反而说是有利于去
[31:05.960 --> 31:08.280] 用户去做的
[31:10.919 --> 31:12.760] 呃我觉得还是尽量要避免吧
[31:12.760 --> 31:17.320] 尽量避免这一点其实会有会遇到过
[31:17.320 --> 31:19.879] 比如说我们在用分布式存储的时候
[31:19.879 --> 31:21.159] 用etcd对吧
[31:21.160 --> 31:23.160] 他能很很方便的watch
[31:23.160 --> 31:24.960] 然后如果换成radius的话
[31:24.960 --> 31:28.560] 包括做事物都是有一些呃不太一样的地方
[31:28.560 --> 31:31.360] 对etcd的事物etcd的分布式锁
[31:31.360 --> 31:33.640] 还有radius的呃乐观锁
[31:33.640 --> 31:35.960] 还radius的事物这些
[31:35.960 --> 31:37.960] 都和etcd不一样
[31:37.960 --> 31:45.160] 但我觉得本质还是要把握他上层的呃这一层
[31:45.160 --> 31:47.160] 抽象爆出来抽象怎么样呢
[31:47.160 --> 31:50.160] 对所以说有一些观点会说
[31:50.160 --> 31:53.160] 数据存储这一层应该
[31:53.160 --> 31:56.160] 暴露的接口是业务相关的
[31:56.160 --> 31:58.160] 对呃jungle他就不是这样
[31:58.160 --> 32:00.960] jungle暴露的这一层接口就是一个model
[32:00.960 --> 32:02.960] 对一个一个很实际的
[32:02.960 --> 32:06.960] 甚至和数据存储底层绑定很强的一个东西
[32:06.960 --> 32:08.960] 对那有些观点会说
[32:08.960 --> 32:11.960] 数据存储这一层暴露接口就不是model
[32:11.960 --> 32:14.960] 而是一个叫repo对数据repo
[32:14.960 --> 32:17.960] 这repo里面的方法可以说是get user啊
[32:17.960 --> 32:20.960] 或者是什么get tenant这些东西
[32:20.960 --> 32:22.960] 然后返回一个tenant模型
[32:22.960 --> 32:27.960] tenant模型是一个纯粹的已经转换成内存里面的模型
[32:27.960 --> 32:31.960] 他就和数据存储的类型这个接绑了接偶了
[32:31.960 --> 32:35.960] 我觉得这个可能是我更加倾向的一个思路啊
[32:35.960 --> 32:39.960] 就是尽量做好和底层实现的接偶
[32:39.960 --> 32:42.960] 这样对上层功能更好
[32:42.960 --> 32:44.960] 因为实现上层功能语义
[32:44.960 --> 32:48.960] 就是讲好user story应该和下层的实现引擎尽量接偶吧
[32:48.960 --> 32:50.960] 这样对未来的
[32:50.960 --> 32:53.960] 不管是写测试啊或者换引擎啊
[32:53.960 --> 32:55.960] 这些都有更大的帮助
[32:55.960 --> 32:59.960] 但如果实现实在是很难去做这个事情的话
[32:59.960 --> 33:00.960] 我觉得我应该能理解
[33:00.960 --> 33:02.960] 做工程的时候里面有很多tradeoff
[33:02.960 --> 33:04.960] 或者说很多很难的地方
[33:04.960 --> 33:08.960] 为了百分百的实现一个东西
[33:08.960 --> 33:10.960] 去花很大的精力去做
[33:10.960 --> 33:12.960] 然后也不一定是必要的
[33:12.960 --> 33:14.960] 所以我非常理解这种tradeoff
[33:14.960 --> 33:16.960] 所以说看具体情况吧
[33:16.960 --> 33:18.960] 如果真的很难做
[33:18.960 --> 33:23.960] 也许也不一定一定要坚持这个观点
[33:23.960 --> 33:26.960] 这个我比较赞同
[33:26.960 --> 33:28.960] 比较赞同Grecode的这个观点
[33:28.960 --> 33:32.960] 就是刚刚讲到那个model这一层
[33:32.960 --> 33:34.960] 你到底要不要和数据接偶
[33:34.960 --> 33:37.960] 以及说你泄露之后
[33:37.960 --> 33:39.960] 其实是一种tradeoff
[33:39.960 --> 33:42.960] 然后但是我会觉得这个
[33:42.960 --> 33:45.960] 我之前也有和朋友讨论过这个问题吧
[33:45.960 --> 33:48.960] 我会觉得这个东西核心是
[33:48.960 --> 33:52.960] 你要是你这个东西就是如果出现
[33:52.960 --> 33:54.960] 比如说这种泄露的现象
[33:54.960 --> 33:56.960] 应该是你是有选择的
[33:56.960 --> 33:58.960] 这个选择在于说
[33:58.960 --> 34:01.960] 你能控制它的范围和它的层级
[34:01.960 --> 34:04.960] 是你有意识的要去做泄露的
[34:04.960 --> 34:07.960] 就是其实是出于tradeoff的目的
[34:07.960 --> 34:09.960] 比如说我通过把这个东西上体
[34:09.960 --> 34:12.960] 比如说我假设我这项目刚起步
[34:12.960 --> 34:14.960] 没有必要有controller
[34:14.960 --> 34:16.960] 我就直接只用model
[34:16.960 --> 34:18.960] 就操作model去实现
[34:18.960 --> 34:20.960] 我service的各种功能
[34:20.960 --> 34:22.960] 对但是这个是你有意识的去选择的
[34:22.960 --> 34:25.960] 你知道你拿它换了什么东西
[34:25.960 --> 34:26.960] 对去tradeoff什么东西
[34:26.960 --> 34:29.960] 而不是说我担心
[34:29.960 --> 34:31.960] 比如说会有一些刚入行
[34:31.960 --> 34:33.960] 很短时间的同学
[34:33.960 --> 34:35.960] 听到我们的这个内容会觉得
[34:35.960 --> 34:37.960] 这个泄露也是可以的
[34:37.960 --> 34:40.960] 然后就就顺手拿出来用
[34:40.960 --> 34:42.960] 我觉得这种是不行的对吧
[34:42.960 --> 34:44.960] 你要有意识的知道
[34:44.960 --> 34:45.960] 这个东西是泄露
[34:45.960 --> 34:48.960] 然后我这个地方我就是要用它
[34:48.960 --> 34:50.960] 因为能带给我一些便利
[34:50.960 --> 34:52.960] 或者是不必要的成本
[34:52.960 --> 34:54.960] 对是的没错
[34:54.960 --> 34:56.960] 就可以再举我刚才的反面例子
[34:56.960 --> 34:59.960] 如果说其实我很多时候出现的时候
[34:59.960 --> 35:01.960] 其实可以就是说是
[35:01.960 --> 35:05.960] 在就如果说我去做tradeoff的话
[35:05.960 --> 35:08.960] 那么可能说最后就整体的实现效果
[35:08.960 --> 35:09.960] 可能会更好
[35:09.960 --> 35:10.960] 包括我有更多时间去做
[35:10.960 --> 35:13.960] 但是并不能说你最开始一开始项目
[35:13.960 --> 35:16.960] 就觉得说他都没有去做什么
[35:16.960 --> 35:19.960] 比如说周边的一些各种东西的抽象
[35:19.960 --> 35:21.960] 那么你就没有必要去做
[35:21.960 --> 35:23.960] 然后你有些时候你知道你为什么
[35:23.960 --> 35:24.960] 这么做的情况下
[35:24.960 --> 35:26.960] 控制在控制爆炸半径的情况下
[35:26.960 --> 35:27.960] 也就还是
[35:27.960 --> 35:30.960] 对可以去才能去做这个事情
[35:30.960 --> 35:37.960] 对然后然后其实我这个地方我就在
[35:37.960 --> 35:40.960] 突然想到一个老师常谈那个问题
[35:40.960 --> 35:42.960] 就是说是over design的问题
[35:42.960 --> 35:45.960] 就话说就不知道大家会不会觉得
[35:45.960 --> 35:48.960] 就可能说如果说我最开始就去就设计好
[35:48.960 --> 35:53.960] 分层或者说去做一些很tricky的一些抽象
[35:53.960 --> 35:55.960] 会不会就是存在一个
[35:55.960 --> 35:57.960] 就是大家会经常谈到一个over design
[35:57.960 --> 35:59.960] 就比如说可能说在家里面
[35:59.960 --> 36:00.960] 可能比较常见
[36:00.960 --> 36:02.960] 就说我跳一个类
[36:02.960 --> 36:03.960] 我去阅读一个原版
[36:03.960 --> 36:06.960] 然后是抽象的n个很多个interface出来
[36:06.960 --> 36:09.960] 然后再抽象我去写个hello world
[36:09.960 --> 36:11.960] 首先是不是有经典段子吗
[36:11.960 --> 36:13.960] 家里面你要去写个hello world
[36:13.960 --> 36:16.960] 是说首先去定义一个interface
[36:16.960 --> 36:18.960] 然后去定义一个factory
[36:18.960 --> 36:20.960] 然后最后才开始进factory
[36:20.960 --> 36:21.960] new一个出来
[36:21.960 --> 36:23.960] 然后再去最后print hello world
[36:23.960 --> 36:25.960] 不知道大家会不会有这样
[36:25.960 --> 36:27.960] 就对这种事情是怎么看
[36:27.960 --> 36:31.960] 我的看法是不要做过度设计
[36:31.960 --> 36:33.960] 也不要做过早的设计
[36:33.960 --> 36:36.960] 我甚至我的写法都是先平铺直续的写
[36:36.960 --> 36:41.960] 但分层可能会根据具体的情况
[36:41.960 --> 36:42.960] 可能会分的比较杂
[36:42.960 --> 36:43.960] 但之后也会改
[36:43.960 --> 36:46.960] 分层可能会一开始就分个两层之类的
[36:46.960 --> 36:47.960] 最多三层吧
[36:47.960 --> 36:49.960] 就大概这个样子
[36:49.960 --> 36:52.960] 分层之后建模我会做的比较晚
[36:52.960 --> 36:55.960] 我一开始甚至就一个模型
[36:55.960 --> 36:56.960] 对最多一个吧
[36:56.960 --> 36:59.960] 一开始就一个模型建完之后
[36:59.960 --> 37:00.960] 就开始平铺直续的写
[37:00.960 --> 37:03.960] 写着写着我会闻到code smell的时候
[37:03.960 --> 37:05.960] 我再去开始做更多的建模
[37:05.960 --> 37:08.960] 或者是去修改建模方式
[37:08.960 --> 37:13.960] 这一点我一直是反对过度设计的
[37:13.960 --> 37:15.960] 以及过早设计
[37:15.960 --> 37:17.960] 因为很多时候要做的时候
[37:17.960 --> 37:20.960] 才会意识到这里需要做一些抽象
[37:20.960 --> 37:22.960] 这里需要做一些建模
[37:22.960 --> 37:24.960] 大概是这样
[37:24.960 --> 37:27.960] 对我觉得对我也很同意
[37:27.960 --> 37:29.960] 我觉得就是如果你发现你需要
[37:29.960 --> 37:31.960] 然后你再你再去做像
[37:31.960 --> 37:35.960] 就比如说google里面CR家的风格
[37:35.960 --> 37:37.960] 它是如果你有一个类码
[37:37.960 --> 37:40.960] 然后你想测它的话
[37:40.960 --> 37:42.960] 你最好是写一个接口
[37:42.960 --> 37:44.960] 这样你冒起来比较方便
[37:44.960 --> 37:48.960] 然后虽然说你可能没有就是其他的实现
[37:48.960 --> 37:50.960] 但这时候因为你要测试
[37:50.960 --> 37:52.960] 所以你写一个接口
[37:52.960 --> 37:54.960] 我觉得这个也是make sense
[37:54.960 --> 37:56.960] 就是因为你需要
[37:56.960 --> 37:58.960] 对
[37:58.960 --> 38:00.960] 但你像比如说
[38:00.960 --> 38:02.960] 比如说你像python里面的话
[38:02.960 --> 38:04.960] 它就其实测试就直接用mark了
[38:04.960 --> 38:06.960] 然后它完全不需要用一个接口
[38:06.960 --> 38:08.960] 所以我觉得你如果真的要再抽象一层
[38:08.960 --> 38:10.960] 就在python里就意义不大
[38:10.960 --> 38:13.960] 我之前对这种
[38:13.960 --> 38:17.960] 这种事情我之前有一段时间是摇摆的
[38:17.960 --> 38:19.960] 就是我不确定这个是教条主义
[38:19.960 --> 38:21.960] 还是密次定律
[38:21.960 --> 38:23.960] 就是确实很多项目发展到最后
[38:23.960 --> 38:27.960] 其实它的分层会有一些相似性
[38:27.960 --> 38:30.960] 对但是你早期这么搞
[38:30.960 --> 38:33.960] 其实又是一个成本很高的事情
[38:33.960 --> 38:35.960] 就是我一个很简单的东西
[38:35.960 --> 38:38.960] 我如果你能判断的话
[38:38.960 --> 38:41.960] 其实你是可以先做一个tradeoff
[38:41.960 --> 38:43.960] 然后之后再去把它调整过来
[38:43.960 --> 38:48.960] 对但是我还是更倾向于它是一个
[38:48.960 --> 38:54.960] 如果你的团队里是有一些资深的同学的话
[38:54.960 --> 38:56.960] 那你应该是一个
[38:56.960 --> 38:58.960] 不要一开始走这条路的
[38:58.960 --> 39:00.960] 这样的话你会有一个更合适的成本
[39:00.960 --> 39:01.960] 就是在你需要的时候
[39:01.960 --> 39:02.960] 你再去把它抽象出来
[39:02.960 --> 39:04.960] 或者是再做调整
[39:04.960 --> 39:06.960] 对
[39:06.960 --> 39:09.960] 这里其实就牵扯到一个问题了
[39:09.960 --> 39:13.960] 比如说是按照现在国内的开发速度来讲的话
[39:13.960 --> 39:16.960] 你会不会到最开始一开始就不做设计
[39:16.960 --> 39:21.960] 然后就导致说最后我完全基本上就不太可能
[39:21.960 --> 39:23.960] 就它就成为一个一坨屎山了
[39:23.960 --> 39:24.960] 对吧
[39:24.960 --> 39:28.960] 然后就去一坨屎山或者说是一坨排坑了
[39:28.960 --> 39:29.960] 就一坨坑了
[39:29.960 --> 39:30.960] 对吧
[39:30.960 --> 39:32.960] 前人挖坑后人找人乘凉
[39:32.960 --> 39:33.960] 这种情况下
[39:33.960 --> 39:35.960] 如果说你最开始去做设计
[39:35.960 --> 39:36.960] 你这个度怎么把控
[39:36.960 --> 39:38.960] 如果说最开始不做设计
[39:38.960 --> 39:40.960] 那后面如果说你项目去
[39:40.960 --> 39:42.960] 已经成为一个屎山的情况下
[39:42.960 --> 39:45.960] 你怎么去推动去抽抽时间来去做抽象
[39:45.960 --> 39:48.960] 去做重构或者说做其他的
[39:48.960 --> 39:50.960] 感觉这个问题有点大
[39:50.960 --> 39:51.960] 对
[39:51.960 --> 39:55.960] 我就我就其实我其实一直就在考虑这个问题
[39:55.960 --> 39:56.960] 对吧
[39:56.960 --> 39:58.960] 因为我们其实一直都在说不要over design
[39:58.960 --> 39:59.960] 对吧
[39:59.960 --> 40:00.960] 但是因为你其实很难
[40:00.960 --> 40:03.960] 有些时候你去design的时候很难去把握一个
[40:03.960 --> 40:05.960] 很难把握一个design一个度
[40:05.960 --> 40:07.960] 就是说是design到什么样的程度
[40:07.960 --> 40:09.960] 甚至符合当前的一个情况
[40:09.960 --> 40:11.960] 然后如果说你最开始就去
[40:11.960 --> 40:13.960] 就像我们可能说稍微senior的同学
[40:13.960 --> 40:17.960] 可能说知道我最开始挖了那些坑
[40:17.960 --> 40:19.960] 我后面争取有时间去填
[40:19.960 --> 40:21.960] 那比如说少就那样那些
[40:21.960 --> 40:22.960] 他就觉得这个是OK的
[40:22.960 --> 40:24.960] 到时候后面他也没有兴趣去填
[40:24.960 --> 40:27.960] 那么我就说也没有就后面我怎么样去填回去
[40:27.960 --> 40:31.960] 你们不知道大家对这种问题有什么想法
[40:31.960 --> 40:34.960] 我的想法就是这根本不会填回去
[40:34.960 --> 40:39.960] 大家口里说的说的这个东西以后有时间再做
[40:39.960 --> 40:40.960] 这次就算了
[40:40.960 --> 40:41.960] 那这东西就会拖着不做
[40:41.960 --> 40:43.960] 大家都有优先级更高的事情
[40:43.960 --> 40:46.960] 这种重构的事情又没有实际效率的事情
[40:46.960 --> 40:47.960] 都是优先级不高的事情
[40:47.960 --> 40:48.960] 那就会拖着不做
[40:48.960 --> 40:49.960] 所以说我的观点是
[40:49.960 --> 40:52.960] 如果你真的在做一个事情的话
[40:52.960 --> 40:57.960] 如果你真的时间不是就紧张到今晚
[40:57.960 --> 40:59.960] 要把这个bug fix到上线的话
[40:59.960 --> 41:01.960] 你真的也有那么一点时间的话
[41:01.960 --> 41:03.960] 就挤出一点时间把它写好一点
[41:03.960 --> 41:06.960] 不要留到未来去做
[41:06.960 --> 41:09.960] 这种技术在真的很难去写的
[41:09.960 --> 41:10.960] 技术在优先级很不高的
[41:10.960 --> 41:13.960] 技术在相比别的开发新功能
[41:13.960 --> 41:15.960] 或者解决一些已有问题
[41:15.960 --> 41:17.960] 优先级不高以后排不过来的
[41:17.960 --> 41:18.960] 没人会去做的
[41:18.960 --> 41:20.960] 你自己也没时间去做
[41:20.960 --> 41:23.960] 所以在一开始做的时候就尽量的
[41:23.960 --> 41:24.960] 也可以留技术在
[41:24.960 --> 41:27.960] 但自己想好可能你要做好准备
[41:27.960 --> 41:29.960] 可能未来一个季度都不会有时间去做它
[41:29.960 --> 41:31.960] 那你想好这个代价可以接受
[41:31.960 --> 41:33.960] 影响会大
[41:33.960 --> 41:35.960] 所以我觉得我是这样的态度
[41:35.960 --> 41:36.960] 尽量不要做
[41:36.960 --> 41:37.960] 但是如果做的话要想好
[41:37.960 --> 41:39.960] 如果一个季度两个季度不动它
[41:39.960 --> 41:41.960] 它的影响会怎样
[41:43.960 --> 41:47.960] 我的看法是史山就没救了
[41:47.960 --> 41:51.960] 因为我的经验是
[41:51.960 --> 41:53.960] 如果这个东西它已经是史山了
[41:53.960 --> 41:56.960] 那它的我们所谓的这种史山逻辑
[41:56.960 --> 41:57.960] 不只是代码
[41:57.960 --> 41:59.960] 它已经侵入到数据层面了
[41:59.960 --> 42:01.960] 就大概率它的数据都是史山
[42:01.960 --> 42:04.960] 就是比如说它的字段
[42:04.960 --> 42:05.960] 它一个字段
[42:05.960 --> 42:08.960] 它可能包含着多种不正交的数据
[42:08.960 --> 42:09.960] 对
[42:09.960 --> 42:11.960] 甚至再严重点说
[42:11.960 --> 42:13.960] 它的业务逻辑可能都是史山
[42:13.960 --> 42:14.960] 就是你会发现
[42:14.960 --> 42:17.960] 重复的它的成本还不如说
[42:17.960 --> 42:19.960] 我把某一个业务逻辑
[42:19.960 --> 42:22.960] 做一个简单的分割
[42:22.960 --> 42:24.960] 或者是把它给明确化
[42:24.960 --> 42:27.960] 对或者是从界面上去调整一下
[42:27.960 --> 42:30.960] 但是你这个时候是不具备优先级的
[42:30.960 --> 42:31.960] 或者你做了没收益
[42:31.960 --> 42:34.960] 就是这个东西本来就能跑
[42:34.960 --> 42:36.960] 然后我做了一个技术站
[42:36.960 --> 42:38.960] 它没有当下的显性收益
[42:38.960 --> 42:40.960] 就是它的收益是在
[42:40.960 --> 42:43.960] 我未来的持续开发中的
[42:43.960 --> 42:44.960] 对
[42:44.960 --> 42:47.960] 然后如果一个项目它又如此的重要
[42:47.960 --> 42:49.960] 又是未来的持续开发中
[42:49.960 --> 42:50.960] 其实
[42:51.960 --> 42:52.960] 我说实话
[42:52.960 --> 42:56.960] 它可能成为史山的概率也会小一些
[42:56.960 --> 42:59.960] 就是它是一个持续在迭代的项目的话
[42:59.960 --> 43:01.960] 然后
[43:01.960 --> 43:02.960] 对
[43:02.960 --> 43:03.960] 然后关于怎么拯救的话
[43:03.960 --> 43:07.960] 我还是想起我之前推荐的那本书
[43:07.960 --> 43:09.960] 就是那个
[43:09.960 --> 43:11.960] Philosophy of Software Design
[43:11.960 --> 43:13.960] 就是他之前有提到过
[43:13.960 --> 43:15.960] 就是复杂度这个东西
[43:15.960 --> 43:18.960] 就是到底它说白了
[43:18.960 --> 43:20.960] 就是它是影响你修改的成本的
[43:20.960 --> 43:23.960] 所以如果我们每次做需求的时候
[43:23.960 --> 43:28.960] 可以考虑多估10%到20%的时间
[43:28.960 --> 43:32.960] 然后就顺手把我们正在修改的
[43:32.960 --> 43:35.960] 这部分的代码或者是工程
[43:35.960 --> 43:37.960] 做一个小幅度的优化
[43:37.960 --> 43:38.960] 对
[43:38.960 --> 43:40.960] 它其实就是有帮助的
[43:40.960 --> 43:42.960] 有一些比如说你万年不动的东西
[43:42.960 --> 43:44.960] 也没必要去优化它
[43:44.960 --> 43:47.960] 就先让它保持部分实战状态
[43:47.960 --> 43:48.960] 对
[43:48.960 --> 43:50.960] 然后这样能保证我们
[43:50.960 --> 43:51.960] 开发的过程中
[43:51.960 --> 43:53.960] 不要一直是战术编程
[43:53.960 --> 43:56.960] 就是老板说啥
[43:56.960 --> 43:58.960] 我们就实现出这个功能
[43:58.960 --> 43:59.960] 然后
[43:59.960 --> 44:00.960] 然后
[44:00.960 --> 44:02.960] 然后比如说
[44:02.960 --> 44:04.960] 这个环节
[44:04.960 --> 44:07.960] 可能就需要提前在团队内
[44:07.960 --> 44:08.960] 大家达成一个一致的认识
[44:08.960 --> 44:10.960] 就不是说这个功能
[44:10.960 --> 44:12.960] 我把它逻辑实现了
[44:12.960 --> 44:13.960] 就是我工作做完了
[44:13.960 --> 44:16.960] 就是如果你连这个逻辑都实现不了
[44:16.960 --> 44:18.960] 你根本就不可能成为程序员
[44:18.960 --> 44:19.960] 对
[44:18.960 --> 44:21.960] 它只是一个你入行的一个线
[44:21.960 --> 44:23.960] 而不应该是说我们每次来聊
[44:23.960 --> 44:25.960] 这个东西的优异的时候
[44:25.960 --> 44:26.960] 优良的时候
[44:26.960 --> 44:27.960] 你说
[44:27.960 --> 44:29.960] 这个东西它实现了就OK了
[44:29.960 --> 44:30.960] 对
[44:31.960 --> 44:32.960] OK
[44:32.960 --> 44:33.960] 对对
[44:35.960 --> 44:36.960] OK
[44:36.960 --> 44:38.960] 我觉得OK
[44:38.960 --> 44:39.960] 我觉得这个东西
[44:39.960 --> 44:42.960] 其实听众朋友们可以就大概也知
[44:42.960 --> 44:43.960] 大家也可以一起思考
[44:43.960 --> 44:46.960] 因为这其实感觉就是会是一直一个
[44:46.960 --> 44:50.960] 没有真停止不了争论的一个话题
[44:50.960 --> 44:51.960] 对吧
[44:51.960 --> 44:52.960] 嗯
[44:53.960 --> 44:54.960] 对OK
[44:54.960 --> 44:56.960] 那其实我很好奇
[44:56.960 --> 44:58.960] 那比如说在设计的时候
[44:58.960 --> 45:01.960] 或者说是那我们项目设计完了
[45:01.960 --> 45:02.960] 比如说一个项目
[45:02.960 --> 45:05.960] 我们是选取了一个合适的一个抽象的一个模式
[45:05.960 --> 45:06.960] 一个度
[45:06.960 --> 45:08.960] 然后或者说我们去做了之后
[45:08.960 --> 45:12.960] 那比如说你在具体实现的时候
[45:12.960 --> 45:15.960] 可能说会去实现很多偏基础的
[45:15.960 --> 45:18.960] 或者说也可能会去实现很多业务的时候
[45:18.960 --> 45:21.960] 在具体实现就可能说在就具体写代码
[45:21.960 --> 45:22.960] 这过程中
[45:22.960 --> 45:25.960] 那你们觉得可能说怎么样才去体现
[45:25.960 --> 45:27.960] 哪些地方能体现出一个人有合格的
[45:27.960 --> 45:29.960] 一个工程数量或者其他的
[45:30.960 --> 45:32.960] 嗯那我还是我先说吧
[45:32.960 --> 45:33.960] 我觉得
[45:33.960 --> 45:34.960] Lady first
[45:38.960 --> 45:39.960] Gentleman first
[45:39.960 --> 45:44.960] 我觉得最主要的还是看语意命名
[45:44.960 --> 45:45.960] 还有事物这些方面吧
[45:45.960 --> 45:48.960] 其实就是看具体的一个方法
[45:48.960 --> 45:50.960] 或者一个函数它的定义呢
[45:50.960 --> 45:52.960] 一开始我们可以直接先看类型声明
[45:52.960 --> 45:53.960] 类型声明很重要
[45:53.960 --> 45:56.960] 我觉得一个好的好的一个函数
[45:56.960 --> 45:57.960] 或者是方法
[45:57.960 --> 45:58.960] 不管是函数的方法
[45:58.960 --> 46:02.960] 那他都是应该最好是一看类型声明
[46:02.960 --> 46:05.960] 就知道他在做什么
[46:05.960 --> 46:07.960] 并且知道应该怎么调用
[46:07.960 --> 46:08.960] 对
[46:08.960 --> 46:11.960] 这其实真的要做到这一点并不容易
[46:11.960 --> 46:12.960] 举个简单的例子
[46:12.960 --> 46:15.960] 如果用过Docker的客户端
[46:15.960 --> 46:18.960] SDK的go的SDK的话
[46:18.960 --> 46:20.960] 它里面有一个函数是attach
[46:20.960 --> 46:22.960] Docker attach大家用过吧
[46:22.960 --> 46:25.960] Docker attach就是去attach
[46:25.960 --> 46:28.960] 让客户端让客户能够attach一个容器的
[46:28.960 --> 46:30.960] 标准输入和标准输出
[46:30.960 --> 46:31.960] 对
[46:31.960 --> 46:32.960] 一般使用来看日志什么的
[46:32.960 --> 46:33.960] 对
[46:33.960 --> 46:35.960] 这个东西是Docker log之类的日志吗
[46:35.960 --> 46:37.960] 其实标应该也是有attach
[46:37.960 --> 46:38.960] 对
[46:38.960 --> 46:39.960] 其实不一样
[46:39.960 --> 46:40.960] 再说吧
[46:40.960 --> 46:41.960] attach
[46:41.960 --> 46:43.960] 如果你用go的Docker的
[46:43.960 --> 46:46.960] CLI客户端SDK去attach的话
[46:46.960 --> 46:50.960] 你发现它的函数声明的返回
[46:50.960 --> 46:52.960] 函数声明大概是这样
[46:52.960 --> 46:53.960] 入参是string
[46:53.960 --> 46:54.960] 我简化了
[46:54.960 --> 46:55.960] 入参是string
[46:55.960 --> 46:58.960] 返回是一个什么response hijack
[46:58.960 --> 47:01.960] 里面有一个TCP的socket
[47:01.960 --> 47:02.960] 就是collection
[47:02.960 --> 47:03.960] 还有一个reader
[47:03.960 --> 47:06.960] 实际上这个时候你就会想
[47:06.960 --> 47:08.960] 这个collection和reader的关系是什么
[47:08.960 --> 47:09.960] 我怎么用这个connection
[47:09.960 --> 47:10.960] 它是怎样的东西
[47:10.960 --> 47:12.960] 你这个时候就必须要去看文档
[47:12.960 --> 47:13.960] 你要知道
[47:13.960 --> 47:14.960] 他们的关系是什么
[47:14.960 --> 47:16.960] 最后这个connection需不需要close
[47:16.960 --> 47:18.960] 这个connection可以读写吗
[47:18.960 --> 47:20.960] 可以去write它吗
[47:20.960 --> 47:21.960] 之类的
[47:21.960 --> 47:22.960] 对
[47:21.960 --> 47:22.960] 你会想这些问题
[47:22.960 --> 47:25.960] 这个时候我就会想
[47:25.960 --> 47:27.960] 如果说这个attach的接口
[47:27.960 --> 47:29.960] 变成它的返回类型
[47:29.960 --> 47:34.960] 变成一个reader
[47:34.960 --> 47:35.960] 一个单独的writer
[47:35.960 --> 47:36.960] 对
[47:36.960 --> 47:39.960] 那会不会更好了
[47:39.960 --> 47:40.960] 是这样的
[47:40.960 --> 47:43.960] 因为它原来返回的writer
[47:43.960 --> 47:48.960] 甚至还夹杂着标准输出和标准错误输出
[47:48.960 --> 47:50.960] 他文档里面要求说
[47:50.960 --> 47:53.960] 你要用它官方提供的一个叫htdcopy的函数
[47:53.960 --> 47:57.960] 来把从reader里面分出两个reader
[47:57.960 --> 48:01.960] 才能区分出htdin和htdout
[48:01.960 --> 48:06.960] 你会看到这一点会通过文档来告诉用户
[48:06.960 --> 48:08.960] 你要用为了用这个函数
[48:08.960 --> 48:11.960] 你必须用别的函数来把它分开
[48:11.960 --> 48:13.960] 你必须用完之后close一个东西
[48:13.960 --> 48:16.960] 你必须明白每个参数它的含义是什么
[48:16.960 --> 48:17.960] 它的过程是什么
[48:17.960 --> 48:18.960] 你要怎么去用它
[48:18.960 --> 48:19.960] 既然如此
[48:19.960 --> 48:21.960] 为什么不直接在这个函数返回的时候
[48:21.960 --> 48:23.960] 就把htdout和htdin给分开
[48:23.960 --> 48:24.960] 对吧
[48:24.960 --> 48:25.960] 之类的意思
[48:25.960 --> 48:26.960] 对
[48:26.960 --> 48:27.960] 这个类型声明
[48:27.960 --> 48:29.960] 你是否一看就知道在做什么
[48:29.960 --> 48:31.960] 是否一看就知道怎么调用
[48:31.960 --> 48:33.960] 如果说不看文档就能明白
[48:33.960 --> 48:36.960] 或者说没有这些隐性的规定在里面
[48:36.960 --> 48:37.960] 我觉得它就是一个好的声明
[48:37.960 --> 48:41.960] 但实际上能做到这一点是不容易的
[48:41.960 --> 48:43.960] 这一点说起来比较简单
[48:43.960 --> 48:44.960] 但写起来的时候
[48:44.960 --> 48:46.960] 你要去反复推敲
[48:46.960 --> 48:48.960] 因为你自己作为开发者的时候
[48:48.960 --> 48:51.960] 你自然自己脑中的数据流向
[48:51.960 --> 48:53.960] 你非常清楚这个函数它返回什么东西
[48:53.960 --> 48:55.960] 我当然知道怎么调用它
[48:55.960 --> 48:57.960] 但你要退一步说
[48:57.960 --> 48:58.960] 你去review这些代码
[48:58.960 --> 49:01.960] 这个函数光看这个interface
[49:01.960 --> 49:02.960] 它什么意思
[49:02.960 --> 49:03.960] 我能理解吗
[49:03.960 --> 49:04.960] 它的语义清晰吗
[49:04.960 --> 49:05.960] 对吧
[49:05.960 --> 49:08.960] 如果我要把interface的底层声音给换掉
[49:08.960 --> 49:10.960] 它里面的代码会相互复制吗
[49:10.960 --> 49:12.960] 如果有复制code smell
[49:12.960 --> 49:14.960] 或者说它的功能不正确
[49:14.960 --> 49:19.960] 或者说这一刀切下去的这一层分的不对
[49:19.960 --> 49:20.960] 对
[49:20.960 --> 49:22.960] 就是说自己去想一想
[49:22.960 --> 49:25.960] 自己在做这个函数切分
[49:25.960 --> 49:26.960] 内心声明
[49:26.960 --> 49:29.960] 还有它的入参返回值这些的时候
[49:29.960 --> 49:30.960] 它是否清晰
[49:30.960 --> 49:32.960] 是否语义重复
[49:32.960 --> 49:34.960] 是否一看就明白
[49:34.960 --> 49:36.960] 这一点其实想做好不容易
[49:36.960 --> 49:38.960] 我review很多同学的代码
[49:38.960 --> 49:39.960] 他们做不到这一点
[49:39.960 --> 49:42.960] 他们比如说我自己有个同学就在做attach
[49:42.960 --> 49:45.960] 他包了一下attach返回的东西
[49:45.960 --> 49:47.960] 就直接压根就没有返回
[49:47.960 --> 49:49.960] 他attach一个容器是没有返回的
[49:49.960 --> 49:53.960] 如果现在我要实现一个新的attach
[49:53.960 --> 49:54.960] 我都不知道应该怎么去实现
[49:54.960 --> 49:56.960] 就去看他已有的实现
[49:56.960 --> 50:00.960] 才能知道他在attach里面到底是讲的是什么意思
[50:00.960 --> 50:01.960] 对
[50:01.960 --> 50:02.960] 对明白
[50:02.960 --> 50:03.960] 其实也就是说
[50:03.960 --> 50:07.960] 如果说我们要去做这种协作情况下
[50:07.960 --> 50:09.960] 或者说你自己去用的情况
[50:09.960 --> 50:13.960] 你可以不关心它底层实现细节的情况下
[50:13.960 --> 50:15.960] 也就是说你需要去知道它里面是怎么用的
[50:15.960 --> 50:17.960] 就直接看着它的比如说签名
[50:17.960 --> 50:18.960] 或者说其他的
[50:18.960 --> 50:20.960] 就能知道它是怎么用的
[50:20.960 --> 50:21.960] 对吧
[50:21.960 --> 50:22.960] 对
[50:22.960 --> 50:23.960] 是这样的
[50:23.960 --> 50:26.960] 就是philosophy of software design里面
[50:26.960 --> 50:28.960] 他就很强调这个
[50:28.960 --> 50:32.960] 他把这个概括成interface should be deep
[50:32.960 --> 50:34.960] 或者classes should be deep
[50:34.960 --> 50:36.960] 就是说接口要简洁
[50:36.960 --> 50:40.960] 然后要就是提供必要的功能
[50:40.960 --> 50:42.960] 但是隐藏不必要的功能
[50:42.960 --> 50:43.960] 嗯
[50:43.960 --> 50:44.960] 是的
[50:44.960 --> 50:45.960] 是的
[50:45.960 --> 50:48.960] 然后我觉得其实就是语意化
[50:48.960 --> 50:49.960] 就是说和语意化的设计
[50:49.960 --> 50:50.960] 其实挺重要的
[50:50.960 --> 50:53.960] 而且就很多时候就合理的暴露
[50:53.960 --> 50:54.960] 就主要简洁
[50:54.960 --> 50:56.960] 比如说反面教程就是my circle
[50:56.960 --> 50:58.960] 然后之前跟人吐槽my circle是
[50:58.960 --> 50:59.960] 哪个函数来着
[50:59.960 --> 51:00.960] 忘了
[51:00.960 --> 51:03.960] 然后里面一下得传20多个参数进去
[51:03.960 --> 51:04.960] 然后对
[51:04.960 --> 51:05.960] 反馈也是很恶心
[51:05.960 --> 51:09.960] 我觉得这种东西就是非常的就bad design
[51:12.960 --> 51:13.960] 嗯
[51:13.960 --> 51:15.960] 我会觉得
[51:15.960 --> 51:19.960] 看一个同学的函数设计
[51:19.960 --> 51:24.960] 真的能比较体现他整个系统设计的特征
[51:24.960 --> 51:26.960] 其实一个函数设计就是一个
[51:26.960 --> 51:28.960] 就是刚才LiveGM说的
[51:28.960 --> 51:31.960] modular should be deep
[51:31.960 --> 51:33.960] 就是你要做深
[51:33.960 --> 51:35.960] 你不能说一个功能给我
[51:35.960 --> 51:37.960] 让我连续用七八个函数
[51:37.960 --> 51:39.960] 或者是两三个函数
[51:39.960 --> 51:41.960] 然后他可以实现一下
[51:41.960 --> 51:42.960] 然后你跟我说
[51:42.960 --> 51:45.960] 这样是为了实现你自己接口的证交
[51:45.960 --> 51:47.960] 然后你会发现所有的调用者
[51:47.960 --> 51:50.960] 所有的使用方都要连续用好几次
[51:50.960 --> 51:51.960] 你的不同函数
[51:51.960 --> 51:54.960] 才能实现一个大家需要的共性功能
[51:54.960 --> 51:55.960] 对
[51:55.960 --> 51:56.960] 那这样的话
[51:56.960 --> 51:58.960] 其实就是你设计的不够deep
[51:58.960 --> 52:01.960] 以及说你不能说你的函数
[52:01.960 --> 52:03.960] 名字也不知道是什么语义
[52:03.960 --> 52:04.960] 然后传的参数
[52:04.960 --> 52:07.960] 也让所有人摸不着头脑再去看文档
[52:07.960 --> 52:09.960] 那这个时候就是
[52:09.960 --> 52:12.960] 你暴露了太多不必要的信息
[52:12.960 --> 52:14.960] 这样使用起来是很容易出错的
[52:14.960 --> 52:15.960] 对
[52:15.960 --> 52:17.960] 如果你函数设计成这样
[52:17.960 --> 52:20.960] 那我会觉得可能你在模块划分的时候
[52:20.960 --> 52:21.960] 也会有这种倾向
[52:21.960 --> 52:23.960] 比如说你的模块设计
[52:23.960 --> 52:26.960] 你的服务设计会不会也会把各个
[52:26.960 --> 52:29.960] 模块服务切得特别薄特别碎
[52:29.960 --> 52:32.960] 接口又特别难以清晰
[52:32.960 --> 52:32.960] 对
[52:32.960 --> 52:36.960] 那他对整个整个公司的系统
[52:36.960 --> 52:38.960] 其实都是在增加复杂度
[52:40.960 --> 52:43.960] 这一点其实我很同意
[52:43.960 --> 52:44.960] 整体来讲
[52:44.960 --> 52:48.960] 其实就说你很多大的复杂度
[52:48.960 --> 52:55.960] 其实是由不同的小的复杂度来积累起来的
[52:55.960 --> 53:01.960] 就可能说你从一个实现的层面上来说的话
[53:01.960 --> 53:04.960] 就说你比如说一个SDK
[53:04.960 --> 53:06.960] 像刚才Gregg的一个例子
[53:06.960 --> 53:09.960] 然后那么他他去一个进程
[53:09.960 --> 53:11.960] 那么在这种设计的时候
[53:11.960 --> 53:16.960] 我们可能就需要去提前的去思考
[53:16.960 --> 53:19.960] 敲定好他具体的语义
[53:19.960 --> 53:23.960] 这个语义可能说包括我的就输入是什么
[53:23.960 --> 53:25.960] 他的输入的含义是什么
[53:25.960 --> 53:26.960] 返回是什么
[53:26.960 --> 53:27.960] 他返回的含义是什么
[53:27.960 --> 53:30.960] 尽可能去避免二一性
[53:30.960 --> 53:32.960] 我觉得这个东西其实很重要
[53:33.960 --> 53:35.960] 我有个小问题想问一下
[53:35.960 --> 53:40.960] 就是比如说如果我们query的时候看到这种问题
[53:40.960 --> 53:41.960] 就是单纯的就是说
[53:41.960 --> 53:43.960] 我刚才提到的函数设计问题
[53:44.960 --> 53:44.960] 对
[53:44.960 --> 53:47.960] 然后这个时候让他去改
[53:47.960 --> 53:49.960] 就是一般能推得动吗
[53:49.960 --> 53:54.960] 这个就很复杂了
[53:54.960 --> 53:56.960] 就取决于你和这个人的关系
[53:56.960 --> 53:58.960] 对是是怎样的关系
[53:58.960 --> 54:04.960] 但一般来说我review的
[54:04.960 --> 54:05.960] 还是还是会有人改的
[54:05.960 --> 54:09.960] 因为实际上我会先先就是在
[54:09.960 --> 54:11.960] 一些比较重大的review
[54:11.960 --> 54:13.960] 我觉得可能会改成比较大的review
[54:13.960 --> 54:17.960] 我会私下就是通过这个聊天软件或者当面
[54:17.960 --> 54:18.960] 如果是在办公室的话
[54:18.960 --> 54:21.960] 当面和他聊一聊就是先讨论出一个共识
[54:21.960 --> 54:26.960] 然后才在这个request里面去打字告诉他
[54:26.960 --> 54:28.960] 这个事情我们已经达成共识了
[54:28.960 --> 54:29.960] 要怎样去改
[54:29.960 --> 54:31.960] 对如果如果改动比较大的话
[54:31.960 --> 54:33.960] 我会我会私下和他讨论
[54:34.960 --> 54:35.960] 其实
[54:36.960 --> 54:37.960] 还是
[54:38.960 --> 54:41.960] 我其实还是觉得这个也要看具体的
[54:41.960 --> 54:44.960] 这个项目是自己是不是own这个项目
[54:44.960 --> 54:45.960] 如果我own这个项目的话
[54:45.960 --> 54:47.960] 我是个项目owner的话
[54:47.960 --> 54:51.960] 我觉得我还是会会努力的去去推这个事情
[54:51.960 --> 54:52.960] 去把它改好了
[54:52.960 --> 54:55.960] 毕竟这个事业是是这项目是我来做的
[54:55.960 --> 54:56.960] 对吧
[54:56.960 --> 54:57.960] 这项目是我来做
[54:57.960 --> 54:58.960] 所以我觉得还是努力去推它
[54:58.960 --> 55:00.960] 但如果交流比较困难
[55:00.960 --> 55:01.960] 还是尽量的一对一交流吧
[55:01.960 --> 55:04.960] 如果用pool request去comment的话
[55:04.960 --> 55:06.960] 其实不是很清晰
[55:06.960 --> 55:08.960] 包括这种异步交流方式的话
[55:08.960 --> 55:10.960] 信息交流效率也比较低
[55:10.960 --> 55:16.960] 就是这样的
[55:19.960 --> 55:20.960] 嗯
[55:20.960 --> 55:22.960] 那其实对我觉得这个东西
[55:22.960 --> 55:25.960] 那比如说我们除了就是说是一体一些具体
[55:25.960 --> 55:27.960] 就可能说代码语一化和其他的
[55:27.960 --> 55:28.960] 那比如说格瑞
[55:28.960 --> 55:31.960] 你觉得就是在工程能力这方面
[55:31.960 --> 55:34.960] 可能说呃还有哪些方面去可以考虑
[55:34.960 --> 55:37.960] 比如说可能我其实我在想一个问题啊
[55:37.960 --> 55:42.960] 就我们经常去国内我我去遇到一个现象
[55:42.960 --> 55:45.960] 就是说大家好像觉得以底层为美
[55:45.960 --> 55:47.960] 就觉得说你做的越底层
[55:47.960 --> 55:49.960] 你越偏近内核
[55:49.960 --> 55:51.960] 然后你越牛逼
[55:51.960 --> 55:57.960] 我我我不觉得呃就我不知道这种东西算不算是一个正确的观点
[55:57.960 --> 55:59.960] 或者是正确的一个现象
[55:59.960 --> 56:05.960] 因为我感觉就其实呃可能大厂呃听众朋友会更加就有体感
[56:05.960 --> 56:10.960] 可能去面试大厂的时候会有一堆人来问你各种就底层的东西
[56:10.960 --> 56:15.960] 然后就然后就觉得整体的一个氛围就是崇拜底层崇拜
[56:15.960 --> 56:18.960] 就你越偏近内核你越去做这些东西你越牛逼
[56:18.960 --> 56:23.960] 我不太觉得就是我不太知道这个东西是不是一个正确的一个想法
[56:24.960 --> 56:25.960] 嗯好的
[56:25.960 --> 56:27.960] 其实刚才提了两个问题啊
[56:27.960 --> 56:31.960] 第一个是你觉得你问我还有没有什么其他的方面
[56:31.960 --> 56:34.960] 觉得能够看出呃工程能力
[56:34.960 --> 56:37.960] 对第二个是你说是不是越底层越好
[56:37.960 --> 56:38.960] 我就分开回答呀
[56:38.960 --> 56:41.960] 第一个我觉得还有一个方面比较小
[56:41.960 --> 56:46.960] 觉得是一些工程实践和工程convention需要注意啊
[56:46.960 --> 56:49.960] 嗯举个例子
[56:49.960 --> 56:52.960] 嗯比如说如果你实现pubsub的时候
[56:52.960 --> 56:56.960] 你那个broker的这个类型或者是manager
[56:56.960 --> 56:57.960] 不管是什么对
[56:58.960 --> 56:59.960] 那他有个pub的话
[56:59.960 --> 57:02.960] 他也应该有个sub或者是有有个有个pub的话
[57:02.960 --> 57:06.960] 应该有个也还有一个sub的话应该有个unsub对
[57:06.960 --> 57:09.960] 有个subscribe有个unsubscribe之类的之类的思想
[57:09.960 --> 57:11.960] 我把它叫做对称性吧
[57:11.960 --> 57:12.960] 就是如果你在建模的时候
[57:12.960 --> 57:16.960] 你发现你有一个呃方法叫creator
[57:16.960 --> 57:19.960] 那他应该有个方法叫remove对吧
[57:19.960 --> 57:21.960] 呃这种不仅是建模的对称性
[57:21.960 --> 57:22.960] 包括使用的时候
[57:22.960 --> 57:25.960] 如果你在这个函数里面open了一个fd
[57:25.960 --> 57:28.960] 那就那你就应该在这个函数里面
[57:28.960 --> 57:30.960] close这个fd
[57:30.960 --> 57:33.960] 如果你把这个fd传到了上层或者下层
[57:33.960 --> 57:35.960] 或者别的什么地方去close的话
[57:35.960 --> 57:36.960] 这样就是不好的
[57:36.960 --> 57:40.960] 导致你以后很难去控制他的生命周期
[57:40.960 --> 57:41.960] 呃
[57:41.960 --> 57:42.960] 所以一样
[57:42.960 --> 57:48.960] 比如说lock unlock进程的创建fork和wait之类的
[57:48.960 --> 57:50.960] 就是他有
[57:50.960 --> 57:54.960] 有一开一关这么一个这个闭环的地方
[57:54.960 --> 57:57.960] 这种对称性最好要做到同一个函数
[57:57.960 --> 57:58.960] 最好要做到同一个函数里面
[57:58.960 --> 58:01.960] 在这个函数里面创建就在这个函数里面关闭
[58:01.960 --> 58:02.960] 在go里面的话
[58:02.960 --> 58:03.960] channel也是一样的
[58:03.960 --> 58:06.960] 你在这个函数里面去create这个channel
[58:06.960 --> 58:09.960] 那你最好就在这个函数里面去close这个channel
[58:09.960 --> 58:14.960] 那之类的从对这种设计上的对称性和实现上的对称性
[58:14.960 --> 58:17.960] 我觉得是在工程上一个比较好的实践
[58:17.960 --> 58:20.960] 但我没有看到有人会这么说
[58:20.960 --> 58:23.960] 但我自己观察和自己尝试来看的话
[58:23.960 --> 58:25.960] 这么来做能够避免很多问题
[58:25.960 --> 58:28.960] 相比来说如果你在这个函数create channel
[58:28.960 --> 58:30.960] 然后你把channel传到别的地方去close
[58:30.960 --> 58:35.960] 整个包括对未来的维护和找问题
[58:35.960 --> 58:38.960] 或者说扩展都会更加困难一点
[58:38.960 --> 58:39.960] 对这种对称性
[58:39.960 --> 58:44.960] 我觉得可以作为一个看代码和自己写的时候
[58:44.960 --> 58:49.960] 一个方式对一个参考点
[58:49.960 --> 58:52.960] 第二个第二个过程是实践
[58:52.960 --> 58:57.960] 是不是也可以归纳到合理的抽象层次
[58:57.960 --> 58:59.960] 这一个点上
[58:59.960 --> 59:02.960] 对他我刚才说了两方面
[59:02.960 --> 59:04.960] 第一个是他设计上面的时候
[59:04.960 --> 59:06.960] 就是我们说的就是抽象层次
[59:06.960 --> 59:09.960] 它是对称的第二点我说调用
[59:09.960 --> 59:12.960] 比如说一个ambutex护士所
[59:12.960 --> 59:15.960] 护士所调用它的上锁和解锁
[59:15.960 --> 59:16.960] 这两个函数对吧
[59:16.960 --> 59:18.960] 在这两个方法的调用的时候
[59:18.960 --> 59:21.960] 最好在同一个函数里面调用之类的
[59:21.960 --> 59:25.960] 这种在什么时候调用这种过程式的调用
[59:25.960 --> 59:27.960] 最好在一个函数里面
[59:27.960 --> 59:30.960] 这种对称性实际上是在设计的时候
[59:30.960 --> 59:32.960] 可能会忽视这个事情
[59:32.960 --> 59:34.960] 因为它本质上在写的时候
[59:34.960 --> 59:35.960] 你什么时候去用这个方法
[59:35.960 --> 59:35.960] 对吧
[59:35.960 --> 59:37.960] 我说你在用的时候
[59:37.960 --> 59:40.960] 最好在同一个函数里面去这样能保持对称性
[59:40.960 --> 59:43.960] 但是我这里有个疑问
[59:43.960 --> 59:46.960] 那这种对称性其实我觉得有些时候
[59:46.960 --> 59:48.960] 就可能说比如说你刚才举的一个例子
[59:48.960 --> 59:50.960] 他可能有些时候没法去强调
[59:50.960 --> 59:51.960] 就在一个方法内
[59:51.960 --> 59:53.960] 比如说我去在go里面对吧
[59:53.960 --> 59:56.960] 我去我去订阅了一个subscribe的方法对吧
[59:56.960 --> 59:58.960] 那么他返回我一个channel
[59:58.960 --> 01:00:00.960] 然后我去订阅这个channel
[01:00:00.960 --> 01:00:02.960] 就说我从这个channel里面拿数据
[01:00:02.960 --> 01:00:04.960] 那对应而言
[01:00:04.960 --> 01:00:06.960] 我是不是应该关闭的时候
[01:00:06.960 --> 01:00:08.960] 应该是去遵循说在他对对称的方法
[01:00:08.960 --> 01:00:09.960] 或者说是里面去
[01:00:09.960 --> 01:00:11.960] 比如说我在unscrub里面去
[01:00:11.960 --> 01:00:13.960] 关闭对应的channel
[01:00:13.960 --> 01:00:16.960] 而不是强制要求说在scribe里面去
[01:00:16.960 --> 01:00:19.960] 那个subscribe里面去关闭这个channel
[01:00:19.960 --> 01:00:21.960] 好你刚才提的问题是说
[01:00:21.960 --> 01:00:25.960] 如果他一个sub方法返回那个channel对吧
[01:00:25.960 --> 01:00:26.960] 就是你说的
[01:00:26.960 --> 01:00:28.960] 然后你问这个channel什么时候close
[01:00:28.960 --> 01:00:30.960] 好我告诉你这个channel是
[01:00:30.960 --> 01:00:31.960] 是subscribe里面创建的
[01:00:31.960 --> 01:00:33.960] 所以说不由你来关
[01:00:33.960 --> 01:00:36.960] 是由创建的这个subscribe里面去关的
[01:00:36.960 --> 01:00:40.960] 对是由这个channel的创建者
[01:00:40.960 --> 01:00:42.960] 谁去make的谁去关
[01:00:42.960 --> 01:00:44.960] 也不是由你来关
[01:00:44.960 --> 01:00:47.960] ok那也说其实这个东西的话
[01:00:47.960 --> 01:00:49.960] 那也那这个东西是不是和
[01:00:49.960 --> 01:00:52.960] 那也说这个东西其实也就是还是看是
[01:00:52.960 --> 01:00:56.960] 就尽量的说是不要让他就是说是传的太广
[01:00:56.960 --> 01:00:59.960] 而尽量的是有一个统一的owner去做这个事情
[01:00:59.960 --> 01:01:01.960] 而不是就又分散了一个所有权
[01:01:01.960 --> 01:01:03.960] 是不是可以这样去理解
[01:01:03.960 --> 01:01:04.960] 可以这样理解
[01:01:04.960 --> 01:01:07.960] 实际上他也没有什么说是一个范式
[01:01:07.960 --> 01:01:08.960] 或者是怎样
[01:01:08.960 --> 01:01:10.960] 我是觉得是一个比较好的工程实践
[01:01:10.960 --> 01:01:12.960] 就是说在我自己做的时候
[01:01:12.960 --> 01:01:14.960] 还有一方面工程实践
[01:01:14.960 --> 01:01:16.960] 就是说命名上面也有一些convention
[01:01:16.960 --> 01:01:20.960] 我觉得大家可以多多参考
[01:01:20.960 --> 01:01:24.960] 就刚才我其实说到了一组对称的一个接口设计
[01:01:24.960 --> 01:01:26.960] create和remove对吧
[01:01:26.960 --> 01:01:30.960] 那实际上另外一组对称的接口是add和delete
[01:01:30.960 --> 01:01:33.960] 就是如果你在设计接口的时候
[01:01:33.960 --> 01:01:34.960] 最好就不要混了
[01:01:34.960 --> 01:01:36.960] 你create对应的就不要是delete了
[01:01:36.960 --> 01:01:39.960] 你add的反面就不要是remove
[01:01:39.960 --> 01:01:40.960] 你create要对remove
[01:01:40.960 --> 01:01:41.960] add对delete
[01:01:41.960 --> 01:01:42.960] 这个到其实倒也没什么
[01:01:42.960 --> 01:01:47.960] 我只是说在工程上大家既然都这么对称的话
[01:01:47.960 --> 01:01:51.960] 那就这么照着convention去做了
[01:01:51.960 --> 01:01:54.960] 或者说大家在渲染模板的时候
[01:01:54.960 --> 01:01:55.960] 都会用一个render的方法
[01:01:55.960 --> 01:01:57.960] 在python里面喜欢这么做
[01:01:57.960 --> 01:02:02.960] 所以说你在设计这个方法名字的时候
[01:02:02.960 --> 01:02:04.960] 就不用写render to string
[01:02:04.960 --> 01:02:05.960] 就没有必要
[01:02:05.960 --> 01:02:07.960] 直接叫render返回string
[01:02:07.960 --> 01:02:09.960] 因为这个函数的convention
[01:02:09.960 --> 01:02:10.960] 大家都很清楚
[01:02:10.960 --> 01:02:12.960] render more就会返回一个string
[01:02:12.960 --> 01:02:15.960] 很多标准库里面都这么做的
[01:02:15.960 --> 01:02:22.960] 这类的东西就是说多参考范式里面的
[01:02:22.960 --> 01:02:23.960] 不是范式
[01:02:23.960 --> 01:02:25.960] 就是大家都这么做的convention
[01:02:25.960 --> 01:02:29.960] 多参考convention去做命名和接口设计
[01:02:29.960 --> 01:02:31.960] 我觉得这个也是一个很重要的参考点
[01:02:33.960 --> 01:02:34.960] OK
[01:02:34.960 --> 01:02:37.960] 对我觉得其实这个也就其实还是
[01:02:37.960 --> 01:02:40.960] 就尽可能表示保持语音的标准化
[01:02:40.960 --> 01:02:41.960] 对吧
[01:02:41.960 --> 01:02:42.960] 对
[01:02:42.960 --> 01:02:43.960] 是的
[01:02:44.960 --> 01:02:45.960] OK
[01:02:46.960 --> 01:02:50.960] 然后那这个的话
[01:02:50.960 --> 01:02:51.960] 我们要不然来聊聊
[01:02:51.960 --> 01:02:54.960] 刚才我其实比较好奇的第二个问题
[01:02:54.960 --> 01:02:55.960] 就是关于地层这块
[01:02:55.960 --> 01:02:58.960] 因为其实大家吐槽卷
[01:02:58.960 --> 01:02:59.960] 国内大家吐槽卷
[01:02:59.960 --> 01:03:02.960] 其实很多时候也会就也是来源于这一部分
[01:03:02.960 --> 01:03:06.960] 可能说你去面一个业务的CRUD的开发
[01:03:06.960 --> 01:03:08.960] 那么可能会大家问你一堆
[01:03:08.960 --> 01:03:10.960] 比如说一破实现
[01:03:10.960 --> 01:03:12.960] 问你一堆容器的实现
[01:03:12.960 --> 01:03:14.960] 问你一堆这各种底层
[01:03:14.960 --> 01:03:17.960] 反正我把这种现象称为底层崇拜
[01:03:17.960 --> 01:03:19.960] 我不太确定这种东西是正确的
[01:03:21.960 --> 01:03:23.960] 其实我也不太确定
[01:03:23.960 --> 01:03:24.960] 正确
[01:03:24.960 --> 01:03:26.960] 但我的想法是这样的
[01:03:26.960 --> 01:03:33.960] 我的想法做工程需要以解决问题来作为核心
[01:03:33.960 --> 01:03:36.960] 所以说其实很多问题要解决
[01:03:36.960 --> 01:03:37.960] 它要睡到底层
[01:03:37.960 --> 01:03:40.960] 这个当然是没有办法的事情
[01:03:40.960 --> 01:03:47.960] 但是如果说你凭空的去造一个没有什么问题
[01:03:47.960 --> 01:03:48.960] 你自己也遇不到问题
[01:03:48.960 --> 01:03:52.960] 学了也解决不了什么问题的一个底层的东西
[01:03:52.960 --> 01:03:54.960] 我是觉得你不如把精力
[01:03:54.960 --> 01:03:57.960] 我不如把精力花费在一个
[01:03:57.960 --> 01:04:00.960] 我学了之后能够解决问题的事情上面
[01:04:00.960 --> 01:04:04.960] 所以说我其实我的事情还是很实用很工程的
[01:04:04.960 --> 01:04:08.960] 我不是特别学会偏向于解决问题的这个点
[01:04:08.960 --> 01:04:12.960] 对我学东西的动机都是去解决问题
[01:04:12.960 --> 01:04:14.960] 这是我的看法
[01:04:14.960 --> 01:04:16.960] OK
[01:04:16.960 --> 01:04:21.960] 那其实我那我其实就就因为我们俩其实也交流
[01:04:21.960 --> 01:04:22.960] 平时比较多
[01:04:22.960 --> 01:04:26.960] 其实我们俩交流的就可能说偏就就底层一些
[01:04:26.960 --> 01:04:28.960] 可能就内容词那些细节
[01:04:28.960 --> 01:04:31.960] 其实我很好奇你当时是怎么对这块
[01:04:31.960 --> 01:04:34.960] 因为我理解的是你当时在最开始
[01:04:34.960 --> 01:04:38.960] 你其实是在下雪之后才沿耳翼上来做音发
[01:04:38.960 --> 01:04:42.960] 然后你之前在那个洪教授那边
[01:04:42.960 --> 01:04:45.960] 其实好像说也是主要是偏业务那一块
[01:04:45.960 --> 01:04:48.960] 其实我很好奇你当时是为什么对这块有很深的兴趣
[01:04:48.960 --> 01:04:51.960] 而且一直就深耕到现在
[01:04:51.960 --> 01:04:54.960] 这个是
[01:04:54.960 --> 01:04:58.960] 其实在红教室那边虽然做了业务
[01:04:58.960 --> 01:05:02.960] 那实际上解决问题的时候也涉及到很多底层的东西
[01:05:02.960 --> 01:05:05.960] 让我去开始思考很多很多东西
[01:05:05.960 --> 01:05:06.960] 我举个简单例子
[01:05:06.960 --> 01:05:10.960] 我在红教室那边的时候写业务的server
[01:05:10.960 --> 01:05:12.960] 我们用G-Unicorn
[01:05:12.960 --> 01:05:17.960] 这个这个这个这个套子对去去跑server
[01:05:17.960 --> 01:05:23.960] 然后为了解决线上的很多很多的问题
[01:05:23.960 --> 01:05:24.960] 对不一定是bug
[01:05:24.960 --> 01:05:26.960] 对包括只是为了解决他为什么会这样
[01:05:26.960 --> 01:05:27.960] 这种问题的时候
[01:05:27.960 --> 01:05:31.960] 那实际上怎么去调试python成为我当时最大的问题
[01:05:31.960 --> 01:05:33.960] 而且是在
[01:05:33.960 --> 01:05:34.960] 不说线上环境
[01:05:34.960 --> 01:05:37.960] 就是说生产不属于一个离线的容器
[01:05:37.960 --> 01:05:41.960] 对在在容器线上的容器里面去调试一个python进程
[01:05:41.960 --> 01:05:45.960] 在当时是一个很困扰我的问题
[01:05:45.960 --> 01:05:48.960] 我也花了很多的精力去做很多尝试
[01:05:48.960 --> 01:05:51.960] 对就是说你看到当时去做这些事情
[01:05:51.960 --> 01:05:56.960] 实际上是本质上是要解决这种问题才会去接触到
[01:05:56.960 --> 01:05:58.960] 很深入的接触到一些东西
[01:05:58.960 --> 01:06:00.960] 比如说为了解决调试python
[01:06:00.960 --> 01:06:01.960] 你会用到GDB
[01:06:01.960 --> 01:06:03.960] 对其实一开始不会用GDB
[01:06:03.960 --> 01:06:04.960] 你会用PDB
[01:06:04.960 --> 01:06:06.960] 对用PDB的时候
[01:06:06.960 --> 01:06:08.960] 你就会想PDB
[01:06:08.960 --> 01:06:12.960] 你需要轻如是地去在代码里面去插入这个东西
[01:06:12.960 --> 01:06:14.960] 并且在前台启动这个进程
[01:06:14.960 --> 01:06:14.960] 对吧
[01:06:14.960 --> 01:06:18.960] 你会想能否用PDBattach一个进程
[01:06:18.960 --> 01:06:20.960] 对像像GDB一样可以attach
[01:06:20.960 --> 01:06:23.960] 对PDB本身是不支持这一点的
[01:06:23.960 --> 01:06:24.960] 对能否attach
[01:06:24.960 --> 01:06:25.960] attach的时候你会想
[01:06:25.960 --> 01:06:26.960] 你会了解到
[01:06:26.960 --> 01:06:28.960] 伪终端这些东西是什么东西
[01:06:28.960 --> 01:06:31.960] 如果我要去实现远程的remote PDB的话
[01:06:31.960 --> 01:06:33.960] 那我他缺哪些东西
[01:06:33.960 --> 01:06:36.960] 我是否应该缺一下伪终端
[01:06:36.960 --> 01:06:37.960] 对吧
[01:06:37.960 --> 01:06:39.960] 我他去激活他的时候
[01:06:39.960 --> 01:06:41.960] 我是不是可以发个什么信号
[01:06:41.960 --> 01:06:42.960] 对吧
[01:06:42.960 --> 01:06:46.960] 发个信号去打开一个远程的PDB
[01:06:46.960 --> 01:06:48.960] 在我本地连接他
[01:06:48.960 --> 01:06:50.960] 或者是远程打开server
[01:06:50.960 --> 01:06:53.960] 我本地用打开伪终端去连他
[01:06:53.960 --> 01:06:55.960] 能够远程的去调试
[01:06:55.960 --> 01:07:00.960] 这些问题就在当时我在思考如何调试Python进程的时候
[01:07:00.960 --> 01:07:02.960] 去想要解决问题
[01:07:02.960 --> 01:07:06.960] 为此去学习了一些进程
[01:07:06.960 --> 01:07:07.960] 信号
[01:07:07.960 --> 01:07:10.960] 还有伪终端方面的一些知识
[01:07:10.960 --> 01:07:15.960] 所以你看到其实我学习的动机还是去解决问题
[01:07:15.960 --> 01:07:19.960] 去了解我去更好地掌握我的
[01:07:19.960 --> 01:07:22.960] 我要做的工程去解决
[01:07:22.960 --> 01:07:23.960] 去debug
[01:07:23.960 --> 01:07:24.960] 对
[01:07:24.960 --> 01:07:25.960] 所以动机是这样的
[01:07:27.960 --> 01:07:28.960] OK
[01:07:28.960 --> 01:07:29.960] 对
[01:07:29.960 --> 01:07:30.960] OK
[01:07:30.960 --> 01:07:33.960] 其实可能我们两个去学习的东西
[01:07:33.960 --> 01:07:38.960] 最开始的可能的点好像都还不太一样
[01:07:39.960 --> 01:07:43.960] 然后我最开始是因为我之前是做签入室出来的
[01:07:43.960 --> 01:07:48.960] 然后我自己就一直会对里面的东西就感兴趣
[01:07:48.960 --> 01:07:51.960] 然后就会一直是去折腾一些
[01:07:51.960 --> 01:07:54.960] 然后当时我当然折腾这些
[01:07:54.960 --> 01:07:57.960] 其实也为后面去做转做英法
[01:07:57.960 --> 01:07:58.960] 然后感兴趣
[01:07:58.960 --> 01:08:03.960] 当然我其实线上的当然也其实其中有很多原因也是线上的
[01:08:03.960 --> 01:08:07.960] 当时我在就我们大家可能听众朋友都知道
[01:08:07.960 --> 01:08:10.960] 我之前是在就之前一个P2P的
[01:08:10.960 --> 01:08:12.960] 我们当时遇到个很蛋疼问题
[01:08:12.960 --> 01:08:16.960] 就是当时查SyncIO的那个HTTPS泄露SIO泄露的问题
[01:08:16.960 --> 01:08:19.960] 当时其实也是需要去了解他的
[01:08:19.960 --> 01:08:21.960] 就是说是一些具体的协议
[01:08:21.960 --> 01:08:25.960] 还有就是说是那个OS内就是一些细节
[01:08:25.960 --> 01:08:27.960] 到底为什么会造成这个泄露
[01:08:27.960 --> 01:08:30.960] 它是有哪些地方没关没处理好之类的
[01:08:30.960 --> 01:08:34.960] 所以这也其实是我后面这几年一直在深入这方面的原因
[01:08:36.960 --> 01:08:38.960] 对我了解
[01:08:38.960 --> 01:08:39.960] 那个都特别
[01:08:39.960 --> 01:08:42.960] 其实一开始我们有很多可以交流的
[01:08:42.960 --> 01:08:44.960] 就我觉得很多年前我们交流过
[01:08:44.960 --> 01:08:46.960] 这个Python Redis库
[01:08:46.960 --> 01:08:48.960] 它有Close Wait泄露的问题
[01:08:48.960 --> 01:08:49.960] 对我们都是的
[01:08:49.960 --> 01:08:51.960] 没错我还记得厉害
[01:08:51.960 --> 01:08:56.960] 我们就说这个其实是一个很简单的一个问题
[01:08:56.960 --> 01:08:59.960] 他只要把这个Socket管理的那个
[01:08:59.960 --> 01:09:03.960] 从站变成了变成一个Q变成一个对联
[01:09:03.960 --> 01:09:05.960] 那他就解决了这个问题了
[01:09:05.960 --> 01:09:07.960] 因为他一旦有一个他问题是这样的
[01:09:07.960 --> 01:09:12.960] 如果有一段时间客户突然连了大量的Redis连接
[01:09:12.960 --> 01:09:13.960] 比如说连了5000个
[01:09:13.960 --> 01:09:17.960] 那他会把这5000个Socket缓存在自己内存里面
[01:09:17.960 --> 01:09:19.960] 放在一个list里面
[01:09:19.960 --> 01:09:21.960] 然后之后如果连接加上来之后
[01:09:21.960 --> 01:09:24.960] 他会比如说只有100个连接的话
[01:09:24.960 --> 01:09:27.960] 他只会取这570里面的100个
[01:09:27.960 --> 01:09:28.960] 然后这5000个就放在那个里面
[01:09:28.960 --> 01:09:30.960] 并且是用list形式
[01:09:30.960 --> 01:09:33.960] 是每次用完就从append进去
[01:09:33.960 --> 01:09:37.960] 然后要用的时候就取它最后
[01:09:37.960 --> 01:09:43.960] 导致list头部的Socket一直就没人用一直没用
[01:09:43.960 --> 01:09:45.960] 然后导致对端关闭的时候
[01:09:45.960 --> 01:09:48.960] 这些头部的Socket就完全放在里面
[01:09:48.960 --> 01:09:49.960] 就没法去close
[01:09:49.960 --> 01:09:50.960] 对对对没法处理
[01:09:50.960 --> 01:09:53.960] 就close with状态就一直在那个里面
[01:09:53.960 --> 01:09:54.960] 其实问题很简单
[01:09:54.960 --> 01:09:57.960] 只要把这个站结构变成一个Q的结构
[01:09:57.960 --> 01:10:00.960] Stack变成Q就能解决这问题
[01:10:00.960 --> 01:10:03.960] 但本质上就是我来说
[01:10:03.960 --> 01:10:04.960] 你遇到这些问题的时候
[01:10:04.960 --> 01:10:07.960] 你会想未来我在写一个list的东西
[01:10:07.960 --> 01:10:10.960] 如果说我要保存一个叫连接池也好
[01:10:10.960 --> 01:10:13.960] 或者是缓存的Socket也好
[01:10:13.960 --> 01:10:15.960] 对你会想我做以后我做的事情
[01:10:15.960 --> 01:10:17.960] 我就不会设计成一个站的结构了
[01:10:17.960 --> 01:10:20.960] 所以我觉得你在解决这个问题的时候
[01:10:20.960 --> 01:10:24.960] 本身会反过来让你的开发能力提高
[01:10:24.960 --> 01:10:26.960] 你未来在做类似的事情
[01:10:26.960 --> 01:10:27.960] 做连接池的开发
[01:10:27.960 --> 01:10:29.960] 你会知道我保存Socket
[01:10:29.960 --> 01:10:31.960] 我不能做成一个站结构
[01:10:31.960 --> 01:10:33.960] 我必须做成一个Q的结构
[01:10:33.960 --> 01:10:34.960] 那这类的问题
[01:10:34.960 --> 01:10:36.960] 实际上解决问题是一道底层
[01:10:36.960 --> 01:10:40.960] 最后会反补来让你的开发变得更好
[01:10:47.960 --> 01:10:48.960] 由于时长原因
[01:10:48.960 --> 01:10:51.960] 本次节目将分为上下两期
[01:10:51.960 --> 01:11:01.960] 我们下期再见
[01:11:21.960 --> 01:11:44.960] 请不吝点赞 订阅 转发 打赏支持明镜与点点栏目
[01:11:51.960 --> 01:12:03.960] 明镜需要您的支持 欢迎收看订阅明镜
