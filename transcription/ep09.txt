[00:00.000 --> 00:02.440] 欢迎大家来到补舌者说第9期
[00:02.440 --> 00:05.360] 这期我们请到了嘉宾张翔老师
[00:05.360 --> 00:08.000] 来和我们聊一聊Cpython的一些话题
[00:08.000 --> 00:10.920] 然后我们来介绍一下今天的几位参与者
[00:11.040 --> 00:12.240] 首先是我Like9m
[00:12.240 --> 00:14.360] 然后赖心涛
[00:14.360 --> 00:15.160] manju saka
[00:15.160 --> 00:16.760] 然后就是张翔
[00:16.760 --> 00:22.960] 然后张翔老师的话是目前大陆唯一一位Cpython的core developer
[00:23.360 --> 00:25.560] 那么我们请他来自我介绍一下
[00:25.560 --> 00:26.840] 大家好
[00:26.840 --> 00:27.840] 我是张翔
[00:27.840 --> 00:31.080] 然后我的网名在网上一般都是用Angler
[00:31.080 --> 00:33.600] 然后我在社区里一般也都是用Angler
[00:33.600 --> 00:35.120] 或者说张杨宇
[00:35.120 --> 00:38.560] 就是想自拆开来的一个拼音
[00:38.560 --> 00:42.800] 然后我目前在华为杭州研究所工作
[00:42.800 --> 00:45.400] 然后在Cpython社区的话
[00:45.400 --> 00:48.800] 因为之前做了一些contribution
[00:48.800 --> 00:51.600] 所以说被吸纳为一个core developer
[00:51.600 --> 00:54.760] 当然说core developer和普通的developer没有什么不一样
[00:54.760 --> 00:57.879] 只是多了一个合入的权限而已
[00:58.960 --> 00:59.920] 谢谢大家
[00:59.920 --> 01:01.599] 是的
[01:03.040 --> 01:03.400] 好
[01:03.400 --> 01:08.440] 那么我们今天主要是想来聊一聊这个python可以改进的地方
[01:08.440 --> 01:11.160] 那么我们大概是会聊三个方面
[01:11.160 --> 01:12.960] 首先是performance
[01:12.960 --> 01:14.160] 然后是debugging
[01:14.160 --> 01:15.920] 最后是static type
[01:15.920 --> 01:19.560] 这个也是我之前和张翔老师沟通
[01:19.560 --> 01:22.640] 然后他觉得说就在他心目中
[01:22.640 --> 01:25.920] python可以在这方面有比较大的改进
[01:25.920 --> 01:28.560] 那么我们就从performance开始吧
[01:28.560 --> 01:31.560] 然后我相信大家对于python的performance
[01:31.560 --> 01:33.600] 肯定都有很多想吐槽的地方
[01:33.600 --> 01:36.560] 就是因为python毕竟是一个
[01:36.560 --> 01:40.640] 就怎么说不是一个static language
[01:40.640 --> 01:43.680] 然后它的速度方面也一直很成问题
[01:43.680 --> 01:45.640] 就即使在脚本语言里
[01:45.640 --> 01:48.360] 它速度也不算是非常出众的
[01:48.360 --> 01:50.360] 那么这个原因到底是什么呢
[01:50.360 --> 01:52.320] 我们把时间交给张翔
[01:52.320 --> 01:56.800] 这个说原因其实我只能说出我的感受
[01:56.800 --> 02:01.559] 因为原因可能我说的也不是特别的准确
[02:01.559 --> 02:03.160] 或者说有各种各样的这个原因
[02:03.160 --> 02:05.320] 但是我觉得最重要的一个就是
[02:05.320 --> 02:11.640] 跟整个就是说也是社区现在发展的一步方向的一个原因就是
[02:11.640 --> 02:16.640] 我觉得python它是一个已经发展了30年的一门这样的语言
[02:16.640 --> 02:19.160] 而且它现在这么的流行
[02:19.160 --> 02:21.959] 它背负的历史包袱是非常沉重的
[02:21.960 --> 02:24.120] 然后就是说它本身
[02:24.120 --> 02:28.880] 而且特别是因为它的动态性的这样子的一个问题
[02:28.880 --> 02:32.960] 导致就是说我觉得是说大家一直都在诟病社区说
[02:32.960 --> 02:37.640] 你们为什么不在performance上去这样子去做改进
[02:37.640 --> 02:40.440] 我当然我也其实非常想就是说
[02:40.440 --> 02:42.080] 我作为一个python的使用者
[02:42.080 --> 02:45.920] 特别是做在服务极端这边的做一些就是工作的话
[02:45.920 --> 02:51.400] 就是说我也非常希望就是说python它的性能能有一个比较大的一个提升
[02:51.400 --> 02:58.760] 而且这个提升是以在不伤害这个就是相互兼容性的这样子的一个情况下的提升
[02:58.760 --> 03:01.240] 就是说我可以免费去获得这样子的一个提升
[03:01.240 --> 03:04.360] 但是这样子就是说其实所有人都想这样一个事情
[03:04.360 --> 03:06.520] 社区的这个开发人员他们也想
[03:06.520 --> 03:12.000] 但问题是你在一个你想在一个已经如此成熟的一个软件上
[03:12.000 --> 03:16.720] 在不伤害兼容性的情形下去做到一个比较大的一个性能提升
[03:16.720 --> 03:21.280] 我觉得是首先它本身就是一个比较困难的一个事情
[03:21.280 --> 03:28.040] 你特别像python这边你还要去考虑它与C的兼容这么多库的一个就是说兼容
[03:28.040 --> 03:31.200] 所以说本身这个事情难度就非常的大
[03:31.200 --> 03:39.200] 而且跟整个社区的这样子的一个就是说社区的一个运营方式有关系
[03:39.200 --> 03:42.560] python社区它是一个松散的一个组织
[03:42.560 --> 03:48.560] 它就是说由全世界各地就是说对python感兴趣的人愿意来contribute的人
[03:48.560 --> 03:50.560] 就是开发社区来组成的
[03:50.560 --> 03:54.720] 每个人就是说他其实实际上都是co-developer
[03:54.720 --> 03:59.040] 他其实他我们更愿意叫自己叫做volunteer
[03:59.040 --> 04:01.520] 就是说我们自己其实是一个志愿者
[04:01.520 --> 04:08.080] 在这个社区里面我们志愿来自主就是说志愿来做一些事情
[04:08.080 --> 04:11.960] 比如说修复一些bug提供一些新的feature
[04:11.960 --> 04:15.200] 我们没有拿这个就是说社区不会给我们发工资
[04:15.200 --> 04:23.240] 但是有极少部分个位数的一些developer他是有那个就是说公司向他就是说支付一部分的薪水
[04:23.240 --> 04:26.440] 让他来做一个part-time job来维护这样子的一个的
[04:26.440 --> 04:30.960] 比如说Victor他其实是红帽其实是雇佣他
[04:30.960 --> 04:36.800] 其实是来做把一部分的时间放在维护python的这个社区上面的
[04:36.800 --> 04:44.320] 但是这样子的这样的这个员工他其实是这样子就是说co-developer他其实非常的少
[04:44.320 --> 04:51.120] 大多数的人他都是一个志愿者这样子的志愿者他其实时间本来就少
[04:51.120 --> 04:54.120] 可能就是说这一段时间他就没有时间了
[04:54.120 --> 04:58.840] 因为生活的这个呃原因或者说因为这个兴趣的原因
[04:58.840 --> 05:01.680] 这个是社区就是这样子的一种运营方式
[05:01.680 --> 05:03.920] 你让在这样一种运营的情况下面
[05:03.920 --> 05:08.000] 你还希望去做这样子的一个就是说比较大的一个工程
[05:08.000 --> 05:12.560] 其实我觉得还是本身是一个非常困难的事情
[05:12.560 --> 05:19.120] 大家诟病就是说潘石居你们为什么不在performance上努努力
[05:19.120 --> 05:28.760] 为什么不能够就是说像隔壁的PSG一样能够说做一个就是说PHP7这样子做一个这么大的一个提升
[05:28.760 --> 05:31.960] 我其实很多时候我也不知道就是说去对这个说什么
[05:31.960 --> 05:35.080] 一方面我也是就是说有这样的期望
[05:35.080 --> 05:41.920] 但另一方面我也确实知道这其实是一个不容易不容易的一个事情
[05:41.920 --> 05:46.240] 我觉得说可能社区你如果想靠社区来这个的话
[05:46.240 --> 05:48.280] 我觉得可能性不大
[05:48.280 --> 05:55.120] 可能我觉得这方面更多的要靠一些个人英雄主义来做这样子的一个事情
[05:55.120 --> 05:57.720] 嗯我这里有个问题
[05:57.720 --> 06:01.280] 就是呃就刚才你说到PHP对吧
[06:01.280 --> 06:08.360] 然后的话就是说我们都知道PHP7是一个就不管是性能还是一般特性都都都到一个极大增强的版本对吧
[06:08.360 --> 06:10.800] 从5.6还是哪个版本之后
[06:10.800 --> 06:13.880] 然后是国内的开发者鸟哥领衔的
[06:13.880 --> 06:19.000] 呃据我了解的话PHP的话它其实也是没有全职开发人员来做
[06:19.000 --> 06:21.720] 比如说像鸟哥是在年假当CTO
[06:21.720 --> 06:26.000] 然后的话像其他的他的协作者也是有自己的本职工作
[06:26.000 --> 06:34.000] 那么为什么像PHP的话它能够推动就是说是比如说像5.X到7这样的无论是性能还是feature上
[06:34.000 --> 06:38.480] 都是有个比较大更新而且保证了极大的相互兼容性这样一个
[06:38.480 --> 06:43.480] 为什么PHP是去能就他们是怎么样运作的你有所了解过吗
[06:43.480 --> 06:47.480] 所以说我说就是说这个是需要去靠一个
[06:47.480 --> 06:50.800] 个人英雄主义来解决这样子的一个事情
[06:50.800 --> 06:55.600] 你看即使是PHP到PHP7对吧这么大的一个提升
[06:55.600 --> 07:01.400] 刚才像说鸟哥啊包括另外一位应该是还有两位就是说合作者
[07:01.400 --> 07:03.400] 其实你看所谓他们也没有说
[07:03.400 --> 07:10.200] 他们更多的是说他们自己去把握这样子的一个方向啊去决定就是说这样子的一个引进方向
[07:10.200 --> 07:16.599] 然后去说服有了这个实现之后有了这个然后去说服社区去接受他们的这个所谓的这个实现
[07:16.599 --> 07:20.080] 并不是说整个社区刚开始就说跟大家想象的那样子
[07:20.080 --> 07:23.679] 就是说所有的这些大多数的Code developer排来做
[07:23.679 --> 07:26.560] 然后说我们开个会像公司里一样
[07:26.560 --> 07:30.440] 我们来决定一下下个版本我们要做什么样的一个事情
[07:30.440 --> 07:31.799] 我们要把性能提升多少
[07:31.800 --> 07:36.680] 我们要做去做那个feature不是不是这样子一种工作方式
[07:36.680 --> 07:39.840] 更多的就是说你需要去靠个人首先去突破
[07:39.840 --> 07:42.400] 然后再来说服社区去接受
[07:42.400 --> 07:46.320] 虽然说这样子说很很有点令人沮丧
[07:46.320 --> 07:49.480] 但确实这个社区就是这样子去运行的
[07:49.480 --> 07:52.720] 包括我们现在很多的feature很多人可能觉得就是feature
[07:52.720 --> 07:56.320] 他并不是说是由社区所谓的这些Code developer
[07:56.320 --> 07:59.760] 他坐在一起去说讨论我们需要这样一个feature
[07:59.760 --> 08:01.120] 他首先都是发自于个人
[08:01.120 --> 08:05.520] 就是说我觉得社区我觉得一般的语言应该有这样一个feature
[08:05.520 --> 08:07.000] 然后我去提出这样一个feature
[08:07.000 --> 08:09.640] 然后去社区去讨论
[08:09.640 --> 08:12.880] 然后说甚至说我刚开始可能有人不接受
[08:12.880 --> 08:15.000] 我要说服社区去接受
[08:15.000 --> 08:18.120] 是这样子的一种工作方式
[08:18.120 --> 08:23.840] 就比如说现在的那个Multi interpreter多解释器这个工作
[08:23.840 --> 08:25.600] 我觉得就很符合你的描述
[08:25.600 --> 08:29.680] 对这些就是应该就是Eric他自己就是说他觉得
[08:29.680 --> 08:33.240] 需要这样的功能所以其实现在目前社区他现在注意所有的feature
[08:33.240 --> 08:35.840] 我觉得开源社区很可能是不是大多数
[08:35.840 --> 08:37.360] 别的社区可能我不是特别清楚
[08:37.360 --> 08:39.320] 就是说是不是大多数都是这样子的一种情况
[08:39.320 --> 08:43.159] 就是说甚至没有商业公司在背后驱动的一个就是说
[08:43.159 --> 08:44.720] 这样子的一个就是社区
[08:44.720 --> 08:47.880] 就是说纯粹的由这种志愿者或者说由基金会
[08:47.880 --> 08:49.560] 维护的这样子的一个社区
[08:49.560 --> 08:52.760] 没有商业公司的这个屁股在里面的话
[08:52.760 --> 08:57.880] 更多的都是说有像是不是更多的就是都是像Python这样子的一种工作方式
[08:57.880 --> 09:04.960] 由个人就是说根据自身的一些需要去提出一些新的feature一些改进
[09:04.960 --> 09:08.439] 然后再去说服社区去接受
[09:08.439 --> 09:12.600] 我就是觉得有点类似于就是说个人英雄主义
[09:12.600 --> 09:17.160] 跟平常公司的这种就是工作方式不一样
[09:17.160 --> 09:21.000] 公司工作方式可能是说我们开个会然后就是说决定一下
[09:21.000 --> 09:26.760] 对吧有顶层的人员决定或者说决定就是说未来的这个方向是什么
[09:26.760 --> 09:32.760] 然后再来就是说分派到这个人员就是说我要去做什么事情
[09:32.760 --> 09:35.319] 对
[09:35.319 --> 09:44.480] 那所以其实就是说从社区的这种模式以及Python的历史包袱来看
[09:44.480 --> 09:49.080] 首先是有这两个因素是相当于阻碍了Python的性能提升
[09:49.080 --> 09:53.319] 那就是说从你作为一个core developer的角度看
[09:53.320 --> 09:59.280] 有没有什么更就是更技术上的因素是
[09:59.280 --> 10:04.320] 导致了说想在Python里提升性能比较难这件事情
[10:04.320 --> 10:07.880] 比如说就是我们经常很多人提到加一个JIT
[10:07.880 --> 10:15.840] 相信很多人想到过就是有没有说就是一些因素导致给Python加JIT
[10:15.840 --> 10:19.280] 就是比如说就是比给Javascript要难一些
[10:19.280 --> 10:21.280] 有没有这种性能
[10:21.280 --> 10:27.160] 像加JIT这些我其实没有去特别研究过这些地方
[10:27.160 --> 10:30.120] 因为但是我觉得像加JIT
[10:30.120 --> 10:32.760] 这我也不太好说因为我没有去特别研究过
[10:32.760 --> 10:34.439] 但就是说我不是说JIT这个方向
[10:34.439 --> 10:40.439] 就是说其他的一些比如说feature它的一个更新
[10:40.439 --> 10:43.160] 怎么说呢就是说首先它的动态性
[10:43.160 --> 10:44.439] 我就看动态性是一个问题
[10:44.439 --> 10:45.520] 它非常灵活
[10:45.520 --> 10:48.600] 它就是说语言本身从某种程度上就
[10:48.600 --> 10:53.200] 不需要使用任何的特殊的API然后就可以去自带原编程
[10:53.200 --> 10:56.280] 你可以去在runtime的时候去
[10:56.280 --> 10:59.880] 包括做很多的这种multitask的一些事情
[10:59.880 --> 11:02.280] 应该在runtime的时候做各种各样的事情
[11:02.280 --> 11:05.000] 所以Python是具有很大的一类bug就是说
[11:05.000 --> 11:10.880] 就是说一些奇奇怪的一些代码行为导致解释器的崩溃
[11:10.880 --> 11:14.880] 就是说直接就是要导致解释器就是说segmentation fault
[11:14.880 --> 11:16.200] 就直接就是崩溃掉了
[11:16.200 --> 11:19.560] 经常要去解决这类的这种问题
[11:19.560 --> 11:21.960] 这个的问题就大多数情况就是因为
[11:21.960 --> 11:27.880] 就是一些奇怪的代码它能够就是动态的去替换一些东西的时候
[11:27.880 --> 11:34.480] 结果就导致就是触发了一些没有预想到的那些路径
[11:34.480 --> 11:37.480] 我觉得动态性本身就是说
[11:37.480 --> 11:43.480] 包括但是你又不是说它这些代码其实又是合法的
[11:43.480 --> 11:47.480] 就是说你就是可以用Python它本身去写出来
[11:47.480 --> 11:49.640] 这些代码本身它又是合法的
[11:49.640 --> 11:54.240] 所以说我觉得这个动态性它是
[11:54.240 --> 11:59.440] 就是说阻碍就是说Python它一个演进的一个
[11:59.440 --> 12:03.880] 快速演进的一个就是主要方面
[12:03.880 --> 12:07.480] 这个方面就是一是就是说它本身非常动态
[12:07.480 --> 12:11.400] 就会导致你一些就是说假设什么不成立
[12:11.400 --> 12:13.360] 第二个就是说很容易被破坏
[12:13.360 --> 12:18.160] 第二个就是说动态性它本身带来很多兼容性上面的一些工作
[12:18.160 --> 12:21.440] 因为动态性的话就一些奇异的代码它不是不合法
[12:21.440 --> 12:22.720] 它其实也是合法的
[12:22.720 --> 12:26.200] 但是你要保证它这种代码的合法
[12:26.200 --> 12:29.280] 就对你的演进造成了很大的一个阻碍
[12:32.000 --> 12:34.920] 其实我想问就是比如说
[12:34.920 --> 12:41.240] 像如果说你觉得你是从一个就是说是一个code的角度上来讲
[12:41.240 --> 12:43.400] 如果说一个人想去推动
[12:43.400 --> 12:46.600] 就可能说不是限于JIT
[12:46.600 --> 12:48.640] 就是说是可能说我去推动
[12:48.640 --> 12:51.160] 就是说它在performance上的一些
[12:51.160 --> 12:54.080] 包括performance包括它的就是说是性能
[12:54.080 --> 12:56.000] 或者说是它的memory的使用
[12:56.000 --> 12:57.440] 这样一些方面的提升
[12:57.440 --> 13:00.920] 你觉得可能说除了它这种原编程动态类型的东西
[13:00.920 --> 13:04.760] 它可能还会就是说是比较制约它的还有什么东西
[13:06.760 --> 13:07.600] 制约
[13:07.600 --> 13:08.400] CAPI
[13:08.400 --> 13:10.480] 对就制约我去推动这个
[13:10.480 --> 13:12.920] 其实包括动态性
[13:13.040 --> 13:14.240] 包括刚才说的CAPI
[13:14.440 --> 13:17.640] 其实我觉得都是都可以划在就是说
[13:17.640 --> 13:18.880] 兼容性这方面
[13:18.880 --> 13:21.360] 就是说你要去兼容以前的那些代码
[13:21.360 --> 13:22.640] 兼容以前那些CAPI
[13:22.640 --> 13:25.320] 就是说这种兼容性都可以划在这个方面
[13:25.320 --> 13:26.480] 然后
[13:26.480 --> 13:27.880] 那我
[13:27.880 --> 13:30.280] 你说这就不好意思打断一下
[13:30.280 --> 13:32.400] 那它为什么不能就是说
[13:32.400 --> 13:38.160] 就比如说把这种改进限定在高于某一个python版本才使用
[13:38.160 --> 13:39.800] 就比如说3.9里才能用这个改进
[13:39.800 --> 13:41.680] 你之前解释器我就不管了
[13:42.000 --> 13:42.359] 对吧
[13:42.359 --> 13:43.479] 你从3.9开始
[13:43.479 --> 13:44.520] 如果你是3.9以上
[13:44.520 --> 13:45.400] 你就可以
[13:45.400 --> 13:47.280] 就是有这些performance的
[13:47.959 --> 13:49.240] 加速之类的
[13:49.240 --> 13:51.959] 这种不就不用考虑
[13:51.959 --> 13:53.599] 可你说的这个不就是python3吗
[13:54.880 --> 13:56.640] 和python3和python2有什么区别
[13:56.640 --> 13:59.040] 大家当时也是这么想的
[13:59.040 --> 13:59.319] 对
[13:59.319 --> 14:00.079] 你用python3
[14:00.079 --> 14:01.199] 你不用去考虑python2
[14:01.199 --> 14:02.359] 大家都用python3
[14:02.359 --> 14:02.640] 对吧
[14:02.640 --> 14:03.680] 愿意做一些
[14:03.839 --> 14:05.280] break change的一些改动
[14:05.280 --> 14:06.240] 去修改你的代码
[14:06.240 --> 14:06.920] 可是事实上
[14:06.920 --> 14:11.000] 所有人都在吐槽
[14:11.000 --> 14:13.760] 但我觉得很多人吐槽的一点是因为python3
[14:13.760 --> 14:20.560] 并没有那么本质的改善
[14:20.560 --> 14:21.280] 对python3的话
[14:21.280 --> 14:24.000] 它速度一开始甚至还变慢了
[14:24.000 --> 14:24.760] 所以
[14:24.760 --> 14:25.079] 是的
[14:25.079 --> 14:26.240] 我觉得python3
[14:26.240 --> 14:28.560] 我觉得我是觉得
[14:28.560 --> 14:29.280] 就是说
[14:29.560 --> 14:31.040] 贵重他不是在推特上说过吗
[14:31.040 --> 14:33.160] 他觉得python3之所以就是说没有
[14:33.160 --> 14:35.280] 当时没有那么多人愿意去切换
[14:35.280 --> 14:39.199] 原因是因为没有那么多足够吸引人的feature
[14:40.720 --> 14:41.120] 是的
[14:41.120 --> 14:43.280] 那假设你有一个比如说python
[14:43.280 --> 14:44.839] 就假设python4
[14:44.839 --> 14:47.480] 它是比如说提升了200%的性能
[14:47.480 --> 14:48.600] 那说不定大家就
[14:48.600 --> 14:48.839] 对
[14:48.839 --> 14:49.560] 但是对
[14:49.560 --> 14:49.839] 是的
[14:49.839 --> 14:52.839] 我也觉得就是说我不知道为什么社区是这种主流
[14:52.839 --> 14:53.480] 就是说
[14:53.480 --> 14:54.800] 但贵重他们的想法是这样子
[14:54.800 --> 14:57.199] 他是认为没有足够的feature去吸引大家
[14:57.199 --> 14:57.920] 使用python3
[14:57.920 --> 15:00.439] 但我就我个人的使用来说
[15:00.439 --> 15:02.240] 包括我在工作当中
[15:02.240 --> 15:03.000] 我觉得
[15:03.480 --> 15:04.959] 这个体验来说
[15:04.960 --> 15:08.000] 就是说我觉得更多的是
[15:08.240 --> 15:11.920] 大家不愿意去切换的原因是没有足够多的好处
[15:11.920 --> 15:14.400] 这个好处不是说我能使用更多的语言特性
[15:14.400 --> 15:15.640] 而是我切换了之后
[15:15.640 --> 15:16.920] 哪怕我付出一些代价
[15:16.920 --> 15:18.880] 我能够去带来对我的代码
[15:18.880 --> 15:20.600] 就是说带来更多的这个
[15:20.880 --> 15:23.040] 就是说性能上的对我的提升
[15:23.040 --> 15:23.600] 对我的应用
[15:23.600 --> 15:24.880] 我能够获得更多的
[15:25.160 --> 15:26.640] 那个就是性能上的提升
[15:26.880 --> 15:29.160] 甚至说能够像更多的
[15:29.160 --> 15:30.520] 比如说mypy这样子
[15:30.520 --> 15:30.880] 对吧
[15:30.880 --> 15:33.280] 他能够获得更多就是我开发上的一些提升
[15:33.280 --> 15:35.560] 我觉得这个才是最重要的
[15:35.560 --> 15:38.400] 而不是说feature这样子的一个
[15:39.240 --> 15:40.920] 而不是说没有更多的feature
[15:40.920 --> 15:42.000] 那些语法堂那些
[15:42.600 --> 15:43.360] 说实话
[15:43.880 --> 15:45.520] 多少人开发的时候会有
[15:45.800 --> 15:46.680] 我不知道为什么
[15:46.959 --> 15:48.760] 特别是像我在工作中的体验
[15:48.760 --> 15:52.199] 就是没有人会去为了语法堂而去换一个版本
[15:52.920 --> 15:53.400] 是的
[15:53.400 --> 15:55.480] 实际上很多语法堂在工作中
[15:55.480 --> 15:58.120] 我们会通过代码规约或者cicd的形式
[15:58.120 --> 15:59.560] 把它给禁用掉
[16:00.560 --> 16:00.839] 不是
[16:00.839 --> 16:03.120] 我是觉得就是说不是说代码规约这几方面
[16:03.120 --> 16:04.760] 我先不讨论这些语法堂的好坏
[16:04.760 --> 16:08.800] 就是说我们先假设所有语法堂的这些新的语法都是好的
[16:09.240 --> 16:11.280] 但是你会跟这个
[16:11.440 --> 16:12.160] 比如说
[16:12.640 --> 16:15.480] 比如说你的这个技术负责人去说
[16:15.720 --> 16:17.240] 我们要不切换一个python版本
[16:17.240 --> 16:20.320] 因为我觉得他这个新版本里面有个这个语法特别好用
[16:20.320 --> 16:21.240] 我想用一下
[16:22.720 --> 16:25.120] 你这个应该不会这样的
[16:25.120 --> 16:25.880] 说服力不够
[16:25.880 --> 16:26.600] 说服力不够
[16:26.600 --> 16:27.280] 你
[16:28.400 --> 16:29.920] 可是这个确实我觉得说服力不够
[16:29.920 --> 16:30.680] 你应该会去说
[16:30.680 --> 16:31.800] 比如说你有比较大的改变
[16:31.800 --> 16:33.640] 你比如说我要提升到3.5,3.7
[16:33.640 --> 16:35.439] 我要用async这一套体系
[16:35.439 --> 16:35.839] 对吧
[16:36.120 --> 16:38.280] 或者是说我要用mypy对吧
[16:38.280 --> 16:41.000] 我要来规范我的这个就是说团队协作
[16:41.000 --> 16:41.880] 这样减少更多的
[16:41.880 --> 16:44.599] 但就是说减少更多的bug开发过程当中
[16:44.920 --> 16:45.240] 对吧
[16:45.240 --> 16:46.640] 更好去reasonable
[16:46.800 --> 16:49.199] 然后或者说更就是
[16:49.240 --> 16:51.880] 或者说我提升哪怕你跟他说我提升
[16:51.880 --> 16:52.640] 我将改这么一点点
[16:52.640 --> 16:54.520] 我就可以获得50%的性能提升
[16:54.520 --> 16:55.760] 节省多少台的机器
[16:55.760 --> 16:56.560] 省多少的内存
[16:56.560 --> 16:57.520] 省多少的cpu
[16:57.680 --> 16:59.319] 我觉得这才是说服力强的东西
[16:59.319 --> 17:00.040] 而不是说
[17:00.040 --> 17:02.079] 我觉得10%就足够了
[17:02.079 --> 17:03.800] 对10%不需要50%
[17:03.800 --> 17:04.119] 对
[17:04.119 --> 17:05.359] 我而不是说
[17:05.639 --> 17:06.680] 我要去
[17:06.680 --> 17:08.560] 我觉得有一个语法很好
[17:08.560 --> 17:09.399] 我想用一下它
[17:10.159 --> 17:12.839] 实际上当时我在推动我们升3.6
[17:12.839 --> 17:13.639] 3.5的时候
[17:13.639 --> 17:15.079] 当时一个核心的一个
[17:15.440 --> 17:16.920] reason就说是
[17:16.960 --> 17:19.680] 我想去用它的484和492
[17:19.680 --> 17:22.440] 那个sync和type hint
[17:23.399 --> 17:24.680] 这个还是很稳定的
[17:24.680 --> 17:26.000] 那个不是语法上的变更
[17:26.000 --> 17:27.680] 那个是整套体系都变了
[17:27.680 --> 17:28.359] 是说我觉得
[17:28.359 --> 17:31.320] 新的编程模式
[17:31.320 --> 17:32.040] 对
[17:32.040 --> 17:33.080] 那个我觉得还是
[17:33.080 --> 17:34.560] 那个是足够有说服力的
[17:34.560 --> 17:35.439] 我觉得这个是可以的
[17:35.439 --> 17:37.280] 但是不是说
[17:37.280 --> 17:39.479] 我想有升到了3.8
[17:39.479 --> 17:40.479] 我要用海象操作服
[17:47.159 --> 17:48.600] 那信涛你有什么想问的吗
[17:48.600 --> 17:50.320] 我们给一点时间
[17:50.320 --> 17:53.280] 我感觉信涛好像是欲言又止
[17:54.320 --> 17:54.800] 没有
[17:54.800 --> 17:56.439] 就是我电脑
[17:56.440 --> 17:58.360] 就是3.8出了之后我就装了
[17:58.520 --> 18:02.440] 然后我写一些小脚本的时候
[18:02.440 --> 18:03.880] 我想因为我是3.8了
[18:03.880 --> 18:05.680] 我那个logger的时候
[18:05.680 --> 18:08.160] 就可以直接把那个变量给打出来
[18:08.160 --> 18:09.000] 什么等于什么
[18:09.000 --> 18:10.080] 我觉得很方便
[18:12.200 --> 18:14.640] 对服务器上确实
[18:14.640 --> 18:16.120] 对一台服务器来说
[18:16.120 --> 18:16.920] 它看
[18:16.920 --> 18:19.080] 语法堂它看到代码都是一样的
[18:19.080 --> 18:20.400] 肯定什么都一样
[18:22.440 --> 18:23.840] 不是你提不提的问题
[18:23.840 --> 18:25.600] 你提了要被负责人骂的
[18:25.600 --> 18:26.800] 对是的
[18:26.800 --> 18:29.080] 就是说你在一些比较有追求的团队
[18:29.080 --> 18:31.120] 可能是一个足够的理由
[18:31.120 --> 18:36.439] 但是我觉得大多数特别是线上的那些
[18:36.439 --> 18:38.520] 就是还是比较可能比较保守的
[18:39.360 --> 18:39.919] 是的
[18:39.919 --> 18:42.719] 其实我就觉得吧
[18:42.719 --> 18:45.080] 反正我觉得对于一个大企业
[18:45.080 --> 18:46.320] 特别是像我
[18:46.320 --> 18:48.040] 我觉得我在不是在饿了吗
[18:48.040 --> 18:50.320] 然后对像我们这种体量到了
[18:50.320 --> 18:51.760] 或者说像知乎这种
[18:51.760 --> 18:55.439] 然后performance真的会是考虑一个很考虑的因素
[18:55.440 --> 18:57.840] 就最简单的就是我们每年服务器的
[18:57.840 --> 19:00.320] budget都要比其他人都一大堆
[19:01.600 --> 19:02.000] 是的
[19:02.000 --> 19:02.440] 对
[19:02.440 --> 19:03.800] 因为你performance的提升
[19:03.800 --> 19:05.240] 我想说一句就是performance的提升
[19:05.240 --> 19:08.040] 其实直接就是说是成本的一个下降
[19:08.040 --> 19:11.120] 可能是你找你CPU利用率更高
[19:11.120 --> 19:13.200] 你的内存用的更就是说更少
[19:13.200 --> 19:15.240] 那么你可能就可以比如说设计一台服务器
[19:15.240 --> 19:17.080] 在服务器里面成本
[19:17.680 --> 19:20.760] 对像我之前做过的用户做过的一个网关
[19:20.760 --> 19:23.880] 我根本不需要去特殊的去就是说是去优化
[19:23.880 --> 19:27.840] 然后我当时就说是一个L4的一个网关
[19:27.840 --> 19:29.880] 是一个L7的一个网关
[19:29.880 --> 19:32.840] 当时直接是在8C16压测上面
[19:32.840 --> 19:34.640] 8C16G的机器上面
[19:34.640 --> 19:37.600] 压出了20多万QPS的数据
[19:37.600 --> 19:39.520] 然后包括长连接19连接
[19:39.520 --> 19:43.080] 然后网卡的峰值流量在1.4Gbps以上
[19:43.080 --> 19:45.680] 就是说服务器还有很大的余地
[19:45.680 --> 19:47.000] 包括CPU和内存
[19:47.000 --> 19:50.000] 然后我觉得如果说是拍摄能有这样的东西的话
[19:50.000 --> 19:54.440] 就其实很多时候能节省下很多的成本的budget
[19:56.720 --> 19:59.640] 但是我之前看Instagram
[19:59.640 --> 20:00.720] 但是记不太清了
[20:00.720 --> 20:03.000] 反正他们跑了一下223
[20:03.480 --> 20:06.760] 性能跟内存就强了好多
[20:06.760 --> 20:09.320] 内存有10% 20%的提升
[20:09.320 --> 20:10.200] 记不太清了
[20:10.200 --> 20:11.520] 你说他们跑了一下什么
[20:11.520 --> 20:15.200] 223就是他们之前的判断不是二年级的吗
[20:15.200 --> 20:17.560] 然后他们就不是有个223自动升级的
[20:17.560 --> 20:18.760] 他们就跑了一下
[20:18.760 --> 20:21.160] 然后运行的时候就有一些性能提升
[20:21.160 --> 20:25.480] 当然他们可能那个升到的3不是3.0那种
[20:25.480 --> 20:28.960] 可能是到了3.5那种比较
[20:29.680 --> 20:31.760] 对因为我好像记得
[20:32.120 --> 20:34.040] 在那个Python Speed的那个网站上面
[20:34.040 --> 20:36.640] 就是好像是要在比较新的Python3的版本
[20:36.640 --> 20:38.680] 他才会就是说性能啊
[20:38.680 --> 20:41.160] 内存使用率可能才会优于Python2
[20:41.520 --> 20:42.520] 说起来很不好意思
[20:42.520 --> 20:43.480] 但是就是这样
[20:43.480 --> 20:48.840] 至少3.7现在我觉得肯定比2.7性能要好得多
[20:49.600 --> 20:51.960] 对我记得他们好像当时说过
[20:51.960 --> 20:55.520] 好像3.7是一个真正比2要好的版本
[20:55.520 --> 20:57.040] 3.7还是3.6我忘了
[20:57.040 --> 20:58.400] 就其他的不知道
[20:58.400 --> 21:01.400] 我就知道那个Dict肯定是内存省了很多的
[21:01.400 --> 21:03.400] 对这个你用的很多的
[21:03.400 --> 21:05.680] 对但是你不管在怎么省的话
[21:05.680 --> 21:09.520] 就始终是你的就特别是在特别大的服务上
[21:09.520 --> 21:12.360] 而且是又要保持大队状态的那种服务
[21:12.360 --> 21:15.800] 然后你的内存水位和CPU使用力始终是
[21:15.800 --> 21:18.399] 你不能跟其他语言比
[21:18.399 --> 21:20.280] 其他跟其他语言比Python还是不行
[21:20.280 --> 21:21.479] 是的
[21:21.479 --> 21:23.959] 我就觉得这个东西就像刚刚说的一样
[21:23.959 --> 21:27.000] 我觉得可能说一个performance提升
[21:27.000 --> 21:29.479] 就意味着你的一个就cost的下降
[21:29.479 --> 21:31.679] 这是很明显的一个就是说是收益
[21:33.560 --> 21:34.000] 是的
[21:34.000 --> 21:34.240] 是的
[21:35.000 --> 21:35.439] OK
[21:35.919 --> 21:39.919] 然后我觉得我们刚才既然已经好像提到了
[21:39.919 --> 21:41.320] 就是PPP484
[21:41.320 --> 21:45.320] 然后以及那个static typing的事情
[21:45.320 --> 21:47.800] 然后我们就顺便聊一下static type
[21:47.800 --> 21:52.080] 然后这方面其实相当于其实和performance不同
[21:52.080 --> 21:55.560] 我觉得这方面是Python社区最近可能两年
[21:55.560 --> 21:58.919] 很多人在推动的一个方向吧
[21:58.919 --> 22:00.120] 也有特别多的pipe
[22:00.720 --> 22:04.480] 然后想听一下翔哥你有什么看法
[22:04.480 --> 22:06.840] 其实老实说
[22:06.840 --> 22:09.080] 这个async这块
[22:09.080 --> 22:11.399] 包括这个type things这块
[22:11.399 --> 22:14.000] 其实我都不怎么用
[22:14.000 --> 22:17.439] 因为我们因为我的工作当中其实不太用得到
[22:17.439 --> 22:21.000] 因为像之前大多数都是python2
[22:21.000 --> 22:24.159] 然后然后也没不存在什么
[22:24.159 --> 22:26.480] 就是说用python3可能也都是
[22:26.480 --> 22:28.040] 因为你工作容易python2
[22:28.040 --> 22:29.720] 你可能只有自己的项目用python3
[22:29.720 --> 22:32.639] 然后写作那个type things其实我那时候也比较懒
[22:32.639 --> 22:33.320] 我也不愿意用
[22:33.320 --> 22:34.760] 也不是特别成熟这种感觉
[22:34.760 --> 22:38.080] 然后async的话其实我也不是很喜欢用
[22:38.080 --> 22:40.320] 因为async我是觉得
[22:40.320 --> 22:43.520] 自己的一些toy的这些project
[22:43.520 --> 22:45.560] 没有必要说一定要说去用async
[22:45.560 --> 22:46.720] 其实我用现成
[22:46.720 --> 22:48.439] 反正都没人用
[22:48.439 --> 22:50.919] 也其实搞得定
[22:50.919 --> 22:52.639] 所以说我对这个
[22:52.639 --> 22:56.919] 其实我对我可能跟大多数人不太一样
[22:56.919 --> 22:58.800] 其实因为我自己没有体验
[22:58.800 --> 23:01.360] 所以说我对async这些感觉不深
[23:01.360 --> 23:03.919] 我也不觉得就是说
[23:03.919 --> 23:06.159] async一定是未来的一个就是说
[23:06.160 --> 23:09.280] 发展方向就是说一定说
[23:09.280 --> 23:11.560] 你一个新的项目非用async不可
[23:11.560 --> 23:15.040] 我也觉得对我来说可能我也不觉得
[23:15.040 --> 23:16.720] 你只要能够满足自己的需求
[23:16.720 --> 23:18.880] 如果你本来就是说没有多少的请求量
[23:18.880 --> 23:20.000] 用现成也挺好的
[23:20.000 --> 23:22.400] 哪怕哪怕对于python来说
[23:22.400 --> 23:24.480] 如果说你一定要上的就是说那种
[23:24.480 --> 23:27.680] 你要去解决那么就是说大规模那种问题
[23:27.680 --> 23:30.840] 可能语言的选择
[23:30.840 --> 23:33.280] 可能选python可能本身就是一个问题
[23:33.280 --> 23:35.960] 当然说对当然说我自黑一把
[23:35.960 --> 23:37.800] 当然说还是欢迎大家用这个python
[23:37.800 --> 23:38.800] 可以去尝试一下
[23:38.800 --> 23:40.560] 因为用的人多了
[23:40.560 --> 23:42.600] 叉加才会有这个改进嘛
[23:42.600 --> 23:42.920] 对吧
[23:44.560 --> 23:48.040] 然后对然后你先说
[23:49.600 --> 23:51.920] 那么我是想说async我们先不提
[23:51.920 --> 23:54.920] 我觉得就是就是type hints这套还是
[23:54.920 --> 23:57.280] 对至少我个人是非常喜欢
[23:57.280 --> 23:57.840] 对type hints
[23:57.840 --> 23:59.160] 我个人的项目也都在用
[23:59.160 --> 24:01.120] 然后我觉得它的意义也非常大
[24:01.120 --> 24:03.360] 对type hints就是我也非常喜欢type hints
[24:03.360 --> 24:04.160] 虽然的话我不用
[24:04.160 --> 24:07.520] 但我觉得它是未来的一个就是说发展方向
[24:07.520 --> 24:08.600] 我之前也说就是说
[24:09.200 --> 24:11.560] 对我而言就是说我目前能够看到的
[24:11.560 --> 24:12.960] 因为我不是一个就是说
[24:13.320 --> 24:15.880] 我虽然说是一个python core developer
[24:15.880 --> 24:17.720] 但是我可能就没有就是说像
[24:17.720 --> 24:20.120] 有一些那么资深的core developer
[24:20.120 --> 24:21.520] 他们看的那么多
[24:21.520 --> 24:22.840] 他们对于python的理解
[24:22.840 --> 24:26.080] 包括对于整个语言发展的一个理解那么深
[24:26.080 --> 24:27.400] 对于我而言
[24:27.400 --> 24:30.880] 我觉得除了python它这个演进最大的一个就是
[24:30.880 --> 24:32.080] 不管是说它的性能
[24:32.080 --> 24:36.399] 还有说它整个的一个就是说架构的演进
[24:36.399 --> 24:38.919] 我觉得就是因为它的动态性实在太强了
[24:38.919 --> 24:41.480] 导致很多东西你没法去做
[24:41.480 --> 24:43.320] 那么说你当你加入了以后
[24:43.320 --> 24:45.199] 就是说type hints发展之后
[24:45.199 --> 24:49.240] 那是不是我们这个从某种程度上就把它的动态性给减弱了
[24:49.240 --> 24:50.879] 至少就是说我们那些经典的问题
[24:50.879 --> 24:52.080] 比如说什么
[24:52.879 --> 24:55.040] 是不是我们能够去解决那些经典的python里面的
[24:55.040 --> 24:57.360] 这种get attribute非常昂贵的这种问题
[24:57.960 --> 24:58.360] 对吧
[24:58.360 --> 24:59.840] 我们可以对它这种
[24:59.840 --> 25:02.560] 普世的操作能够学习性能提升
[25:02.560 --> 25:04.679] 我觉得这都是当有了type hints之后
[25:04.679 --> 25:07.879] 我们可以去考虑的一个问题
[25:07.879 --> 25:11.240] 但是我觉得就是说虽然我非常支持这个type hints
[25:11.240 --> 25:13.840] 但我觉得有一点就是说type hints它会不会
[25:13.840 --> 25:18.639] 对python本身的这种复杂性
[25:18.639 --> 25:21.040] 就是说带来更大的一个复杂性
[25:21.040 --> 25:24.959] 因为python就是仅仅是说我们就是说做服务器
[25:24.959 --> 25:26.800] 算编程的人在用
[25:26.800 --> 25:27.959] 它现在更多的
[25:27.960 --> 25:30.360] 它也是一个就是说机器编程的这样对吧
[25:30.360 --> 25:31.920] 一个特选语言
[25:31.920 --> 25:34.800] 同时它也是一个同样是一种教学语言
[25:34.800 --> 25:36.560] 它今天之所以能这么流行
[25:36.560 --> 25:40.800] 我觉得跟它的所谓的性能啊什么优雅
[25:40.800 --> 25:43.040] 我觉得优雅还是有点关系的
[25:43.040 --> 25:44.520] 跟它的那些其他的性能啊
[25:44.520 --> 25:48.680] 包括跟它的那些就是关系都不那么大
[25:48.680 --> 25:49.440] 它今天这么流行
[25:49.440 --> 25:51.440] 更多的是我觉得它就是它简单
[25:51.440 --> 25:52.520] 生态强大
[25:52.520 --> 25:58.080] 你加入type hints之后会不会破坏它的这个简单性
[25:58.080 --> 26:03.400] 导致就是说学习的成本会很大
[26:03.400 --> 26:04.600] 对不对
[26:04.600 --> 26:07.600] 所以说我觉得最近David Beasley
[26:07.600 --> 26:09.680] 他不是在推特上说
[26:09.680 --> 26:13.720] 就是说能不能就是说不用那个就是说type hints这种方式
[26:13.720 --> 26:18.840] 而去用比如说就是像那个type script的那种
[26:18.840 --> 26:20.800] 一门就是说新的这种语言
[26:20.800 --> 26:23.760] 然后编译到python这样去解决这种问题
[26:23.760 --> 26:26.760] 是不是这种的路径会更可取
[26:26.760 --> 26:29.600] 这样子的话本身不会破坏
[26:29.600 --> 26:33.600] 就是说不会在python上加过多的这样子的一种负担
[26:33.600 --> 26:37.000] 我觉得这个是也是可以考虑的一种方向
[26:37.000 --> 26:41.639] 反对反正就是说就是刚才祥哥也提到嘛
[26:41.639 --> 26:44.600] 就是说那个David Beasley
[26:44.600 --> 26:47.560] 他是比较反对type hints的嘛
[26:47.560 --> 26:50.520] 然后我之前在推特上看到Luciano
[26:50.520 --> 26:52.160] 就是流畅的python的作者
[26:52.160 --> 26:55.520] 他也是就是表达了他的一些意见嘛
[26:55.520 --> 26:57.520] 就是说他也不是特别喜欢type hints
[26:57.520 --> 26:59.280] 然后我还和他有一些交流
[26:59.280 --> 27:06.040] 然后就是我感觉他的意见其实
[27:06.040 --> 27:09.639] 就是他并不觉得说这个东西本身是一个坏事
[27:09.639 --> 27:13.960] 但是他可能也觉得是就像刚才我忘了谁提到的
[27:13.960 --> 27:20.000] 就type hints的这些pipe缺乏一些顶层设计吧
[27:20.000 --> 27:22.240] 就是说他的未来的发展方向
[27:22.240 --> 27:23.560] 然后最后想发展成什么样
[27:23.560 --> 27:27.640] 其实是也是就是说靠每个commiter自己推动
[27:27.640 --> 27:31.400] 而没有就是说我社区定下来未来要怎么走这样子
[27:31.400 --> 27:32.640] 或者说可能有我不知道
[27:32.640 --> 27:35.080] 然后如果有的话祥哥你可以提醒一下
[27:35.080 --> 27:37.000] 没有type hints我不知道
[27:37.000 --> 27:44.280] 因为其实就主要是很多就是type hints跟mypy的一个项目有关嘛
[27:44.280 --> 27:44.520] 对吧
[27:44.520 --> 27:49.440] 那个它独立于就是python社区本身就是去运行
[27:49.440 --> 27:51.480] 所以说那个我不是很也不是很清楚
[27:51.480 --> 27:53.960] 但是从社区这方面来看
[27:53.960 --> 27:55.840] 所谓的顶层设计也只是
[27:55.840 --> 28:01.200] 即使有我觉得也就是一两个人自己的一个规划而已
[28:01.200 --> 28:03.600] 而不是说大家设想的那种
[28:03.600 --> 28:09.360] 就比如说他们最近加了little的这种type
[28:09.360 --> 28:10.440] 你们应该知道
[28:10.440 --> 28:15.760] 就是那个有最近3.8里面引入的一个
[28:15.760 --> 28:21.360] 就是你可以你可以标注比如说你希望这个东西
[28:21.360 --> 28:24.680] 这个参数它就是接受一个true的值
[28:24.680 --> 28:26.920] 那你就定义一个little的true这样子
[28:26.920 --> 28:30.280] 然后这个其实我当时觉得还是有点奇怪的
[28:30.280 --> 28:33.720] 然后我也就比较好奇他们为什么要加这个
[28:33.720 --> 28:36.400] 然后对然后我相反
[28:36.400 --> 28:42.000] 我觉得比较就更需要的一些一些type
[28:42.000 --> 28:46.240] 比如说type的语这种关系
[28:46.240 --> 28:49.000] 就比如说是A是typeA且是typeB
[28:49.000 --> 28:50.680] 这个反而是不支持的
[28:50.680 --> 28:52.760] 我就觉得比较奇怪
[28:52.760 --> 28:55.560] 我觉得还有一个东西是它内部的一个东西
[28:55.560 --> 28:57.760] 那就是说是内部的一些机制混杂
[28:57.760 --> 29:00.120] 就说是一个string对吧
[29:00.120 --> 29:03.840] 它其实又是一个eaterboard
[29:03.840 --> 29:05.480] 不是一个就是它是一个eaterboard
[29:05.480 --> 29:07.160] 它又是一个单独的变量对吧
[29:08.360 --> 29:09.360] eaterable对
[29:09.360 --> 29:11.280] 然后呢比如说它里面有个typing
[29:11.280 --> 29:12.080] 然后eaterable
[29:12.080 --> 29:13.639] 然后你点str
[29:13.639 --> 29:16.120] 然后就是里面的子类型是str的话
[29:16.120 --> 29:17.160] 对对对对对
[29:17.160 --> 29:20.399] 它既然又它你传进去一个str
[29:20.399 --> 29:21.560] 它觉得这是合法的
[29:21.560 --> 29:24.800] 因为你string里面它是一个eaterboard
[29:24.800 --> 29:26.960] 然后它里面每一个char
[29:26.960 --> 29:27.879] 然后对
[29:29.920 --> 29:33.800] 是的是的这个这个这个问题
[29:33.800 --> 29:35.600] 其实我来解释一下
[29:35.600 --> 29:38.760] 就是说刚刚主要说的问题就是
[29:38.760 --> 29:42.760] 如果你想传一个比如说一个list of string
[29:42.760 --> 29:44.920] 你想把类型规定成这种对吧
[29:44.920 --> 29:47.760] 或者是一个比如说set of string
[29:47.760 --> 29:49.320] 那么你是没有办法写的
[29:49.320 --> 29:51.160] 就相当于你不管怎么写
[29:51.160 --> 29:53.080] 你传一个string进去
[29:53.080 --> 29:53.960] 它都是合法的
[29:53.960 --> 29:56.200] 这个不是对
[29:56.200 --> 29:58.840] 这个不是那个它的那个事物
[29:58.840 --> 30:01.960] 就是说不是这个类型系统它本身的一个问题
[30:01.960 --> 30:04.000] 它被string本身设计的一个问题
[30:04.000 --> 30:06.879] 因为基本上我记得之前也有讨论
[30:06.880 --> 30:10.080] 就是觉得就是说这个设计其实还是挺失败的
[30:10.080 --> 30:13.360] 就是说string它本身是一个eaterboard的这种设计
[30:13.360 --> 30:14.240] 它是一个失败
[30:14.240 --> 30:16.560] 对它这个设计是一个失败的设计
[30:16.560 --> 30:19.320] 我觉得string是eaterboard的倒还好
[30:19.320 --> 30:21.760] 但是最主要它其实它是eaterboard的之后
[30:21.760 --> 30:23.880] 它没有把string和char分开
[30:23.880 --> 30:25.880] 对对对对
[30:25.880 --> 30:28.480] 对就是字符串和字符没有分开
[30:28.480 --> 30:29.760] 字符串你是eaterboard的
[30:29.760 --> 30:31.200] 我觉得这是非常合理的
[30:31.200 --> 30:32.800] 因为比较串一个序列
[30:32.800 --> 30:33.960] 然后你是一个eaterboard的
[30:33.960 --> 30:34.840] 我觉得很合理
[30:34.840 --> 30:37.000] 他们当时就是说其实就是说
[30:37.000 --> 30:38.480] string就不要是eaterboard
[30:38.480 --> 30:41.120] string就是说你要需要去通过显示的去调用
[30:41.120 --> 30:42.879] 然后去把它转换成一个eaterboard
[30:42.879 --> 30:46.320] 我觉得我就是这样说的这种话
[30:46.320 --> 30:48.760] 因为经常要循环一个list的时候
[30:48.760 --> 30:51.080] 就传过来一个string就开始循环了
[30:51.080 --> 30:52.480] 这个就很蛋疼
[30:52.480 --> 30:54.040] 这种东西的话
[30:54.040 --> 30:56.320] 对这种东西我就觉得可能说python code
[30:56.320 --> 30:59.760] 在这一方面的自解释性上来说的话
[30:59.760 --> 31:01.720] 有些时候还做的是挺差的
[31:01.720 --> 31:03.919] 其实这个问题
[31:03.920 --> 31:07.200] 如果他们在type hint里增加一个
[31:07.200 --> 31:08.960] 就是非这个操作符的话
[31:08.960 --> 31:10.240] 那其实是可以解决的
[31:10.240 --> 31:10.760] 对吧
[31:10.760 --> 31:12.720] 就我支持list of string
[31:12.720 --> 31:15.120] 但是我比如说排除掉string
[31:15.120 --> 31:16.600] 其实是可以解决
[31:16.600 --> 31:18.120] 但是他现在没有支持这个
[31:18.120 --> 31:19.920] 就觉得对就一些
[31:19.920 --> 31:21.120] 一些我觉得挺必要的东西
[31:21.120 --> 31:21.840] 他没有加
[31:21.840 --> 31:22.320] 然后
[31:22.320 --> 31:23.400] 这倒是这种东西
[31:23.400 --> 31:24.440] 你写上去之后
[31:24.440 --> 31:26.160] 那个代码也太长了吧
[31:26.160 --> 31:29.520] 这个其他语言也不支持吧
[31:29.520 --> 31:31.760] 其他语言也不支持用这种
[31:31.760 --> 31:38.720] 其他语言他是直接在本身上就说做了区分
[31:38.720 --> 31:40.400] 就直接在你本身上
[31:40.400 --> 31:43.200] 就语意化上就已经做了很好的区分了
[31:43.200 --> 31:44.320] 我char是char
[31:44.320 --> 31:45.520] 我string是string
[31:45.520 --> 31:46.480] 然后我各种各样的
[31:46.480 --> 31:50.320] 就基础内型的语意化上已经做了明确的区分
[31:50.320 --> 31:54.800] 然后你再去上面推导一些类型系统的话
[31:54.800 --> 31:57.320] 就能够做更多的简化了
[31:57.320 --> 32:01.440] 不过我觉得其实type hint有一个好处
[32:01.440 --> 32:04.640] 就是他的checker都是offline的
[32:04.640 --> 32:07.800] 就是说你即使这个type hint你写的再复杂
[32:07.800 --> 32:09.760] 他其实也不会影响你的性能
[32:09.760 --> 32:14.240] 所以这点我觉得算是比较好的一点吧
[32:14.240 --> 32:17.680] 对就是他就是支持了他的扩展
[32:17.680 --> 32:19.800] 就不会说因为加很多东西
[32:19.800 --> 32:21.040] 导致他跑的变慢了
[32:21.040 --> 32:22.360] 我觉得是
[32:24.720 --> 32:26.680] 我们说回那个type hint
[32:26.680 --> 32:28.760] 其实我比较奇怪的一点
[32:28.760 --> 32:29.840] 你们好像都没有提到
[32:29.840 --> 32:31.959] 就是他用那个中括号
[32:31.959 --> 32:33.840] 你从那个type引入过来一个东西
[32:33.840 --> 32:36.199] 然后你用中括号里面再加其他东西
[32:36.199 --> 32:38.919] 中括号的那个作用就变了
[32:38.919 --> 32:42.280] 这个是我一开始感到一直很不能接受的
[32:44.360 --> 32:48.080] 对就是可能也跟刚才我们讲到
[32:48.080 --> 32:49.679] 就是语意的一致性这方面
[32:49.679 --> 32:53.280] 可能就是没有考虑的特别好
[32:53.280 --> 32:55.159] 但好像也没有什么更好的选择了
[32:55.159 --> 32:55.959] 不用中括号了
[32:55.959 --> 32:57.919] 是的如果是
[32:57.919 --> 32:59.040] 用尖括号吗
[32:59.040 --> 33:00.040] 就像加吧
[33:02.040 --> 33:03.040] 好的
[33:03.040 --> 33:05.240] 我觉得来吧我们继续type hint
[33:05.240 --> 33:06.600] 我觉得我们也吐槽了好久了
[33:06.600 --> 33:08.639] 我们该来聊一聊其他的了
[33:08.639 --> 33:09.440] 不然再吐槽
[33:09.440 --> 33:12.920] 今天就变成论type hint的吐槽大会了
[33:14.320 --> 33:15.680] 但是我真的很喜欢type hint
[33:15.680 --> 33:17.360] 我最后还是要表明一下我的观点
[33:17.360 --> 33:19.080] OK行
[33:19.080 --> 33:20.920] 我们下面聊一下debugging吧
[33:20.920 --> 33:23.399] 然后这方面其实是我觉得张翔
[33:23.399 --> 33:24.920] 你应该最了解的
[33:24.920 --> 33:27.159] 或者你最有最想说的一部分
[33:27.160 --> 33:29.520] 因为之前也跟我们聊过好多嘛
[33:29.520 --> 33:29.800] 对吧
[33:29.800 --> 33:30.240] 然后
[33:30.240 --> 33:31.360] 对是的
[33:31.360 --> 33:35.200] 我对对这个部分可能是我最熟悉的一个部分
[33:35.200 --> 33:39.120] 前两个部分其实不管是说这个type hint
[33:39.120 --> 33:40.440] 包括async
[33:40.440 --> 33:41.600] 包括可能还有async
[33:41.600 --> 33:44.400] 包括前面的那些所谓的performance上的一些缺陷
[33:44.400 --> 33:49.280] 其实其实我可能不比别人说的更了解多少
[33:49.280 --> 33:51.520] 甚至这个type hint其实我没有什么了解
[33:51.520 --> 33:53.920] 所以说前面大家如果说的不好
[33:53.920 --> 33:55.880] 听听众千万别碰我
[33:55.880 --> 33:57.680] 确实我不太了解
[33:57.680 --> 33:59.000] 确实我不太了解
[33:59.000 --> 34:02.440] 可能只是我一个非常浅显的一个观察
[34:02.440 --> 34:04.200] 然后对于说debugging其实
[34:04.200 --> 34:06.800] debugging是我比较就是说做得多的
[34:06.800 --> 34:09.080] 因为我工作当中确实要经常去
[34:09.080 --> 34:12.080] 就是说去debug一些问题
[34:12.080 --> 34:14.000] 但是包括在pycon上面
[34:14.000 --> 34:16.040] 就是2018年的那个pycon上面
[34:16.040 --> 34:18.000] 我也分享过一些debug的一些工具
[34:18.000 --> 34:21.640] 但是我觉得目前Python的这个debug呢
[34:21.640 --> 34:25.840] 就是感觉大家重视的好像也不够
[34:25.840 --> 34:29.280] 至少说我感觉跟比如说像Java这样子比啊
[34:29.280 --> 34:32.160] 就是说这样天生就是说用来做大工程语言
[34:32.160 --> 34:33.760] 大工程的语言来比
[34:33.760 --> 34:37.080] debug的方面其实python花的精力比较少
[34:37.080 --> 34:42.000] 我觉得大家研究感觉也没有那么的足够
[34:42.000 --> 34:45.040] 可能也是这是因为就是python大家平常可能
[34:45.040 --> 34:47.800] 就是做那种大工程可能会比较少
[34:47.800 --> 34:50.960] 这种debug的需求比较少的问题
[34:50.960 --> 34:59.000] 对确实就是像debug这个话题本身在社区里的讨论
[34:59.000 --> 35:00.720] 好像也并不是特别多
[35:00.720 --> 35:02.800] 大家都在说性能啊
[35:02.800 --> 35:04.120] 然后type hint啊
[35:04.120 --> 35:05.560] async啊
[35:05.560 --> 35:08.000] 然后type572这种东西
[35:08.000 --> 35:10.040] 就关于debug讨论确实稍微少一点
[35:10.040 --> 35:15.440] 但是我作为一个就是也是在pythondebug这方面
[35:15.440 --> 35:17.040] 开发第三方库的人
[35:17.040 --> 35:18.960] 我还是看到了不少
[35:18.960 --> 35:22.880] 就是社区里的一些人
[35:22.880 --> 35:26.240] 他们会很专注这方面
[35:26.240 --> 35:29.240] 就是会有很多这种第三方的工具出来
[35:29.240 --> 35:33.560] 但只是说没有这种官方的solution
[35:33.560 --> 35:36.400] 第三方的工具对是有很多
[35:36.400 --> 35:37.600] 其实有很多第三方的工具
[35:37.600 --> 35:38.960] 但其实第三方的工具怎么说呢
[35:38.960 --> 35:39.640] 很多都是
[35:41.080 --> 35:42.920] 工具本身可能就是说
[35:42.920 --> 35:44.600] 第一功能比较简陋一点
[35:44.600 --> 35:46.440] 第二个就是说
[35:46.440 --> 35:48.600] 其实很多工具不活跃的
[35:48.600 --> 35:51.120] 你比如说像python内存这方面的一些项目
[35:51.120 --> 35:53.680] 其实大多数都是大多数都不活跃
[35:53.680 --> 35:56.040] python就是说做内存就是说检测啊
[35:56.040 --> 35:57.160] 这方面
[35:57.160 --> 36:01.240] 你像大多数的库可能都连python3都不支持
[36:01.240 --> 36:02.960] 只是是python2点几
[36:02.960 --> 36:06.880] 然后就是说可能已经很多年没有维护了
[36:06.880 --> 36:09.520] 包括我最喜欢的那个Garpy那个项目
[36:09.520 --> 36:13.680] 就是说来做内存python内存里的那个东西的那个
[36:14.560 --> 36:16.160] 叫叫他的那个
[36:16.160 --> 36:17.520] 他叫我不知道那个怎么念啊
[36:17.520 --> 36:20.360] 叫guppy应该很多人知道那个库
[36:20.360 --> 36:21.560] 我知道那个Guppy
[36:21.560 --> 36:23.280] 那个我知道对我知道那个
[36:23.280 --> 36:24.600] 但是那个已经很不活跃
[36:24.600 --> 36:27.800] 然后像那个object graph好像也没怎么活跃了
[36:29.640 --> 36:32.160] 所以说这些东西第一个就是说他们本身不怎么活跃
[36:32.160 --> 36:33.600] 第二个就是不好用
[36:33.600 --> 36:37.440] 就是你比如像gooppy其实我不知道就这样写这么厉害
[36:37.440 --> 36:38.000] 就是
[36:38.840 --> 36:40.000] 他不活跃也就算了
[36:40.000 --> 36:45.080] 但他其实他对于分析能力他是很弱的
[36:45.080 --> 36:46.680] 第一他很多东西他分析不出来
[36:46.680 --> 36:48.839] 第二就是说对于大内存
[36:48.839 --> 36:53.879] 就是说当我们发生他用来可以做内存的一个内存泄漏的一个检查嘛
[36:53.879 --> 36:55.919] 但你对于这种内存泄漏
[36:55.919 --> 37:00.680] 因为像我们现在环境当中遇到的都是比较大的一些内存泄漏
[37:00.680 --> 37:02.000] 你不可能说只有几百兆啊
[37:02.000 --> 37:03.440] 或者说一两个G
[37:03.440 --> 37:07.240] 有的时候可能都是上百G的一个内存泄漏
[37:07.240 --> 37:11.359] 都不用说上百G你就五个G
[37:11.359 --> 37:13.879] 那个基本上gooppy那个项目他就已经用不起来了
[37:13.880 --> 37:17.880] 他分析速度实在是太慢了
[37:17.880 --> 37:19.200] 那OK
[37:19.200 --> 37:20.280] 那我们就这样
[37:20.280 --> 37:21.240] 我那我这样来问你
[37:21.240 --> 37:27.360] 就是你觉得就是python的debugging缺失的地方是在哪里
[37:27.360 --> 37:30.400] 就如果说他要集成到cpython里面的话
[37:32.400 --> 37:32.920] 嗯
[37:32.920 --> 37:36.160] 我觉得就是对于我来说
[37:36.160 --> 37:37.400] 我的使用体验来说
[37:37.400 --> 37:40.360] 其实python里面byron框里面已经有一些就是说debugging的那些
[37:40.360 --> 37:42.000] 比如说什么fault handler对吧
[37:42.000 --> 37:44.760] 包括那些做性能的一些就是说cperfile
[37:44.760 --> 37:46.160] 我们也可以把它叫做一个debug
[37:46.160 --> 37:50.120] 我们就比如说debug一些那个就是CPU上的一些问题
[37:50.120 --> 37:52.560] 我们用cperfile可能也能去做检测
[37:52.560 --> 37:54.120] 但他更多的是一种
[37:54.120 --> 38:00.200] 我我觉得是给你开发的时候去使用的一些开发测试的时候去使用的一些工具
[38:00.200 --> 38:02.680] 他没有一些针对生产环境当中使用的
[38:02.680 --> 38:07.040] 比如说我需求的那种能够像特别是在我使用了java之后
[38:07.040 --> 38:11.800] 我能够就是说直接attach上去做一些看一些东西
[38:11.800 --> 38:12.800] 去做一些事情
[38:12.800 --> 38:16.960] 甚至能进行交互的这样子的一种支持
[38:16.960 --> 38:20.880] 我觉得这个是嗯python这边所欠缺的
[38:20.880 --> 38:24.240] 但是说这个可能需要就是说社区
[38:24.240 --> 38:25.720] 例如说整个社区有一些
[38:25.720 --> 38:30.280] 但那个比如说pyflame啊pyspy啊或者说pyresize啊这种
[38:30.280 --> 38:32.000] 这个我之前也讲过
[38:32.000 --> 38:34.760] 就是说这些虽然有这些工序的存在
[38:34.760 --> 38:38.160] 但是我觉得还是最好是需要就是说从
[38:38.160 --> 38:41.799] 这细这边就能够默认就去支持
[38:41.799 --> 38:44.279] 就是说甚至像加拿大那样子
[38:44.279 --> 38:47.200] 你当你去安装一些比如说JDK的时候
[38:47.200 --> 38:50.920] 他会自带很多就是说默认的那些像jstack呀
[38:50.920 --> 38:55.640] jmap呀那样子的很好用的一些debug的一些工具
[38:55.640 --> 38:59.640] 我觉得python社区也可以朝这个方向去做一些发展
[38:59.640 --> 39:04.160] 感同身受就像是就比如说像现在可能说python3
[39:04.160 --> 39:05.759] 如果说你要去调试内存泄漏
[39:05.760 --> 39:10.120] 可能说你最多用的是python官方的trustmelock
[39:10.120 --> 39:13.200] trustmelock的话但是他就没有设计
[39:13.200 --> 39:16.120] 没有就是说设计成为你可以远端去调用
[39:16.120 --> 39:17.880] 或者说你从外部去查看的
[39:17.880 --> 39:19.960] 所以说有些时候你需要去
[39:19.960 --> 39:24.480] trustmelock生产环境当中用不了
[39:24.480 --> 39:25.080] 用不了
[39:25.080 --> 39:28.680] trustmelock你敢在生产环境打开
[39:28.680 --> 39:31.920] 就是trustmelock他那个酷的话我是默认没关啊
[39:31.920 --> 39:33.240] 我是直接就在生产上
[39:33.240 --> 39:36.520] 然后我是用pyreset的touch进去
[39:36.520 --> 39:37.720] 然后开了trustmelock
[39:37.720 --> 39:40.919] 他的性能影响很大
[39:40.919 --> 39:45.319] 但是没办法当时我们那个
[39:45.319 --> 39:46.839] 你就弄几台机器嘛
[39:46.839 --> 39:47.759] 这个也还好
[39:47.759 --> 39:49.040] 对线上没办法
[39:49.040 --> 39:52.439] 当时我们然后因为你python3里面好像内存这方面的东西
[39:52.439 --> 39:54.319] 你要去分析的话
[39:54.319 --> 39:55.959] 然后的话可能就不太多
[39:55.959 --> 39:57.600] 而且像你像golang的话
[39:57.600 --> 39:58.720] 就先不说java了
[39:58.720 --> 40:01.479] 像golang他就自带一个proof
[40:01.480 --> 40:05.440] profile那个东西的话
[40:05.440 --> 40:07.960] 你可以然后你可以直接就是说是
[40:07.960 --> 40:11.000] 拉到他里面的就是说是从外部
[40:11.000 --> 40:14.600] 或者说你可以直接用他内部提供一个http的接口的形式
[40:14.600 --> 40:16.520] 把它内部里面的堆
[40:16.520 --> 40:18.800] 然后包括他的grouting的情况
[40:18.800 --> 40:20.440] 包括他现在现存的一些内容
[40:20.440 --> 40:22.160] 这样的情况全部拉一遍出来
[40:22.160 --> 40:25.360] 我觉得那个就是非常非常舒服
[40:25.360 --> 40:26.280] 对是的是的
[40:26.280 --> 40:27.200] 那个是很好
[40:27.200 --> 40:28.760] 但是python其实也有这些功能
[40:28.760 --> 40:31.760] 但是没有把它做成一个
[40:31.760 --> 40:32.640] 就是说也好
[40:32.640 --> 40:34.400] 感觉也没想让大家知道这些事情
[40:34.400 --> 40:38.040] 就是说没有把它做成一个就是说体系
[40:38.040 --> 40:40.360] 我更多的希望就是说有一个体系
[40:40.360 --> 40:42.200] 我就说比如说其实我之前也是想过
[40:42.200 --> 40:44.920] 我本来其实我其实很早就跟like他们说过
[40:44.920 --> 40:45.840] 就是说我有一个设想
[40:45.840 --> 40:50.040] 就是说我们把这些东西就不用就是说这里散一片那边散一片
[40:50.040 --> 40:50.800] 这边有一个接口
[40:50.800 --> 40:51.680] 那边有一个库
[40:51.680 --> 40:52.720] 把它就是说这样子
[40:52.720 --> 40:53.840] 我们把它做成一体系
[40:53.840 --> 40:55.800] 那比如说解释器可以做什么
[40:55.800 --> 41:01.160] 你解释器可以提供一个动态动态去就是说attach的一个功能
[41:01.160 --> 41:04.760] 你不用去你像我们现在所有的那些pyresite
[41:04.760 --> 41:07.680] 这些能够提供就是说attach功能的
[41:07.680 --> 41:09.320] 它其实全都是用的GDB
[41:09.320 --> 41:10.800] 它自己的这样一个功能
[41:10.800 --> 41:12.680] 它GDB attach上去
[41:12.680 --> 41:18.000] 那你首先那你在那个就是说你需要去为windows做适配
[41:18.000 --> 41:19.800] python它做一个个的那个就是说平台
[41:19.800 --> 41:22.280] 你不能说支持linux
[41:22.280 --> 41:23.640] 你还要在windows上
[41:23.640 --> 41:27.640] 你要去用windows上的那个什么windb好像是对吧
[41:27.640 --> 41:30.920] 你要做那个去对去做适配
[41:30.920 --> 41:36.640] 这个可以其实你在解释器上你不让大家可以去摆脱对三方工具的依赖
[41:36.640 --> 41:39.359] 完全就是说还是集中在python这个生态里面
[41:40.600 --> 41:41.520] 第二个就是说
[41:42.520 --> 41:45.440] 我的我当时觉得就是说你提供这样子的一个能力
[41:45.440 --> 41:47.400] 然后你只要提供钩子
[41:47.759 --> 41:49.279] 就是说attach上去之后
[41:49.279 --> 41:50.000] 第一位
[41:50.440 --> 41:53.440] 你可以在像现在的那些所谓的什么asynchooks
[41:53.440 --> 41:54.880] 那些什么except hooks一样
[41:54.880 --> 41:58.640] 你在sys里面提供一个叫做attach hooks这样子的一个
[41:59.520 --> 42:00.680] 这样子的一些钩子
[42:00.680 --> 42:03.200] 你可以自动去注册在你的代码里去自动
[42:04.000 --> 42:06.720] 写一些钩子让你去能够做哪些事情
[42:07.000 --> 42:08.000] 这样子它开始上来
[42:08.000 --> 42:09.400] 它不能随便什么都干
[42:09.400 --> 42:10.680] 那样太危险
[42:11.360 --> 42:16.080] 你可以你在解释器包括我们的这些标准库可以默认提供一些
[42:16.080 --> 42:22.920] 比如说获取所有的现成的现成信息的这样子的一个默认的钩子
[42:22.920 --> 42:27.000] 包括获取内存信息这样子的一个默认的这样子的一个钩子
[42:27.000 --> 42:28.520] 其实对于解释器来说
[42:28.520 --> 42:30.440] 我觉得开发量其实并不大
[42:30.640 --> 42:31.640] 你只需要提供这些
[42:31.640 --> 42:32.840] 我觉得就可以打开
[42:32.960 --> 42:35.760] 让大家就是说有这个能力去做更多的事情
[42:35.760 --> 42:38.640] 让第三方库的这些作者他们去做更多的事情
[42:38.640 --> 42:44.720] 不用再把那个所谓的调试工具的bar开得那么的高
[42:44.920 --> 42:47.080] 现在所有那些调试工具
[42:47.560 --> 42:49.960] 他们的那些代码基本上我都看过
[42:49.960 --> 42:51.680] 他们的其实bar还是很高的
[42:51.680 --> 42:53.160] 因为你要去开发那个东西
[42:53.160 --> 42:56.160] 你得对python的internals有一定的了解
[42:56.160 --> 42:57.879] 那你像对GDB那些对吧
[42:57.879 --> 43:01.520] 你还得对你得对像pyflame啊pyspy啊这些
[43:01.520 --> 43:03.319] 你得对操作系统
[43:04.240 --> 43:06.560] 除了对python的internal很熟悉之外
[43:06.560 --> 43:10.919] 你还要对就是说系统工具有能有一个比较好的一个掌握
[43:10.919 --> 43:12.919] 你才能够去开发这些东西
[43:13.120 --> 43:16.720] 如果说生态本身提供这些东西
[43:16.720 --> 43:18.520] 那么就是说所有人感觉都可以进来开发
[43:18.520 --> 43:20.440] 因为我们python语言不容易可以去开发这些东西
[43:20.440 --> 43:23.320] 我不用像pyflame那样去用rush这些用c一起
[43:23.320 --> 43:24.360] 是的
[43:24.360 --> 43:25.520] 对
[43:25.520 --> 43:28.040] 而且说实话现在很多工具都有极限性
[43:28.040 --> 43:29.160] 就像你刚才说的
[43:29.440 --> 43:30.960] 比如说像GDB
[43:30.960 --> 43:34.640] 它是它基本上现在很多就是说是第三方的attach的工具
[43:34.640 --> 43:38.160] 就是比如说我要现在要去由attach进线上的一个环境
[43:38.160 --> 43:39.760] 要么我自己写框架
[43:39.760 --> 43:43.000] 在框架我自己的框架里面去支持有这样一个接口
[43:43.000 --> 43:46.200] 要么就只能用外部通过GDB的形式attach进去
[43:46.200 --> 43:49.440] 但是有些时候GDB在GDB失效的时候
[43:49.440 --> 43:53.320] 比如说有一些容器环境下可能会导致GDB失效
[43:53.320 --> 43:57.480] 然后这种情况的话就特别恶心调试起来
[43:57.480 --> 43:59.640] 就是说是当我需要attach进去的时候
[44:00.880 --> 44:01.720] 对
[44:01.720 --> 44:04.320] 这也是为什么我非常希望社区本身能够
[44:04.320 --> 44:05.840] 解释器本身有这个能力
[44:06.040 --> 44:08.920] 因为你像我们在这边限杀环境是不允许装GDB
[44:08.920 --> 44:10.320] 是的
[44:10.320 --> 44:11.240] 像我们对
[44:11.240 --> 44:13.680] 对像比如说一些我们现在都是附容器
[44:13.680 --> 44:15.560] 附容器就是容器的形式的话
[44:15.560 --> 44:16.520] 都是你没办法
[44:16.520 --> 44:17.440] 出了问题
[44:17.440 --> 44:20.120] 你出了问题
[44:20.120 --> 44:21.920] 特别是遇到那种很难复现的问题
[44:21.920 --> 44:23.840] 只有线上才有的这种问题
[44:24.280 --> 44:25.960] 你又没有称首的工具在手上
[44:25.960 --> 44:27.600] 你就只能看着那个进程发展
[44:27.600 --> 44:28.640] 你什么都干不了
[44:28.640 --> 44:29.240] 是的
[44:29.240 --> 44:29.960] 完全是的
[44:29.960 --> 44:30.640] 同意
[44:31.040 --> 44:31.280] 对
[44:31.280 --> 44:32.480] 人家来找你
[44:32.480 --> 44:33.760] 我记得人家来找我解决问题
[44:33.760 --> 44:35.840] 他说我线上有这个问题很着急
[44:35.840 --> 44:37.160] 什么工具也没有
[44:37.160 --> 44:39.400] 然后就给我一个进程
[44:39.400 --> 44:41.040] 我说还得他给我看
[44:41.040 --> 44:41.640] 我还登录不了
[44:41.640 --> 44:42.360] 就给我一个进程
[44:42.360 --> 44:43.320] 我就在那边看这个进程
[44:43.320 --> 44:44.000] 我啥也不能看
[44:44.000 --> 44:44.720] 我能干啥呢
[44:44.720 --> 44:48.000] 看看pmap
[44:48.000 --> 44:48.240] 对
[44:48.240 --> 44:50.600] 看看pmap一看的话全是堆上在那边
[44:50.600 --> 44:51.879] 堆上这样的100个G
[44:51.879 --> 44:53.160] 100个G里面是什么
[44:53.160 --> 44:54.000] 没人知道
[44:55.319 --> 44:56.160] 同意
[44:56.160 --> 44:57.040] 感同身受
[44:57.040 --> 44:58.120] 而且我觉得就是说
[44:58.120 --> 44:58.720] 对
[44:59.040 --> 44:59.879] 而且我觉得就是说
[44:59.879 --> 45:01.439] 如果你解决器里面有这种东西
[45:01.439 --> 45:02.720] 你可以提供更多的能力
[45:02.720 --> 45:03.720] 因为有很多东西
[45:03.720 --> 45:05.279] 你即使用GDP的test上去
[45:05.279 --> 45:06.480] 我一直觉得GDP的test上去
[45:06.480 --> 45:07.359] 然后你做一些功能
[45:07.359 --> 45:09.160] 你是其实还是很危险的
[45:09.160 --> 45:11.720] 因为你不知道你的程序运行到什么地方
[45:12.120 --> 45:12.839] 你可能
[45:12.840 --> 45:15.480] 我一直觉得它有可能去破坏掉
[45:15.480 --> 45:17.120] 你程序运行的一个正确性
[45:17.120 --> 45:19.480] 如果你是在解决器本身去做这些东西
[45:19.480 --> 45:20.240] 由代码
[45:20.240 --> 45:21.920] 你python代码去控制这些钩子
[45:21.920 --> 45:23.680] 由解决器去控制这些钩子的话
[45:23.680 --> 45:26.600] 你就可以比如说把它以后随着功能的
[45:26.600 --> 45:28.000] 这个就是说越来越强
[45:28.000 --> 45:29.160] python功能越来越强大之外
[45:29.160 --> 45:31.800] 你可以让它停在一些安全的地方
[45:31.800 --> 45:32.640] save point
[45:32.640 --> 45:35.040] 就类似于java那种概念
[45:35.040 --> 45:36.680] 你可以让它停在一些安全的地方
[45:36.680 --> 45:37.800] 而不是在任意的地方
[45:37.800 --> 45:38.280] 你都起
[45:38.280 --> 45:40.240] 然后破坏掉了整个解决器的一个状态
[45:40.240 --> 45:40.440] 对
[45:40.440 --> 45:41.120] 我起了
[45:41.120 --> 45:42.080] 然后线程崩了
[45:42.080 --> 45:43.840] 然后一枪秒了有什么好说的
[45:47.520 --> 45:48.799] 对
[45:48.799 --> 45:51.240] 我觉得就反正我对了
[45:51.240 --> 45:55.080] 因为我之前就之前在老东家的时候做一些基础设施
[45:55.080 --> 45:58.400] 然后的话我就说是要去调试一些东西
[45:58.400 --> 46:00.360] 就感觉的确是非常恶心
[46:00.360 --> 46:01.759] 像我们现在的话
[46:01.759 --> 46:04.440] 就是我们自己在框架里面整合了一套
[46:04.440 --> 46:06.520] 就是说是和太极进去的东西
[46:06.520 --> 46:09.960] 然后但是那套也是相对来说不是太清真了
[46:09.960 --> 46:11.880] 其实我觉得的话
[46:11.880 --> 46:13.000] 我作为一个开发者来讲
[46:13.000 --> 46:19.640] 我也更希望说有人推动把这个就是说是在官方的层面上去推动这件事落地
[46:20.760 --> 46:21.040] 对
[46:21.040 --> 46:24.000] 我觉得如果官方能提供自然是最好的一件事情
[46:24.480 --> 46:26.680] 那为什么就没有人做这件事情呢
[46:26.680 --> 46:28.920] 如果按你说的其实也不是特别难的话
[46:29.600 --> 46:30.360] 嗯
[46:30.360 --> 46:31.720] 嗯
[46:32.080 --> 46:34.040] 我是觉得整个是就是说
[46:34.040 --> 46:37.680] 其实其实做这个真的不是很难
[46:37.680 --> 46:38.640] 我在
[46:38.640 --> 46:42.240] 嗯其实实现过一个就是简易的版本
[46:42.240 --> 46:45.000] 就是说那时候只是为了一些验证性质
[46:45.000 --> 46:47.879] 没有就是说特别就是就是说好好的去写
[46:47.879 --> 46:49.200] 其实不是很
[46:49.200 --> 46:49.839] 嗯
[46:49.839 --> 46:51.600] 其实就是说不是很困难
[46:51.600 --> 46:54.560] 但是我觉得就是说这是一个恶性循环
[46:54.560 --> 46:55.879] 我觉得就是说大家
[46:56.960 --> 46:59.120] 就是说你拍摄这边对吧
[46:59.120 --> 47:01.920] 你在工作就是说
[47:02.279 --> 47:03.440] 你性能越差
[47:03.440 --> 47:05.920] 你的debug的这种能力越弱
[47:05.920 --> 47:10.080] 那么大家把你用在工作项目中的机会
[47:10.080 --> 47:10.400] 嗯
[47:10.400 --> 47:11.600] 场景就越少
[47:11.840 --> 47:13.840] 这样就导致拍摄使用的场景就越少
[47:13.840 --> 47:16.080] 大家发现碰到问题的场景就越少
[47:16.080 --> 47:18.840] 结果越导致我觉得这是一个恶性的这个循环
[47:18.840 --> 47:23.360] 对对很多很多公司在拍摄遇到了性能问题就直接换语言了
[47:24.760 --> 47:25.120] 对
[47:25.120 --> 47:25.360] 是的
[47:25.360 --> 47:28.520] 我觉得这是一个就是说很恶性的一个循环
[47:28.520 --> 47:31.680] 需要就是说有个人英雄主义来打破这个循环
[47:31.680 --> 47:32.640] 才对
[47:32.640 --> 47:34.640] 需要有人用个人英雄来打破这个循环
[47:34.640 --> 47:36.920] 这个世界需要英雄点击一批鸡
[47:36.920 --> 47:38.920] 规格到底就是个人英雄主义了
[47:38.920 --> 47:39.520] 嗯
[47:39.520 --> 47:39.799] 对
[47:39.799 --> 47:40.000] 是的
[47:40.000 --> 47:41.040] 我一直觉得就是说
[47:41.040 --> 47:42.000] 这是一个很奇怪
[47:42.000 --> 47:43.000] 你使用的场景越少
[47:43.000 --> 47:44.040] 你碰到的场景越少
[47:44.040 --> 47:45.080] 你碰到的问题越少
[47:45.080 --> 47:49.720] 那么你去发现能够提升的机会就越少
[47:49.720 --> 47:52.920] 所以说Python本身你看大家更多的是用它来
[47:52.920 --> 47:54.359] 就是说越来越就是说
[47:54.799 --> 47:57.120] performance这边大家甚至有点破罐子破出来
[47:57.120 --> 47:59.520] 就是认为我有的时候讲历史什么的
[47:59.520 --> 48:01.879] 我就是一个取代Share的一个语言
[48:02.400 --> 48:04.000] 反正就不管怎样就感觉
[48:04.000 --> 48:07.400] 我也不知道怎么说这个事情
[48:07.400 --> 48:09.680] 反正就是确实没有见到
[48:09.680 --> 48:11.840] 老是有一些小的提升
[48:11.840 --> 48:14.280] 但这些小的提升其实对于受众来说
[48:14.280 --> 48:14.920] 使用者来说
[48:14.920 --> 48:16.320] 其实他如果没用到
[48:16.320 --> 48:17.640] 那就是他就是不关心
[48:17.640 --> 48:18.960] 他也体会不到那个好处
[48:18.960 --> 48:20.480] 大家需要的是一次
[48:22.040 --> 48:26.560] 整体的一种比较飞跃的一种提升
[48:26.560 --> 48:27.680] 同意
[48:27.680 --> 48:30.480] 所以我就说一直怂恿你去提Python
[48:30.480 --> 48:31.680] 然后
[48:31.680 --> 48:37.839] 因为我现在的话是我自己是个人使用场景当中
[48:37.839 --> 48:42.839] 那些工具现在我都能去用
[48:42.839 --> 48:46.120] 所以说但是后来其实就是懒了
[48:46.120 --> 48:48.399] 因为写Python就是说你要写一堆
[48:48.399 --> 48:51.520] 关键是你写了Python你还要去说服各种人
[48:51.520 --> 48:54.080] 这个过程就不是那么的愉快
[48:54.080 --> 48:57.200] 所以说我非常费力
[48:57.200 --> 49:00.440] 一个Python其实说你从提出讨论
[49:00.440 --> 49:03.480] 然后讨论到最后你去实现
[49:03.480 --> 49:05.720] 然后到最后去review
[49:05.720 --> 49:06.880] 就是说Python去接受
[49:06.880 --> 49:08.800] 然后再到你的实现去被review
[49:08.800 --> 49:10.080] 再到合伙进去仓库
[49:10.080 --> 49:12.280] 都是以乐计的
[49:12.280 --> 49:14.640] 很讨厌
[49:14.640 --> 49:18.720] 你们刚才讨论的debugging都是就偏向于内存这方面
[49:18.720 --> 49:22.080] 我个人觉得普通的那种debugging
[49:22.080 --> 49:25.600] 就比如说你想去单步调试或者什么的
[49:25.600 --> 49:27.400] 就是这方面的支持
[49:27.400 --> 49:28.960] 我觉得Python还是可以的
[49:28.960 --> 49:32.040] PDB
[49:32.040 --> 49:36.120] 包括它暴露出来的很多信息
[49:36.120 --> 49:40.280] 其实可能你在其他的语言里是拿不到这些信息的
[49:40.280 --> 49:42.920] 就比如说那个站
[49:42.920 --> 49:46.360] 然后就是上面一些情况
[49:46.360 --> 49:50.480] 但是这方面的信息是有
[49:50.480 --> 49:53.400] 不过就像我之前跟你讨论的那个问题
[49:53.400 --> 49:57.520] 有些它暴露出来的信息也没有特别好的去维护
[49:57.520 --> 50:00.200] 就是感觉就只是在那里
[50:00.200 --> 50:04.040] 但是并没有提供一个特别好的接口
[50:04.040 --> 50:09.240] 然后让你能够去100%确信它的behavior会怎么样
[50:09.240 --> 50:13.680] 其实这就是我刚才说的不成体系
[50:13.680 --> 50:15.600] 其实Python它暴露的信息很多
[50:15.600 --> 50:17.560] 当然说暴露信息的多不是一个好事
[50:17.560 --> 50:20.520] 就是说它暴露的信息对于调试来说是一个好事
[50:20.520 --> 50:24.720] 但是对于整个解析器的维护者来说不是一个特别好的事情
[50:24.720 --> 50:26.600] 就是说它暴露的信息很多
[50:26.600 --> 50:27.880] 但是就是说它不成体系
[50:27.880 --> 50:30.080] 就是说你比如说像对吧
[50:30.080 --> 50:32.600] 你比如说像有一些信息在那个库里面
[50:32.600 --> 50:36.720] 比如说你我们现在怎么去看一个
[50:36.720 --> 50:38.240] 就是说所有现成的一个状态
[50:38.240 --> 50:39.319] 比如说排查死锁
[50:39.319 --> 50:44.520] 排查死锁其实最方便的就是叫Python system current frames
[50:44.520 --> 50:47.080] 就可以看所有的那个现成
[50:47.080 --> 50:49.520] Python现成的一个就是说traceback
[50:49.520 --> 50:50.960] 你可以把它打出来
[50:50.960 --> 50:55.640] 然后去看一下是不是有地方在block在那个取锁上面
[50:55.640 --> 50:58.720] 但其实就是说它这是一个
[50:58.720 --> 51:00.240] 其实它这是一个
[51:00.240 --> 51:03.759] 我也不知道为什么当初会有这样子的一个就是说接口暴露出来
[51:03.759 --> 51:07.600] 它其实也没有说就是说推荐大家去说去使用这个
[51:07.600 --> 51:10.279] 但其实这个东西被大家广泛的使用
[51:10.279 --> 51:13.560] 它作为一个它而且它是以下滑线开头的嘛
[51:13.560 --> 51:15.520] 那就说明它其实作为一个内部接口
[51:15.520 --> 51:16.759] 它可能以后会变
[51:16.759 --> 51:20.480] 但它又被大家广泛的去使用
[51:20.480 --> 51:24.279] 那就是说那可能跟我们其实第一跟我们之前说的兼容性有关系
[51:24.280 --> 51:28.480] 第二个就是说它就是这里有这么一个接口你可以用
[51:28.480 --> 51:31.480] 但是它也不说推荐啊什么的
[51:31.480 --> 51:32.560] 你没说这个是推荐的
[51:32.560 --> 51:33.480] 你就用这个
[51:33.480 --> 51:36.600] 我给你保证一个什么什么样的一个行为
[51:36.600 --> 51:37.560] 就是不成体系对吧
[51:37.560 --> 51:38.880] 你比如说还有
[51:38.880 --> 51:40.840] 你像现在我经常用的比如说调试内存
[51:40.840 --> 51:42.680] 我刚才说了为什么为什么我说内存
[51:42.680 --> 51:44.040] 因为它的内存问题不好解决
[51:44.040 --> 51:46.280] 因为那些工具太烂了
[51:46.280 --> 51:48.080] 工具实在是不太好用
[51:48.080 --> 51:49.280] 就是说工具不太好用
[51:49.280 --> 51:53.520] 特别是对于我们这种生产环境中有的时候大内存的这种场景
[51:53.520 --> 51:56.800] 调试的手段实在是太少了
[51:56.800 --> 51:59.160] 那么我现在最常用的就是说
[51:59.160 --> 52:00.600] 我去了test上去之后
[52:00.600 --> 52:01.440] 我就起一个share
[52:01.440 --> 52:02.800] 就是说我自己去跑
[52:02.800 --> 52:03.720] 自己去写代码
[52:03.720 --> 52:06.680] 就是说我用GC里面的那个就是get objects
[52:06.680 --> 52:08.160] 我可以获得所有的那个
[52:08.160 --> 52:11.759] 所有的那个就是在会被垃圾回收的那种
[52:11.759 --> 52:14.000] 就是说参与垃圾回收的那些对象
[52:14.000 --> 52:20.160] 对我都会自己去写代码去便利那个就是便利那个就是那个链
[52:20.160 --> 52:24.040] 然后自己去system get objects
[52:24.040 --> 52:26.160] 就获取一些看有没有一些基本类型
[52:26.160 --> 52:29.160] 他会去就是说内存扩大
[52:29.160 --> 52:30.279] 都得这么去做
[52:30.279 --> 52:32.520] 就是说没有一个体系就是说推荐你
[52:32.520 --> 52:33.920] 就是说这有一个推荐方法
[52:33.920 --> 52:35.440] 大家碰到问题之后
[52:35.440 --> 52:36.640] 就是说怎么去做
[52:36.640 --> 52:42.440] 都是大家一些就是说需要你对python有一个很强的一个熟练度
[52:43.319 --> 52:44.720] 就是说你才知道
[52:44.720 --> 52:48.359] 比如说我原来这边有个东西可以去获取这个信息
[52:48.360 --> 52:51.240] 可能可以对我的调试有用处
[52:51.240 --> 52:52.640] 是的
[52:52.640 --> 52:55.040] 而且我觉得还有个很大的问题就是说是
[52:55.040 --> 52:57.240] 就像你刚才说的python太灵活了
[52:57.240 --> 52:59.840] 然后各种monkey patch把说
[52:59.840 --> 53:03.440] 然后去调试各种monkey patch之后的那个
[53:03.440 --> 53:06.320] 对然后对我好了不用不用猜了
[53:06.320 --> 53:08.320] 我说的我喷的就是g event
[53:08.320 --> 53:09.080] 然后对
[53:10.280 --> 53:13.320] 然后的话就说你g event你monkey patch不对
[53:13.320 --> 53:15.800] 然后现场现在现场造成了一些问题
[53:15.800 --> 53:18.160] 然后你去想去调试这个东西
[53:18.160 --> 53:19.720] 我觉得有些时候就很困难
[53:21.640 --> 53:25.720] 但可能如果你提供一个就是更集中的解决方式
[53:25.720 --> 53:28.759] 就有可能去能够调试了
[53:28.759 --> 53:29.440] 说不定
[53:30.359 --> 53:31.839] 对我其实觉得一直觉得
[53:31.839 --> 53:37.560] 其实我就一直觉得如果能把堆给相当于python里面的所谓的那个堆
[53:37.560 --> 53:39.600] 给就是所谓能用动画法去
[53:40.160 --> 53:40.839] 便利的话
[53:40.839 --> 53:44.720] 就是说低的以非常低的那种代价去便利的话
[53:44.720 --> 53:49.000] 内存问题应该会有一个比较好的一种
[53:49.000 --> 53:52.439] 就是说比较多的更方便一点
[53:52.439 --> 53:54.279] 不像现在太麻烦了
[53:54.279 --> 53:56.279] 现在这个解决内存问题
[53:56.279 --> 53:58.200] 每次别人来叫我调试内存问题
[53:58.200 --> 53:59.120] 我都很头大
[53:59.120 --> 54:01.640] 因为我知道大概率我可能解决不了
[54:02.600 --> 54:08.000] 我还想让python把那个它的就是vm的那个stack
[54:08.680 --> 54:10.040] 这个信息给暴露出来的
[54:10.040 --> 54:11.200] 但其实是拿不到的
[54:11.919 --> 54:12.919] vm的stack
[54:12.920 --> 54:17.040] 对其实不是占虚拟机吗
[54:17.040 --> 54:19.840] 然后你但是你其实拿不到那个
[54:20.440 --> 54:23.840] 每个就是这个stack上面有什么东西的
[54:23.840 --> 54:25.280] 这个是没有暴露出来的
[54:25.640 --> 54:29.440] 但可能这个又是你说那种就是你觉得暴露出来
[54:29.440 --> 54:32.720] 对这个部分是这个不能暴露
[54:32.720 --> 54:33.920] 其实你可以啊
[54:33.920 --> 54:37.520] 你现在你现在比如说你用thread对不对
[54:37.520 --> 54:40.840] 你用你用那个thread去获得那个他的那个stack之后
[54:40.840 --> 54:44.440] 你可以去在这个frame上面获取到一些信息
[54:44.440 --> 54:47.160] 但是你可能那些局部变量上面的那些
[54:47.160 --> 54:48.560] 那些你获取不到
[54:48.560 --> 54:50.760] frame就是frame不是vm stack
[54:51.520 --> 54:52.480] 你说的是
[54:53.640 --> 54:56.240] 我说的是就是就是python的虚拟机
[54:56.240 --> 54:58.280] 它不是比如说你pop一个指令吗
[54:58.960 --> 54:59.800] 然后对啊
[54:59.800 --> 55:01.080] 也就是你pop出来一个东西
[55:01.080 --> 55:05.520] 然后然后对就是现在的那个vm的那个stack上是什么状况
[55:05.520 --> 55:06.840] 啊啊啊啊
[55:06.840 --> 55:08.360] 你要去那个信息啊
[55:08.360 --> 55:08.760] 那个
[55:08.760 --> 55:09.920] 对对
[55:09.920 --> 55:11.600] 那我肯定是反对
[55:12.200 --> 55:13.960] 我觉得就是
[55:14.280 --> 55:16.160] 暴露太多东西没
[55:16.160 --> 55:17.320] 就像我刚才说的
[55:17.320 --> 55:18.320] 他暴露太多东西
[55:18.320 --> 55:20.040] 你一旦有人产生依赖之后
[55:20.040 --> 55:21.880] 我解释器怎么去演进呢
[55:21.880 --> 55:23.240] 他现在的问题就是暴露了
[55:23.240 --> 55:25.200] 那个有很多东西都暴露出去
[55:25.200 --> 55:25.840] 然后
[55:26.200 --> 55:27.560] 我没法演进啊
[55:27.560 --> 55:28.800] 我不知道怎么去演进
[55:28.800 --> 55:30.640] 我演进都就会break进的
[55:30.640 --> 55:31.840] 然后大家又开始骂
[55:31.840 --> 55:32.200] 对
[55:32.200 --> 55:34.240] 就是这个没有办法去
[55:34.240 --> 55:35.720] 就是说你就是没办法
[55:35.720 --> 55:37.920] 你维护一个30年的一个代码
[55:37.920 --> 55:38.880] 你就是要去
[55:38.880 --> 55:41.960] 这个兼容性就是其实我就是兼容性是阻碍你
[55:41.960 --> 55:42.400] 那个呀
[55:42.400 --> 55:45.560] 如果你现在比如说让保持现在所有的python feature
[55:45.560 --> 55:46.280] 什么都不管
[55:46.280 --> 55:47.360] 不用考虑什么兼容性
[55:47.360 --> 55:48.920] 你现在再来重写一个
[55:48.920 --> 55:49.920] 就是说重写一个解释器
[55:49.920 --> 55:51.040] 不用考虑任何的兼容性
[55:51.040 --> 55:51.880] 不要生态了
[55:52.160 --> 55:53.240] 他肯定可以
[55:54.080 --> 55:55.600] 很容易的就可以做的比
[55:55.600 --> 55:57.000] 就是说现在的python就是说
[55:57.000 --> 55:58.560] 就是说做的更好
[55:58.560 --> 55:59.760] 可是那有什么用呢
[56:00.320 --> 56:01.040] 不是讲道理
[56:01.040 --> 56:06.320] 我觉得他那他本来就已经没有考虑那些暴露出来的内部信息的兼容性了
[56:06.320 --> 56:08.200] 就比如说那个frame的lastite
[56:08.200 --> 56:12.200] 他这个东西的behavior在3.8里面就会变
[56:12.200 --> 56:14.600] 然后这个东西它是没有在文档里面的
[56:14.600 --> 56:16.040] 所以就其实内部这些信息
[56:16.040 --> 56:18.319] 他本来就已经没有考虑兼容性了
[56:19.080 --> 56:21.919] 对他其实就是说这些东西不是说没有考虑兼容性
[56:21.919 --> 56:23.720] 他就不应该暴露出来
[56:23.720 --> 56:25.799] 但因为各种实现就是说的问题
[56:25.799 --> 56:27.240] 他暴露出来了之后
[56:27.399 --> 56:28.359] 他就暴露出来了
[56:28.359 --> 56:30.560] 结果有人就是说看到有这个信息
[56:30.560 --> 56:31.680] 他可能就去用了
[56:31.680 --> 56:33.279] 但其实这个信息
[56:33.279 --> 56:35.399] 对对对就不应该去依赖
[56:35.399 --> 56:38.160] 当然说你说你python给我保持一个兼容性
[56:38.160 --> 56:39.480] 这种情况下一般都不理你
[56:39.879 --> 56:41.480] 我不可能我不保持兼容性
[56:41.480 --> 56:42.480] 我从来没承诺过这个
[56:42.480 --> 56:45.680] 而且他夸平台的同一个版本夸平台的行为是不一致的
[56:45.680 --> 56:49.600] 对对对这个是没有办法
[56:49.600 --> 56:51.040] 没有办法就是这样理解
[56:51.040 --> 56:54.600] 所以聊来聊去都是历史包袱在中
[56:54.600 --> 56:57.240] 然后对历史包袱就是
[56:57.240 --> 57:00.879] 其实历史包袱不管是说你在做任何一个项目的时候
[57:00.879 --> 57:01.920] 就会有历史包袱
[57:01.920 --> 57:03.000] 只要说真的有人用
[57:03.000 --> 57:04.480] 你哪怕在工作当中
[57:04.480 --> 57:07.040] 你暴露出一个api明明那时候没想好
[57:07.040 --> 57:07.799] 写的很恰
[57:07.800 --> 57:08.960] 结果就被人用了
[57:08.960 --> 57:10.040] 好多用户在用
[57:10.040 --> 57:11.120] 你能下那个api
[57:11.120 --> 57:11.720] 是的
[57:11.720 --> 57:12.800] 我要做一个free
[57:12.800 --> 57:15.440] 特别是我们做我们做中间件这一块
[57:15.440 --> 57:16.720] 我们做中间件这一块的话
[57:16.720 --> 57:19.880] 很多我们然后东西是产业在用的
[57:19.880 --> 57:20.880] 产业在用的
[57:20.880 --> 57:22.000] 有些时候你想推动
[57:22.000 --> 57:23.760] 比如说你发现之前有坑
[57:23.760 --> 57:25.520] 然后你想推动一个版本升级
[57:25.520 --> 57:27.440] 我操太恶心了
[57:27.440 --> 57:30.160] 除非是有那种行政的命令强制升级
[57:30.160 --> 57:31.920] 或者说你必须给他设一个data library
[57:31.920 --> 57:33.760] 不是你今年就3.25滚蛋
[57:33.760 --> 57:34.680] 这种东西可以升
[57:34.680 --> 57:35.680] 但是其余的是
[57:35.680 --> 57:37.680] 关键是你这还是内部
[57:37.680 --> 57:39.319] 内部就是说你还有一种方式
[57:39.319 --> 57:41.319] 就是说行政命令这种方式去推
[57:41.319 --> 57:46.640] 对于比如说现在就是说你暴露给的外部的
[57:46.640 --> 57:49.120] 就是说非你公司内部的这些用户
[57:49.120 --> 57:51.120] 那些用户还是你的客户给你付钱
[57:51.120 --> 57:54.040] 你怎么去推动他们去做这个事情
[57:54.040 --> 57:55.120] 你是推动不了的
[57:55.120 --> 57:59.040] 你只能说我就是不停的去永远要维护他
[57:59.040 --> 57:59.600] 是的
[57:59.600 --> 58:00.839] 完全理解
[58:00.840 --> 58:06.600] 最近他们在邮件列表讨论那个潘森下一个版本是3.10还是4
[58:07.600 --> 58:11.800] 然后贵豆说4代表着很多API不兼容
[58:11.800 --> 58:13.880] 所以下一个应该是3.10
[58:14.520 --> 58:16.600] 他们不是说4会兼容吗
[58:16.600 --> 58:18.400] 我之前听到是这样的
[58:18.400 --> 58:20.320] CSI会有一部分
[58:20.320 --> 58:22.320] 我当时没明白
[58:22.320 --> 58:23.480] 看见这个邮件的时候我都傻了
[58:23.480 --> 58:25.800] 我觉得有什么好讨论的
[58:25.800 --> 58:26.480] 肯定是3.10
[58:26.480 --> 58:27.560] 你有什么
[58:27.560 --> 58:30.080] 你有什么足够的
[58:30.799 --> 58:34.920] 你有什么足够的那个change能够去命令这个潘森4
[58:34.920 --> 58:35.120] 对
[58:35.120 --> 58:36.720] 我也感觉这个邮件莫名其妙
[58:36.720 --> 58:38.080] 我就看了一下
[58:38.080 --> 58:39.279] 贵豆说
[58:39.720 --> 58:44.000] 但是贵豆说4的那个版本一定要确定一件事情
[58:44.000 --> 58:48.400] 就是那个6这种库一定要是在4的release里面的
[58:48.400 --> 58:50.080] 不应该是一个第三方库
[58:50.080 --> 58:51.000] 什么库
[58:52.040 --> 58:55.759] 6就是帮助你平滑的升级
[58:55.759 --> 58:56.960] 对
[58:56.960 --> 58:58.400] 但我觉得潘森4的话
[58:59.600 --> 59:01.120] 应该到达某个版本的时候
[59:01.120 --> 59:02.440] 就是说大家觉得
[59:03.000 --> 59:04.120] 就是说时机成熟了
[59:04.120 --> 59:06.560] 就是说可能会那个时候会有来
[59:06.560 --> 59:08.840] 就是说整个比如说就是说推动
[59:08.840 --> 59:11.560] 就是说我们要实现哪些feature
[59:11.560 --> 59:13.520] 然后比如说完成这些feature之后
[59:13.840 --> 59:16.240] 我们就正式的进入潘森4
[59:16.240 --> 59:18.480] 因为当时潘森3我看了一个历史的时候
[59:18.480 --> 59:21.600] 好像就是说那个时候相当于是有一个顶层规划
[59:21.880 --> 59:24.480] 就是说我们大概要做这么几件事情
[59:24.480 --> 59:28.240] 做完之后就是说相当于我们就进入潘森3
[59:28.240 --> 59:29.880] 就是说我们为了潘森3做这些事情
[59:29.880 --> 59:31.200] 这个时候相当于是有一个
[59:31.200 --> 59:33.040] 当时是P3K吧
[59:33.040 --> 59:33.840] 对
[59:34.040 --> 59:34.560] 对对
[59:34.560 --> 59:36.560] 我觉得我觉得潘森应该
[59:36.800 --> 59:40.160] 就是说或者他缺乏的一个东西是一个顶层规划
[59:40.160 --> 59:40.880] 就是这种
[59:41.280 --> 59:44.000] 就是一个路线图这种东西
[59:44.000 --> 59:45.600] 5到10年的这种路线图
[59:45.600 --> 59:46.120] 对
[59:46.440 --> 59:47.080] 对对对
[59:47.080 --> 59:49.920] 其实其实就是我当我自己去
[59:49.920 --> 59:51.000] 我以前也不了解
[59:51.000 --> 59:51.560] 嗯
[59:51.560 --> 59:54.280] 就是说可能有的时候感觉有的人在那边喷
[59:54.280 --> 59:55.960] 我就觉得啊有道理有道理
[59:55.960 --> 59:58.320] 你这些为什么不去做这个事情呢
[59:58.560 --> 01:00:00.520] 明明就是说做完之后你有能
[01:00:00.520 --> 01:00:02.440] 就当时觉得就是说你这些core developer
[01:00:02.440 --> 01:00:03.040] 你有这些能力
[01:00:03.040 --> 01:00:04.240] 为什么不去做这些事情
[01:00:04.240 --> 01:00:05.680] 当我后来真的去参与之后
[01:00:05.680 --> 01:00:06.360] 我就发现
[01:00:06.840 --> 01:00:09.640] 这样子的一个松散的一个社区
[01:00:10.160 --> 01:00:11.000] 嗯
[01:00:11.000 --> 01:00:12.200] 我
[01:00:12.440 --> 01:00:16.320] 我觉得就是不是开源项目运行的一个最好的状态
[01:00:16.720 --> 01:00:18.280] 我觉得可能就是说
[01:00:18.400 --> 01:00:21.520] 一个一个就是说开源项目运行的最好状态
[01:00:21.520 --> 01:00:22.440] 在我看来
[01:00:22.440 --> 01:00:24.320] 就是说是有一个
[01:00:24.640 --> 01:00:26.760] 有商业公司去参与
[01:00:26.760 --> 01:00:29.640] 就是说要么就是说像最开始的Docker那样
[01:00:29.640 --> 01:00:29.880] 对吧
[01:00:29.880 --> 01:00:32.440] 有一个就是说公司作为一个主体去维护
[01:00:32.440 --> 01:00:33.560] 然后再加上
[01:00:33.920 --> 01:00:34.920] 就是说
[01:00:36.360 --> 01:00:39.960] 一些开源这些volunteer就是说是来参与
[01:00:40.520 --> 01:00:43.560] 我觉得这样子可能是一个比较好的方式
[01:00:43.560 --> 01:00:45.920] 这样子的话有人就是说被full time
[01:00:45.920 --> 01:00:46.560] 就是说雇佣
[01:00:46.560 --> 01:00:48.080] 就是说去做这件事情
[01:00:48.120 --> 01:00:49.480] 第一时间比较多
[01:00:49.880 --> 01:00:51.520] 而且就是说他的工作就是这个
[01:00:51.520 --> 01:00:55.440] 他会去做更多的这个思考
[01:00:55.720 --> 01:00:58.040] 而不是说纯粹开源这样松散的组织
[01:00:58.040 --> 01:01:03.640] 他可能真的会就是说对于整个的规划可能会有一些的缺乏
[01:01:03.640 --> 01:01:04.720] 只是说看
[01:01:05.560 --> 01:01:09.440] 靠就是说个人来提一些就是说这样子的东西
[01:01:09.880 --> 01:01:11.640] 有的时候人给力一点
[01:01:11.680 --> 01:01:12.480] 人给力一点
[01:01:12.480 --> 01:01:13.920] 那么就是说我以前发展的好一点
[01:01:13.920 --> 01:01:14.640] 那么
[01:01:14.800 --> 01:01:17.600] 万一就是说就是没有人很不幸
[01:01:17.600 --> 01:01:19.800] 就是没有人就是说提出一些好的事
[01:01:19.800 --> 01:01:22.080] 好的东西或者说对我同意
[01:01:22.120 --> 01:01:23.960] 其实像就是说家外里面
[01:01:23.960 --> 01:01:25.680] 比如说像家外里面用的比较多的
[01:01:25.680 --> 01:01:27.360] 翔哥肯定用的那个Grade
[01:01:27.360 --> 01:01:29.880] Grade还有那个Spring
[01:01:30.080 --> 01:01:30.840] Spring
[01:01:30.880 --> 01:01:33.120] 其实后面都是这种大型的东西
[01:01:33.120 --> 01:01:35.800] 都其实是他们都是以商业公司在主导
[01:01:36.280 --> 01:01:36.880] 对
[01:01:38.360 --> 01:01:40.640] 对Spring的话是其实Spring主要
[01:01:40.640 --> 01:01:42.800] 对Spring他就是以公司在那个主导
[01:01:42.800 --> 01:01:43.800] 对Grade也是嘛
[01:01:43.800 --> 01:01:44.240] 对
[01:01:44.280 --> 01:01:47.000] 我觉得也是他也是后面也是商业公司
[01:01:47.040 --> 01:01:47.640] 这样子
[01:01:47.640 --> 01:01:50.240] 对这样子我觉得是不是要好一点
[01:01:50.520 --> 01:01:52.400] 就商业公司也有商业公司的问题
[01:01:52.400 --> 01:01:53.520] 就是其实也
[01:01:53.520 --> 01:01:55.120] 就没有东西是完美的
[01:01:55.120 --> 01:01:56.839] 因为商业公司他可能做出一些行为
[01:01:56.839 --> 01:01:57.920] 然后社区不喜欢
[01:01:57.920 --> 01:01:59.240] 也是有这样的例子
[01:01:59.560 --> 01:02:01.920] 可是你难道社区纯粹的社区
[01:02:01.960 --> 01:02:05.120] 所有的决定都记录能被大多数人所
[01:02:05.120 --> 01:02:06.080] 对我的意思就是说
[01:02:06.080 --> 01:02:08.560] 就是说有利有弊
[01:02:08.720 --> 01:02:12.200] 可能我其实也是认为可能利的那方面要多一点
[01:02:12.200 --> 01:02:12.480] 对
[01:02:13.000 --> 01:02:16.799] 商业公司更可能做出来用户不喜欢的事情
[01:02:16.800 --> 01:02:17.920] 为了自己的利益
[01:02:17.920 --> 01:02:18.600] 对吧
[01:02:18.600 --> 01:02:21.520] 这倒也不一定
[01:02:21.720 --> 01:02:24.480] 因为现在不一定是传统的那种
[01:02:24.480 --> 01:02:25.480] 就商业模式
[01:02:25.480 --> 01:02:27.360] 就是我一定要在这上面赚钱
[01:02:27.480 --> 01:02:29.480] 可能更多的说开源的话
[01:02:29.480 --> 01:02:31.360] 我就是以用户的东西
[01:02:31.360 --> 01:02:33.000] 然后我投入人力来改进
[01:02:33.040 --> 01:02:35.480] 然后我更多的就是说是我的benefit的话
[01:02:35.480 --> 01:02:37.600] 就来自于由他带来的
[01:02:37.600 --> 01:02:39.040] 就是说是reputation
[01:02:39.040 --> 01:02:40.440] 然后来推动我背后的
[01:02:40.440 --> 01:02:42.160] 就是其余的一些商业项目
[01:02:42.280 --> 01:02:44.120] 就比如说像Grade的话
[01:02:44.160 --> 01:02:45.920] 像Grade他就是说是Grade
[01:02:45.920 --> 01:02:47.200] 这个东西是开源的
[01:02:47.200 --> 01:02:49.920] 就是说Java里面就类似于Maven那个构建
[01:02:49.920 --> 01:02:51.480] 它这个东西是开源的
[01:02:51.600 --> 01:02:54.360] 但是它通过开源的东西来推动我后面的
[01:02:54.360 --> 01:02:56.320] 就是Grade Enterprise
[01:02:56.480 --> 01:02:59.080] 就是这一整套的Java的package的方案
[01:02:59.120 --> 01:03:01.000] 这套商业东西
[01:03:01.000 --> 01:03:04.080] 其实我觉得这个东西也是相对成熟的一套
[01:03:04.600 --> 01:03:06.640] 像什么软件这种模式很多
[01:03:06.800 --> 01:03:07.680] 像什么Redis
[01:03:07.680 --> 01:03:08.760] Century好像都是这种
[01:03:08.760 --> 01:03:10.400] 但是语言好像不是很多
[01:03:11.600 --> 01:03:13.520] 但比如说我刚想说Rust
[01:03:13.640 --> 01:03:15.520] 其实就是Mozilla推动的
[01:03:15.520 --> 01:03:19.560] 我觉得他们是不是一个比较理想的模式
[01:03:19.560 --> 01:03:20.800] 像Mozilla他也
[01:03:21.080 --> 01:03:21.920] 那Golda呢
[01:03:21.920 --> 01:03:23.000] 难道Golda不是吗
[01:03:23.000 --> 01:03:24.680] GoldaGoogle太商业了
[01:03:24.680 --> 01:03:27.240] 就是你想Mozilla的reputation
[01:03:27.240 --> 01:03:28.520] 肯定还是比Google好一点
[01:03:28.520 --> 01:03:32.360] 对
[01:03:32.360 --> 01:03:33.720] 而且其实就是说你
[01:03:34.040 --> 01:03:36.360] 你像这种语言这种东西
[01:03:36.360 --> 01:03:37.280] 当你有一个大公司
[01:03:37.280 --> 01:03:38.120] 就是说这个的话
[01:03:38.120 --> 01:03:41.040] 你其实是不是也拥有了一种背书
[01:03:41.040 --> 01:03:41.320] 对吧
[01:03:41.320 --> 01:03:43.040] 当然说背书可能有好有坏
[01:03:43.040 --> 01:03:46.680] 其实我说我觉得就CRJ可能是
[01:03:46.680 --> 01:03:48.840] Python应该学习的一个例子
[01:03:48.840 --> 01:03:49.600] 我一直是这么说
[01:03:49.600 --> 01:03:51.920] 因为CRJ他其实也是没有大公司推动的
[01:03:51.920 --> 01:03:53.600] 但是他有一个
[01:03:54.240 --> 01:03:56.520] 但是他有一个10年规划这种东西
[01:03:56.520 --> 01:03:59.400] 他就是有一个详细的道和
[01:03:59.400 --> 01:04:00.279] 就是说我
[01:04:00.520 --> 01:04:03.720] CRJ发展方向应该是什么样子
[01:04:03.720 --> 01:04:07.200] 比如说他就列举了几个那种类似于guideline一样的东西
[01:04:07.200 --> 01:04:11.960] 就比如说CRJ应该保持zero overhead abstraction
[01:04:11.960 --> 01:04:13.760] 就是零开销抽象
[01:04:13.880 --> 01:04:14.840] 这个是他一直要保持的
[01:04:14.840 --> 01:04:19.080] 然后他要尽可能降低新手学习的bar
[01:04:19.280 --> 01:04:21.080] 然后要怎么样
[01:04:21.080 --> 01:04:22.000] 就有一些这种
[01:04:22.560 --> 01:04:24.640] 就是5到10年这种发展方向
[01:04:24.640 --> 01:04:29.120] 我觉得其实如果Python社区也有这种东西存在
[01:04:29.120 --> 01:04:30.720] 那他即使说
[01:04:30.920 --> 01:04:35.280] 我还是这种松散的依靠个人英雄主义的这样的
[01:04:35.360 --> 01:04:36.360] counter-provision
[01:04:36.360 --> 01:04:39.040] 他可能也会朝着一个更好的方向发展
[01:04:39.040 --> 01:04:42.000] 因为大家就知道说应该朝这个方向去努力
[01:04:42.000 --> 01:04:44.279] 可能他的力量就会更集中一点
[01:04:44.279 --> 01:04:45.759] 我至少我是这样看的
[01:04:45.759 --> 01:04:46.600] 我同意
[01:04:46.600 --> 01:04:48.000] 那现在的方向是什么
[01:04:48.000 --> 01:04:48.840] 现在的方向是什么
[01:04:48.840 --> 01:04:49.560] 加feature吗
[01:04:49.560 --> 01:04:50.759] 现在就是没有方向
[01:04:50.759 --> 01:04:51.560] 现在就是
[01:04:51.560 --> 01:04:53.759] 并且不仅是没有方向
[01:04:53.759 --> 01:04:59.360] 也没有人去试图去创建这些方向
[01:04:59.360 --> 01:05:03.680] 像Guido他应该我感觉就比较认同这种松散模式
[01:05:03.680 --> 01:05:05.960] 可能这是他理想的模式
[01:05:05.960 --> 01:05:09.640] 但是其实我觉得是需要像CRJ那样子
[01:05:09.640 --> 01:05:10.800] 有一种规划
[01:05:10.800 --> 01:05:13.240] 其实Kernel也没有规划
[01:05:13.240 --> 01:05:14.480] Kernel的话
[01:05:15.240 --> 01:05:17.360] Kernel的话没有规划
[01:05:17.720 --> 01:05:20.360] 但是Python这个和Kernel还不一样
[01:05:20.360 --> 01:05:21.680] Kernel他有很多
[01:05:22.760 --> 01:05:25.360] 就是说你像包括Java他也是
[01:05:25.360 --> 01:05:28.400] Java可能说他也他不是有公司投票去决定
[01:05:28.400 --> 01:05:30.440] 好像是Java是这种机制是吧
[01:05:30.760 --> 01:05:33.480] 他有很多公司参与在里面
[01:05:33.480 --> 01:05:36.800] 但是Python他里面没有所谓的公司他会去
[01:05:37.160 --> 01:05:38.720] 决逐一个方向
[01:05:38.720 --> 01:05:42.320] 他真的完全的就是由个人的这种volunteer来组成的
[01:05:43.120 --> 01:05:45.240] 当时决定社区治理模式的时候
[01:05:45.240 --> 01:05:47.360] 是不是有一种是有公司参与的
[01:05:47.360 --> 01:05:47.760] 我记得
[01:05:47.760 --> 01:05:48.320] 对
[01:05:48.320 --> 01:05:48.880] 对
[01:05:48.880 --> 01:05:55.440] 就是禁止同一个公司的两个以上的雇员
[01:05:55.480 --> 01:05:56.920] 成为committee
[01:05:56.920 --> 01:05:58.920] 同一个公司两个以上
[01:05:58.920 --> 01:06:01.440] 像Google这种就很难搞了
[01:06:01.440 --> 01:06:01.760] 对
[01:06:01.760 --> 01:06:03.080] 不允许你只能派人
[01:06:03.080 --> 01:06:07.920] 但是我看到现在好像微软在比较多的介入到Python社区中来
[01:06:08.600 --> 01:06:09.520] 对微软比较多
[01:06:09.520 --> 01:06:10.640] Google其实很少的
[01:06:10.640 --> 01:06:12.480] 因为那个VS Code
[01:06:12.480 --> 01:06:14.520] 对VS Code比较好
[01:06:14.520 --> 01:06:16.000] 好像现在微软那边
[01:06:16.000 --> 01:06:17.960] 西雅图那边收编了很多
[01:06:17.960 --> 01:06:20.560] 就是说是就是Python周边的
[01:06:20.560 --> 01:06:22.080] 比如说Jupiter的
[01:06:22.080 --> 01:06:24.759] 还有其他各种各样的就是开发者了
[01:06:24.759 --> 01:06:25.520] 对
[01:06:25.520 --> 01:06:27.640] 我觉得未来就靠微软和Instagram
[01:06:27.640 --> 01:06:29.720] 哈哈哈哈
[01:06:29.720 --> 01:06:31.319] 可是Instagram说实话
[01:06:31.320 --> 01:06:35.760] 我跟你说Instagram虽然说他们的那些article
[01:06:35.760 --> 01:06:37.760] 包括那些就是说speech都很精彩
[01:06:37.760 --> 01:06:40.680] 可是真的感觉没有往社区
[01:06:40.680 --> 01:06:42.840] 没有看见他们在社区就是说做什么事情
[01:06:42.840 --> 01:06:45.400] 他们好像有一个之前调内存
[01:06:45.400 --> 01:06:47.040] 就是调GC还是调内存
[01:06:47.040 --> 01:06:49.800] 那个是是merge进去了
[01:06:49.800 --> 01:06:50.640] 我记得
[01:06:52.040 --> 01:06:52.400] 是吗
[01:06:52.400 --> 01:06:52.720] 调GC
[01:06:52.720 --> 01:06:55.320] 反正是至少有一个是有一个是merge进去了
[01:06:55.320 --> 01:06:55.920] 是吗
[01:06:55.920 --> 01:06:56.400] 有的
[01:06:56.400 --> 01:06:58.880] 他们给Jungle捐很多钱
[01:06:58.880 --> 01:07:02.000] 我觉得你至少首先得有
[01:07:02.000 --> 01:07:02.560] 就怎么说
[01:07:02.560 --> 01:07:04.560] 就他们会不会做是另一方面
[01:07:04.560 --> 01:07:06.360] 至少这两个公司是最有可能的
[01:07:06.360 --> 01:07:10.000] 就是说从体量或者是从使用情况来看
[01:07:10.000 --> 01:07:11.800] 你像Google就完全不可能了
[01:07:11.800 --> 01:07:12.360] 我觉得
[01:07:12.360 --> 01:07:15.320] 我觉得反正是Python任重道远
[01:07:15.320 --> 01:07:16.240] 来吧
[01:07:16.240 --> 01:07:19.080] 要不然开始进入我们今天的推荐库的环节
[01:07:19.080 --> 01:07:22.080] 我就推荐一个
[01:07:22.080 --> 01:07:22.960] 就是说也不是推荐
[01:07:22.960 --> 01:07:24.200] 大家可以看一下
[01:07:24.200 --> 01:07:26.760] 就是一个叫做Ptrace的一个
[01:07:26.760 --> 01:07:30.800] Python Ptrace这样子的一个库是Victor他应该是写的
[01:07:30.800 --> 01:07:34.040] 然后目前可能也不怎么就是说
[01:07:34.040 --> 01:07:35.160] 经常维护了
[01:07:35.160 --> 01:07:36.960] 但是我觉得这个库还是挺有意思的
[01:07:36.960 --> 01:07:37.760] 他是
[01:07:38.360 --> 01:07:41.160] 他是自己去封装了就是那个
[01:07:41.160 --> 01:07:43.200] Ptrace这个系统调用
[01:07:43.200 --> 01:07:44.440] 然后他
[01:07:44.840 --> 01:07:48.600] 模拟了一个简单版的一个就是
[01:07:49.440 --> 01:07:50.480] GDB
[01:07:50.480 --> 01:07:54.040] 你可以用他那个库相当于类似GDB去attach进程
[01:07:54.040 --> 01:07:55.240] 然后去看
[01:07:55.240 --> 01:07:57.839] 比如说现在在就是说运行到什么地方
[01:07:57.839 --> 01:07:58.399] 现在能站
[01:07:58.399 --> 01:07:59.279] 包括你的基础
[01:07:59.279 --> 01:08:00.839] 那个就是汇编指令什么的
[01:08:00.839 --> 01:08:02.279] 你都可以去做
[01:08:02.279 --> 01:08:03.399] 当然肯定没有GDB强大
[01:08:03.399 --> 01:08:06.319] 但是他是纯粹的就是说用Python去
[01:08:06.319 --> 01:08:10.839] 但加一点点的C去写了这样子的一个东西
[01:08:10.839 --> 01:08:13.120] 我觉得这个还比较的好
[01:08:13.120 --> 01:08:14.720] 因为我目前打算就是我
[01:08:14.720 --> 01:08:16.040] 我就是说
[01:08:16.880 --> 01:08:18.040] 如果解释器不支持
[01:08:18.040 --> 01:08:19.719] 那么我首先就想的是
[01:08:20.200 --> 01:08:21.359] 能够去先剥离
[01:08:21.359 --> 01:08:25.359] 就是说调试的过程当中是对于GDB的依赖
[01:08:25.359 --> 01:08:26.399] 对于GDB的依赖
[01:08:26.399 --> 01:08:26.639] 对
[01:08:26.639 --> 01:08:30.960] 那么如果说那像他这个库其实就可以去做到
[01:08:30.960 --> 01:08:32.839] 剥离对GDB的依赖
[01:08:32.839 --> 01:08:34.839] 但是说他这个库很多东西还没有
[01:08:34.839 --> 01:08:37.120] 比如说你那个attach的功能他还没有
[01:08:37.120 --> 01:08:38.759] 因为你attach你需要去
[01:08:38.759 --> 01:08:43.200] 开启一个去在那个Python解释器里面去执行一些code
[01:08:43.200 --> 01:08:45.200] 这个东西还没有
[01:08:45.200 --> 01:08:46.519] 如果有了这个东西
[01:08:46.960 --> 01:08:48.599] 然后你就可以相当于
[01:08:48.600 --> 01:08:50.920] 把这个作为一些底座
[01:08:51.280 --> 01:08:54.440] 然后就是说然后再去加一些帮助库
[01:08:54.440 --> 01:08:56.880] 就是说去获取进程获取内存
[01:08:57.080 --> 01:08:58.480] 获取那些的一些帮助库
[01:08:58.480 --> 01:09:00.680] 这样子的话你就可以做成一个
[01:09:00.680 --> 01:09:03.240] 就是说你平常调试的一个suit
[01:09:04.720 --> 01:09:05.520] 这个可以这样
[01:09:05.520 --> 01:09:06.240] 而且是
[01:09:07.360 --> 01:09:09.480] 就是当然说不是跨平台
[01:09:09.600 --> 01:09:12.680] Windows上可能都没有Ptrace的一个系统的调用
[01:09:12.680 --> 01:09:16.800] 但就是说至少可以把对于GDB的依赖给剥掉了
[01:09:16.800 --> 01:09:19.880] 我觉得我还是比较我可以推荐这个库
[01:09:20.640 --> 01:09:21.840] 对而且这种做好了
[01:09:21.840 --> 01:09:25.480] 说不定就是他可以用就是由PSF来维护
[01:09:25.480 --> 01:09:27.040] 放到PSF那个repo里面
[01:09:27.040 --> 01:09:28.640] 成为一个半官方的这种
[01:09:29.400 --> 01:09:30.600] 这种工具也是有可能
[01:09:31.600 --> 01:09:33.560] 其实不光跟Python有关
[01:09:33.600 --> 01:09:36.160] 你可以用Ptrace的attach和其他进程
[01:09:36.160 --> 01:09:37.560] 对就是说这个不是
[01:09:37.560 --> 01:09:38.680] 它就相当于模拟ATTP
[01:09:38.680 --> 01:09:39.840] 它不是说只能跟
[01:09:40.200 --> 01:09:42.640] 只能去就是说debugpython的进程
[01:09:42.640 --> 01:09:43.960] 你可以debug任意的进程
[01:09:43.960 --> 01:09:45.680] 但是就是说目前我们就是说python
[01:09:45.680 --> 01:09:47.800] 就是说因为对吧
[01:09:48.280 --> 01:09:50.520] 它其实就是起到了玻璃GDB的
[01:09:50.920 --> 01:09:52.520] 玻璃GDB依赖的一个作用
[01:09:52.520 --> 01:09:53.320] OK
[01:09:53.720 --> 01:09:56.520] 嗯我觉得这也是应该是一个比较正确的方向
[01:09:56.520 --> 01:09:58.040] 嗯好的
[01:09:58.040 --> 01:09:59.800] 那你们其他人的推荐呢
[01:10:00.320 --> 01:10:03.800] 我来给大家推荐一个Linux的发行版
[01:10:03.800 --> 01:10:05.320] 叫LFS
[01:10:05.320 --> 01:10:07.000] Linux from scratch
[01:10:07.320 --> 01:10:09.160] 就是这个发行版没有
[01:10:09.200 --> 01:10:11.000] 没有ISO可以下载到
[01:10:11.000 --> 01:10:13.800] 基本上就是只有一个网站
[01:10:13.800 --> 01:10:16.360] 然后它会教你下载原代码
[01:10:16.360 --> 01:10:18.240] 就是从头编译出来一个Linux
[01:10:18.840 --> 01:10:23.160] 就是对了解Linux运行是比较有帮助的
[01:10:23.160 --> 01:10:26.160] 但是你也可以选择继续打磨这个发行版
[01:10:26.160 --> 01:10:28.680] 把它变成你日常工作用的Linux
[01:10:29.160 --> 01:10:31.040] 就是它会先让你
[01:10:31.040 --> 01:10:33.240] 先教你怎么编译一个工具链
[01:10:33.240 --> 01:10:35.360] 就是下载它的原代码
[01:10:35.360 --> 01:10:38.480] 然后编译C++编译GCC
[01:10:38.520 --> 01:10:40.880] 然后C++是依赖Glibc
[01:10:40.880 --> 01:10:43.800] 然后Libc又需要用GCC编译
[01:10:43.800 --> 01:10:45.880] 但是GCC其实又是依赖Libc的
[01:10:45.880 --> 01:10:47.160] 它会去
[01:10:47.840 --> 01:10:49.640] 反正你编译下来就会发现
[01:10:49.640 --> 01:10:51.960] 它其实解决了很多这样的循环依赖问题
[01:10:51.960 --> 01:10:53.760] 就是它会先编译GCC
[01:10:53.760 --> 01:10:55.160] 然后编译Libc
[01:10:55.160 --> 01:10:56.760] 然后再编译一个
[01:10:56.760 --> 01:10:59.040] STD++那个库
[01:10:59.040 --> 01:11:02.040] 然后再用编译好的这个库再编译GCC
[01:11:02.040 --> 01:11:06.240] 然后再编译支持C++的那个GCC
[01:11:06.600 --> 01:11:09.640] 然后把整个工具链都准备完毕之后
[01:11:09.640 --> 01:11:11.520] 再称之Root换到这个工具链
[01:11:11.520 --> 01:11:13.680] 全部用你自己编译好的这些命令
[01:11:13.680 --> 01:11:15.160] 然后再从头
[01:11:15.160 --> 01:11:20.000] 在一个新的分区里面编译GCC这些东西
[01:11:20.000 --> 01:11:21.360] 最后编译Kernel
[01:11:21.360 --> 01:11:25.560] 然后用GRUB引导起来你这个系统
[01:11:25.560 --> 01:11:26.880] 最后就可以启动了
[01:11:29.200 --> 01:11:29.760] 就是这么一个
[01:11:29.760 --> 01:11:31.720] 你是完整的走了这样一个过程了
[01:11:31.720 --> 01:11:34.240] 对大约花了50个小时吧
[01:11:34.240 --> 01:11:35.120] 就是
[01:11:36.840 --> 01:11:37.760] 它是这样
[01:11:37.760 --> 01:11:40.400] 它评估因为每个机器的性能不一样
[01:11:40.560 --> 01:11:44.280] 所以它评估你的编译时间的单位是SUB
[01:11:44.280 --> 01:11:46.360] 就是因为你第一个要编译的东西叫
[01:11:46.360 --> 01:11:47.480] 编译Utils
[01:11:47.480 --> 01:11:50.960] 就是工具店里面的编译Utils
[01:11:50.960 --> 01:11:55.800] 编译Utils的时间是一个编译单位
[01:11:55.800 --> 01:11:57.720] 后面都以这个编译单位
[01:11:57.720 --> 01:11:59.400] 最长的一个是
[01:11:59.400 --> 01:12:02.920] 我的一个单位等于大概是三分钟
[01:12:02.920 --> 01:12:04.800] 然后最长的一个是GCC
[01:12:04.800 --> 01:12:07.120] GCC带测试版本的
[01:12:07.120 --> 01:12:09.040] 因为make check要经过很长的时间
[01:12:09.040 --> 01:12:11.080] 是94个编译单位
[01:12:11.080 --> 01:12:13.440] 当时好像花了一个下午
[01:12:13.440 --> 01:12:16.200] 然后中间
[01:12:17.480 --> 01:12:19.360] 中间我的代理有点问题
[01:12:19.519 --> 01:12:21.960] 我连SSH连本地竟然也走了代理
[01:12:21.960 --> 01:12:22.880] 我重启了一下代理
[01:12:22.880 --> 01:12:24.160] SSH是断了
[01:12:24.160 --> 01:12:26.000] 然后编译就断了
[01:12:26.000 --> 01:12:27.840] 我又重新花了一个下午编译了
[01:12:29.080 --> 01:12:32.599] 所以它这个发行板主要是一个学习的
[01:12:32.599 --> 01:12:33.400] 这样一个功能
[01:12:34.240 --> 01:12:35.720] 有三个功能
[01:12:35.720 --> 01:12:37.640] 大部分人都是为了学习
[01:12:37.640 --> 01:12:38.640] 编译完就扔了
[01:12:38.640 --> 01:12:40.280] 因为你的学习目的达到了
[01:12:40.280 --> 01:12:43.320] 第二个就是你想打造一个自己的发行板
[01:12:43.320 --> 01:12:46.240] 就像Fedora那样的发行板
[01:12:46.240 --> 01:12:47.440] 你可以自己打造一个
[01:12:47.440 --> 01:12:49.880] 然后你自己搞一个包管理工具
[01:12:49.880 --> 01:12:51.480] 然后你去作为自己的发行板
[01:12:51.480 --> 01:12:53.800] 你就可以从LFS开始
[01:12:53.800 --> 01:12:55.240] 它是一个很好的文档
[01:12:55.240 --> 01:12:58.200] 然后第三个的话就是做一个
[01:12:59.600 --> 01:13:01.000] 打造你自己的Linux
[01:13:01.000 --> 01:13:02.360] 你可以从里面学习一下
[01:13:02.360 --> 01:13:04.000] 它除了有LFS
[01:13:04.000 --> 01:13:07.480] 还有很多周边叫BFS叫Beyond Linux From Scratch
[01:13:07.480 --> 01:13:09.000] 有很多更多的资料
[01:13:09.000 --> 01:13:10.080] 然后有一些论坛
[01:13:10.080 --> 01:13:11.880] 大家可以在上面讨论一些
[01:13:11.880 --> 01:13:14.240] 搞自己Linux的一些问题
[01:13:14.880 --> 01:13:17.400] 因为后面你这个Linux布置起来
[01:13:17.400 --> 01:13:19.000] 你要配置网络
[01:13:19.000 --> 01:13:21.200] 配置桌面系统
[01:13:21.200 --> 01:13:23.800] 这些东西要经过很多问题的
[01:13:24.400 --> 01:13:25.480] 好的明白
[01:13:25.760 --> 01:13:26.960] 那接下来我来推荐一下
[01:13:26.960 --> 01:13:29.560] 我推荐一个库叫
[01:13:29.560 --> 01:13:32.280] 是一个Python的库叫做Executing
[01:13:32.280 --> 01:13:38.040] 执行的现在进行式Executing
[01:13:38.040 --> 01:13:42.800] 然后这个库是我现在做Cyberbrain在用的
[01:13:42.800 --> 01:13:45.480] 然后它的作者其实就是那种
[01:13:45.480 --> 01:13:47.400] 我之前提到的
[01:13:47.400 --> 01:13:49.519] 对于Python调试这个领域
[01:13:49.519 --> 01:13:52.280] 当然它是针对的就是代码执行流程调试
[01:13:52.280 --> 01:13:53.559] 不是说内存这方面
[01:13:53.559 --> 01:13:56.880] 就对Python调试这方面非常感兴趣的一个人
[01:13:56.880 --> 01:13:57.840] 然后他现在
[01:13:57.840 --> 01:14:00.360] 他可以说是一个人
[01:14:00.360 --> 01:14:03.080] 基本上创建了一个那种
[01:14:03.080 --> 01:14:05.440] 类似于小的生态的这种感觉
[01:14:05.559 --> 01:14:06.839] 就是他有很多库
[01:14:06.839 --> 01:14:09.200] 然后分别能够去
[01:14:09.759 --> 01:14:11.639] 就精确的获得一些
[01:14:11.639 --> 01:14:14.240] Python代码执行过程中的一些信息
[01:14:14.240 --> 01:14:16.160] 然后他又把这些库组合起来
[01:14:16.160 --> 01:14:17.599] 然后实现一些更强大的功能
[01:14:17.599 --> 01:14:19.639] 那Executing这个库
[01:14:19.639 --> 01:14:22.880] 其实就是他的这些基础组件中的一个
[01:14:22.880 --> 01:14:24.240] 那么它实现的作用
[01:14:24.240 --> 01:14:26.880] 就是说它能够帮你找到你的
[01:14:26.880 --> 01:14:29.400] Python代码现在执行到哪里了
[01:14:29.400 --> 01:14:33.480] 就像你比如说你通过你的一个
[01:14:33.480 --> 01:14:36.000] 就是SetTrace拿到一个Python的frame
[01:14:36.000 --> 01:14:37.400] 然后你拿到这个frame
[01:14:37.400 --> 01:14:39.799] 你怎么知道现在Python执行到哪行代码
[01:14:39.799 --> 01:14:40.759] 哪个函数了
[01:14:40.759 --> 01:14:42.719] 其实你是不知道的
[01:14:42.719 --> 01:14:44.879] 就或者说你没有办法通过一个非常
[01:14:44.879 --> 01:14:46.240] 简单的手段知道
[01:14:46.240 --> 01:14:49.200] 然后你可能要通过自己去计算一些
[01:14:49.200 --> 01:14:51.879] 比如说那个Bitcode的offset
[01:14:51.879 --> 01:14:53.559] 然后来才能知道
[01:14:53.559 --> 01:14:56.519] 就是它Python代码实际上执行到哪
[01:14:56.519 --> 01:14:59.040] 然后但是他就把这些东西全都给你做了
[01:14:59.040 --> 01:15:01.440] 并且考虑到了非常多的edge case
[01:15:01.440 --> 01:15:02.280] 比如说PyPy
[01:15:02.280 --> 01:15:06.080] 然后iPython讲的一些情况
[01:15:06.080 --> 01:15:08.320] 然后就相当于你很容易的
[01:15:08.320 --> 01:15:09.600] 你给他一个frame
[01:15:09.600 --> 01:15:12.400] 你就知道你的代码现在执行到哪了
[01:15:12.400 --> 01:15:15.880] 就是对于如果你想去基于
[01:15:15.880 --> 01:15:18.080] 就是做一些Python调试方面的工具
[01:15:18.080 --> 01:15:19.840] 我觉得这个库非常有用
[01:15:19.840 --> 01:15:22.240] 然后他还有很多就别的特别有用的库
[01:15:22.240 --> 01:15:23.440] 但是我就先推荐这个
[01:15:23.440 --> 01:15:27.800] 它是根据frame里面的file name跟line number吗
[01:15:27.800 --> 01:15:30.200] line number
[01:15:30.200 --> 01:15:31.720] 然后frame的offset
[01:15:31.720 --> 01:15:33.920] 就是frame里面
[01:15:33.920 --> 01:15:36.000] 他有一些这种信息
[01:15:36.000 --> 01:15:37.800] 但是它的整合的不是特别好
[01:15:37.800 --> 01:15:40.000] 就是相当于给你对应到原码去
[01:15:40.000 --> 01:15:41.280] 对
[01:15:41.280 --> 01:15:42.400] 他会给你对应到原码
[01:15:42.400 --> 01:15:42.800] 对
[01:15:42.800 --> 01:15:44.120] OK
[01:15:44.120 --> 01:15:45.640] 然后我这边的话
[01:15:45.640 --> 01:15:48.400] 然后我推荐两个东西
[01:15:48.400 --> 01:15:49.960] 然后我推荐是一个叫做
[01:15:49.960 --> 01:15:50.800] Apache
[01:15:50.800 --> 01:15:54.600] 那个common下面的一个VFS的一个package
[01:15:54.600 --> 01:15:55.720] 这个package的话
[01:15:55.720 --> 01:15:59.200] 他将就是说是你就是说是不同的操作系统
[01:15:59.200 --> 01:16:03.400] 文件操作相关的东西给整合在一起了
[01:16:03.400 --> 01:16:05.600] 然后的话就你要去
[01:16:05.600 --> 01:16:08.200] 比如说是去监听文件
[01:16:08.200 --> 01:16:10.720] 去就是说是监听一些文件上面的事件
[01:16:10.720 --> 01:16:12.560] 或者说各种各样的东西
[01:16:12.560 --> 01:16:13.880] 你不需要去考虑
[01:16:13.880 --> 01:16:16.480] 就是说具体操作系统上面的就是差异
[01:16:16.480 --> 01:16:18.720] 他在就是可以说是在加瓦的OS上面
[01:16:18.720 --> 01:16:19.920] 又给你额外封中了一层
[01:16:19.920 --> 01:16:23.000] 然后对于的就是应用性上是更好的
[01:16:23.000 --> 01:16:24.760] 然后很多库都在使用
[01:16:24.760 --> 01:16:28.240] 第二个的话是推荐我们组之前做的一个工作
[01:16:28.240 --> 01:16:31.760] 就是说我们组的话就说是之前是负责
[01:16:31.760 --> 01:16:35.760] 恶魔这边的服务发现与注册中心这一块的东西
[01:16:35.760 --> 01:16:37.520] 然后我们组服务叫hasca
[01:16:37.520 --> 01:16:39.040] 然后对他就是python写的
[01:16:39.040 --> 01:16:40.800] 虽然我们现在还是python2
[01:16:40.800 --> 01:16:41.920] 然后的话对
[01:16:41.920 --> 01:16:45.920] 然后但是的话我们现在整体的就说是完整版的codebase
[01:16:45.920 --> 01:16:49.640] 是已经就除去了一些敏感信息以外的东西
[01:16:49.640 --> 01:16:52.600] 和恶魔线上使用的是完整的一套的
[01:16:52.600 --> 01:16:55.240] 然后所以说这一方面经过大规模考验的东西
[01:16:55.240 --> 01:16:57.920] 大家有兴趣也可以去来就是说使用一下
[01:16:59.160 --> 01:17:01.120] 行
[01:17:01.120 --> 01:17:03.680] 那然后我们最后问一下
[01:17:03.680 --> 01:17:06.320] 祥哥你有没有什么还想跟大家说的
[01:17:06.320 --> 01:17:09.240] 对我们其实有就是之前也问过一些嘉宾
[01:17:09.240 --> 01:17:11.920] 就是对于一些程序员的建议了
[01:17:11.920 --> 01:17:13.920] 尤其是就是新手的程序员
[01:17:13.920 --> 01:17:15.520] 然后你要不要也聊一下
[01:17:15.840 --> 01:17:17.680] 就稍微给一些建议之类的
[01:17:18.160 --> 01:17:21.800] 我觉得就是多看看呗
[01:17:21.800 --> 01:17:23.360] 还能怎么办
[01:17:23.360 --> 01:17:24.400] 对吧
[01:17:24.400 --> 01:17:25.600] 如果
[01:17:26.240 --> 01:17:30.440] 对于工作方面就是你只要觉得就是说你能接受
[01:17:30.440 --> 01:17:30.880] 对吧
[01:17:30.880 --> 01:17:34.000] 那就和你的这个期望
[01:17:34.000 --> 01:17:36.160] 就是说无论是说
[01:17:36.680 --> 01:17:39.440] 996啊还是说什么这种方面啊
[01:17:40.000 --> 01:17:41.200] 你只要觉得能接受
[01:17:41.200 --> 01:17:42.520] 或者说觉得你
[01:17:42.520 --> 01:17:45.720] 就是说这是你人生规划中的
[01:17:45.720 --> 01:17:48.200] 就是说可能需要经历的东西
[01:17:48.200 --> 01:17:49.880] 那就都行呗
[01:17:49.880 --> 01:17:51.280] 技术方面就是多看看
[01:17:51.280 --> 01:17:53.400] 多看看书多看看代码多写点代码
[01:17:53.840 --> 01:17:54.800] 其他也没有什么
[01:17:55.040 --> 01:17:55.519] 对
[01:17:55.519 --> 01:17:57.679] 对对对当然对
[01:17:57.920 --> 01:17:58.440] 对对对
[01:17:58.440 --> 01:18:00.519] 所以就是这个我还是比较菜的
[01:18:00.519 --> 01:18:03.160] 不要大家听完之后不要喷我好吧
[01:18:03.160 --> 01:18:06.440] 这个这句话一定要那个剪切进去
[01:18:07.320 --> 01:18:14.719] 我们我们到现在好像没有收到过任何就是关于我们内容的技术性的错误
[01:18:14.719 --> 01:18:17.960] 虽然我也想听一些技术性的错误指出来
[01:18:17.960 --> 01:18:22.360] 但好像没有像董老师之前有给我们反馈过
[01:18:22.360 --> 01:18:22.680] 对
[01:18:22.680 --> 01:18:26.240] 我觉得是我之前我是每一期都听
[01:18:26.240 --> 01:18:28.680] 其实我更多的时候就是说我倒不是说
[01:18:28.680 --> 01:18:31.040] 我觉得听这个是一个很放松的一个事情
[01:18:31.040 --> 01:18:31.960] 因为有的时候上班嘛
[01:18:31.960 --> 01:18:32.240] 对吧
[01:18:32.240 --> 01:18:34.160] 有的时候比如说发了新的我会听的话
[01:18:34.160 --> 01:18:37.080] 就是说我觉得这是一个很放松的事情
[01:18:37.080 --> 01:18:39.520] 可能也不是因为我跟大家都认识嘛
[01:18:39.520 --> 01:18:41.120] 有的时候就觉得今天
[01:18:41.560 --> 01:18:44.040] 我就聊的东西也比较有趣
[01:18:44.040 --> 01:18:45.080] 那这样子的话
[01:18:45.520 --> 01:18:46.280] 也不用说什么
[01:18:46.280 --> 01:18:48.320] 其实有一些小的技术性错误
[01:18:48.320 --> 01:18:50.559] 我觉得也没有什么特别大的关系
[01:18:50.560 --> 01:19:18.400] 好的感谢收看
