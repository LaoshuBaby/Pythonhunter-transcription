[00:00.000 --> 00:13.120] 各位听众朋友们大家好
[00:13.120 --> 00:16.320] 这一期我们请到了丁来聊一聊WIM
[00:16.320 --> 00:17.920] 丁是一个WIM用户
[00:17.920 --> 00:20.120] 也是一个WIM插件的作者
[00:20.120 --> 00:21.840] 我们来先自我介绍一下
[00:21.840 --> 00:22.720] 丁
[00:22.720 --> 00:23.560] 大家好
[00:23.560 --> 00:26.400] 我真名叫丁义
[00:26.400 --> 00:28.640] 之前是在阿里巴巴工作的
[00:28.640 --> 00:33.920] 然后因为工作原因用WIM比较
[00:33.920 --> 00:36.200] 其实现在是比较少了
[00:36.200 --> 00:37.520] 之前是比较多的
[00:37.520 --> 00:43.160] 然后自己写了一个叫control sf的一个插件
[00:43.160 --> 00:45.120] 然后我们这一期录制的嘉宾
[00:45.120 --> 00:48.560] 还有like9m和Adam打个招呼
[00:48.560 --> 00:49.280] 大家好
[00:49.280 --> 00:50.040] 我是Adam
[00:50.040 --> 00:51.000] 大家好
[00:51.000 --> 00:53.080] 我们先聊一下
[00:53.080 --> 00:57.360] 我们现在几个人用WIM分别是什么状态
[00:57.360 --> 01:01.519] 然后用WIM感觉自己掌握在什么阶段
[01:01.519 --> 01:04.440] 要不我先聊
[01:04.440 --> 01:05.120] 好的
[01:05.120 --> 01:10.800] 我现在编辑器可能因为工作上主要用的是java
[01:10.800 --> 01:14.360] 所以可能现在使用IDE的比较多
[01:14.360 --> 01:18.160] 不过在处理一些像json文件
[01:18.160 --> 01:19.440] xml配置
[01:19.440 --> 01:22.240] 或者是可能有时候需要
[01:22.240 --> 01:25.800] 反编一下架包之类的时候会用到WIM
[01:25.800 --> 01:28.360] 我目前大概是这个状态
[01:28.360 --> 01:31.320] 其实我在工作里面也是用java
[01:31.320 --> 01:32.560] 所以我跟你差不多
[01:32.560 --> 01:35.840] 其实我也是用IDE写java
[01:35.840 --> 01:39.479] 然后其他的其他所有文件都是用WIM的
[01:39.479 --> 01:41.479] 比如说python
[01:41.479 --> 01:43.080] 还有一些乱七八糟的东西
[01:43.080 --> 01:46.360] 然后比如说在命令行敲比较长的命令
[01:46.360 --> 01:47.640] 我也会打开WIM来敲
[01:47.640 --> 01:52.240] 因为你那个control x control y不是能打开编辑器来编辑
[01:52.240 --> 01:53.240] 是要命令吗
[01:53.240 --> 01:57.720] 然后一些SQL的客户端
[01:57.720 --> 02:03.360] 比如说mycln也可以支持用control x control y打开编辑器
[02:03.360 --> 02:04.160] 写完SQL
[02:04.160 --> 02:05.280] 然后你退出WIM
[02:05.280 --> 02:09.919] 他就给你直接就跟用WIM写git commit一样
[02:09.919 --> 02:14.240] 其实WIM还有蛮多插件就支持在编辑器里面
[02:14.240 --> 02:16.640] 直接打开terminal的功能
[02:16.640 --> 02:18.480] 就是运行terminal命令
[02:18.480 --> 02:20.480] 但是我用tmax
[02:20.480 --> 02:23.399] 所以我有很多个terminal
[02:23.399 --> 02:25.200] 所以一般不在WIM里面用terminal
[02:25.200 --> 02:27.600] 那我说一下吧
[02:27.600 --> 02:33.839] 就是我感觉我已经不记得上一次直接用WIM是什么时候了
[02:33.839 --> 02:36.519] 可能编辑一次
[02:36.519 --> 02:41.440] 可能就是那种要直接编辑一个文件的时候
[02:41.440 --> 02:44.440] 然后你又是在服务器上还是会用
[02:44.440 --> 02:45.920] 但是我平时写代码
[02:45.920 --> 02:49.839] 就是不论是什么编辑器都会用WIM key binding
[02:49.840 --> 02:53.440] 所以就是说我虽然没有直接用WIM这个软件
[02:53.440 --> 02:56.840] 但是是在用WIM的各种快捷键
[02:56.840 --> 02:57.920] 对
[02:57.920 --> 03:00.920] 然后其实你们之前说用IDEA
[03:00.920 --> 03:03.840] 我感觉应该也是有WIM key binding的
[03:03.840 --> 03:05.960] 所以其实对吧
[03:05.960 --> 03:07.600] 也不能说完全就没有在用WIM
[03:07.600 --> 03:08.640] 我感觉
[03:08.640 --> 03:09.920] 这个倒是承认了
[03:09.920 --> 03:13.520] 我也我每次下载完IDEA的时候
[03:13.520 --> 03:16.040] 都得第1个下载插件就是WIM mode
[03:16.040 --> 03:16.320] 对啊
[03:16.320 --> 03:17.040] 我也是啊
[03:17.040 --> 03:17.360] 对
[03:17.360 --> 03:19.200] 我这边比较类似吧
[03:19.200 --> 03:21.839] 就是其实如果是工作中写一些生产代码
[03:21.839 --> 03:23.600] 因为最近在写golang嘛
[03:23.600 --> 03:23.799] 对
[03:23.799 --> 03:26.000] 其实我在用golang
[03:26.000 --> 03:29.200] 然后可能写python的时候
[03:29.200 --> 03:31.399] 在之前如果是很大的python项目
[03:31.399 --> 03:32.640] 可能会用pycharm
[03:32.640 --> 03:32.920] 对
[03:32.920 --> 03:35.560] 然后如果小的就会直接选择VSCode
[03:35.560 --> 03:38.359] 但是都要去配WIM key binding
[03:38.359 --> 03:41.160] 然后我刚才看了一下我在
[03:41.160 --> 03:42.799] 我本机上的terminal
[03:42.799 --> 03:45.959] 看了一下我上次用WIM是在干嘛
[03:45.959 --> 03:49.120] 我发现就是除了我在写生产代码
[03:49.120 --> 03:51.240] 其实在其他的时候
[03:51.240 --> 03:53.920] 做任何这种文本编辑的
[03:53.920 --> 03:55.440] 可能都是在用WIM吧
[03:55.440 --> 03:57.480] 比如说写一些配置呀
[03:57.480 --> 03:57.920] 对
[03:57.920 --> 04:00.560] 或者是看log呀
[04:00.560 --> 04:05.320] 然后还有一些有的时候会直接去打开一些go
[04:05.320 --> 04:06.960] 或python的一些本地文件
[04:06.960 --> 04:10.440] 可能都会还是倾向于在terminal里直接用WIM吧
[04:10.440 --> 04:11.760] 不过有一点不太一样的
[04:11.760 --> 04:14.160] 我和like.jm不太一样的就是
[04:14.160 --> 04:17.240] 自从VSCode出了VSCode remote之后
[04:17.240 --> 04:19.600] 我可能远程的这种编辑
[04:19.600 --> 04:22.200] 我更喜欢用VSCode remote
[04:22.200 --> 04:22.400] 对
[04:22.400 --> 04:24.520] 因为本地的这种食言
[04:24.520 --> 04:27.200] 你就会感受不到这种网络食言
[04:27.200 --> 04:27.440] 对
[04:27.440 --> 04:29.200] 可能会顺畅一些
[04:29.200 --> 04:32.800] 那你的意思是直接在VSCode里操作
[04:32.800 --> 04:35.520] 那个就terminal的一些命令吗
[04:35.520 --> 04:36.080] 还是
[04:36.080 --> 04:37.160] 不是不是
[04:37.160 --> 04:43.080] 只是说远程的去编辑我服务器上的一些文本文件之类的
[04:43.080 --> 04:43.320] 对
[04:43.320 --> 04:46.560] 因为这种你就是打开跟保存的时候
[04:46.560 --> 04:47.680] 才有网络进去
[04:47.680 --> 04:50.000] 不像SSH每个字符都要等
[04:50.000 --> 04:52.360] 如果你的网络状态不好之类的
[04:52.360 --> 04:54.040] 你可能输一个字符卡一下
[04:54.040 --> 04:57.160] 或者是你的命令就会有一种卡顿感
[04:57.160 --> 04:59.040] 你一通敲完键盘
[04:59.040 --> 05:00.880] 然后慢慢的屏幕显示出来
[05:00.880 --> 05:02.360] 等半天
[05:02.360 --> 05:04.240] 没用过VSCode remote
[05:04.240 --> 05:05.520] 应该尝试一下
[05:05.520 --> 05:05.760] 对
[05:05.760 --> 05:06.720] 还是挺方便的
[05:06.720 --> 05:09.760] 但是你想如果有一个公司有很多跳板机的话
[05:09.760 --> 05:12.480] 腾升跳板机才能登陆到生产服务器
[05:12.480 --> 05:13.520] 这个就用不了了
[05:13.520 --> 05:15.920] 我确实有遇到过这种问题
[05:15.920 --> 05:18.080] 就是有的公司他选择的是
[05:18.080 --> 05:22.200] 比如说是跳板机可以转发你的那个SSHK
[05:22.200 --> 05:24.360] 对你可以直接转发过去
[05:24.360 --> 05:26.000] 其实还是可以用的
[05:26.000 --> 05:29.000] 但是有一些公司会选择一些
[05:30.360 --> 05:31.200] 这样还是可以
[05:31.200 --> 05:33.120] 开源的库叫Job server
[05:33.120 --> 05:33.360] 对
[05:33.360 --> 05:37.120] 他其实可以帮助一些公司去管理这种堡垒机
[05:37.120 --> 05:40.920] 但是他就完全屏蔽了这个SSH的转发功能
[05:40.920 --> 05:44.600] 所以你确实是用不了这个VSCode remote
[05:44.600 --> 05:46.600] 那Wim有这种remote是吗
[05:49.800 --> 05:53.000] 听起来原理上面来说应该可以实现了
[05:53.000 --> 05:56.680] 不过我还真不知道有没有这样的差别
[05:56.680 --> 06:01.400] 你就基于SSH协议把一个文件给下载上传就可以了
[06:01.400 --> 06:03.200] 其实就相当于本地编辑完
[06:03.200 --> 06:08.000] 然后再把那个文件通过SSH保存到原创
[06:08.000 --> 06:09.680] 可能是不是如果加这样一个功能
[06:09.680 --> 06:14.240] 他需要就是在Wim本身那边做一些修改
[06:14.240 --> 06:18.200] 比如说要暴露一些东西之类的才能做到
[06:18.200 --> 06:22.320] 然后是不是就不是某一个插件能完成了
[06:22.320 --> 06:23.600] 我也不是很清楚
[06:23.600 --> 06:27.400] 我感觉如果最简单的实现方式的话
[06:27.400 --> 06:31.040] 就是比如说有一个叫Wim remote的插件
[06:31.040 --> 06:35.400] 他会你在比如说通过命令
[06:35.400 --> 06:39.200] 通过SSH协议登录到远端的一个服务器
[06:39.200 --> 06:42.520] 然后在他本地打开他本地的一个文件的时候
[06:42.520 --> 06:45.640] 把那个文件的内容通过SSH
[06:45.640 --> 06:49.200] 通过Tornell就传到了本地
[06:49.200 --> 06:51.359] 然后编辑整个发生在本地
[06:51.359 --> 06:53.240] 然后编辑完保存的时刻
[06:53.240 --> 06:57.440] 然后再把这个就通过Tornell
[06:57.440 --> 06:58.840] 然后再传到原创
[06:58.840 --> 07:00.640] 我感觉应该是可以实现的
[07:00.640 --> 07:03.039] 对其实那些编辑操作完全都不需要传
[07:03.039 --> 07:04.719] 对完全不需要传
[07:04.719 --> 07:06.479] 就需要一个打开的hook
[07:06.479 --> 07:07.840] 然后有一个保存的hook
[07:07.840 --> 07:10.560] 然后在本地不要存文件
[07:10.560 --> 07:11.880] 因为一个tmp file
[07:11.880 --> 07:16.200] 我知道有一个东西其实也许可以配合一下
[07:16.200 --> 07:19.840] 就是我忘了那个项目具体的名字了
[07:19.840 --> 07:23.880] 就是他可以指定你本机的一个文件
[07:23.880 --> 07:28.000] 和你SSH server去做同步
[07:28.000 --> 07:30.719] 对他会有点像Rsync
[07:30.719 --> 07:33.120] 但是说他还是基于说最后的修改时间
[07:33.120 --> 07:35.080] 然后他提供很多这种同步模式
[07:35.080 --> 07:37.159] 比如说只从本机往远端同步
[07:37.159 --> 07:39.200] 或者双端选最新版本
[07:39.200 --> 07:41.960] 然后程序改也会给你同步过来这种
[07:41.960 --> 07:45.360] 那个名字叫Mutex
[07:45.360 --> 07:47.240] 什么什么Mutex sync还是啥的
[07:47.240 --> 07:48.080] 我有点忘记了
[07:48.080 --> 07:50.039] 我可能待会找一下看一下
[07:50.039 --> 07:52.240] 但我觉得像这种编辑器的remote模式
[07:52.240 --> 07:55.480] 他应该就是还支持一些辅助的功能
[07:55.480 --> 08:00.080] 比如说显示你的远程服务器上的文件数之类的
[08:00.080 --> 08:03.400] 这种才能给你一个本机编辑的感觉
[08:03.400 --> 08:04.440] VFQ的remote其实就可以支持说
[08:04.440 --> 08:07.080] 我可以模糊匹配一些文件
[08:07.080 --> 08:08.840] 对我只需要输入部分的界名
[08:08.840 --> 08:10.159] 他可以列出来都有哪一些
[08:10.159 --> 08:11.679] 然后你选一下就打开了它
[08:11.679 --> 08:14.320] 然后可以编辑
[08:14.320 --> 08:19.719] 其实我觉得可以用一个最就是最trivial的实现方式
[08:19.719 --> 08:21.280] 就可以用rsync
[08:21.280 --> 08:23.760] 把rsync相当于把远程的根目录
[08:23.760 --> 08:26.960] 比如说rsync到本地一个挂载到rsync
[08:26.960 --> 08:28.559] 本地的一个目录下
[08:28.559 --> 08:31.120] 然后你用比如说Vim
[08:31.120 --> 08:33.039] 然后就打开那个目录
[08:33.039 --> 08:34.880] 然后整个同步啊什么操作
[08:34.880 --> 08:37.319] 其实都是rsync在帮你做
[08:37.320 --> 08:40.200] 这个我觉得是不是就很脆弱的一个实现
[08:40.200 --> 08:41.760] 可能同步
[08:41.760 --> 08:46.520] 我觉得可能同步就是同步content的会比较问题比较多
[08:46.520 --> 08:48.360] 我觉得还是同步一个这种metadata
[08:48.360 --> 08:53.040] 然后把它就是只是显示出来一个那种镜像
[08:53.040 --> 08:54.240] 但是你的修改
[08:54.240 --> 08:58.640] 对修改在实际就是并不是在对并不是修改本地会好一点
[08:58.640 --> 08:59.200] 好
[08:59.200 --> 09:01.240] 那我们再来聊一下
[09:01.240 --> 09:04.080] 我们4个是怎么学习vim的
[09:04.080 --> 09:04.840] 怎么入门的
[09:04.840 --> 09:07.640] 因为vim的学习曲线是比较陡峭的
[09:07.640 --> 09:10.480] 然后可以给新人有什么建议
[09:10.480 --> 09:11.360] 我先骂了
[09:11.360 --> 09:16.440] 就是我第一次接触到vim是看一本书
[09:16.440 --> 09:19.000] 也是我的linux启蒙书
[09:19.000 --> 09:21.280] 叫鸟哥的linux私房菜
[09:21.280 --> 09:22.720] 我当时刚上大学
[09:22.720 --> 09:24.080] 然后想学linux
[09:24.080 --> 09:26.960] 所有人感觉入门都会推荐这本书
[09:26.960 --> 09:28.280] 然后在当时可能
[09:28.280 --> 09:30.320] 然后我就是看
[09:30.320 --> 09:31.160] 然后看了之后
[09:31.160 --> 09:34.920] 其实里面会有一个部分提到了说vim
[09:34.920 --> 09:38.000] 以及提到了一些vim的基本操作
[09:38.000 --> 09:40.360] 然后我是在那个时候第一次接触到vim
[09:40.360 --> 09:40.600] 对
[09:40.600 --> 09:42.800] 但是其实我后来会发现
[09:42.800 --> 09:45.040] 其实网上很多教程会告诉你说
[09:45.760 --> 09:47.640] 比如说什么i是插入
[09:47.640 --> 09:49.160] a是后面追加
[09:49.160 --> 09:51.160] 然后dd是删除一行
[09:51.160 --> 09:52.520] 就是直接告诉你
[09:52.520 --> 09:54.560] 你执行哪两个按键会干嘛
[09:54.560 --> 09:55.280] 会干嘛
[09:55.640 --> 09:56.000] 对
[09:56.000 --> 09:57.439] 我但是我会觉得
[09:58.000 --> 09:59.920] 那个学习可能不是特别有效
[09:59.920 --> 10:02.240] 反正我是后来偶然有一次
[10:02.240 --> 10:03.760] 就是知道了有一个东西
[10:03.760 --> 10:05.520] 就是vim自带的vim tutor
[10:05.520 --> 10:07.400] 我觉得大家可能已经遗忘了这个东西
[10:07.400 --> 10:09.079] 因为大家已经用vim很久了
[10:09.079 --> 10:11.000] 我不知道有这个东西
[10:11.000 --> 10:13.560] 就是你在你的terminal
[10:13.560 --> 10:14.640] 你安装完vim之后
[10:14.640 --> 10:16.040] 你输入vim tutor
[10:16.040 --> 10:17.120] tutor
[10:17.120 --> 10:17.400] 对
[10:17.400 --> 10:19.959] 就会进到一个vim电机器里
[10:19.959 --> 10:21.280] 然后它已经预置了
[10:21.280 --> 10:23.959] 一个vim的操作说明的文档
[10:24.520 --> 10:26.920] 你就可以根据文档按那个键
[10:26.920 --> 10:27.760] 然后看效果
[10:27.760 --> 10:30.160] 然后熟悉vim的基本操作
[10:30.160 --> 10:30.439] 对
[10:30.439 --> 10:31.319] 然后再后来
[10:31.680 --> 10:33.200] 然后再后来就是
[10:34.040 --> 10:35.720] 对我来说再进阶
[10:35.720 --> 10:37.520] 其实就是找各种插件
[10:37.520 --> 10:39.400] 然后去配置一下自己的vim
[10:39.400 --> 10:43.480] 所以我大概是这样开始用起来
[10:43.480 --> 10:45.560] vim到逐渐熟悉vim吧
[10:46.439 --> 10:48.280] 那你在vim之前都用什么呢
[10:48.560 --> 10:50.240] 我在vim之前没有
[10:50.520 --> 10:51.240] 写程序啊
[10:51.240 --> 10:53.160] 哈哈哈哈
[10:54.080 --> 10:55.960] 我在用vim之前
[10:55.960 --> 10:57.319] 刚上大一嘛
[10:57.320 --> 10:57.760] 对啊
[10:57.760 --> 10:59.640] 我在用vim之前
[10:59.640 --> 11:01.160] 可能比如说上课
[11:01.160 --> 11:02.440] 老师就是啊
[11:02.440 --> 11:03.880] 大家打开这个
[11:04.240 --> 11:05.160] qbasic
[11:05.160 --> 11:06.480] 我不知道大家有没有印象
[11:06.480 --> 11:07.440] 是qbasic吗
[11:07.440 --> 11:08.320] 啊不对
[11:08.320 --> 11:08.800] 不对
[11:08.800 --> 11:09.520] 不好意思
[11:09.520 --> 11:10.360] 我说错了
[11:10.360 --> 11:11.160] 是什么
[11:11.480 --> 11:12.520] 是
[11:12.520 --> 11:14.760] 是turboc
[11:15.120 --> 11:17.200] 对大学c语言课
[11:17.200 --> 11:18.280] turboc
[11:18.280 --> 11:18.640] 对
[11:18.640 --> 11:22.280] 然后刚好也是那个时候开始学着用vim吧
[11:22.520 --> 11:22.840] 对
[11:22.840 --> 11:23.680] 以及
[11:24.360 --> 11:25.400] 如果不用turboc
[11:25.400 --> 11:27.400] 因为反正当时写c的时候
[11:27.400 --> 11:29.240] 刚好开始做一些算法题嘛
[11:29.240 --> 11:30.360] 都特别简单
[11:30.360 --> 11:32.240] 就单个c文件就搞定了
[11:32.600 --> 11:34.040] 然后哎呀
[11:34.040 --> 11:35.560] 还有用一个叫什么
[11:35.680 --> 11:37.040] codeblock还是啥的
[11:37.040 --> 11:38.319] 反正就是有一个版本
[11:38.319 --> 11:39.240] c++的一个
[11:39.240 --> 11:41.000] 500图字带的一个
[11:41.280 --> 11:44.480] 一个代码编辑器或者是什么的
[11:44.480 --> 11:44.720] 对
[11:44.720 --> 11:45.480] 当时也不太熟
[11:45.480 --> 11:47.720] 反正就是单纯的写嘛
[11:48.199 --> 11:49.960] 然后再后来就学习了用vim
[11:49.960 --> 11:51.600] 开始用vim来写代码
[11:52.439 --> 11:54.720] 那你是一开始就是在windows用吗
[11:54.720 --> 11:55.440] 还是
[11:55.640 --> 11:57.120] 没有在linux用
[11:57.120 --> 12:00.240] 因为刚好那段时间在自己学linux
[12:00.240 --> 12:02.280] 对
[12:02.840 --> 12:03.120] 对
[12:03.120 --> 12:04.160] 我就感觉
[12:04.480 --> 12:06.400] 就是vim的普及有个问题
[12:06.400 --> 12:10.160] 就是你像大部分人一开始上大学都是windows
[12:10.160 --> 12:11.560] 就是还不会linux
[12:11.560 --> 12:12.400] 然后
[12:12.520 --> 12:14.760] 然后你肯定首先接触的就是IDE
[12:14.760 --> 12:17.160] 就是然后直接在IDE里面编辑
[12:17.160 --> 12:18.720] 然后编译运行这样子
[12:18.720 --> 12:20.600] 然后就如果用vim的话
[12:20.600 --> 12:22.440] 相当于你还需要去
[12:22.440 --> 12:26.360] 有一套那种命令行里的工具链去配合
[12:26.360 --> 12:27.640] 这个我觉得是一个
[12:27.640 --> 12:29.840] 一个入门的一个阻碍吧
[12:29.840 --> 12:31.800] 确实是
[12:31.800 --> 12:34.680] 不过我当初不过我还就是
[12:34.680 --> 12:36.000] 那我说说我了
[12:36.000 --> 12:36.800] 顺便就
[12:36.800 --> 12:40.000] 我当初其实是写vim
[12:40.000 --> 12:41.640] 其实就是在windows上
[12:41.640 --> 12:44.440] 然后用的也是GUI版本的vim
[12:44.440 --> 12:46.480] windows上那个好像叫GUIM
[12:46.480 --> 12:47.280] 我记得
[12:47.680 --> 12:49.040] 我那时候
[12:49.160 --> 12:51.360] 之所以用vim是因为
[12:51.360 --> 12:52.920] 因为我是数学系的
[12:52.920 --> 12:54.240] 那时候是要写
[12:54.240 --> 12:55.320] 那时候硕士
[12:55.600 --> 12:57.640] 写毕业论文的时候
[12:57.640 --> 12:59.320] 当时那时候
[12:59.320 --> 13:00.680] 大家都推荐啊
[13:00.680 --> 13:02.800] 论文要用latex来写论文
[13:02.800 --> 13:03.520] 然后
[13:03.520 --> 13:06.200] 对那个发音好像叫latex
[13:06.200 --> 13:06.920] 我记得
[13:06.920 --> 13:08.400] 他算
[13:08.840 --> 13:10.520] 他算最后是个x
[13:10.520 --> 13:12.720] 然后那时候因为也没有
[13:12.720 --> 13:14.360] 他没有什么编辑器
[13:14.560 --> 13:16.520] 当时因为数学系也不写代码
[13:16.520 --> 13:17.200] 本来
[13:18.040 --> 13:20.560] 所以那时候就搜了一下
[13:20.560 --> 13:23.439] 说那tech应该用什么东西写
[13:23.439 --> 13:25.079] 然后就搜到了一个说vim
[13:25.079 --> 13:26.439] 一个说imax
[13:27.239 --> 13:29.640] 不过中国好像vim比较多一点
[13:29.640 --> 13:33.160] 然后我就就随大流的就开始学vim
[13:33.439 --> 13:36.079] 然后当时是怎么学的
[13:36.239 --> 13:40.920] 其实刚刚Adam提到的那个vim tutor
[13:40.920 --> 13:41.800] 我也是最早
[13:41.800 --> 13:43.280] 我也是看那个教程
[13:43.280 --> 13:45.719] 他其实相当于是游戏里面的新手官
[13:45.719 --> 13:46.959] 教学官一样
[13:46.960 --> 13:50.320] 一步步让你熟悉vim操作
[13:50.320 --> 13:53.440] 然后之后其实主要看的就是
[13:53.440 --> 13:54.880] vim的帮助文档
[13:54.880 --> 13:57.360] 其实vim帮助文档写的蛮详细的
[13:57.360 --> 13:58.840] 而且是有中文版的
[13:58.840 --> 14:00.160] 他虽然默认是英文的
[14:00.160 --> 14:01.280] 但是有
[14:01.280 --> 14:03.440] 有vim中文设计是有翻译的
[14:03.440 --> 14:04.480] 每一版都有翻译的
[14:04.480 --> 14:05.720] 我当时就把
[14:05.720 --> 14:06.840] 那个
[14:06.840 --> 14:08.920] 他的翻译过的
[14:08.920 --> 14:10.560] 中文的文档下载下来
[14:10.560 --> 14:11.560] 然后就
[14:11.560 --> 14:14.280] 没事就像他一张一张的看下来
[14:14.280 --> 14:15.800] 差不多就是这样
[14:15.800 --> 14:17.359] 也就渐渐的开始
[14:18.120 --> 14:20.280] 用上vim
[14:20.280 --> 14:23.199] 正统的入门方式
[14:23.199 --> 14:26.880] 其实主要还是有中文比较看容易看
[14:27.240 --> 14:29.599] 那时候也比较时间比较多
[14:29.599 --> 14:30.640] 所以还能
[14:30.640 --> 14:32.479] 就是一张一张的看下来
[14:32.479 --> 14:34.760] 我觉得现在可能肯定没有这个时间了
[14:34.760 --> 14:37.000] 在一般都是有那个教程
[14:37.000 --> 14:38.199] 好像是什么
[14:38.199 --> 14:40.920] learn vim script by hard way
[14:40.920 --> 14:41.880] 好像是
[14:41.880 --> 14:43.640] 那个是不是教你用vim
[14:43.640 --> 14:45.319] 那个是教你写
[14:45.320 --> 14:46.320] vim script
[14:46.320 --> 14:47.520] 写vim script
[14:47.520 --> 14:48.320] 随便
[14:48.320 --> 14:50.160] 其实我写vim script
[14:50.160 --> 14:53.080] 也是看的也是官方的那个教程
[14:53.080 --> 14:54.200] 帮助文档里面
[14:54.200 --> 14:56.200] 我刚才发了一个链接到群里
[14:56.200 --> 14:58.040] 其实这个就是我当时
[14:58.040 --> 15:00.320] 学习vim用的一个
[15:00.320 --> 15:01.400] 网站吧
[15:01.400 --> 15:03.240] 它是相当于是
[15:03.240 --> 15:04.440] 一个这种游戏
[15:04.440 --> 15:06.040] 然后你通过
[15:06.720 --> 15:09.000] 这个就相当于这个游戏的每一关
[15:09.000 --> 15:12.400] 你要通过vim key binding的各种操作来通关
[15:12.400 --> 15:15.040] 就比如说他会有一个这种迷宫
[15:15.040 --> 15:16.839] 然后你要通过就是
[15:16.839 --> 15:18.599] HTKL
[15:18.599 --> 15:21.880] 然后来移动你这个小人才能到出口
[15:21.880 --> 15:24.920] 然后包括编辑里面的一些字符什么的
[15:24.920 --> 15:26.920] 然后这个我玩了蛮久的
[15:26.920 --> 15:28.360] 我玩到挺后面了
[15:28.360 --> 15:30.520] 然后就是通过这个来学习的
[15:30.520 --> 15:31.719] 然后其实
[15:31.719 --> 15:33.839] 我现在还是也挺推荐这个的
[15:33.839 --> 15:36.079] 我觉得就是比较有趣
[15:36.079 --> 15:37.079] 然后
[15:37.079 --> 15:40.880] 就是因为像这种学习编辑器的操作什么的
[15:40.880 --> 15:42.719] 或者是学习任何一个软件操作
[15:42.720 --> 15:45.640] 都是相对于写程序都是比较枯燥的一件事情
[15:45.640 --> 15:46.760] 然后我觉得
[15:46.760 --> 15:50.720] 用游戏的这种方式可能会降低一些入门的难度
[15:50.720 --> 15:52.240] 然后这个东西玩到后面
[15:52.240 --> 15:53.680] 我记得好像还是要
[15:53.680 --> 15:55.320] 我忘了是到哪一步要付费
[15:55.320 --> 15:56.600] 然后我当时还付费了
[15:56.600 --> 15:57.600] 是
[15:57.600 --> 16:00.200] 然后还说拿我爸的信用卡刷的
[16:00.200 --> 16:02.640] 我有vim科经
[16:02.640 --> 16:05.480] 所以当时学习vim还是下了一定决心的
[16:05.480 --> 16:05.760] 对
[16:05.760 --> 16:07.280] 就还是觉得要好好学
[16:07.280 --> 16:10.200] 但是我不太记得当时是
[16:10.200 --> 16:11.920] 怎么了解到vim的
[16:11.920 --> 16:14.120] 反正我就记得我是当时就
[16:14.120 --> 16:16.719] 就是决定要好好学一下
[16:16.719 --> 16:17.560] 然后就用了这个
[16:17.560 --> 16:20.599] 我其实跟Adam一样
[16:20.599 --> 16:22.920] 我在大学里写那些题的时候用
[16:22.920 --> 16:26.160] 我们老师教课用VC6.0
[16:26.160 --> 16:28.560] 我那个东西我觉得编辑器好难用
[16:28.560 --> 16:30.360] 就两种颜色
[16:30.360 --> 16:32.360] 而且没有就补全功能很差
[16:32.360 --> 16:34.839] 然后后来大家都开始用code blocks
[16:34.839 --> 16:36.800] 那个也用了一阵
[16:36.800 --> 16:38.920] 然后我就其实这边
[16:38.920 --> 16:40.959] 这些编辑功能都用的不是很爽
[16:40.960 --> 16:45.760] 他们都就是高亮跟补全不是很强大
[16:45.760 --> 16:48.680] 然后我就想学一个编辑器
[16:48.680 --> 16:50.400] 其实我刚开始学的是emacs
[16:50.400 --> 16:53.600] 但是我不太喜欢它那些快捷键组合
[16:53.600 --> 16:54.880] 就是你干一件事情
[16:54.880 --> 16:57.520] 你要按四个键先按两个键再按两个键
[16:57.520 --> 16:59.000] 所以我就放弃emacs
[16:59.000 --> 17:01.680] 然后vim也是局限太陡了
[17:01.680 --> 17:05.680] 然后那个时候有各种乱七八糟的sublim
[17:05.680 --> 17:06.360] 什么都用
[17:06.359 --> 17:11.719] 后来实习有一个公司的项目比较大
[17:11.719 --> 17:14.240] 就一个很大的项目
[17:14.240 --> 17:17.560] 就你用我是用PageTerm来开发
[17:17.560 --> 17:18.879] 你PageTerm打开的话
[17:18.879 --> 17:22.919] 你必须要把那个就是右下角有一个调
[17:22.919 --> 17:24.639] 那个分析的还是什么
[17:24.639 --> 17:26.199] 你要把它调到最低
[17:26.199 --> 17:28.359] 不然的话那个电脑什么都干不了
[17:28.359 --> 17:30.479] 因为它一直在分析代码
[17:30.479 --> 17:32.399] 所以那个时候我就开始用vim
[17:32.399 --> 17:36.320] 我发现用vim编辑那个很大的项目里面的一个文件
[17:36.320 --> 17:38.320] 依然是可以用补全
[17:38.320 --> 17:40.200] 而且速度不是很慢
[17:40.200 --> 17:42.840] 所以就那个时候用开始用vim
[17:42.840 --> 17:46.040] 然后当时的情况就是我只能用vim
[17:46.040 --> 17:47.800] 所以也不是很熟悉
[17:47.800 --> 17:49.280] 我就用到什么查什么
[17:49.280 --> 17:50.240] 用到什么查什么
[17:50.240 --> 17:51.840] 就跟现在写java一样
[17:51.840 --> 17:55.720] 其实对那个时候的缺点就是我用到什么查什么
[17:55.720 --> 17:57.280] 假如说我有一个东西
[17:57.280 --> 17:59.919] 我可以用很烦的方法去完成它的话
[17:59.919 --> 18:04.800] 我可能就不会想到用什么更简单的方法
[18:04.800 --> 18:06.960] 所以现在想一想
[18:06.960 --> 18:09.159] 如果我也能把文档看一遍的话
[18:09.159 --> 18:11.800] 可能会就是学得更快一点吧
[18:11.800 --> 18:13.800] 我有个小问题啊
[18:13.800 --> 18:16.600] 就是你刚开始用
[18:16.600 --> 18:19.360] VS不是VS那叫什么
[18:19.360 --> 18:22.000] VC6.0
[18:22.000 --> 18:26.600] 对你就已经有这种代码补全和代码高量的概念了吗
[18:26.600 --> 18:28.200] 就是刚上大学的时候
[18:28.200 --> 18:29.440] 没有的没有的
[18:29.440 --> 18:32.919] 只是我你刚写那个就觉得很烦
[18:32.919 --> 18:33.760] 你敲错一个字
[18:33.760 --> 18:36.040] 那个C语言会给你报错嘛
[18:36.040 --> 18:36.240] 对吧
[18:36.240 --> 18:38.040] 你要去找你在哪一行错了
[18:38.040 --> 18:41.960] 经常把那个mean那个i跟a写错嘛
[18:41.960 --> 18:42.200] 对吧
[18:42.200 --> 18:47.280] 经常把那个什么大小写中文中文引号写错了
[18:47.280 --> 18:48.240] 就很就很烦
[18:48.240 --> 18:49.640] 他也没有提示
[18:49.640 --> 18:52.720] 后来用了code blocks发现他能知道我要写什么
[18:52.720 --> 18:54.760] 我就觉得很神奇
[18:54.760 --> 18:58.240] 因为你就是我用code blocks之前
[18:58.240 --> 19:02.360] 我没有见过任何一种东西可以就是提示出来你要干什么
[19:02.360 --> 19:07.479] 就有的话可能当时Google可以给你提示你要搜索的东西那种
[19:07.479 --> 19:10.600] 就是搜索搜索的那个推荐
[19:12.040 --> 19:12.520] 嗯
[19:12.520 --> 19:15.320] 然后之后再也没有遇到过就是有补全那个东西
[19:16.560 --> 19:21.600] 不过VM的补全其实默认也不是不是很好
[19:21.600 --> 19:23.719] 还是得要装不少插件
[19:23.719 --> 19:26.360] 他那个补全才能真正靠谱
[19:26.360 --> 19:28.120] 对对我是安装了VM
[19:28.120 --> 19:28.919] 然后安装了
[19:28.920 --> 19:32.400] you complain to me然后设置了kara scheme
[19:32.400 --> 19:36.200] 然后打开那个syntax基本上就可以用了
[19:36.200 --> 19:36.600] 嗯
[19:37.600 --> 19:40.640] 然后遇到自己什么觉得不太爽的东西
[19:40.640 --> 19:43.800] 加上看网上有没有什么插件或者有什么命令什么的
[19:43.800 --> 19:49.440] 也是其实光VM的补全本身也是发展了好久
[19:49.440 --> 19:52.160] 我记得我当初那时候VM的补全
[19:52.160 --> 19:54.480] 他没有什么补全的插件的
[19:54.480 --> 19:57.120] 然后只有一个插件叫super tab
[19:57.120 --> 19:59.520] 就是VM默认的补全
[19:59.520 --> 20:01.800] 我记得是按两个键才能补全的
[20:01.800 --> 20:06.399] 然后super tab就是把那个补全的功能键位换成了tab键而已
[20:06.399 --> 20:07.600] 就这么一个
[20:08.919 --> 20:11.399] 就这么一个插件那时候还特别流行
[20:13.040 --> 20:15.360] VM默认补全是那个ctrl N吗
[20:15.360 --> 20:20.840] 我忘了他是不同的补全的模式好像是不一样的
[20:20.840 --> 20:26.199] 我记得好像only complete好像是另外一颗键
[20:26.200 --> 20:29.680] 然后说上下就是同一个文件
[20:29.680 --> 20:31.960] 那个上下文的补全是一个键
[20:31.960 --> 20:33.560] 然后不同的补全模式
[20:33.560 --> 20:35.040] 我记得用的键是不一样的
[20:35.960 --> 20:37.480] 它是要手动触发的
[20:37.480 --> 20:39.520] 它不会自动的帮你进行补全
[20:39.520 --> 20:40.440] 你要按那个键
[20:40.440 --> 20:42.120] 他才会试图帮你进补全
[20:42.120 --> 20:43.560] 就出现那个补全列表
[20:43.560 --> 20:46.840] 所以这些都是默认就自带的吗
[20:46.840 --> 20:49.000] 还是要按插件才有
[20:49.000 --> 20:53.000] VM自己有默认的自带的补全功能的
[20:53.000 --> 20:55.120] 不过那个补全功能相对比较弱
[20:55.120 --> 20:57.199] 特别是不能根据语义来补全的
[20:57.199 --> 20:58.320] 就像you complete me
[20:58.320 --> 21:00.479] 他不是会有一些
[21:00.479 --> 21:05.959] 他会根据我记得是会就像python什么
[21:05.959 --> 21:07.320] 他有时候有一些
[21:07.320 --> 21:10.479] Built-in的一些库的一些函数什么
[21:10.479 --> 21:11.840] 他也会帮你列出来吗
[21:11.840 --> 21:13.439] 这些都是VM都没有的
[21:13.439 --> 21:17.479] VM的补全一般都是说是根据语法文件里面
[21:17.479 --> 21:18.639] 列出来关键词
[21:18.639 --> 21:19.600] 他会帮你补全
[21:19.600 --> 21:21.679] 以及就是说同一个文件内的
[21:21.679 --> 21:22.840] 就是上下文
[21:22.840 --> 21:25.959] 就是之前上面出现过的一些单词
[21:25.959 --> 21:27.240] 他也会帮你补全
[21:27.240 --> 21:30.840] 主要能默认的补全好像就只有这些
[21:30.840 --> 21:38.320] 我就感觉就即使是对于我这种已经使用了VM一段时间的人来说
[21:38.320 --> 21:43.840] 要就是知道里面有什么还是挺难的
[21:43.840 --> 21:47.879] 就说比如说我现在用的补全模式不好
[21:47.879 --> 21:50.639] 然后但是我也不知道更好的是哪种
[21:50.640 --> 21:53.080] 就是因为东西可用的太多了
[21:53.080 --> 21:55.360] 所以就有这种感觉
[21:55.360 --> 21:57.280] 确实有这个问题
[21:57.280 --> 22:00.200] 特别因为像补全这个功能
[22:00.200 --> 22:03.880] 其实对于现在编辑器来说是属于比较基础的功能
[22:03.880 --> 22:06.640] 但是VM其实藏的还是有一点深的
[22:06.640 --> 22:11.000] 就是比如说像那种VM的一些别的版本
[22:11.000 --> 22:12.040] 比如NeoVM里面
[22:12.040 --> 22:14.120] 他是不是就自带了些补全啥的
[22:14.120 --> 22:20.240] NeoVM我倒还一直没有正经的用过NeoVM
[22:20.240 --> 22:23.320] 其实这些功能一般都是VM比如说自带的
[22:23.320 --> 22:25.520] 但是默认是不打开的
[22:25.520 --> 22:30.120] 一般是要就可能在VMRC里面把这个功能先得打开
[22:30.120 --> 22:30.920] 这是第一步
[22:30.920 --> 22:34.120] 然后有一些功能可能需要增强一些
[22:34.120 --> 22:36.560] 需要通过装插件才能增强
[22:36.560 --> 22:38.720] 那就需要再装插件
[22:38.720 --> 22:43.040] 所以现在其实VM的不是有很多发行板吗
[22:43.040 --> 22:44.680] 都帮你做点这些事情
[22:44.680 --> 22:45.720] 插件帮你装好
[22:45.720 --> 22:48.280] 然后配置帮你配好
[22:48.280 --> 22:53.399] 我感觉其实新手可能用这种帮你配好的入门会好一点
[22:53.399 --> 22:54.560] 相对会好一点
[22:54.560 --> 22:58.440] 不过我觉得现在的发行板好像越来越大了
[22:58.440 --> 23:00.160] 虽然我也没怎么关注过
[23:00.160 --> 23:02.320] 我总觉得好像插件越来越多
[23:02.320 --> 23:03.280] 然后越来越复杂
[23:03.280 --> 23:05.960] 感觉比VM本身也不见得简单多少
[23:05.960 --> 23:10.360] 毕竟每个插件有每个插件的快捷键
[23:10.360 --> 23:11.760] 然后配置
[23:11.760 --> 23:14.280] 如果默认插件装的多的话
[23:14.280 --> 23:16.960] 快捷键和配置都得学半天
[23:16.960 --> 23:20.000] 我到一般都会看看
[23:20.000 --> 23:24.000] 就是偶尔会去看一下最新的发行板
[23:24.000 --> 23:25.680] 那么插件更新哪些
[23:25.680 --> 23:28.960] 然后就会看看有些新的插件出来的时候
[23:28.960 --> 23:31.040] 有用的可以自己试用一下
[23:31.040 --> 23:35.480] 发行板对我来说就相当于一个插件的推荐列表
[23:35.480 --> 23:37.480] 我可以看看哪些插件可以用怎么样
[23:37.480 --> 23:41.080] 我是感觉他们那些键位配置
[23:41.080 --> 23:42.760] 我去一般都看一下他们怎么配的
[23:42.760 --> 23:46.640] 因为我选择新的快捷键的时候有选择困难症
[23:46.640 --> 23:49.840] 快捷键我倒好像一般都是
[23:49.840 --> 23:51.840] 都自己定的
[23:51.840 --> 23:53.120] 都自己会定一套
[23:53.120 --> 23:54.640] 就是一般可能
[23:54.640 --> 23:59.760] 就我一般G后面会加一些两个字
[23:59.760 --> 24:03.280] 就是G或者GZ或者GH会加一点
[24:03.280 --> 24:07.680] 就两个字母的快捷键
[24:07.680 --> 24:08.720] 我经常会定
[24:08.720 --> 24:11.120] 因为G开头这样就可以加很多快捷键
[24:11.120 --> 24:15.040] 就是现在VM插件要安装的话
[24:15.040 --> 24:17.600] 假设我不用发行板就是裸的位
[24:17.600 --> 24:20.320] 然后推荐的是用什么方式来管理
[24:20.320 --> 24:22.080] 好像有很多管理插件的方法
[24:22.080 --> 24:27.200] 现在其实推荐的我觉得比较好的应该是
[24:27.200 --> 24:31.840] 有个韩国人写的叫Winplug
[24:31.840 --> 24:32.720] 我记得名字
[24:32.720 --> 24:36.159] 相对来说我用下来是感觉是最好
[24:36.159 --> 24:39.600] 它更新也比较及时
[24:39.600 --> 24:41.920] 所以应该一直在维护
[24:41.920 --> 24:43.920] 像之前像Wonderwall也好
[24:43.920 --> 24:47.360] 还有个日本人写的New Bundle
[24:47.360 --> 24:50.960] 我记得那两个我用的比较少
[24:50.960 --> 24:54.480] 我之前就发现我每次换电脑
[24:54.480 --> 24:59.680] 然后重新配置我的VM的时候
[24:59.680 --> 25:05.680] 我就发现我之前的VM的插件管理的项目就停止维护
[25:05.680 --> 25:12.080] 所以我一路从Wonder到New Bundle
[25:12.080 --> 25:16.480] 然后我其实已经两三年没有再配过我的VM了
[25:16.480 --> 25:18.480] 就是这种说从零开始配置
[25:18.480 --> 25:23.600] 然后我去看了一下果然New Bundle也已经停止维护了
[25:23.600 --> 25:28.720] 然后他现在他的那个about里还说自己是
[25:28.720 --> 25:31.280] Next Generation VM Plug Manager
[25:31.280 --> 25:40.000] 然后他现在又推荐了一个叫Den.vim
[25:40.000 --> 25:43.840] 看起来又是一个新的插件管理的工具
[25:43.840 --> 25:48.000] 对其实就这也是个人项目的一个很大的问题了
[25:48.000 --> 25:52.560] 我觉得就是你没有办法保证它的持续更新
[25:52.560 --> 25:54.080] 说不定哪天就不会活了
[25:54.080 --> 25:57.920] 我还是用Wonderwall
[25:57.920 --> 26:00.480] 好像我感觉还可以用
[26:00.480 --> 26:03.200] 可以用但是我刚刚看了一下这个项目
[26:03.200 --> 26:04.320] 就是他已经停止维护了
[26:04.320 --> 26:06.640] 不过Wonderwall确实不如VM Plug
[26:06.640 --> 26:08.800] 因为VM Plug他安装插件的时候
[26:08.800 --> 26:12.639] 他是可以就是多线程下载的
[26:12.639 --> 26:14.159] 你比如说你有20个插件
[26:14.159 --> 26:16.240] 他一次会下载10个插件
[26:16.240 --> 26:18.399] 但Wonderwall我记得是串行的
[26:18.399 --> 26:21.600] 这个确实VM Plug做的好很多
[26:21.600 --> 26:24.159] 我感觉就是其实刚才也说到嘛
[26:24.159 --> 26:27.040] 个人项目它质量如何
[26:27.040 --> 26:28.240] 然后维护不维护
[26:28.240 --> 26:31.440] 其实还真是看开发者自己的素质
[26:31.440 --> 26:33.760] 所以我一般就是可能有些插件
[26:33.760 --> 26:36.320] 我看看觉得这个插件做的还挺不错的
[26:36.320 --> 26:39.040] 一般那个就是那个人的插件
[26:39.040 --> 26:40.159] 我都会关注一下
[26:40.159 --> 26:42.399] 就会用他的插件比较多
[26:42.399 --> 26:44.960] 像VM Plug那个作者好像是个韩国人
[26:44.960 --> 26:46.800] 他还写了不少VM的插件
[26:46.800 --> 26:48.960] 质量我看下都不错质量
[26:48.960 --> 26:51.919] 所以我用他的插件还是用的比较多的
[26:51.919 --> 26:54.159] 像你刚刚说Nail Bundle也好
[26:54.159 --> 26:58.720] 然后我记得他以前也写过Nail Complete Cache
[26:58.720 --> 27:00.480] 然后反正Nail系列的
[27:00.480 --> 27:02.800] 那个也是一个比较有名的
[27:02.800 --> 27:04.800] 就VM插件作者嘛
[27:04.800 --> 27:05.760] 是个日本人
[27:05.760 --> 27:08.560] 他的我都不是特别喜欢用他的插件
[27:08.560 --> 27:11.920] 因为我觉得他插件有时候动不动就不维护了
[27:11.920 --> 27:14.560] 或者还有主要日本人英语也写的不好
[27:14.560 --> 27:17.120] 然后他的帮助文章我经常看不懂特别复杂
[27:17.120 --> 27:18.960] 所以我就不太用他了
[27:18.960 --> 27:24.480] 那接着说一下怎么管理VM的配置
[27:24.480 --> 27:27.200] 那要不我先说吧
[27:27.200 --> 27:31.040] 我就是我的VM RCE
[27:31.040 --> 27:34.240] 我记得一开始当时因为我用VM的时候
[27:34.240 --> 27:36.480] 好像还没有发行版呢
[27:36.480 --> 27:41.120] 所以我那时候好像网上抄了一个100多行的一个
[27:41.120 --> 27:44.720] 好像VM RCE的一个模板
[27:44.720 --> 27:47.680] 然后就在那个基础上面改一改
[27:47.680 --> 27:49.920] 加一加插件啊等等
[27:49.920 --> 27:51.040] 改着改着
[27:51.040 --> 27:53.600] 改到现在应该有700多行吧
[27:53.600 --> 27:55.840] 然后那所有的配置啊什么
[27:55.840 --> 27:58.400] 其实都是放在GitHub上的
[27:58.400 --> 28:01.760] 然后因为用了那个插件管理器嘛
[28:01.760 --> 28:05.040] 所以基本上只要一个VM RCE就可以全部管理了
[28:05.040 --> 28:08.480] 哪怕新装的VM其实用一下
[28:08.480 --> 28:12.000] 那个plug install命令的话
[28:12.000 --> 28:14.000] 也会把所有的插件全部都装下来
[28:14.000 --> 28:15.040] 基本没有问题
[28:15.040 --> 28:20.960] 像有没有这种结构化的VM RCE的编辑器
[28:20.960 --> 28:25.680] 就是说因为VM RCE里面有很多选项嘛
[28:25.680 --> 28:25.920] 对吧
[28:25.920 --> 28:27.680] 然后你可能有700多行就很长
[28:27.680 --> 28:29.920] 有没有那种就是比如说图形化的
[28:29.920 --> 28:33.200] 然后就是让你能更方便的配置的这种东西
[28:33.200 --> 28:37.440] 这个躲到好像还真没有见到过
[28:37.440 --> 28:38.880] 图形化配置VM
[28:40.160 --> 28:41.920] 我自己是把700多行
[28:41.920 --> 28:43.920] 因为是用代码折叠嘛
[28:43.920 --> 28:44.880] 就是几块嘛
[28:44.880 --> 28:46.000] 可能插件是一块
[28:46.000 --> 28:47.280] 然后插件配置是一块
[28:47.280 --> 28:49.280] 然后基础配置是一块
[28:49.280 --> 28:52.240] 然后还有一些自定义的map啊什么
[28:52.240 --> 28:54.640] 自定义的函数啊这些
[28:54.640 --> 28:56.400] 可能只能自己分个段
[28:56.400 --> 28:58.240] 就这样来维护一下
[28:58.240 --> 29:01.440] 但是我感觉你那个想法很好
[29:01.440 --> 29:05.200] 就比如说用户把他的VM RCE上传到一个地方去
[29:05.200 --> 29:08.240] 然后就出现每一个间位的映射
[29:08.240 --> 29:10.400] 当前你配置的是干嘛的
[29:11.280 --> 29:11.760] 对吧
[29:11.760 --> 29:13.120] 然后有什么差别
[29:13.120 --> 29:15.440] 我这对这也是我刚刚突然想到
[29:15.440 --> 29:17.120] 就是我还挺惊讶的
[29:17.120 --> 29:19.280] 居然好像还没有人做这个
[29:19.280 --> 29:20.080] 我也搜了一下
[29:20.080 --> 29:24.000] 似乎也没有这种特别好的解决方案
[29:24.000 --> 29:26.080] 感觉可能说不定有啊
[29:26.080 --> 29:27.920] VM RCE generator之类的
[29:27.920 --> 29:29.440] VM bootstrap
[29:29.440 --> 29:30.240] generator
[29:30.240 --> 29:32.400] 好像还是
[29:32.400 --> 29:35.680] 可能VM用户都比较专业
[29:35.680 --> 29:36.640] 就不需要这种东西
[29:36.640 --> 29:39.920] 对我跟那个丁一样
[29:39.920 --> 29:42.240] 我也是就是一开始
[29:42.240 --> 29:45.520] 因为我对VM是硬需求
[29:45.520 --> 29:47.360] 所以我从而找了个就能用了
[29:47.360 --> 29:48.720] 随便配了配能跑起来
[29:48.720 --> 29:51.120] 然后后来我就开始去看
[29:51.120 --> 29:53.360] 每一行这个配置代表什么意思
[29:53.360 --> 29:56.000] 然后我发现其实有很多矛盾的配置
[29:56.000 --> 29:57.280] 我就改了改
[29:57.280 --> 30:00.639] 然后我再从一个地方看到
[30:00.639 --> 30:03.760] 其实就是VM不是有个折叠的功能吗
[30:03.760 --> 30:04.240] 对吧
[30:04.240 --> 30:06.720] 然后你用一个注释
[30:06.720 --> 30:09.040] 然后刚刚注释
[30:09.040 --> 30:11.280] 然后写三个左的大括号
[30:11.280 --> 30:14.240] 然后你再写你的VM配置写一段
[30:14.240 --> 30:17.200] 然后你最后一行你再写一个注释
[30:17.200 --> 30:18.560] 然后再写三个U括号
[30:18.560 --> 30:21.040] 你这一组就可以叠起来
[30:21.040 --> 30:22.080] 懂我的意思吗
[30:22.080 --> 30:25.600] 所以这样的话我就可以把我的VM RCE分成很多组
[30:25.600 --> 30:26.720] 比如Python配置
[30:26.720 --> 30:28.240] 插件配置
[30:28.240 --> 30:29.760] VM的基础的配置
[30:29.760 --> 30:30.880] 这样分很多组
[30:30.880 --> 30:33.920] 这样看起来有点组织就
[30:33.920 --> 30:36.320] 这个基本上我也是这样的
[30:36.320 --> 30:40.320] 基本上一般就是用三个大括号
[30:40.320 --> 30:41.760] 做代码折叠
[30:41.760 --> 30:48.000] 然后可能每个插件的配置会折叠一下
[30:48.000 --> 30:49.600] 这样就稍微看得清楚
[30:49.600 --> 30:56.640] 我也是只在Github上一个仓库里同步VM RCE这个文件
[30:56.640 --> 30:59.840] 但是有一些人
[30:59.840 --> 31:07.200] 我知道他们是把整个.vim文件夹给自己备份保存同步
[31:07.200 --> 31:11.520] 因为他们可能不信任某一些外部的存储
[31:11.520 --> 31:13.600] 他们觉得某一天那个仓库可能就没了
[31:13.600 --> 31:16.160] 我倒也其实要这么说的话
[31:16.160 --> 31:20.720] 我的配置.vim我倒还真是通过jobbox同步的
[31:20.720 --> 31:24.160] 这么一说的话也算是这样同步的
[31:24.160 --> 31:27.040] 有了一种构建打包的感觉
[31:27.040 --> 31:27.840] 对
[31:27.840 --> 31:31.440] 这个我感觉不是很需要
[31:31.440 --> 31:34.240] 我就是用把所有的vim rc
[31:34.240 --> 31:36.480] zsh rc
[31:36.480 --> 31:39.840] htop什么乱七八糟的
[31:39.840 --> 31:42.320] 都放到那个仓库里面
[31:42.320 --> 31:44.000] 然后写了一个share
[31:44.000 --> 31:46.880] 如果这个新电脑的文件已经存在
[31:46.880 --> 31:48.800] 就把它放到一个backup文件夹里面
[31:48.800 --> 31:52.880] 然后把我自己仓库里面的全都放到根目录夹目录下面
[31:52.880 --> 31:58.640] 我是把根目录软链接到仓库里面
[31:58.640 --> 32:02.240] 所以我每次改的话都可以用git来追踪我改了啥
[32:02.240 --> 32:03.680] 然后提交上去
[32:03.680 --> 32:06.880] 对我也是我是有一个私有的repo
[32:06.880 --> 32:11.120] 然后就把我所有的.files都放在那里边
[32:11.120 --> 32:12.880] 然后我自己又写了个小脚本
[32:12.880 --> 32:15.440] 我执行的时候就到处去软链他们
[32:15.440 --> 32:22.640] 我也是把所有配置文件都放在一个.files的一个repostory里面
[32:22.640 --> 32:29.040] 然后剩下都是本地都是软链到那个repostory里面的具体的文件
[32:29.040 --> 32:34.480] 然后那个repostory又是特用jumpbox
[32:34.480 --> 32:35.760] 然后会同步一份
[32:35.760 --> 32:41.280] 然后自己那个也会定期的push到github上面
[32:41.280 --> 32:42.480] 一般是这样
[32:42.480 --> 32:45.040] 感觉大家都差不多
[32:45.040 --> 32:47.440] 为啥要私有的repo
[32:47.440 --> 32:48.240] 你可以公开啊
[32:48.240 --> 32:49.360] 大家互相学习吗
[32:49.360 --> 32:50.160] 我吗
[32:50.160 --> 32:55.280] 因为我想想有没有什么好像也没啥
[32:55.280 --> 33:01.360] 但是我确实是因为我我想想好像也没确实没什么原因
[33:01.360 --> 33:05.520] 就最早我放在那个叫啥上
[33:05.520 --> 33:08.720] 那个平台beatbucket
[33:08.720 --> 33:12.240] 对然后对也还好吧
[33:12.240 --> 33:13.200] 这没什么透露的
[33:13.200 --> 33:18.000] 因为我感觉这些.files其实你具体把它软链到哪
[33:18.000 --> 33:21.120] 都是由你用的那个具体的应用规定的
[33:21.120 --> 33:23.120] 就是你基本上只能软链到那个点
[33:23.120 --> 33:28.160] 可能是不是比如说有一点比如说.shconfig之类的
[33:28.160 --> 33:30.560] 可能会有一些敏感的信息吧
[33:30.560 --> 33:34.880] 所以我我的config确实在里面
[33:34.880 --> 33:37.760] 对就是会暴露一些域名啊什么的
[33:37.760 --> 33:42.080] 我可能对不太想暴露肯定会有风险
[33:42.080 --> 33:43.840] dmrc一般是没什么问题
[33:43.840 --> 33:48.159] 对有些配置可能会有点敏感
[33:48.159 --> 33:50.000] 我也没有放但是导致每次换新电脑
[33:50.000 --> 33:53.439] 发现之前的config还得复制过来
[33:53.439 --> 33:57.600] 对其实我那个目录我那个repo就叫config
[33:57.600 --> 34:00.159] 我经常去偷窥别人的.files
[34:00.159 --> 34:03.040] 学点东西偷师学艺
[34:03.040 --> 34:05.199] 我有个问题啊
[34:05.199 --> 34:07.199] 就是我们抛开这种熟人
[34:07.199 --> 34:08.639] 就是你觉得某个人他很厉害
[34:08.639 --> 34:12.719] 然后他的.files你怎么从网上发现一些合适的
[34:12.719 --> 34:14.480] 比较好的.files配置
[34:14.480 --> 34:17.439] 一般用linux他都有这么一个repo
[34:17.439 --> 34:20.239] 所以比如说他写了个排程库
[34:20.239 --> 34:22.560] 我一般去看一下他的github主页
[34:22.560 --> 34:24.560] 一般都会有个.files
[34:24.560 --> 34:28.080] 我还真没注意过这个事情
[34:28.080 --> 34:29.520] 一般有名的作者
[34:29.520 --> 34:32.560] 一般有一些还是会公开一下自己.files
[34:32.560 --> 34:37.120] 就像刚刚说的那个写winplug的那个韩国人
[34:37.120 --> 34:40.080] 他也有他也公开自己的.files
[34:40.080 --> 34:42.399] 那些是可以参考一下
[34:42.400 --> 34:44.080] 不过我也参考过一些
[34:44.080 --> 34:47.040] 然后发现他们还有些还挺高端的
[34:47.040 --> 34:49.120] 很硬核
[34:49.120 --> 34:51.040] 配置特别少
[34:51.040 --> 34:53.120] 有一些人那个不太喜欢插件
[34:53.120 --> 34:54.320] 插件按的特别少
[34:54.320 --> 34:57.920] 然后写了很多都是他自己的一些插件
[34:57.920 --> 34:59.600] 所以比较难参考
[34:59.600 --> 35:02.640] 他们比较倾向用自己写的插件
[35:02.640 --> 35:04.160] 不太倾向用别人写的
[35:04.160 --> 35:04.480] OK
[35:04.480 --> 35:08.960] 那我们接下来再来聊一下那个winplug的开发
[35:08.960 --> 35:13.600] 这个就我其实没啥插件开发的经验
[35:13.600 --> 35:17.120] 因为我vim script学的太菜了
[35:17.120 --> 35:18.960] 那要不我来说说吧
[35:18.960 --> 35:23.040] 那其实vim插件
[35:23.040 --> 35:27.840] 我最早写过一个插件是用那时候是用python开发的
[35:27.840 --> 35:31.760] 那时候那个插件的功能是说
[35:31.760 --> 35:36.160] 上班时候可以看推特也好
[35:36.160 --> 35:37.760] 然后看微博也好
[35:37.760 --> 35:41.280] 把微博推特信息同步到本地的代码文件里面
[35:41.280 --> 35:44.320] 然后再把它以注释的形式展示出来
[35:44.320 --> 35:47.120] 这样相当于别人看你以为你在看代码
[35:47.120 --> 35:48.960] 但其实你是在看推特
[35:48.960 --> 35:52.560] 我最早写的插件是用
[35:52.560 --> 35:57.280] 那我说说那个怎么样学习vim script
[35:57.280 --> 36:03.440] 这个其实我个人还是看vim教程的
[36:03.440 --> 36:05.920] 因为vim script其实简单的来说
[36:05.920 --> 36:11.920] 就是和你在vim就是输的命令是完全一样
[36:11.920 --> 36:15.520] 他就是把vim上的命令执行了一下而已
[36:15.520 --> 36:16.880] 就相当于连续的执行
[36:16.880 --> 36:19.760] 你比你是通过
[36:19.760 --> 36:22.000] 以后执行那些命令
[36:22.000 --> 36:25.840] 其实vim script就是自动的去执行一系列命令而已
[36:25.840 --> 36:29.520] 所以基本上vim script的所使用的命令
[36:29.520 --> 36:34.480] 其实就是平时你操作vim的时候用的那些命令
[36:34.480 --> 36:39.360] 然后以及你可以自己写一些function
[36:39.360 --> 36:42.000] 以及用一些内置的function
[36:42.000 --> 36:43.040] 主要就是这些
[36:43.040 --> 36:46.320] 所以如果要想开发插件的话
[36:46.320 --> 36:51.520] 我个人觉得看一下vim的自带的教程是完全足够了
[36:51.520 --> 36:54.960] 以及你可能会需要再去看一下
[36:54.960 --> 37:00.480] vim有一个帮助的tag是叫function list
[37:00.480 --> 37:03.680] 看一下那个function list下面有哪些函数
[37:03.680 --> 37:05.600] 他会根据类别
[37:05.600 --> 37:07.839] 比如说字符串的操作
[37:07.839 --> 37:12.799] 然后比如说dict和map的操作
[37:12.799 --> 37:14.879] 然后他会
[37:14.879 --> 37:21.359] 然后包括还有比如说插入以及删除文本等等
[37:21.359 --> 37:25.839] 这些操作他会分门列表的会写出一系列的function
[37:25.839 --> 37:29.279] 然后看一下就大概知道vim有哪些功能了
[37:29.279 --> 37:31.839] 然后这个就可以在开发插件的时候使用
[37:31.840 --> 37:34.240] 可能我自己好像就主要是这些
[37:34.240 --> 37:39.040] 有时候把代码公开了以后可能
[37:39.040 --> 37:41.360] 别人会建议
[37:41.360 --> 37:44.320] 别人会提proquest会建议说
[37:44.320 --> 37:48.720] 这个功能可以用vim一个新加的函数什么解决
[37:48.720 --> 37:50.800] 然后这个我也碰到过好几次
[37:50.800 --> 37:54.880] 因为最新的vim新加的一些函数我也没有别人了解
[37:54.880 --> 37:56.240] 这个也是个办法
[37:56.240 --> 37:59.840] 其实vim script我看完了
[37:59.840 --> 38:02.080] learn vim script the hard way
[38:02.080 --> 38:05.600] 然后我还写了十几篇笔记
[38:05.600 --> 38:09.360] 但是我发现学的时候你发现多多了
[38:09.360 --> 38:11.040] 但是写的时候是另一回事
[38:11.040 --> 38:15.520] 这还是不能从头写完一个那个插件
[38:15.520 --> 38:20.960] 可能还是就是还是得有自己想写什么插件
[38:20.960 --> 38:25.520] 可能多写几个自然就用的就比较熟悉了
[38:25.520 --> 38:31.600] 我其实现在我维护vim那个control sf的时候
[38:31.600 --> 38:33.440] 我有时候我也得去查一下文档
[38:33.440 --> 38:36.960] 我才能想得起来vim上面到底应该怎么写
[38:36.960 --> 38:39.600] 他那个import机制是什么样的
[38:39.600 --> 38:41.200] 我一直没有搞明白这个
[38:41.200 --> 38:43.280] 就是别人插线里面有一个函数
[38:43.280 --> 38:44.080] 你怎么可以调到
[38:44.080 --> 38:46.480] vim其实没有import这种机制的
[38:46.480 --> 38:49.440] vim他其实你可以理解为
[38:49.440 --> 38:56.800] 他就是把你怎么说你调用另外一个函数
[38:56.800 --> 39:00.800] 他其实你只是他有两种机制吧
[39:00.800 --> 39:04.320] 一种机制就是所有函数都是暴露在全局的
[39:04.320 --> 39:05.360] 你是直接调的
[39:05.360 --> 39:07.520] 另外一种机制他是outload的
[39:07.520 --> 39:12.800] 就是他会那个函数名里面会有一个警号
[39:12.800 --> 39:16.960] 警号比如说a警号b警号
[39:16.960 --> 39:20.160] function1这种形式就像那他会搜索
[39:20.160 --> 39:23.760] a目录下的b文件里面的一个名字
[39:23.760 --> 39:26.400] 叫functiona的这么一个function
[39:26.400 --> 39:28.160] 他会这样来调用它
[39:28.160 --> 39:31.840] 但是基本上来说其实很多函数都是全局的
[39:31.840 --> 39:35.280] 除了他会函数名上面会一般会带上
[39:35.280 --> 39:38.080] 就是那个插件的名字
[39:38.080 --> 39:40.320] 一般会把插件名当做函数名的前缀
[39:40.320 --> 39:43.040] 如果就是是一个全局函数的话
[39:43.040 --> 39:47.120] 我倒是觉得Wim'sCrypt比较像JavaScript
[39:47.120 --> 39:49.200] 因为他们都是弱类型的
[39:49.200 --> 39:53.279] 而且都是一开始为了一个很简单的功能设计的一个东西
[39:53.279 --> 39:59.200] OK我们接下来再聊一下用Python开发插件
[39:59.200 --> 40:04.240] 那这么说信涛有用Python开发过插件吗
[40:04.240 --> 40:08.000] 没有没有
[40:08.000 --> 40:11.360] 因为如果我我写过一些插件的小东西
[40:11.360 --> 40:13.920] 但其实也是用Wim'sCrypt写的
[40:13.920 --> 40:15.920] 我觉得Wim'sCrypt是不是
[40:15.920 --> 40:19.680] Wim就不用再开进程来处理这个插件了
[40:19.680 --> 40:24.000] 那用Python的话可能要再启动一个进程
[40:24.000 --> 40:27.040] 我觉得心理上可能觉得他们会慢一点
[40:27.040 --> 40:31.840] 其实我倒个人觉得应该单论速度的话
[40:31.840 --> 40:34.000] 估计还是Python插件会更快点
[40:34.000 --> 40:40.000] 我那我先说说Python插件和Python怎么开发Wim插件
[40:40.000 --> 40:44.880] 其实Python开发Wim插件就是因为Wim支持一个命令
[40:44.880 --> 40:47.200] 好像是Python点什么什么
[40:47.200 --> 40:51.360] 就是他允许在Wim里面执行一个Python的文件
[40:51.360 --> 40:54.160] 然后呢Python也有个Wim的库
[40:54.160 --> 41:00.480] 它是允许在Python文件就Python脚本里面去执行一条Wim命令
[41:00.480 --> 41:07.520] 就是是这样的形式来Wim来支持就是用Python来开发插件
[41:07.520 --> 41:11.440] 但就是你Python代码里面你可以把那些运算也好
[41:11.440 --> 41:16.000] 然后比如说和外部的系统交互的那些部分全部做完
[41:16.000 --> 41:20.640] 然后把最终的结果呢用一个Wim命令去让Wim展示出来
[41:20.640 --> 41:27.040] 就像我之前说的说我去把推特上面的推特抓下来的时候
[41:27.040 --> 41:30.000] 这个呢我是用Python实践的
[41:30.000 --> 41:32.560] 然后再把推特抓完以后呢
[41:32.560 --> 41:34.000] 然后在Wim里面展示
[41:34.000 --> 41:39.280] 然后的那些呢全部都是用就Wim命令去实现的
[41:39.280 --> 41:42.960] 它的形式是这样的形式
[41:42.960 --> 41:52.240] 然后呢所以呢一般来说比较复杂的特别可能是需要和一些外部系统交互的那些脚本呢
[41:52.240 --> 41:56.320] 可能用Python会比较多一点就像you complete me也是用Python写的
[41:56.320 --> 42:00.640] 因为他是好像用到还用到c++
[42:00.640 --> 42:04.720] 所以我记得他好像是用Python来做借口
[42:04.720 --> 42:09.359] 但是用Python开发差件有一个不太好的地方呢
[42:09.359 --> 42:12.240] 就是因为那就要求Wim在编译的时候
[42:12.240 --> 42:15.520] 他必须要有一个要增加Python支持
[42:15.520 --> 42:17.920] 编译选项里面得有个Python
[42:17.920 --> 42:23.359] 他相当于把解释器编译进那个Wim里面了
[42:23.359 --> 42:27.200] 应该不是把解释器整个编译进Wim里面
[42:27.200 --> 42:32.480] 应该只是编译了某一些怎么说交互的接口吧
[42:32.480 --> 42:35.279] 这个实现方式我倒不是很清楚
[42:35.279 --> 42:38.720] 但是编译这个经常会有比较多的问题
[42:38.720 --> 42:40.399] 在Wim比如说编译的时候
[42:40.399 --> 42:44.879] 你他可能是link了某一个比如Python2.7
[42:44.879 --> 42:50.240] 但是如果你本地的运行环境是Python3.0以上的
[42:50.240 --> 42:52.399] 然后就会导致会出现问题
[42:52.399 --> 42:55.439] 所有的用Python写的Wim差件都会用不了
[42:55.440 --> 42:59.280] 所以用Python写差件就有这个不是很方便的地方
[42:59.280 --> 43:02.160] 所以一般能用Wim script的话
[43:02.160 --> 43:04.080] 一般还是尽量用Wim script写
[43:04.080 --> 43:06.880] 这样就是不会出现兼容性的问题
[43:06.880 --> 43:12.240] 就针对你刚才说他的要求是说
[43:12.240 --> 43:18.160] 比如说我想在我的Wim上面用一个别人拿Python写的差件
[43:18.160 --> 43:22.000] 我在编译我的Wim的时候需要加一些flag
[43:22.000 --> 43:22.800] 是这个意思吗
[43:22.800 --> 43:23.600] 是的
[43:23.600 --> 43:28.240] 那确实还有点不是特别方便
[43:28.240 --> 43:32.560] 不过默认的就是一般你比如说用Homebrew装的
[43:32.560 --> 43:36.080] 那些默认大家都会加上Python的支持
[43:36.080 --> 43:41.600] 对我记得Homebrew装那个就已经加了
[43:41.600 --> 43:46.319] 你打Wim刚刚version他有一个Python的那个吗
[43:46.319 --> 43:50.240] 就加Python3就指的是编译好了的吗
[43:50.240 --> 43:50.960] 对吧
[43:50.960 --> 43:55.600] 那你刚才说就是Python版本的不同导致
[43:55.600 --> 44:01.360] 差件不兼容的问题是发生在就是开发者和使用者使用的版本不同
[44:01.360 --> 44:02.160] 这个时候
[44:02.160 --> 44:06.720] 不是的是比如说你Wim编译的时候
[44:06.720 --> 44:12.800] 他就会需要你就可能link到某一个Python的库
[44:12.800 --> 44:17.520] 然后那个时候如果你link的Python的库是比如说2.7的
[44:17.520 --> 44:21.040] 但是当你实际运行那个脚本的时候
[44:21.040 --> 44:23.920] 就用Python写的Wim插件的时候
[44:23.920 --> 44:29.200] 这个时候如果你的本地的就是Python的版本
[44:29.200 --> 44:32.080] 比如说是3.0以上的话就会出现问题
[44:32.080 --> 44:38.320] 因为你link的那个header不兼容
[44:38.320 --> 44:39.600] 好像是API不兼容
[44:39.600 --> 44:41.600] 具体原因我确实还没这么研究过
[44:41.600 --> 44:43.840] 但是我经常碰到这个问题
[44:43.840 --> 44:46.160] 就是you complete me经常会碰到这个问题
[44:46.160 --> 44:54.240] 其实他是不是在Wim里面还是开了一个Python进程来跑你的Python代码
[44:54.240 --> 44:55.759] 肯定是这个肯定是
[44:55.759 --> 45:03.200] 对我在想那个Python不是新加了一个subinterpreter的功能吗
[45:03.200 --> 45:07.600] 然后因为加了这个我看那个Redis
[45:07.600 --> 45:11.680] 他之前那个Redis module不是要用c写
[45:11.680 --> 45:15.680] 现在可以用Python写就用他那个subinterpreter
[45:15.680 --> 45:19.600] 我感觉是不是也可以用这个
[45:19.600 --> 45:21.680] 就随便瞎说的
[45:21.680 --> 45:26.480] 我感觉现在的模式就是一个Python进程和一个Wim进程相互通信
[45:26.480 --> 45:29.600] 然后传一些那个Wim script命令
[45:29.600 --> 45:30.319] 就这样子
[45:30.319 --> 45:33.279] 对我理解也是这样
[45:33.279 --> 45:36.480] 他是通过Wim内置的Python
[45:36.480 --> 45:39.279] 跟Python的Wim库来实现双向的通信
[45:39.279 --> 45:43.600] 但是这样你假如说我安装10个Python写的Wim插件
[45:43.600 --> 45:46.640] 那要是开10个解释器对吧
[45:46.640 --> 45:49.680] 那一个Python解释器就要占一些内存
[45:49.680 --> 45:54.480] 我的感觉估计会有10个解释器吗
[45:54.480 --> 45:56.319] 对对我觉得这个是个好问题
[45:56.319 --> 45:57.680] 对还是可以测试一下的
[45:57.680 --> 45:59.600] 猜的吧
[45:59.600 --> 46:02.080] 对假如10个解释器的话
[46:02.080 --> 46:06.319] 相对一个电脑来说可能占内存还挺多的
[46:06.319 --> 46:07.920] 几百兆了
[46:07.920 --> 46:10.960] 但是对但是感觉你也不会就是说
[46:10.960 --> 46:16.080] 比如说你同时就比如说你在Wim里进行了某一个操作
[46:16.080 --> 46:18.240] 然后它是一个插件的快捷键
[46:18.240 --> 46:19.920] 但是你做这个操作的时候
[46:19.920 --> 46:22.800] 他肯定不可能同时触发10个插件
[46:22.800 --> 46:24.160] 这种概率太小
[46:24.160 --> 46:25.440] 然后他执行完这段之后
[46:25.440 --> 46:26.400] 他这个进程就没了
[46:26.400 --> 46:30.720] 所以你基本上一次也不太可能说同时开10个进程
[46:30.720 --> 46:31.200] 我觉得
[46:31.200 --> 46:37.360] 不过我觉得应该不太可能说每一条命令就会开一个进程
[46:37.360 --> 46:39.680] 然后运行完就把这个进程结束了
[46:39.680 --> 46:41.359] 我觉得应该也不是这个形式
[46:41.359 --> 46:44.319] 我估计那个进程应该还是常驻的
[46:44.319 --> 46:50.399] 为啥你就像用python执行一个脚本不就结束就没了吗
[46:50.399 --> 46:54.960] 我的感觉他如果每次每一条命令都得起一个解释器
[46:54.960 --> 46:57.600] 然后命令执行完又关闭的话
[46:57.600 --> 46:59.520] 那我觉得效率应该会有问题
[46:59.520 --> 47:00.399] 我的感觉
[47:00.399 --> 47:02.640] 对我刚刚说的慢
[47:02.640 --> 47:04.399] 就是我怕他是这种形式
[47:04.399 --> 47:09.440] 对python的启动还是好像还是比较慢的
[47:09.440 --> 47:14.160] 对所以他可能对我觉得这部分说不定他有些优化之类
[47:14.160 --> 47:16.160] 就是有一个进程
[47:16.160 --> 47:18.400] 然后一直到后面跑有可能
[47:18.400 --> 47:19.760] 我感觉应该有
[47:19.760 --> 47:22.240] 因为毕竟python是解释型语言的话
[47:22.240 --> 47:28.880] 我觉得就相当于你按需的把命令需要执行的命令发给他进行运行的话
[47:28.880 --> 47:30.240] 我觉得这个也比较合理
[47:30.240 --> 47:36.000] 我们在接下来聊一下vim的不足
[47:36.000 --> 47:37.680] 然后在推荐环节
[47:37.680 --> 47:39.520] 我们就跟插件一起
[47:39.520 --> 47:42.319] 我们接下来聊一下vim的不足
[47:42.319 --> 47:43.440] 我先说吧
[47:43.440 --> 47:45.200] 第一个就是编辑中文的问题
[47:45.200 --> 47:49.200] 因为中文在vim里面占的宽度不太一样
[47:49.200 --> 47:52.640] 然后vim很多操作都是基于单词的
[47:52.640 --> 47:56.399] 比如说ciw你可以删掉单词重写
[47:56.399 --> 48:00.000] 但是中文的话他就会给你删到逗号
[48:00.000 --> 48:01.440] 他不知道什么时候结束
[48:01.440 --> 48:03.919] 像类似这样的知识
[48:03.919 --> 48:05.200] 我觉得不太好
[48:05.200 --> 48:11.359] 英文如果是一长串也会给你删到逗号
[48:11.359 --> 48:13.919] 不是有一个他会做分词吗
[48:13.919 --> 48:15.759] 会做对他有个ciw
[48:15.759 --> 48:17.680] ciw就是change in word
[48:17.680 --> 48:19.759] 他vim有很多操作都是基于word的
[48:19.759 --> 48:22.240] 他会给你空格为边界
[48:22.240 --> 48:26.480] 中文空格为边界不可以吗
[48:26.480 --> 48:29.040] 我印象中好像
[48:29.040 --> 48:30.000] 我想
[48:30.000 --> 48:31.120] 中文没有边界
[48:31.120 --> 48:36.080] 我想信东说的应该是不是根据空格来
[48:36.080 --> 48:38.560] 其实怎么样分word
[48:38.560 --> 48:42.400] 其实是有一个参数是可以控制的
[48:42.400 --> 48:44.400] 有一个叫keyword的参数是可以控制的
[48:44.400 --> 48:46.720] 一般来说他就是会把分号
[48:46.720 --> 48:48.160] 然后引号
[48:48.160 --> 48:50.400] 然后空格作为这些keyword
[48:50.400 --> 48:52.400] 然后就作为分词的依据的
[48:52.400 --> 48:53.759] 中文的话
[48:53.759 --> 48:55.600] 他没有办法
[48:55.600 --> 48:58.640] 中文分词本来也是个比较麻烦的问题
[48:58.640 --> 49:00.160] 所以目前是做不到
[49:00.160 --> 49:02.160] 对
[49:02.160 --> 49:05.440] 说不定可以像用什么结吧之类的
[49:05.440 --> 49:07.200] 然后结合一下vim
[49:07.200 --> 49:08.480] 就比如说你
[49:08.480 --> 49:09.279] 改一个word
[49:09.279 --> 49:12.799] 他就给你识别出来中文里面的一个分词的
[49:12.799 --> 49:15.600] 那个那个那个两个一个词
[49:15.600 --> 49:17.920] 实现应该还是可以实现的
[49:17.920 --> 49:21.200] 我觉得vim编辑中文本身就不是很方便
[49:21.200 --> 49:26.160] 因为vim的很多命令都是要用英文输入法才能输入进去
[49:26.160 --> 49:28.000] 然后对对对这是最大的问题
[49:28.000 --> 49:29.120] 对对
[49:29.120 --> 49:30.720] 你要再写输入中文
[49:30.720 --> 49:31.759] 你又得切输入法
[49:31.759 --> 49:33.600] 其实这个本身就不是很方便
[49:33.600 --> 49:36.319] 除了那个java得用IDE
[49:36.319 --> 49:38.799] 然后编辑中文像markdown什么的
[49:38.799 --> 49:41.759] 我一般还是用那像些
[49:41.759 --> 49:45.680] table这种GUI的编辑器
[49:45.680 --> 49:48.799] 用vim还是有点问题
[49:48.799 --> 49:51.200] 我觉得写markdown就不要
[49:51.200 --> 49:55.279] 就其实用vim就不是特别必要的感觉
[49:55.279 --> 49:56.640] 嗯
[49:56.640 --> 49:59.279] 就所见即所得的那种比较好对吧
[49:59.279 --> 50:01.120] 对你要说vim的不足的话
[50:01.120 --> 50:04.640] 我觉得我个人其实倾向于未来的编辑器
[50:04.640 --> 50:06.960] 可能更接近VS code的那种形式
[50:06.960 --> 50:12.799] 就是说他可能是就是基于electronic的那种
[50:12.799 --> 50:13.920] electron吧
[50:13.920 --> 50:17.040] 就基于electron的那种那种编辑器
[50:17.040 --> 50:19.920] 因为vim他特别就像
[50:19.920 --> 50:23.520] 他的脚本其实能控制的东西没有那么多
[50:23.520 --> 50:28.880] 不像javascript对浏览器的行为的控制
[50:28.880 --> 50:34.240] 那种能够就是能够实现的功能会很多
[50:34.240 --> 50:36.640] 就比如说就像markdown的preview功能
[50:36.640 --> 50:39.120] 加上vim里面就很难实现
[50:39.120 --> 50:46.080] 但是像但是你在基于electron的那些编辑器的atom也好
[50:46.080 --> 50:47.680] 然后vs code也好
[50:47.680 --> 50:50.160] 那些就实现起来很自然很方便
[50:50.160 --> 50:52.720] 这样plantuml也是一样的
[50:52.720 --> 50:54.480] 在vim我虽然是用vim写的
[50:54.480 --> 50:57.520] 但是他的preview就很难做
[50:57.520 --> 51:02.720] 这种一般一边开个vim一边开个浏览器
[51:02.720 --> 51:05.839] vim特别像vim他是作为脚本
[51:05.839 --> 51:09.359] 他他要开发插件使用专门自己的脚本语言
[51:09.359 --> 51:15.279] 但是如果像像vs code的那些用js来开发插件的话
[51:15.279 --> 51:19.439] 那我觉得就是开发者就更容易开发
[51:19.439 --> 51:21.279] 而且这样开发者会多很多
[51:21.280 --> 51:23.520] 不需要专门再去学一门新的语言
[51:23.520 --> 51:25.600] 其实还是很有优势的
[51:25.600 --> 51:31.680] 对对而且你学了vim script你只能写vim script对吧
[51:31.680 --> 51:34.480] 没什么用你像emacs你还可以学个lisp
[51:34.480 --> 51:40.480] 所以我觉得长远来看应该还是会走向vs code的那种形式的编辑器
[51:40.480 --> 51:44.160] 我觉得是这样的吧
[51:44.160 --> 51:51.200] 就是vim就是我觉得我能学vim是因为我恰好处于我上学的时候
[51:51.200 --> 51:52.240] 没有vs code
[51:52.240 --> 51:55.359] 对然后我的场景又很简单
[51:55.359 --> 51:57.279] 不是那种工程项目级的开发
[51:57.279 --> 52:00.160] 所以说稳稳编辑器就够用了
[52:00.160 --> 52:04.319] 但是等你工作之后你会发现你还是会想尽办法
[52:04.319 --> 52:08.000] 想把vim配成一个比较强大的ide的这种感觉
[52:08.000 --> 52:14.240] 其实vs code或者atom其实我也用过
[52:14.240 --> 52:18.240] 但是就是我觉得他最大的问题就是
[52:18.240 --> 52:21.279] 一个对vim模式支持的不是很足
[52:21.279 --> 52:22.720] 当然我那时候用的时候是这样
[52:22.720 --> 52:24.879] 另外就是同一个功能插件
[52:24.879 --> 52:27.680] 我能搜出至少三个插件做同一个功能
[52:27.680 --> 52:29.439] 我根本不知道它是哪个好
[52:29.439 --> 52:32.799] 一般下载量多的比较好
[52:32.799 --> 52:37.919] 是还有一个问题就是因为我用的工具比较多
[52:37.919 --> 52:39.919] 可能写python写golang
[52:39.919 --> 52:41.919] 然后还有vs code
[52:41.919 --> 52:45.359] 对就是所以就是pycharm golang还有vs code
[52:45.359 --> 52:47.600] 就是pycharm和golang还好
[52:47.600 --> 52:49.600] 他们可以共用一个vim配置
[52:49.600 --> 52:54.319] 对但是同样是做这种vim的k-binding
[52:54.319 --> 53:01.600] vs code和这个pycharm其实配置还是有一些不一样的
[53:01.600 --> 53:05.839] 对就是我要为每一个工具都要准备一份k-binding的配置
[53:05.839 --> 53:08.160] 有那种项目吗
[53:08.160 --> 53:11.920] 比如说我把我的vim assay上传上去
[53:11.920 --> 53:15.440] 给我生成各个项目的vim k-binding
[53:15.440 --> 53:17.440] 这个我没用过
[53:17.440 --> 53:19.440] 我是没有这个需求
[53:19.440 --> 53:21.440] 好像我也没有这个需求
[53:21.440 --> 53:23.440] k-binding好像都是一套的
[53:23.440 --> 53:25.440] 但是有一些还有一些其他的配置
[53:25.440 --> 53:31.440] 比如说要不要用那个系统的那个复制粘贴的那个粘贴板
[53:31.440 --> 53:37.440] 然后这些配置什么的其实在不同的工具里虽然都是vim
[53:37.440 --> 53:41.440] 但是他要求你配置的语法配置的格式可能还是有些许不同的
[53:41.440 --> 53:45.440] 因为我就用idea和vim
[53:45.440 --> 53:49.440] idea好像是能够读idea的那个vim插件
[53:49.440 --> 53:51.440] 我记得是能够读本地的vim assay的吧
[53:51.440 --> 53:53.440] 好像是
[53:53.440 --> 53:57.440] 是的是的这个我一直在用
[53:57.440 --> 53:59.440] 所以我没特别配
[53:59.440 --> 54:07.440] 浏览器里面的浏览器因为我chrome也装了一个vim的k-binding的一个插件
[54:07.440 --> 54:13.440] 那个好像是有个专门配置文件的
[54:13.440 --> 54:23.440] 对我就感觉vim可能未来会进化成就是跟很多其他东西集成起来
[54:23.440 --> 54:29.440] 而就是直接用vim本身的这种情况就越来越少
[54:29.440 --> 54:31.440] 可能稍微变少
[54:31.440 --> 54:39.440] 对我其实发现一个问题就是说当你在ide里面你想用vim模式的时候
[54:39.440 --> 54:43.440] 他的ide本身的快捷键和vim的经常会有一些冲突
[54:43.440 --> 54:47.440] 就比较难配置
[54:47.440 --> 54:53.440] 然后就比如说我记得你在idea里面enable了idea vim
[54:53.440 --> 54:57.440] 然后他的ctrl c和ctrl v就不是复制粘贴了
[54:57.440 --> 55:01.440] 他就是vim里的一个什么东西
[55:01.440 --> 55:03.440] 他就被vim给占用了
[55:03.440 --> 55:05.440] 就会天之命令
[55:05.440 --> 55:07.440] 就会就会蛮多这种问题的
[55:07.440 --> 55:11.440] 所以感觉也是有时候挺烦的
[55:11.440 --> 55:18.440] 对其实第三方的ide里面用vim都有问题
[55:18.440 --> 55:19.440] 第一个是冲突
[55:19.440 --> 55:24.440] 第二个就是他实现的那些vim都不是特别完全
[55:24.440 --> 55:30.440] 就有一些命令你按下去之前你不知道他有没有作用
[55:30.440 --> 55:31.440] 对
[55:31.440 --> 55:37.440] 比如说vim的ed那一系列命令就是你打冒号key输j
[55:37.440 --> 55:39.440] 对操作当前行那些命令
[55:39.440 --> 55:42.440] ed大多数都没有实现
[55:42.440 --> 55:44.440] ed是干嘛的我都没用过
[55:44.440 --> 55:49.440] 就是unix上的一个行编辑器
[55:49.440 --> 55:51.440] 行编辑器就跟那个awk一样
[55:51.440 --> 55:53.440] 只不过是vim的v的前身
[55:53.440 --> 55:55.440] 很老了
[55:55.440 --> 55:59.440] 然后现在vim里面很多命令其实都是延续的ed的
[55:59.440 --> 56:01.440] 你说是ed编辑器是吧
[56:01.440 --> 56:04.440] 就比如说你想删掉vim
[56:04.440 --> 56:07.440] 那个文件里面含有某个词的那一行
[56:07.440 --> 56:10.440] 就所有含有这个词的那一行全都删掉
[56:10.440 --> 56:12.440] 你会输一个冒号key输j
[56:12.440 --> 56:14.440] 然后搜索这个单词
[56:14.440 --> 56:17.440] 然后再斜杠d
[56:17.440 --> 56:19.440] 这个就是个ed的命令
[56:19.440 --> 56:21.440] 我好像听说过对
[56:21.440 --> 56:23.440] 对
[56:23.440 --> 56:26.440] 然后像这种命令很多vim的
[56:26.440 --> 56:27.440] 要么实现了一部分
[56:27.440 --> 56:29.440] 要么就没有这个功能
[56:29.440 --> 56:30.440] 对
[56:30.440 --> 56:32.440] 这个确实支持的不完全
[56:32.440 --> 56:37.440] 其实这个就是说我之前也是VSCode
[56:37.440 --> 56:39.440] 我记得我装了两个插件
[56:39.440 --> 56:40.440] 一个好像叫vmod
[56:40.440 --> 56:42.440] 一个叫exmod
[56:42.440 --> 56:44.440] vmod就只是
[56:44.440 --> 56:49.440] vmod这个normalmod下面的所有那些keybinding
[56:49.440 --> 56:53.440] 然后exmod就支持了一些命令
[56:53.440 --> 56:56.440] 刚刚说冒号开头的一些命令
[56:56.440 --> 56:58.440] 但有些也支持不是很完全
[56:58.440 --> 57:00.440] 所以我最后还是放弃了
[57:00.440 --> 57:01.440] 用不下去了
[57:01.440 --> 57:03.440] ultim里那个vim插件
[57:03.440 --> 57:06.440] 它是支持就是exmod
[57:06.440 --> 57:10.440] 反正就是我用的exmod的command
[57:10.440 --> 57:12.440] 它至少都是支持的
[57:12.440 --> 57:15.440] 对可能我用的比较低端一些
[57:15.440 --> 57:16.440] 所以可能
[57:16.440 --> 57:19.440] 所以这个也确实刚刚也
[57:19.440 --> 57:20.440] 信叨说也挺对的
[57:20.440 --> 57:23.440] 不同的vim就是可能
[57:23.440 --> 57:26.440] 不同的vim的模式
[57:26.440 --> 57:29.440] 可能在chrome下面和idea里面的
[57:29.440 --> 57:31.440] 或者刚刚说atom里面的
[57:31.440 --> 57:32.440] VSCode里面的
[57:32.440 --> 57:34.440] 不同的插件
[57:34.440 --> 57:36.440] 其实支持功能都不完全一样
[57:36.440 --> 57:38.440] 有些支持有些不支持
[57:38.440 --> 57:40.440] 确实挺麻烦的
[57:40.440 --> 57:44.440] OK我们进入最后一个环节
[57:44.440 --> 57:46.440] 今天的推荐环节
[57:46.440 --> 57:50.440] 就是我们今天的推荐环节是这样子的
[57:50.440 --> 57:54.440] 就是假如说你的vim里面只能装三个插件
[57:54.440 --> 57:56.440] 你会选择什么
[57:56.440 --> 57:58.440] 然后如果有其他的
[57:58.440 --> 57:59.440] 想学习vim的资料的话
[57:59.440 --> 58:03.440] 也可以说一下
[58:03.440 --> 58:06.440] 要不我来先说吧
[58:06.440 --> 58:08.440] 我看一下那个我的vim IC
[58:08.440 --> 58:12.440] 我觉得我会留NerdTree
[58:12.440 --> 58:15.440] NerdTree就是在你的vim左边显示
[58:15.440 --> 58:17.440] 那个文件数那个功能
[58:17.440 --> 58:21.440] 没有这个vim原来的那个用的不是很习惯
[58:21.440 --> 58:25.440] 然后是
[58:25.440 --> 58:27.440] 补全
[58:27.440 --> 58:29.440] 补全我现在用的是一系列插件
[58:29.440 --> 58:31.440] 要装vim async
[58:31.440 --> 58:33.440] async complete
[58:33.440 --> 58:35.440] vim lsp
[58:35.440 --> 58:38.440] 然后再装那个一个lsp的进程
[58:38.440 --> 58:41.440] 但是我把它归成一类吧
[58:41.440 --> 58:46.440] 然后第三个插件的话是
[58:46.440 --> 58:49.440] vim-jh-line那个插件
[58:49.440 --> 58:52.440] 它就是你在vim里面打开一个
[58:52.440 --> 58:54.440] Git的仓库里面的一个文件
[58:54.440 --> 58:56.440] 然后你敲下一个快捷键
[58:56.440 --> 59:00.440] 它就给你打开浏览器
[59:00.440 --> 59:02.440] 然后另一间就是
[59:02.440 --> 59:04.440] Github的那一行代码
[59:04.440 --> 59:06.440] 对这个插件
[59:06.440 --> 59:07.440] 其实我用的比较多
[59:07.440 --> 59:09.440] 因为经常会给别人贴代码
[59:09.440 --> 59:12.440] 然后它一开始是支持Github的
[59:12.440 --> 59:16.440] 然后之前我们公司用的那个
[59:16.440 --> 59:19.440] Git管理是拖欠在bitbucket上的
[59:19.440 --> 59:21.440] 所以我给它提了一个pr
[59:21.440 --> 59:22.440] 加了bitbucket的功能
[59:22.440 --> 59:24.440] 后来我又来阿里了
[59:24.440 --> 59:25.440] 阿里是用GitLab的
[59:25.440 --> 59:27.440] 我又给它加了GitLab的功能
[59:27.440 --> 59:31.440] 所以这个插件现在是支持
[59:31.440 --> 59:34.440] Github,GitLab跟Bitbucket的
[59:34.440 --> 59:37.440] 它是根据那个.git下面那个config
[59:37.440 --> 59:40.440] 识别到你的那个remote的地址
[59:40.440 --> 59:43.440] 然后帮你生成一个http的UI
[59:43.440 --> 59:45.440] 用了挺多的
[59:45.440 --> 59:47.440] 对那我就避开
[59:47.440 --> 59:49.440] 信涛说的那几个插件
[59:49.440 --> 59:51.440] 其实我本来也想推荐一下Netastream的
[59:51.440 --> 59:53.440] 比较出名的一个插件吧
[59:53.440 --> 59:55.440] 但是其实
[59:55.440 --> 59:59.440] 我最近其实感觉用Wim用Netastream
[59:59.440 --> 01:00:01.440] 其实可能会少一些吧
[01:00:01.440 --> 01:00:05.440] 就是我先说我要推荐的几个吧
[01:00:05.440 --> 01:00:08.440] 我正在看我的这个配置文件
[01:00:08.440 --> 01:00:12.440] 可能一个叫Fintastic
[01:00:12.440 --> 01:00:16.440] 对它主要是用来做语法检查的
[01:00:16.440 --> 01:00:20.440] 如果你中间写了一些语法的话
[01:00:20.440 --> 01:00:23.440] 有问题那其实它可以直接在Wim层面
[01:00:23.440 --> 01:00:25.440] 就可以检查出来
[01:00:25.440 --> 01:00:27.440] 然后在你的最左边给你个提示
[01:00:27.440 --> 01:00:28.440] 告诉你这有问题
[01:00:28.440 --> 01:00:29.440] 以及是有什么问题
[01:00:29.440 --> 01:00:30.440] 你都可以看的
[01:00:30.440 --> 01:00:34.440] 就包括这种比如说静态型的
[01:00:34.440 --> 01:00:36.440] 它其实是可以给你检测类型啊
[01:00:36.440 --> 01:00:39.440] 然后像Python这种
[01:00:39.440 --> 01:00:41.440] 其实你可以配上一些
[01:00:41.440 --> 01:00:43.440] Flake8的一些配置啊什么的
[01:00:43.440 --> 01:00:46.440] 可以给你做这种检查
[01:00:46.440 --> 01:00:48.440] 对让你在写的时候
[01:00:48.440 --> 01:00:51.440] 就知道你写的代码有问题了
[01:00:51.440 --> 01:00:55.440] 这可能是我想先推荐的一个
[01:00:55.440 --> 01:00:59.440] 然后那我推荐一下这个ControlP
[01:00:59.440 --> 01:01:01.440] 对因为用了ControlP之后
[01:01:01.440 --> 01:01:04.440] 其实Netstream的需求就会少很多
[01:01:04.440 --> 01:01:07.440] 对因为其实大部分时候
[01:01:07.440 --> 01:01:09.440] 我都清楚我要去编辑什么东西
[01:01:09.440 --> 01:01:13.440] 对就是总会有个隐约的名字
[01:01:13.440 --> 01:01:15.440] 基本上用ControlP就可以找到它
[01:01:15.440 --> 01:01:20.440] 然后我再推荐一个言直档吧
[01:01:20.440 --> 01:01:22.440] 对因为其实本来想推荐
[01:01:22.440 --> 01:01:23.440] Wim的各个语言系列
[01:01:23.440 --> 01:01:25.440] 但我觉得这个就没边了
[01:01:25.440 --> 01:01:27.440] 就是Wim-某个语言的名字
[01:01:27.440 --> 01:01:30.440] 这种插件其实就是写的时候用就好
[01:01:30.440 --> 01:01:32.440] 我再推荐一个Airline
[01:01:32.440 --> 01:01:39.440] 对因为其实我的那个
[01:01:39.440 --> 01:01:42.440] 我的那个CSH
[01:01:42.440 --> 01:01:44.440] 我本身也配了Powerline
[01:01:44.440 --> 01:01:47.440] 对但是我的Wim就搞了一个Airline
[01:01:47.440 --> 01:01:49.440] 然后但是你想搞得好看
[01:01:49.440 --> 01:01:52.440] 你可能要自己去把那个字体去patch一把
[01:01:52.440 --> 01:01:56.440] 这个是是就是给你一个Status
[01:01:56.440 --> 01:01:59.440] Status那种bar的吗
[01:01:59.440 --> 01:02:00.440] 对
[01:02:00.440 --> 01:02:02.440] OK
[01:02:02.440 --> 01:02:04.440] 其实刚刚说到
[01:02:04.440 --> 01:02:06.440] 刚刚Adam说了两个插件
[01:02:06.440 --> 01:02:08.440] 其实我也想推荐一个
[01:02:08.440 --> 01:02:10.440] 就是和他差不多的
[01:02:10.440 --> 01:02:12.440] 就是刚刚说Synthetic
[01:02:12.440 --> 01:02:15.440] 其实有一个叫ALE的插件
[01:02:15.440 --> 01:02:16.440] Synthetic比较老的
[01:02:16.440 --> 01:02:17.440] 它是同步的
[01:02:17.440 --> 01:02:19.440] 其实有个ALE它是异步的
[01:02:19.440 --> 01:02:21.440] 功能基本上是一样的
[01:02:21.440 --> 01:02:22.440] 也是检查以法错误
[01:02:22.440 --> 01:02:25.440] 但Synthetic有时候会比较慢
[01:02:25.440 --> 01:02:27.440] 它有些语言会很慢的
[01:02:27.440 --> 01:02:31.440] 所以ALE就这点就没有就没有这个问题
[01:02:31.440 --> 01:02:33.440] 因为它异步去检查语法
[01:02:33.440 --> 01:02:36.440] 因为异步功能是Wim8才加入的
[01:02:36.440 --> 01:02:39.440] 所以所以ALE出现的比较晚
[01:02:39.440 --> 01:02:42.440] 可能没有Synthetic这么有名
[01:02:42.440 --> 01:02:45.440] 但功能上面还挺强大的
[01:02:45.440 --> 01:02:47.440] 然后ControlP的话
[01:02:47.440 --> 01:02:49.440] 其实也有一个插件
[01:02:49.440 --> 01:02:51.440] 我我之前是用ControlP的
[01:02:51.440 --> 01:02:52.440] 现在换成LeaderF
[01:02:52.440 --> 01:02:54.440] 是个中国人写的一个插件
[01:02:54.440 --> 01:02:57.440] LeaderF它也是功能和ControlP差不多
[01:02:57.440 --> 01:02:59.440] 但是比它更强一点
[01:02:59.440 --> 01:03:02.440] 它包括它的搜索比较快
[01:03:02.440 --> 01:03:04.440] 然后比ControlP要快一点
[01:03:04.440 --> 01:03:05.440] 就索引
[01:03:05.440 --> 01:03:07.440] 因为ControlP要索引
[01:03:07.440 --> 01:03:08.440] LeaderF也是需要索引
[01:03:08.440 --> 01:03:10.440] 才会搜索比较快
[01:03:10.440 --> 01:03:12.440] 现在LeaderF它的索引更快一点
[01:03:12.440 --> 01:03:15.440] 然后它能搜就是最近使用文件
[01:03:15.440 --> 01:03:17.440] 然后包括目录下的文件
[01:03:17.440 --> 01:03:21.440] 然后还有以及它还可以
[01:03:21.440 --> 01:03:24.440] 我还可以搜所有的就是你这个
[01:03:24.440 --> 01:03:26.440] 所有的函数名
[01:03:26.440 --> 01:03:27.440] 它也可以搜的
[01:03:27.440 --> 01:03:30.440] 还可以按照函数名来做文件是吗
[01:03:30.440 --> 01:03:32.440] 这个不错
[01:03:32.440 --> 01:03:36.440] 对因为不过这个需要配合另外一个
[01:03:36.440 --> 01:03:38.440] 就是它其实根据函数名
[01:03:38.440 --> 01:03:39.440] 它是怎么做的
[01:03:39.440 --> 01:03:43.440] 它好像我记得它是根据所有的Tag来做的
[01:03:43.440 --> 01:03:47.440] 所以可能需要配合就是自动生成Tag
[01:03:47.440 --> 01:03:49.440] 对Ctags那些插件
[01:03:49.440 --> 01:03:54.440] 所以这个还我觉得LeaderF还是做的比较不错
[01:03:54.440 --> 01:03:59.440] 然后我个人再推荐几个
[01:03:59.440 --> 01:04:03.440] 我个人觉得还有一个
[01:04:03.440 --> 01:04:07.440] 一个是那个Vim的MultipleCursors
[01:04:07.440 --> 01:04:09.440] 就是多光标编辑
[01:04:09.440 --> 01:04:11.440] 这个还是挺有用的
[01:04:11.440 --> 01:04:12.440] 我自己用一下
[01:04:12.440 --> 01:04:14.440] 蛮常用的
[01:04:14.440 --> 01:04:20.440] 然后还有然后YouCompleteMe一般还是需要的
[01:04:20.440 --> 01:04:24.440] 然后其实我要说推荐插件还真的挺多的
[01:04:24.440 --> 01:04:27.440] 有些像自动生成
[01:04:27.440 --> 01:04:30.440] 比如说刚刚说自动生成Tags
[01:04:30.440 --> 01:04:31.440] 就是你一旦编辑完文件
[01:04:31.440 --> 01:04:34.440] 它会自动帮你更新掉Tags文件的
[01:04:34.440 --> 01:04:37.440] 有个插件叫Vim GutenTags
[01:04:37.440 --> 01:04:42.440] 这个可能之后我得把就是文字发给你们才能知道
[01:04:42.440 --> 01:04:44.440] 但是它会自动生成Tags文件
[01:04:44.440 --> 01:04:47.440] 这就不用你去手动去生成了
[01:04:47.440 --> 01:04:51.440] GutenTags好像是德语的你好
[01:04:51.440 --> 01:04:53.440] 是吗
[01:04:53.440 --> 01:04:55.440] 有可能
[01:04:55.440 --> 01:05:01.440] 这个也是Vim8因为有了异步功能以后
[01:05:01.440 --> 01:05:03.440] 像这些需要异步生成Tags文件
[01:05:03.440 --> 01:05:05.440] 这些功能就比较方便做了
[01:05:05.440 --> 01:05:09.440] 然后还有就是Vim管理插件的VimPlug
[01:05:09.440 --> 01:05:12.440] 其实挺好用挺常用的
[01:05:12.440 --> 01:05:13.440] VimPlug的那个作者
[01:05:13.440 --> 01:05:16.440] 另外有个插件叫Vim Easy Align
[01:05:16.440 --> 01:05:18.440] 就是帮你做对齐的
[01:05:18.440 --> 01:05:20.440] 这个还挺好用
[01:05:20.440 --> 01:05:25.440] 介绍一下是怎么什么场景下要用的
[01:05:25.440 --> 01:05:28.440] 比如说你有很多
[01:05:28.440 --> 01:05:31.440] 比如说你有连续的几个
[01:05:31.440 --> 01:05:34.440] 比如说条件判断条件判断
[01:05:34.440 --> 01:05:36.440] 或者说有连续的几个负值
[01:05:36.440 --> 01:05:40.440] 一般会把那个负值的等号不是会对齐的吗
[01:05:40.440 --> 01:05:44.440] 然后这个Vim Easy Align
[01:05:44.440 --> 01:05:48.440] 就是把你可以把那个需要对齐的
[01:05:48.440 --> 01:05:51.440] 比如说三行用高量起来
[01:05:51.440 --> 01:05:52.440] 然后打一个命令
[01:05:52.440 --> 01:05:55.440] 就是那个Align
[01:05:55.440 --> 01:05:57.440] 然后以等号Align以后
[01:05:57.440 --> 01:06:00.440] 他会自动帮你把这三行用等号
[01:06:00.440 --> 01:06:03.440] 就是用等号对齐起来
[01:06:03.440 --> 01:06:05.440] 或者用冒号对齐也可以
[01:06:05.440 --> 01:06:08.440] 他的对齐方式支持的还蛮多的
[01:06:08.440 --> 01:06:11.440] 好像曾经是会
[01:06:11.440 --> 01:06:15.440] 就是有很多人会倾向这样对齐
[01:06:15.440 --> 01:06:17.440] 但我现在我就很少这么做
[01:06:17.440 --> 01:06:19.440] 或者说基本就没有这么做过
[01:06:19.440 --> 01:06:22.440] 就没有手动对齐了
[01:06:22.440 --> 01:06:25.440] 就是我就不太care对齐这件事情了
[01:06:25.440 --> 01:06:29.440] 我都是依照他那个就是自动的那种formatter
[01:06:29.440 --> 01:06:31.440] 然后他怎么样就怎么样
[01:06:31.440 --> 01:06:34.440] 然后看好像至少我目前用的formatter都没有说
[01:06:34.440 --> 01:06:36.440] 一定会把它对齐
[01:06:36.440 --> 01:06:40.440] 我用了一个类似的那个叫Tabular
[01:06:40.440 --> 01:06:42.440] 就是他你选中一段文本
[01:06:42.440 --> 01:06:45.440] 然后你输入其中一个符号
[01:06:45.440 --> 01:06:49.440] 然后那个符号在这一段文本中就是对齐的
[01:06:49.440 --> 01:06:52.440] 对Tabular是比较早一点的
[01:06:52.440 --> 01:06:54.440] 之前我也是用Tabular
[01:06:54.440 --> 01:06:56.440] 其实除了代码
[01:06:56.440 --> 01:06:59.440] 其他有一些你像写文档或者什么
[01:06:59.440 --> 01:07:00.440] 有一些对齐的场景
[01:07:00.440 --> 01:07:02.440] 其实挺有用的
[01:07:02.440 --> 01:07:06.440] 还有个插件好像叫Wim Quick Run
[01:07:06.440 --> 01:07:11.440] 就是这个呢你可以就是允许你
[01:07:11.440 --> 01:07:16.440] 就是直接运行当前正在写的代码
[01:07:16.440 --> 01:07:21.440] 就是比如说你写了个C的代码的话
[01:07:21.440 --> 01:07:24.440] 你可以就是用这个quick run命令
[01:07:24.440 --> 01:07:26.440] 他直接把你C这个文件编译完
[01:07:26.440 --> 01:07:28.440] 然后运行一下显示结果
[01:07:28.440 --> 01:07:29.440] 你有这么个插件
[01:07:29.440 --> 01:07:32.440] 就是可能用来你写写平时
[01:07:32.440 --> 01:07:34.440] 要写些实验性的代码会比较有用
[01:07:34.440 --> 01:07:37.440] 对这种我用的蛮多的
[01:07:37.440 --> 01:07:38.440] 在Ultra里面
[01:07:38.440 --> 01:07:42.440] 这个我一般跳到另一个Tmax的panel里面去
[01:07:42.440 --> 01:07:44.440] 把它运行一遍
[01:07:44.440 --> 01:07:46.440] 对复制过去运行
[01:07:48.440 --> 01:07:50.440] 好本期捕蛇者说的播客就到这里
[01:07:50.440 --> 01:07:51.440] 感谢您的收听
[01:07:51.440 --> 01:07:53.440] 本期内容中提到的资料链接
[01:07:53.440 --> 01:07:55.440] 都会放到我们的网站上
[01:07:55.440 --> 01:07:58.440] 我们的网址是pythonhunter.org
[01:07:58.440 --> 01:08:00.440] 由于我们主播的知乎账号被禁
[01:08:00.440 --> 01:08:03.440] 所以以后的更新都不会再发布到知乎上
[01:08:03.440 --> 01:08:04.440] 请您留意
[01:08:04.440 --> 01:08:08.440] 推荐您使用泛用型客户端订阅我们的播客
[01:08:08.440 --> 01:08:10.440] 也欢迎您关注我们的推特
[01:08:10.440 --> 01:08:13.440] 加入我们的Telegram群组和其他听众一起聊天
[01:08:13.440 --> 01:08:16.440] 我们的推特是pythonhunter加一个下发线
[01:08:16.440 --> 01:08:20.440] Telegram群组的链接可以在我们的网站上找到
[01:08:20.439 --> 01:08:30.439] 我们下期再见
[01:08:51.439 --> 01:08:52.439] 本期视频就分享到这里
[01:08:52.439 --> 01:08:53.439] 感谢您的观看
[01:08:53.439 --> 01:09:22.439] 我们下期再见
