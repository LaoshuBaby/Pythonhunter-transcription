[00:00.000 --> 00:07.000] 字幕君已死,请勿模仿
[00:22.000 --> 00:26.000] 大家好,欢迎来到捕蛇者说第四期特别篇
[00:26.000 --> 00:33.000] 今天我们没有请任何嘉宾,是我们几个主播之间来录一期
[00:33.000 --> 00:40.000] 具体的话也没有什么预先定好主题,主要就聊聊大家最近都在做什么
[00:40.000 --> 00:46.000] 看能不能引申出一些讨论,我是Like9M
[00:46.000 --> 00:51.000] 还是先请周来做个自我介绍吧,新涛就从你开始吧
[00:51.000 --> 00:58.000] 我是新涛,这个应该不用介绍了吧,听着都挺熟悉了
[00:58.000 --> 01:00.000] 就报报名字好了
[01:00.000 --> 01:06.000] 好,然后我们还有Mandusaka和小白,我们今年是四个人
[01:06.000 --> 01:12.000] Hello,大家好,我是Mandusaka,感谢大家送我的内裤
[01:12.000 --> 01:15.000] 这点我还是,虽然新涛说不需要自我介绍
[01:15.000 --> 01:19.000] 但是我还是要大声的说出来,谢谢各位爸爸们送的内裤
[01:19.000 --> 01:25.000] 也请大家继续支持我们,我们目前还是处于一个入不敷出的状态
[01:25.000 --> 01:29.000] 应该准确说我们还是缺内裤的状态,来小白
[01:29.000 --> 01:31.000] 小白你要说一句吗?
[01:31.000 --> 01:33.000] Hello,大家好,我是小白
[01:33.000 --> 01:39.000] 然后我们今天的第一个话题也是目前唯一想到的一个话题
[01:39.000 --> 01:42.000] 就是先聊聊大家最近都在做什么吧
[01:42.000 --> 01:47.000] 因为基本上我们前一段时间都是在访谈嘉宾
[01:47.000 --> 01:51.000] 所以其实也没有太多时间聊聊大家本身的一些工作
[01:51.000 --> 01:55.000] 然后我们就从小白开始吧
[02:00.000 --> 02:03.000] 我们首先要说一下,小白你都脚好了吗?
[02:03.000 --> 02:06.000] 已经在拆线了
[02:06.000 --> 02:09.000] 对,科普一下,之前小白有一段时间是在医院里
[02:09.000 --> 02:13.000] 然后大家听到前面几期节目或者说后面几期节目
[02:13.000 --> 02:16.000] 都是小白在医院里剪出来的
[02:16.000 --> 02:19.000] 所以我觉得我们应该给小白来个掌声
[02:27.000 --> 02:29.000] 那你们都已经听我说完了呀
[02:29.000 --> 02:35.000] 我最近应该是半个月之前出了一场车祸
[02:35.000 --> 02:37.000] 然后住院住了半个月
[02:37.000 --> 02:39.000] 基本上啥也没干
[02:39.000 --> 02:42.000] 然后在医院里剪了几期节目
[02:42.000 --> 02:46.000] 你这个车祸再给听众们讲一讲是怎么回事
[02:46.000 --> 02:51.000] 大家一定要按时休息
[02:51.000 --> 02:55.000] 因为我出车祸当天是通宵写代码来着
[02:55.000 --> 03:00.000] 然后写到四点,七点就起了
[03:00.000 --> 03:03.000] 然后因为快要迟到了
[03:03.000 --> 03:06.000] 就逆行了一段
[03:06.000 --> 03:10.000] 再加上因为熬夜精神有点恍惚
[03:10.000 --> 03:13.000] 就没看见从我的左侧出来一辆车
[03:13.000 --> 03:16.000] 就这么碰上了,亲密接触了
[03:16.000 --> 03:19.000] 然后好死不死我当天又穿了一双拖鞋
[03:19.000 --> 03:25.000] 我的脚又好死不死的伸到了电动车的四片那边
[03:25.000 --> 03:27.000] 就是我的电动车会被挤碎了一部分
[03:27.000 --> 03:29.000] 我的脚正好伸到那里边了
[03:29.000 --> 03:33.000] 就被切了一下
[03:33.000 --> 03:35.000] 好在是没什么大问题
[03:35.000 --> 03:37.000] 现在已经恢复差不多了
[03:37.000 --> 03:39.000] 听着就好疼啊
[03:39.000 --> 03:42.000] 还可以吧,当时其实没啥感觉
[03:42.000 --> 03:47.000] 那你之后是怎么就直接打120了吗?
[03:47.000 --> 03:52.000] 对,人生第一次享受这么高级的待遇,120
[03:52.000 --> 03:56.000] 希望大家以后都不要有这个待遇
[03:56.000 --> 03:58.000] 应该说还好没出大事
[03:58.000 --> 04:02.000] 不过,哎呀,还有就是出门一定要穿一双正经的鞋
[04:02.000 --> 04:03.000] 不要穿拖鞋
[04:03.000 --> 04:05.000] 我如果穿一双正经的鞋的话
[04:05.000 --> 04:08.000] 其实这场事故也是可以纪念的
[04:08.000 --> 04:10.000] 就是说你穿正经的鞋的话
[04:10.000 --> 04:15.000] 它就能防止你的脚不被卷进去是吗?
[04:15.000 --> 04:18.000] 对,我的脚就不会受伤了
[04:18.000 --> 04:23.000] 所以你前一天写代码写到四点是工作上的代码吗?
[04:23.000 --> 04:25.000] 是,因为要赶进度
[04:25.000 --> 04:29.000] 然后加上之前有一些东西一直没搞
[04:29.000 --> 04:32.000] 所以说就想通宵把它搞完
[04:32.000 --> 04:35.000] 但是我想多了,其实通宵也没搞完
[04:35.000 --> 04:38.000] 你这个已经不是996了
[04:38.000 --> 04:41.000] 对,我们因为小公司嘛
[04:41.000 --> 04:45.000] 刚开始搞,所以说还不是特别正规
[04:45.000 --> 04:47.000] 如果项目比较急的话
[04:47.000 --> 04:50.000] 还是要这种集中的去突击一下
[04:50.000 --> 04:54.000] 就可能很多听众还是不知道小白你在哪里工作
[04:54.000 --> 04:56.000] 要不你再介绍一下
[04:56.000 --> 04:58.000] 之前是在你导师那里,现在还在吗?
[04:58.000 --> 05:01.000] 对对对,我是跟着我的大学导师
[05:01.000 --> 05:06.000] 一起做一个车联网的项目,一个环卫车
[05:06.000 --> 05:13.000] 然后我是负责做这个线上显示这一块
[05:13.000 --> 05:17.000] 车联网具体是个什么概念?
[05:17.000 --> 05:24.000] 就是这样的,我们是跟一家环卫车制作的企业合作
[05:24.000 --> 05:27.000] 然后我的一个研究生学长
[05:27.000 --> 05:30.000] 他是负责做这个环卫车的控制器
[05:30.000 --> 05:35.000] 然后我是负责做一个web站点
[05:35.000 --> 05:39.000] 然后来接收它的控制器返回回来的数据
[05:39.000 --> 05:42.000] 然后并把这些数据可视化
[05:42.000 --> 05:48.000] 再加上添加一些那种环卫车通用的一些管理的逻辑
[05:48.000 --> 05:50.000] 大概就这样
[05:50.000 --> 05:53.000] 就类似于比如说我可以看到现在有十辆车
[05:53.000 --> 05:56.000] 在就是清扫某一个街区
[05:56.000 --> 06:01.000] 然后他们走过了哪些路径是这个意思吗?
[06:01.000 --> 06:03.000] 这是最基本的一个东西了
[06:03.000 --> 06:08.000] 就是监视车辆,然后安排任务
[06:08.000 --> 06:11.000] 然后调度车辆,大概就是这个东西
[06:11.000 --> 06:14.000] 你这个调度是怎么实现的?
[06:14.000 --> 06:18.000] 调度只是我这边只是负责发一个命令
[06:18.000 --> 06:23.000] 然后那个传送到这个控制器的终端的显示屏幕上
[06:23.000 --> 06:26.000] 然后他们就会接收到一个
[06:26.000 --> 06:29.000] 一般车辆调度就是一条路线
[06:29.000 --> 06:32.000] 他们就会显示出那条路线
[06:32.000 --> 06:36.000] 就相当于你发一个指令给他的车上的司机
[06:36.000 --> 06:38.000] 然后他们还是会自己操作
[06:38.000 --> 06:41.000] 对对对,这不可能是那种自动化的
[06:41.000 --> 06:43.000] 感觉还挺有意思的
[06:43.000 --> 06:46.000] 做之前我也是这种感觉
[06:46.000 --> 06:50.000] 做之后就感觉被凶真了
[06:50.000 --> 06:53.000] 所以你的技术站是怎么样的?
[06:53.000 --> 06:55.000] 给听众们讲一下
[06:55.000 --> 06:59.000] 技术站的话,后端就是用的Jungle
[06:59.000 --> 07:02.000] 就Pattern,然后Jungle
[07:02.000 --> 07:06.000] 别的其实也没有太多花里胡哨的东西
[07:06.000 --> 07:09.000] 然后前端的话用的就是View
[07:09.000 --> 07:12.000] 然后Stripe,对就这样
[07:12.000 --> 07:16.000] 我想问一下像你们具体的一些关键的数据
[07:16.000 --> 07:20.000] 车辆网,你比如说车的运行状态这些
[07:20.000 --> 07:27.000] 是在舍端上运算还是会统一回传到服务器上运算?
[07:27.000 --> 07:30.000] 这个也是我们现在在讨论的一个点
[07:30.000 --> 07:31.000] 因为我们刚开始做嘛
[07:31.000 --> 07:34.000] 这个东西还没有确定下来
[07:34.000 --> 07:37.000] 之前是一直是在我这边
[07:37.000 --> 07:40.000] 所有的都是原始数据传送到服务器
[07:40.000 --> 07:42.000] 然后我这边统一的去计算
[07:42.000 --> 07:47.000] 但后来因为我们现在车其实测试车辆不是很多
[07:47.000 --> 07:48.000] 也就十辆左右
[07:48.000 --> 07:50.000] 然后数据量不是很大
[07:50.000 --> 07:52.000] 后来我们老师说
[07:52.000 --> 07:54.000] 就是要不要考虑一下
[07:54.000 --> 07:59.000] 在车辆中端这边进行一些批处理
[07:59.000 --> 08:02.000] 然后处理完了之后再上传
[08:02.000 --> 08:04.000] 这块还没最终决定
[08:04.000 --> 08:08.000] 不过之后可能会在控制器这一片
[08:08.000 --> 08:11.000] 就是硬件方面直接进行这种
[08:11.000 --> 08:13.000] 就是所谓的什么边缘计算
[08:13.000 --> 08:17.000] 然后再把这种处理后的数据传输给我
[08:17.000 --> 08:21.000] 对这样从就是扩展性上肯定是更好的
[08:21.000 --> 08:24.000] 对但是因为我那个学长
[08:24.000 --> 08:27.000] 他现在是整一个人就是
[08:27.000 --> 08:29.000] 做整个硬件部分嘛
[08:29.000 --> 08:30.000] 我们现在还没招多少人
[08:30.000 --> 08:35.000] 一般就是一些在读的研究生帮我这个学长打打杂
[08:35.000 --> 08:38.000] 然后所以说进度可能会比较慢
[08:38.000 --> 08:39.000] 所以说现在来说
[08:39.000 --> 08:42.000] 还是放在我这边的话开发起来会比较快一点
[08:42.000 --> 08:47.000] 我觉得这个东西的话
[08:47.000 --> 08:49.000] 如果是你不考虑端上计算
[08:49.000 --> 08:52.000] 然后直接原始的传感器数据上传的话
[08:52.000 --> 08:56.000] 估计可能芯片的带宽就是你的那个
[08:56.000 --> 09:01.000] 你外挂的比如说4G或者是那个老一点的GPRS的那种带宽
[09:01.000 --> 09:04.000] 可能都可以直接给打杂吧
[09:04.000 --> 09:05.000] 是吗
[09:05.000 --> 09:13.000] 就是我说你的带宽如果是你全部是原始数据上传到你这边统一计算的话
[09:13.000 --> 09:17.000] 可能整体的食言和那个性能都没法保障吧
[09:17.000 --> 09:22.000] 所以就是说我们现在一个好处就是我们现在车少
[09:22.000 --> 09:25.000] 然后其实数据量也不是特别大
[09:25.000 --> 09:32.000] 而且我们要求的这种那个实质性也没有说那么就是那么精确
[09:32.000 --> 09:35.000] 大概就是一分钟左右我们其实都能接受
[09:37.000 --> 09:40.000] 对因为其实你想想他那个车吗
[09:40.000 --> 09:42.000] 他也一分钟之内他也跑不了多远
[09:42.000 --> 09:45.000] 他也直接消失不见
[09:45.000 --> 09:49.000] 对其实我挺好奇像你们那个像你们那边的话
[09:49.000 --> 09:53.000] 你们传感器那些主要是采集哪方面的数据
[09:53.000 --> 09:56.000] 其实我们没太用太多传感器
[09:56.000 --> 10:00.000] 基本上就是从车辆的那个看接口截图
[10:00.000 --> 10:03.000] 因为大多数的参数都是能从看接口读出来的
[10:03.000 --> 10:08.000] 对然后现在的话可能要加一个这种业余传感器
[10:08.000 --> 10:11.000] 用来测这个剩余油量
[10:11.000 --> 10:12.000] 对
[10:12.000 --> 10:17.000] 其实那也是相当于说你们给普通车辆
[10:17.000 --> 10:20.000] 然后的就是那种看接口外挂的一个东西吧
[10:20.000 --> 10:23.000] 然后把数据上传出来
[10:23.000 --> 10:27.000] 现在就有一个比较麻烦的一个点
[10:27.000 --> 10:33.000] 就是我们这个生产商他其实是一个什么呢
[10:33.000 --> 10:35.000] 他不是整车生产商
[10:35.000 --> 10:37.000] 他只是一个上装生产商
[10:37.000 --> 10:39.000] 就是他那些底盘车
[10:39.000 --> 10:40.000] 环卫车大家都见过吗
[10:40.000 --> 10:41.000] 就是他是有一个底盘车
[10:41.000 --> 10:43.000] 然后有上装嘛
[10:43.000 --> 10:47.000] 那底盘车都是他从其他的车企就直接去买的
[10:47.000 --> 10:50.000] 然后他们又不是说只买一款底盘车
[10:50.000 --> 10:52.000] 他们会买很多款底盘车
[10:52.000 --> 10:54.000] 就导致一个问题
[10:54.000 --> 11:00.000] 普通车他那个可能看接口的具体的实现还不一样
[11:00.000 --> 11:02.000] 所以说你读出来的数据吧
[11:02.000 --> 11:03.000] 有的能
[11:03.000 --> 11:05.000] 对 学习兼容嘛
[11:05.000 --> 11:08.000] 对对对就很尴尬
[11:08.000 --> 11:09.000] 特别尴尬
[11:09.000 --> 11:11.000] 就是我那个学长尴尬我也尴尬
[11:11.000 --> 11:13.000] 因为他要是说都一样的话
[11:13.000 --> 11:15.000] 我这边就特别好处理了
[11:15.000 --> 11:17.000] 但是他又不都一样
[11:17.000 --> 11:19.000] 我这边还得就是区分一下
[11:19.000 --> 11:21.000] 就是每一个车都要做一个判断
[11:21.000 --> 11:23.000] 他到底是个什么车
[11:23.000 --> 11:24.000] 他有哪些参数
[11:24.000 --> 11:26.000] 然后我这边怎么显示
[11:26.000 --> 11:29.000] 那你们可能还是端上直接转换了
[11:29.000 --> 11:32.000] 然后再上传可能会更好一些
[11:32.000 --> 11:33.000] 对对
[11:33.000 --> 11:35.000] 所以说现在也是在考虑这个事
[11:35.000 --> 11:38.000] 但是我学长那边他现在可能还没太有空
[11:38.000 --> 11:41.000] 因为我们现在只实现了一类车辆
[11:41.000 --> 11:42.000] 一类环卫车
[11:42.000 --> 11:44.000] 就是叫洗手车
[11:44.000 --> 11:46.000] 但是环卫车又不止这一类
[11:46.000 --> 11:47.000] 我们还要去开发
[11:47.000 --> 11:49.000] 就我那学长还要去开发其他类
[11:49.000 --> 11:51.000] 那个环卫车的控制器
[11:51.000 --> 11:53.000] 所以说这边的逻辑还是说
[11:53.000 --> 11:55.000] 只能让我一个人去
[11:55.000 --> 11:58.000] 对我刚想说就是就算现在车辆都是一样的
[11:58.000 --> 12:01.000] 你们也不能保证未来也是一样
[12:01.000 --> 12:05.000] 所以就肯定要有某种方法来区分
[12:05.000 --> 12:08.000] 我比较感兴趣的是你们那个可视化的部分
[12:08.000 --> 12:11.000] 就是你们再详细讲一讲吧
[12:11.000 --> 12:12.000] 就是说你们肯定
[12:12.000 --> 12:14.000] 你们是不是首先要把街道给
[12:14.000 --> 12:15.000] 就是它的布局
[12:15.000 --> 12:18.000] 一个一个地图给可视化了
[12:18.000 --> 12:19.000] 然后
[12:19.000 --> 12:24.000] 这个用的就是高达地图
[12:24.000 --> 12:26.000] 高达地图有接口吗
[12:26.000 --> 12:28.000] 对啊
[12:28.000 --> 12:30.000] 有那个
[12:30.000 --> 12:33.000] 这里要吃一波高达地图
[12:33.000 --> 12:34.000] 对包括你们家
[12:34.000 --> 12:36.000] 你们家的Google map也有的
[12:36.000 --> 12:40.000] 对他们大部分地图都会有接口的
[12:40.000 --> 12:43.000] Google map还有一些卫星图啊
[12:43.000 --> 12:45.000] 街道图之类的
[12:45.000 --> 12:47.000] 非常方便
[12:47.000 --> 12:50.000] 对摆都地图的接口真的
[12:50.000 --> 12:52.000] 不是人能看懂的我感觉
[12:52.000 --> 12:56.000] 那这个大概的意思是不是就是说
[12:56.000 --> 12:58.000] 你有一个
[12:58.000 --> 12:59.000] 比如说你有
[12:59.000 --> 13:01.000] 就可以引入一个JS文件
[13:01.000 --> 13:02.000] map.js
[13:02.000 --> 13:04.000] 然后你就会有一个地图
[13:04.000 --> 13:06.000] 然后你可以就是调用
[13:06.000 --> 13:08.000] 比如说显示某一个地点
[13:08.000 --> 13:11.000] 然后他就在上面给你标一个东西出来
[13:11.000 --> 13:13.000] 是类似于这种东西
[13:13.000 --> 13:15.000] 还是说还是怎么样
[13:15.000 --> 13:17.000] 对对对
[13:17.000 --> 13:19.000] 就是类似你说的这样
[13:19.000 --> 13:20.000] OK
[13:20.000 --> 13:23.000] 对他应该是有类似于FM之类的机制
[13:23.000 --> 13:26.000] 然后你可以把他的那个地图之类的
[13:26.000 --> 13:28.000] 外挂进去
[13:28.000 --> 13:29.000] 那他这种
[13:29.000 --> 13:31.000] 然后就是他那他这种怎么收费呢
[13:31.000 --> 13:34.000] 他是按就是请求次数收费吗
[13:34.000 --> 13:36.000] 可以给你看
[13:36.000 --> 13:39.000] 请求次数对一般来说是
[13:39.000 --> 13:41.000] 如果是大客户的话
[13:41.000 --> 13:44.000] 还是还会有其他的那个内部的count
[13:44.000 --> 13:49.000] 对要但是就是我们现在没有正式上线
[13:49.000 --> 13:52.000] 然后还算是个人开发
[13:52.000 --> 13:54.000] 所以说还没有还没有买
[13:54.000 --> 13:57.000] 他那个你要是正式上线的话
[13:57.000 --> 13:59.000] 估计得买那个授权
[13:59.000 --> 14:00.000] 是的
[14:00.000 --> 14:03.000] 估计要跟他们商务来具体聊一下
[14:03.000 --> 14:06.000] 这种应该就是你导师去聊了
[14:06.000 --> 14:07.000] 对对对
[14:07.000 --> 14:08.000] 跟我没啥关系
[14:08.000 --> 14:09.000] 好
[14:09.000 --> 14:11.000] 那我们再来问一下万周三
[14:11.000 --> 14:13.000] 你最近都在做啥
[14:13.000 --> 14:18.000] 四个字高级外包
[14:18.000 --> 14:24.000] 然后就因为我不是现在那个某福报云
[14:24.000 --> 14:26.000] 某福报云做
[14:26.000 --> 14:29.000] 就说所谓的Cloud Native这方面的工作
[14:29.000 --> 14:31.000] 因为我是做工作云产品
[14:31.000 --> 14:34.000] 然后我们是做网关类型的
[14:34.000 --> 14:36.000] 就是统一L7的一个网关
[14:36.000 --> 14:38.000] 后面大家当然也可能往L4去发展
[14:38.000 --> 14:39.000] 一个网关类型的
[14:39.000 --> 14:40.000] 因为网关嘛
[14:40.000 --> 14:41.000] 然后你做服务支理
[14:41.000 --> 14:44.000] 或者说做流量收购基本上是必备的
[14:44.000 --> 14:50.000] 然后我们现在是手上有大客户
[14:50.000 --> 14:53.000] 你就会知道就是说是大客户
[14:53.000 --> 14:55.000] 因为它内部的系统
[14:55.000 --> 14:59.000] 其实因为我们其实是整体的思路
[14:59.000 --> 15:01.000] 就是说是基于开源去托管
[15:01.000 --> 15:03.000] 然后提供增强的服务
[15:03.000 --> 15:05.000] 比如说HA
[15:05.000 --> 15:07.000] 比如说其他更多的定制的
[15:07.000 --> 15:11.000] 或者说高可用的扩充容这种能力
[15:11.000 --> 15:14.000] 那么对于一些大客户而讲
[15:14.000 --> 15:16.000] 你的开源的版本
[15:16.000 --> 15:18.000] 肯定是不满足很多
[15:18.000 --> 15:21.000] 不满足它自身的很多需求的
[15:21.000 --> 15:24.000] 所以说我们做一场
[15:24.000 --> 15:25.000] 我打断一下
[15:25.000 --> 15:28.000] 你们对标的开源的产品是哪些
[15:28.000 --> 15:30.000] 我们其实就是托管
[15:30.000 --> 15:32.000] 什么叫托管什么意思
[15:32.000 --> 15:34.000] 就是我们将开源的产品
[15:34.000 --> 15:36.000] 经过改造增强之后
[15:36.000 --> 15:38.000] 托管到我们这边来
[15:38.000 --> 15:39.000] 就是我们来提供服务
[15:39.000 --> 15:41.000] 我们用开源的产品
[15:41.000 --> 15:43.000] 明白了
[15:43.000 --> 15:46.000] 就类似你run一个mongoDB之类的
[15:46.000 --> 15:47.000] mongoDB是开源的
[15:47.000 --> 15:49.000] 就类似吧
[15:49.000 --> 15:50.000] 类似于
[15:50.000 --> 15:51.000] 其实就像
[15:51.000 --> 15:55.000] 就比如说像Azure上面提供的MySQL
[15:55.000 --> 15:56.000] 各家企业上面提供的MySQL
[15:56.000 --> 15:57.000] 这样的东西
[15:57.000 --> 15:59.000] 就开源托管
[15:59.000 --> 16:03.000] 你们这里现在是托管什么东西
[16:03.000 --> 16:04.000] 我们是网关
[16:04.000 --> 16:06.000] 我们现在第一阶段是
[16:06.000 --> 16:08.000] 就是说是托管的那个
[16:08.000 --> 16:10.000] Spring Cloud Zoo
[16:10.000 --> 16:11.000] ZUUL
[16:11.000 --> 16:13.000] 后面的话可能说
[16:13.000 --> 16:15.000] 或者说是Spring Cloud Gateway
[16:15.000 --> 16:16.000] 我们都会托管上去
[16:16.000 --> 16:19.000] 然后做改造增强
[16:19.000 --> 16:20.000] OK
[16:20.000 --> 16:22.000] 那如果你们只托管这个网关
[16:22.000 --> 16:23.000] 其他东西
[16:23.000 --> 16:24.000] 在他们自己部署那里
[16:24.000 --> 16:26.000] 不是很奇怪吗
[16:26.000 --> 16:28.000] 所以
[16:28.000 --> 16:31.000] 其实这就是一个形态
[16:31.000 --> 16:33.000] 所谓的半托管形态
[16:33.000 --> 16:34.000] 和全托管形态
[16:34.000 --> 16:35.000] 就是说半托管形态
[16:35.000 --> 16:38.000] 就是说我们来只提供运维服务
[16:38.000 --> 16:41.000] 或者说基础的一些构建能力
[16:41.000 --> 16:44.000] 我们把这个东西部署在用户的服务器上
[16:44.000 --> 16:45.000] 然后用户方便去用
[16:45.000 --> 16:46.000] 然后所谓的全托管
[16:46.000 --> 16:49.000] 就是说服务器全部是在我们这边
[16:49.000 --> 16:51.000] 然后用户来访问的时候
[16:51.000 --> 16:52.000] 他是走我们服务器
[16:52.000 --> 16:53.000] 然后再走过去
[16:53.000 --> 16:55.000] 各有优劣
[16:55.000 --> 16:56.000] 然后主流的云产品
[16:56.000 --> 16:58.000] 其实都有半托管或者全托管
[16:58.000 --> 16:59.000] 这种类型
[16:59.000 --> 17:00.000] 就是各种模式都有
[17:00.000 --> 17:02.000] 就看你是怎么去做
[17:02.000 --> 17:05.000] 怎么做trade off了吧
[17:05.000 --> 17:07.000] 所以你们现在是半托管
[17:07.000 --> 17:09.000] 我们是全托管
[17:09.000 --> 17:11.000] 全托管OK
[17:11.000 --> 17:12.000] 对
[17:12.000 --> 17:12.000] 对
[17:12.000 --> 17:16.000] 也就是说用户他不需要去care具体的运维细节
[17:16.000 --> 17:19.000] 因为你半托管实际上你没法避免的
[17:19.000 --> 17:21.000] 就是说用户你还是可能说
[17:21.000 --> 17:24.000] 你要去care具体的用户细节
[17:24.000 --> 17:26.000] 比如说日志收集
[17:26.000 --> 17:29.000] 或者是说你的服务状态之类的
[17:29.000 --> 17:31.000] 然后那么我们全托管的话
[17:31.000 --> 17:33.000] 用户不需要去care这些东西
[17:33.000 --> 17:35.000] 当然这些东西全托管的
[17:35.000 --> 17:36.000] 就造成了很多
[17:36.000 --> 17:37.000] 就是对于大客户而言
[17:37.000 --> 17:40.000] 他很多特定的需求
[17:40.000 --> 17:43.000] 那么你需要去帮他分析帮他处理
[17:43.000 --> 17:45.000] 是大客户需求
[17:45.000 --> 17:49.000] 那假如说网关通关在你们这里
[17:49.000 --> 17:52.000] 其实互动的应用也要通关在二维云吧
[17:52.000 --> 17:55.000] 实际上是因为我们其实
[17:55.000 --> 17:59.000] 因为你要去做通关其他云也可以
[17:59.000 --> 18:02.000] 但是我们现在产品还没有考虑去对专有云输出
[18:02.000 --> 18:04.000] 因为专有云的话
[18:04.000 --> 18:06.000] 就是说是不管托管什么云都可以
[18:06.000 --> 18:09.000] 或者说乃至于说混合云都可以
[18:09.000 --> 18:13.000] 但是我们现在还是基于公有云去做的这套思路
[18:13.000 --> 18:15.000] 我有个比较基础的问题
[18:15.000 --> 18:20.000] 就是说这是一个网关服务到底是干嘛的
[18:20.000 --> 18:22.000] 在什么情况下会需要用
[18:22.000 --> 18:25.000] 就比如说你
[18:25.000 --> 18:27.000] 比如说现在所谓的Microsoft
[18:27.000 --> 18:30.000] Service吧然后你的很多服务的居合点对吧
[18:30.000 --> 18:34.000] 你很多服务的你服务其实是一个单体
[18:34.000 --> 18:35.000] 就是小单体的
[18:35.000 --> 18:40.000] 然后你服务之间有可能说存在有相互调用对吧
[18:40.000 --> 18:45.000] 乃至于说你需要比如说你现在是订单
[18:45.000 --> 18:52.000] 缓存然后订单用户和那个订单用户和库存三个服务
[18:52.000 --> 18:56.000] 三个服务按照就是业务边界来分三个服务
[18:56.000 --> 19:00.000] 那么你这三个服务可能会被其他服务所调用对吧
[19:00.000 --> 19:05.000] 那么你也有可能去对那个外部提供服务对吧
[19:05.000 --> 19:08.000] 那么你在提供服务的时候
[19:08.000 --> 19:09.000] 你在提供服务的时候
[19:09.000 --> 19:11.000] 那么你就一定存在一种需求
[19:11.000 --> 19:13.000] 你需要去对流量做控制
[19:13.000 --> 19:15.000] 就是你对流量有治理的需求
[19:15.000 --> 19:18.000] 就比如说我对某一个IP
[19:18.000 --> 19:20.000] 然后我对它有限流的需求
[19:20.000 --> 19:22.000] 然后我对某一个
[19:22.000 --> 19:24.000] 然后用户他有
[19:24.000 --> 19:26.000] 我也需要去block某一个用户
[19:26.000 --> 19:33.000] 乃至于说我需要去把我这里面的流量的日志梳理出来对吧
[19:33.000 --> 19:35.000] 流量的日志输出出来
[19:35.000 --> 19:37.000] 然后作为后续的分析对吧
[19:37.000 --> 19:41.000] 乃至于说后面的我某一个服务挂了
[19:41.000 --> 19:42.000] 那么我流量的时候
[19:42.000 --> 19:43.000] 我需要有流量保护的功能
[19:43.000 --> 19:46.000] 就比如说一下峰值流量来了
[19:46.000 --> 19:49.000] 我能够熔断或者限流或者其他
[19:49.000 --> 19:53.000] 但是那么你想如果说我把这个东西下成到具体的
[19:53.000 --> 19:55.000] 每一个服务里面去做
[19:55.000 --> 19:57.000] 那么毫无疑问的
[19:57.000 --> 20:00.000] 那么就会存在一个地方
[20:00.000 --> 20:01.000] 就是说是你的代码
[20:01.000 --> 20:03.000] 就是说是你重复工作
[20:03.000 --> 20:05.000] 就是说更多倾向于来说
[20:05.000 --> 20:08.000] 我在前面调用这几个服务前面
[20:08.000 --> 20:11.000] 就是挂一个网关的这一层东西
[20:11.000 --> 20:13.000] 将这些涉及到流量的治理
[20:13.000 --> 20:17.000] 就包括限流、熔断、健全、日志输出等等
[20:17.000 --> 20:22.000] 一系列的需求去把它统一收纳在网关里面
[20:22.000 --> 20:23.000] 作为一个流量的收口
[20:23.000 --> 20:25.000] 那么以后网络TOP就是
[20:25.000 --> 20:29.000] 不管调用后面的什么服务都是先调用网关
[20:29.000 --> 20:31.000] 然后由网关转发到后面去
[20:31.000 --> 20:34.000] 它是集成到了你们的
[20:36.000 --> 20:39.000] 就是RPC的这套调用里面吗
[20:39.000 --> 20:41.000] 还是另外没有
[20:41.000 --> 20:43.000] 实际上不一定是RPC吧
[20:43.000 --> 20:45.000] 你普通的HTTP其实也是可以的
[20:45.000 --> 20:48.000] 就是说你统一的在你的流量的某一个切入点上
[20:48.000 --> 20:53.000] 有切面,就是说去用一个切面的形式
[20:53.000 --> 20:56.000] 然后把流量收口在统一的汇聚点
[20:56.000 --> 20:59.000] 那么你在汇聚点上做其他外来的操作
[20:59.000 --> 21:00.000] 比如说协议转换
[21:00.000 --> 21:01.000] 那么我再举个例子
[21:01.000 --> 21:04.000] 比如说你后端的都是RPC的服务
[21:04.000 --> 21:06.000] 最简单的RPC的服务
[21:06.000 --> 21:08.000] 那么你后端这些服务
[21:08.000 --> 21:11.000] 你想对外直接暴露HTTP的接口
[21:11.000 --> 21:14.000] 那么是不是涉及到一个协议转换的问题
[21:14.000 --> 21:18.000] 对,那么这个东西也是往外来做的
[21:19.000 --> 21:21.000] 这部分其实还是
[21:23.000 --> 21:24.000] 是不是
[21:24.000 --> 21:27.000] 它就类似可以理解为是
[21:27.000 --> 21:30.000] 就是微服务里面的一套比较基础的设施
[21:30.000 --> 21:31.000] 对吧
[21:31.000 --> 21:32.000] 你需要去
[21:32.000 --> 21:35.000] 应该说是服务吃力级别的技术设施
[21:35.000 --> 21:36.000] 因为你并不
[21:36.000 --> 21:39.000] 对,你不限于说你是有微服务
[21:39.000 --> 21:41.000] 因为很多企业来讲的话
[21:41.000 --> 21:43.000] 微服务其实是一个相当抽象的概念
[21:43.000 --> 21:45.000] 就是说你
[21:45.000 --> 21:47.000] 网关这个东西的话
[21:47.000 --> 21:50.000] 其实你可以把它理解成为增强的NGX
[21:50.000 --> 21:52.000] 对,增强的NGX
[21:52.000 --> 21:54.000] 那么你在增强的NGX上做很多操作
[21:54.000 --> 21:56.000] 比如说我对流量的健全
[21:56.000 --> 21:57.000] 然后就比如说
[21:57.000 --> 21:59.000] 因为你比如说我要去登录
[21:59.000 --> 22:00.000] 我要去发
[22:00.000 --> 22:02.000] 我要去获得请求个服务的时候
[22:02.000 --> 22:03.000] 对吧
[22:03.000 --> 22:04.000] 那么我又比如说有个通用的
[22:04.000 --> 22:06.000] 我对外暴露OpenAPI
[22:06.000 --> 22:08.000] 然后我以JWT的形式来健全
[22:08.000 --> 22:11.000] 然后来决定它准不准发到后面的服务去
[22:11.000 --> 22:13.000] 然后这样一系列的操作
[22:13.000 --> 22:16.000] 对,它其实并不仅仅限于是微服务
[22:16.000 --> 22:18.000] 它就核心的一点就是说
[22:18.000 --> 22:21.000] 如果说我想对流量有控制的能力
[22:21.000 --> 22:24.000] 那么可能说我去如何网关作为切面
[22:24.000 --> 22:26.000] 把所有流量汇聚在一个口上
[22:26.000 --> 22:29.000] 那么可能就是一个更好的选择
[22:29.000 --> 22:31.000] 那就比如说我有一个
[22:31.000 --> 22:32.000] 就比如说我有一个server的话
[22:32.000 --> 22:34.000] 然后我想用你们这套
[22:34.000 --> 22:36.000] 那你们这个是一个
[22:36.000 --> 22:37.000] 是一个库呢
[22:37.000 --> 22:38.000] 还是一个是一个什么
[22:38.000 --> 22:40.000] 就是它一般要怎么用
[22:40.000 --> 22:41.000] 是一个服务
[22:41.000 --> 22:42.000] 是一个服务
[22:42.000 --> 22:44.000] 你就直接是在阿里云的上面
[22:44.000 --> 22:46.000] 我们其实现在还是有点
[22:46.000 --> 22:47.000] Win the luck in的概念
[22:47.000 --> 22:49.000] 就是说你在阿里云
[22:49.000 --> 22:51.000] 你把服务部署在一个VPC里面
[22:51.000 --> 22:53.000] 就是一个虚拟的网络环境里面
[22:53.000 --> 22:54.000] 就是VPC嘛
[22:54.000 --> 22:58.000] 我不太知道在谷歌那边是怎么称呼的
[22:58.000 --> 23:01.000] 微软那边好像是叫Betro Network
[23:01.000 --> 23:03.000] 就是你把它部署在
[23:03.000 --> 23:05.000] 你的专属的一个虚拟环境
[23:05.000 --> 23:06.000] 虚拟的网络环境里面
[23:06.000 --> 23:07.000] 一个服务器上
[23:07.000 --> 23:09.000] 把它部署上去之后呢
[23:09.000 --> 23:10.000] 串进一个网关
[23:10.000 --> 23:12.000] 我们就关联上了
[23:12.000 --> 23:15.000] 那么你后面就是说是去请求相关
[23:15.000 --> 23:16.000] 然后你这个时候如果说
[23:16.000 --> 23:19.000] 有一个注册中心也是更好的
[23:19.000 --> 23:22.000] 那么我们你外部流量来的时候
[23:22.000 --> 23:23.000] 我会根据你的配置信息
[23:23.000 --> 23:25.000] 然后走注册中心里面去
[23:25.000 --> 23:28.000] 解析你后面的那个
[23:28.000 --> 23:32.000] 就跟Nginx差不多
[23:32.000 --> 23:34.000] 然后那个
[23:34.000 --> 23:38.000] 对就其实你要说网关的话
[23:38.000 --> 23:42.000] 它跟Nginx这种传统的Proxy
[23:42.000 --> 23:43.000] 其实是类似的
[23:43.000 --> 23:45.000] 就是做了更多的增强
[23:45.000 --> 23:47.000] 只是说我在Proxy这个操作上面
[23:47.000 --> 23:49.000] 做了更多的操作而已
[23:49.000 --> 23:51.000] 所以比如说我
[23:51.000 --> 23:53.000] 就像于我要告诉你
[23:53.000 --> 23:55.000] 你要把这个流量转发到哪
[23:55.000 --> 23:57.000] 要根据那些规则
[23:57.000 --> 23:59.000] 然后你要做那些操作
[23:59.000 --> 24:01.000] 对是的
[24:01.000 --> 24:04.000] 你就是去配置你对于某一个流量
[24:04.000 --> 24:06.000] 要做哪些操作
[24:06.000 --> 24:09.000] 比如说线流熔断或者政权之类的
[24:09.000 --> 24:12.000] 就说我比较好奇是这部分
[24:12.000 --> 24:15.000] 它听起来是一个比较
[24:15.000 --> 24:17.000] 就是比较基础工作
[24:17.000 --> 24:21.000] 那它是以前就已经存在了
[24:21.000 --> 24:24.000] 还是说就感觉应该早就存在了
[24:24.000 --> 24:27.000] 实际上怎么说呢
[24:27.000 --> 24:29.000] 因为各家大家都是自建的
[24:29.000 --> 24:31.000] 就是说是它一直是存在的
[24:31.000 --> 24:33.000] 根据那个Gartner的
[24:33.000 --> 24:34.000] 那个市场报告来讲
[24:34.000 --> 24:36.000] 现在市场的话是三分天下嘛
[24:36.000 --> 24:38.000] Spring Cloud ZOO
[24:38.000 --> 24:39.000] 就以Java体系而言
[24:39.000 --> 24:40.000] Spring Cloud ZOO
[24:40.000 --> 24:41.000] Spring Cloud Gateway
[24:41.000 --> 24:42.000] 还有Kong
[24:42.000 --> 24:45.000] 这三个就是OpenZCT代表的Kong
[24:45.000 --> 24:47.000] 那么这三个是三分天下的嘛
[24:47.000 --> 24:50.000] 但是用户往往都是自建的话
[24:50.000 --> 24:51.000] 自建就是说
[24:51.000 --> 24:52.000] 可能说第一个就意味着
[24:52.000 --> 24:54.000] 用户他要去付出很大成本
[24:54.000 --> 24:55.000] 因为自建
[24:55.000 --> 24:58.000] 肯定意味着比较大的成本的投入
[24:58.000 --> 25:01.000] 第二个用户自建用的多
[25:01.000 --> 25:03.000] 其实对于云场商来讲的话
[25:03.000 --> 25:06.000] 这块去切入市场的概率也比较大
[25:07.000 --> 25:09.000] 我理解了
[25:09.000 --> 25:11.000] 因为你们是做托管相于
[25:11.000 --> 25:12.000] 对
[25:12.000 --> 25:15.000] 而且现在还有一个趋势
[25:15.000 --> 25:17.000] 就是说各家云场商
[25:17.000 --> 25:18.000] 现在都在提供
[25:18.000 --> 25:21.000] 就是说都在往开箱急用的路子上走嘛
[25:21.000 --> 25:24.000] 就比如说阿里云这边提供的
[25:24.000 --> 25:26.000] 就是所谓的微服务的一整套体系
[25:26.000 --> 25:29.000] 从你零代码的部署
[25:29.000 --> 25:32.000] 零代码的生成到注册中心
[25:32.000 --> 25:35.000] 到后面的其他的各种东西
[25:35.000 --> 25:36.000] 容器化这些东西
[25:36.000 --> 25:38.000] 他都是你基本上不太需要去care
[25:38.000 --> 25:39.000] 本地的细节
[25:39.000 --> 25:43.000] 像Azure和AWS
[25:43.000 --> 25:45.000] 它也是有对标的产品
[25:45.000 --> 25:46.000] 那么这个东西
[25:46.000 --> 25:48.000] 大家提供开箱急用的东西
[25:48.000 --> 25:49.000] 那么但是肯定就是说
[25:49.000 --> 25:51.000] 你流量的收购的需求
[25:51.000 --> 25:53.000] 也是越来越多的
[25:53.000 --> 25:54.000] 这个时候的话
[25:54.000 --> 25:56.000] 就是说形成一个闭环
[25:56.000 --> 25:58.000] 就是说一整套东西
[25:58.000 --> 25:59.000] 你要来上云
[25:59.000 --> 26:00.000] 因为传统企业就是说
[26:00.000 --> 26:03.000] 现在新增的话都是对于一些
[26:03.000 --> 26:06.000] 没有上云的客户去把它驱使上云
[26:06.000 --> 26:07.000] 那么你要去上云的话
[26:07.000 --> 26:08.000] OK没问题
[26:08.000 --> 26:11.000] 我这开箱急用的方案随便你用
[26:11.000 --> 26:14.000] 我感觉小白就是你们的潜在客户
[26:14.000 --> 26:17.000] 我觉得可以
[26:17.000 --> 26:19.000] 小白其实他更多可能说
[26:19.000 --> 26:20.000] 可以去聊一聊
[26:20.000 --> 26:22.000] 比如说像边缘那边的东西
[26:22.000 --> 26:25.000] 我们现在主要是提量也小
[26:25.000 --> 26:26.000] 现在还没考虑到
[26:26.000 --> 26:28.000] 就是完全的搬到云上去
[26:28.000 --> 26:32.000] 我们现在也就是在阿云租了几台服务器
[26:32.000 --> 26:38.000] 我期待以后给小白贴身服务的时候的到来
[26:38.000 --> 26:40.000] 大客户需求大客户需求
[26:45.000 --> 26:48.000] 当你的朋友变成了你的客户
[26:50.000 --> 26:51.000] 是的是的
[26:51.000 --> 26:54.000] 当我们的搭档变成了我的客户
[26:54.000 --> 26:57.000] 好那再来问一下信涛吧
[26:57.000 --> 26:59.000] 信涛你是唯一一个不露脸的
[26:59.000 --> 27:04.000] 我因为我要把电脑放在一边嘛
[27:06.000 --> 27:11.000] 我们五月份六月份就一直在闭关嘛
[27:11.000 --> 27:13.000] 搞一个应急的项目
[27:13.000 --> 27:16.000] 具体的项目就很难讲
[27:16.000 --> 27:22.000] 就是基本上就是目标就是让故障发生的时候
[27:22.000 --> 27:24.000] 然后让它恢复更快
[27:24.000 --> 27:26.000] 然后基于这个目标
[27:26.000 --> 27:29.000] 然后我们就要对故障提供一些
[27:29.000 --> 27:30.000] 辅助角色的信息
[27:30.000 --> 27:32.000] 然后提供一些可以做的事情
[27:32.000 --> 27:36.000] 然后假如说有人要采取了一些动作
[27:36.000 --> 27:39.000] 然后再看这些动作之后
[27:39.000 --> 27:41.000] 会对指标有什么影响
[27:41.000 --> 27:42.000] 看业务恢复了没有
[27:42.000 --> 27:45.000] 简单来说基本上就是这么一件事情
[27:45.000 --> 27:49.000] 然后工作节奏也比较紧这段时间
[27:49.000 --> 27:51.000] 所以我七月份就休了假
[27:51.000 --> 27:56.000] 我现在在山东乐天
[27:56.000 --> 28:00.000] 我知道Google内部有一个名字
[28:00.000 --> 28:01.000] 具体名字我忘了
[28:01.000 --> 28:06.000] 它就是有一套这种
[28:06.000 --> 28:10.000] 就是类似于演习的这种东西吧
[28:10.000 --> 28:13.000] 就是它会安排一段的时间
[28:13.000 --> 28:15.000] 然后把一些服务给弄挂掉
[28:15.000 --> 28:20.000] 然后看一看就是在整个系统挂掉一部分情况下
[28:20.000 --> 28:22.000] 其他部分还能不能正常运作
[28:22.000 --> 28:26.000] 就这可能是对外的那些服务
[28:26.000 --> 28:30.000] 就可能是更加基础的一些服务上
[28:30.000 --> 28:33.000] 就是那些组会有这样的一个
[28:33.000 --> 28:36.000] 这种定期的演练吧
[28:36.000 --> 28:37.000] 然后但我们是没有
[28:37.000 --> 28:41.000] 你说的那个是不是类似于这种东西
[28:41.000 --> 28:42.000] 还是
[28:47.000 --> 28:48.000] 大体上是吧
[28:48.000 --> 28:52.000] 但是我们相关的工作更多一点
[28:52.000 --> 28:55.000] 就是演练是一部分
[28:55.000 --> 28:59.000] 然后我们公司有红军跟蓝军
[28:59.000 --> 29:03.000] 就是有一部分人负责部长注入跟攻击
[29:03.000 --> 29:05.000] 然后另一部分人负责防御
[29:05.000 --> 29:09.000] 就是发现系统中可能存在一些卧底
[29:09.000 --> 29:13.000] 然后还有专门其他的一些小组负责
[29:13.000 --> 29:16.000] 比如说负责容量的负责降级的
[29:16.000 --> 29:18.000] 这样一些
[29:20.000 --> 29:23.000] 之前好像很早几年前看过一篇文章
[29:23.000 --> 29:29.000] 讲阿里的这套就是攻防的这样一套
[29:29.000 --> 29:31.000] 那你是在里面干嘛
[29:31.000 --> 29:33.000] 你是红军还是蓝军
[29:35.000 --> 29:38.000] 我们应该哪边都不算了
[29:38.000 --> 29:42.000] 我们应该算防守的那一方如果要算的话
[29:42.000 --> 29:44.000] 但是其实我们没有参与
[29:44.000 --> 29:47.000] 就是专门的防守的工作
[29:47.000 --> 29:49.000] 然后我们组现在做的事情
[29:49.000 --> 29:52.000] 就是我刚刚描述的定位那一步
[29:52.000 --> 29:54.000] 互相定位那一步
[29:55.000 --> 29:58.000] 就是现在互相调用的应用太多了
[29:58.000 --> 30:01.000] 可能有就是你付一笔钱
[30:01.000 --> 30:04.000] 后面可能影响有几百个应用需要参与
[30:04.000 --> 30:10.000] 然后就假如有一个付款的延迟变大了
[30:10.000 --> 30:12.000] 或者是有一部分失败了
[30:12.000 --> 30:14.000] 那在这个系统里面找出来
[30:14.000 --> 30:18.000] 故障的原因然后去恢复是
[30:18.000 --> 30:20.000] 可能是比较困难的
[30:20.000 --> 30:22.000] 因为你要看很多应用的指标跟业务指标
[30:22.000 --> 30:24.000] 还有业务的量
[30:24.000 --> 30:27.000] 所以我们希望就是用系统
[30:27.000 --> 30:29.000] 自动的去发现这里面的问题
[30:33.000 --> 30:36.000] 所以它的output就是
[30:36.000 --> 30:42.000] 一份类似于这种诊断报告一样的东西
[30:43.000 --> 30:45.000] 对对对 是的
[30:45.000 --> 30:50.000] 哦 感觉都好高端
[30:50.000 --> 30:55.000] 我觉得 反正是我觉得做那一步的工具
[30:55.000 --> 31:06.000] 我觉得有些时候会很恶心
[31:08.000 --> 31:12.000] 我先有体会
[31:12.000 --> 31:15.000] 沈涛你觉得恶心吗
[31:15.000 --> 31:20.000] 还好主要是我们依赖的一些数据
[31:20.000 --> 31:21.000] 可能就不太好
[31:21.000 --> 31:23.000] 有一些对内的接口
[31:23.000 --> 31:25.000] 因为每个公司可能都有这样的问题
[31:25.000 --> 31:28.000] 内部的接口奇奇怪怪的
[31:28.000 --> 31:32.000] 然后我们做定位肯定依赖很多数据
[31:32.000 --> 31:34.000] 所以有些数据接口
[31:34.000 --> 31:36.000] 接入特别奇怪
[31:36.000 --> 31:38.000] 我这方面做的事情还是挺多的
[31:38.000 --> 31:40.000] 所以说你最近在干嘛
[31:40.000 --> 31:43.000] 你问了一圈你还没有说你的
[31:43.000 --> 31:45.000] 这个待会说吧
[31:45.000 --> 31:47.000] 我是接着沈涛刚才的说
[31:47.000 --> 31:50.000] 就是要找其他一些team提供数据
[31:50.000 --> 31:53.000] 反正之前前一年
[31:53.000 --> 31:57.000] 我是一直想找一个组拿一些数据
[31:57.000 --> 32:00.000] 但是反正一开始说的还挺好
[32:00.000 --> 32:03.000] 后来喊了好几个月也没拿下来
[32:03.000 --> 32:06.000] 然后他们就说他们要自己做一套
[32:06.000 --> 32:07.000] 就我们是做监控的
[32:07.000 --> 32:09.000] 他们说他们自己做一套
[32:09.000 --> 32:11.000] 然后就不给我们数据了
[32:11.000 --> 32:14.000] 然后前一段时间
[32:14.000 --> 32:16.000] 就是另外一套系统
[32:16.000 --> 32:19.000] 是反正他们还比较合作吧
[32:19.000 --> 32:22.000] 就是有几个客户
[32:22.000 --> 32:25.000] 用他们那套系统的人找到我们
[32:25.000 --> 32:28.000] 然后说想让
[32:28.000 --> 32:30.000] 想在我们这里实现一些功能
[32:30.000 --> 32:32.000] 就是一些监控方面的功能
[32:32.000 --> 32:35.000] 但是我们这里其实没有相应的数据
[32:35.000 --> 32:39.000] 所以我就跟那个系统的组去谈了一下
[32:39.000 --> 32:43.000] 他们会把数据用pubsub
[32:43.000 --> 32:45.000] 中文是什么
[32:45.000 --> 32:47.000] 就是订阅的形式
[32:47.000 --> 32:49.000] 然后发给我们
[32:49.000 --> 32:52.000] 然后这个还算比较顺利吧
[32:52.000 --> 32:55.000] 就反正这方面这种事情我做的还蛮多的
[32:55.000 --> 32:57.000] 去跟其他组谈
[32:57.000 --> 33:01.000] 反正就其实做内部的一些东西
[33:01.000 --> 33:04.000] 就是觉得
[33:04.000 --> 33:06.000] 就是觉得不应该
[33:06.000 --> 33:08.000] 很多时候我会觉得不应该那么复杂
[33:08.000 --> 33:10.000] 就我经常想
[33:10.000 --> 33:13.000] 如果我在工作上做的某一件事情
[33:13.000 --> 33:15.000] 是我自己的一个个人项目的话
[33:15.000 --> 33:17.000] 那我明明可以用非常短的时间做完
[33:17.000 --> 33:21.000] 但是呢因为它是在Google这套大的系统里面
[33:21.000 --> 33:23.000] 你必须要去用这些已有的东西
[33:23.000 --> 33:27.000] 要符合特定的一些用法
[33:27.000 --> 33:29.000] 它就会变得异常复杂
[33:29.000 --> 33:31.000] 然后有些事情甚至都做不到
[33:31.000 --> 33:34.000] 所以我就觉得
[33:34.000 --> 33:38.000] 我现在已经不知道公司的这些基础架构
[33:38.000 --> 33:41.000] 到底是让我变得更有效率还是更没效率
[33:41.000 --> 33:43.000] 我真的已经不知道
[33:43.000 --> 33:45.000] 我觉得是
[33:45.000 --> 33:47.000] 我觉得说实话
[33:47.000 --> 33:49.000] 做内部系统好多东西
[33:49.000 --> 33:51.000] 公司内部复杂的结构
[33:51.000 --> 33:55.000] 然后各方的利益都是很难做平衡的
[33:55.000 --> 33:59.000] 就感觉你可能涉及到利益方面比较多
[33:59.000 --> 34:01.000] 我这个就完全是技术方面
[34:01.000 --> 34:05.000] 但是就是不行
[34:05.000 --> 34:09.000] 就比如说有个
[34:09.000 --> 34:13.000] 就比如说
[34:13.000 --> 34:17.000] 就有很多东西感觉就非常的
[34:17.000 --> 34:19.000] 非常的broken
[34:19.000 --> 34:21.000] 就比如说那个JRPC我们有个内部版本
[34:21.000 --> 34:23.000] 叫Stubby
[34:23.000 --> 34:27.000] Stubby的那个官方提供的API
[34:27.000 --> 34:29.000] 官方提供的Python API
[34:29.000 --> 34:31.000] 它是不支持Stream的
[34:31.000 --> 34:33.000] 就是
[34:33.000 --> 34:37.000] 它是就只能你发一个请求
[34:37.000 --> 34:39.000] 然后它会回来一个
[34:39.000 --> 34:41.000] 然后它文档上说它支持Stream
[34:41.000 --> 34:43.000] 但实际上它是不支持的
[34:43.000 --> 34:45.000] 然后就特别broken
[34:45.000 --> 34:49.000] 然后反正还有类似很多奇奇怪怪的问题
[34:49.000 --> 34:51.000] 就觉得
[34:51.000 --> 34:53.000] 也不知道怎么讲
[34:53.000 --> 34:55.000] 反正就难搞了
[34:55.000 --> 34:57.000] 对 新唐你说吧
[34:57.000 --> 35:01.000] 你刚刚说那个监控的问题
[35:01.000 --> 35:05.000] 其实有很多技巧
[35:05.000 --> 35:07.000] 就是你跟别人说一件事
[35:07.000 --> 35:09.000] 你必须要跟他要一个交付的日期
[35:09.000 --> 35:11.000] 即使要不出来
[35:11.000 --> 35:13.000] 你跟他要一个什么时间
[35:13.000 --> 35:15.000] 给你一个交付的日期
[35:15.000 --> 35:19.000] 反正就有这种很多技巧
[35:19.000 --> 35:23.000] 那你的这个技巧就是
[35:23.000 --> 35:27.000] 感觉好像会引起别人反感
[35:27.000 --> 35:29.000] 就来自于
[35:29.000 --> 35:31.000] 不会 大家办事都这样
[35:31.000 --> 35:33.000] 别人找我们干事
[35:33.000 --> 35:35.000] 他们也会有一个定案
[35:35.000 --> 35:39.000] 这方面说到这个我就
[35:39.000 --> 35:41.000] 就是
[35:41.000 --> 35:45.000] 就感觉很多组不守承诺吧
[35:45.000 --> 35:47.000] 就是他们跟我们说挺好的
[35:47.000 --> 35:49.000] 然后一直拖一直拖
[35:49.000 --> 35:51.000] 就我之前有个事情他们说
[35:51.000 --> 35:53.000] 那个第二季度的中旬
[35:53.000 --> 35:55.000] 本来说要给我们一个能用的东西
[35:55.000 --> 35:57.000] 然后到现在都还不能用
[35:57.000 --> 35:59.000] 就觉得
[35:59.000 --> 36:01.000] 不想说
[36:01.000 --> 36:03.000] 说了也没用就感觉
[36:03.000 --> 36:05.000] 那新涛你这个
[36:05.000 --> 36:07.000] 比如你给别人定一个定案
[36:07.000 --> 36:09.000] 那别人不遵守怎么办
[36:09.000 --> 36:11.000] 也没什么办法
[36:11.000 --> 36:13.000] 不可能不遵守吧
[36:13.000 --> 36:15.000] 不遵守的话
[36:15.000 --> 36:17.000] 他要提前跟你说的
[36:17.000 --> 36:19.000] 比如说今天是周一
[36:19.000 --> 36:21.000] 然后你问周五可以
[36:21.000 --> 36:23.000] 周三的时候你又问周五有没有问题
[36:23.000 --> 36:25.000] 他说没问题
[36:25.000 --> 36:27.000] 周四的时候你问明天我们测一下
[36:27.000 --> 36:29.000] 他就说好
[36:29.000 --> 36:31.000] 然后突然跟你说
[36:31.000 --> 36:33.000] 今天我们完不成了
[36:33.000 --> 36:35.000] 但你这个是不是
[36:35.000 --> 36:37.000] 他就是已经比较
[36:37.000 --> 36:39.000] 比较明确的一个小的feature
[36:41.000 --> 36:43.000] 差不多吧
[36:43.000 --> 36:45.000] 总之就算大一点
[36:45.000 --> 36:47.000] 你首先定了定案
[36:47.000 --> 36:49.000] 然后隔段时间你可能要问一下
[36:49.000 --> 36:51.000] 隔段时间要问一下
[36:51.000 --> 36:59.000] 好吧我感觉
[36:59.000 --> 37:01.000] 反正在大公司里
[37:01.000 --> 37:03.000] 工作还是挺复杂的
[37:03.000 --> 37:05.000] 那新涛你接着说吧
[37:05.000 --> 37:07.000] 刚才不好意思你打断了
[37:07.000 --> 37:09.000] 然后就没有其他的了
[37:09.000 --> 37:11.000] 最近还是在看书
[37:11.000 --> 37:13.000] 还是在看那本DDRA
[37:13.000 --> 37:15.000] 因为前段时间太忙了
[37:15.000 --> 37:17.000] 好久时间都没看
[37:17.000 --> 37:19.000] 然后
[37:19.000 --> 37:23.000] 其他的话好像也没有什么在搞的事情
[37:23.000 --> 37:25.000] 你的iRedis怎么样
[37:25.000 --> 37:27.000] 对
[37:27.000 --> 37:29.000] 我已经close掉
[37:29.000 --> 37:31.000] Redis6的车轮机了
[37:31.000 --> 37:33.000] 就是它现在是完全支持
[37:33.000 --> 37:35.000] Redis6的一些语法
[37:35.000 --> 37:37.000] 比如说 ACL
[37:37.000 --> 37:39.000] 跟一些新出的
[37:39.000 --> 37:41.000] 比如说
[37:41.000 --> 37:43.000] 它有个
[37:43.000 --> 37:45.000] 字符串算法的命令
[37:45.000 --> 37:47.000] 就是说你在Redis里面存了很多字符串
[37:47.000 --> 37:49.000] 然后用一个命令求出来
[37:49.000 --> 37:51.000] 它的最长公共字符串
[37:51.000 --> 37:53.000] 然后支持了一些这样的东西
[37:53.000 --> 37:55.000] 所以现在是完全支持
[37:55.000 --> 37:57.000] Redis6的语法
[37:57.000 --> 37:59.000] 但是有一点不支持
[37:59.000 --> 38:01.000] 就是RESP3
[38:01.000 --> 38:03.000] 我感觉
[38:03.000 --> 38:05.000] 我感觉没有什么太大的必要
[38:05.000 --> 38:07.000] 因为RESP3可能主要是针对
[38:07.000 --> 38:09.000] Redis一些客户端来写的
[38:09.000 --> 38:11.000] 比如说
[38:11.000 --> 38:13.000] RedisPair
[38:13.000 --> 38:15.000] 跟
[38:15.000 --> 38:17.000] Go元或者NodeJS
[38:17.000 --> 38:19.000] 去连接Redis服务器
[38:19.000 --> 38:21.000] 它可能每一个都有自己的客户端
[38:21.000 --> 38:23.000] 然后因为Redis返回的
[38:23.000 --> 38:25.000] Response
[38:25.000 --> 38:27.000] 它的数据类型不是确定的吗
[38:27.000 --> 38:29.000] 比如说它给你返回一个
[38:29.000 --> 38:31.000] 字典
[38:31.000 --> 38:33.000] 就是key value
[38:33.000 --> 38:35.000] 但是因为RESP2的
[38:35.000 --> 38:37.000] 数据类型不是很全
[38:37.000 --> 38:39.000] 所以它给你返回的时候只能这样返回
[38:39.000 --> 38:41.000] 就是单数都是key
[38:41.000 --> 38:43.000] 偶数都是value
[38:43.000 --> 38:45.000] 它给你返回的是一个list
[38:45.000 --> 38:47.000] 你要自己去拼
[38:47.000 --> 38:49.000] 然后它们的客户端里
[38:49.000 --> 38:51.000] 都要做这么一件事情
[38:51.000 --> 38:53.000] NodeJS要做,Go元要做,Python要做
[38:53.000 --> 38:55.000] 如果Redis出了一个新的命令
[38:55.000 --> 38:57.000] 然后这些语言的客户端
[38:57.000 --> 38:59.000] 都要去实现一遍
[38:59.000 --> 39:01.000] 因为你不知道它返回的类型
[39:01.000 --> 39:03.000] 你应该怎么解决
[39:03.000 --> 39:05.000] 你要把它转换成语言native的一个
[39:05.000 --> 39:07.000] 数据类型
[39:07.000 --> 39:09.000] 但是RESP3就不用了
[39:09.000 --> 39:11.000] 它多了很多数据类型
[39:11.000 --> 39:13.000] 你不用知道
[39:13.000 --> 39:15.000] 这个SDK
[39:15.000 --> 39:17.000] 或者客户端
[39:17.000 --> 39:19.000] 不需要知道用户需要去调什么命令
[39:19.000 --> 39:21.000] 它就直接可以
[39:21.000 --> 39:23.000] 用一个字母串
[39:23.000 --> 39:25.000] 比如第一个参数是
[39:25.000 --> 39:27.000] get一个string
[39:27.000 --> 39:29.000] 然后后面返回的response
[39:29.000 --> 39:31.000] 可能就自动的带上这个信息
[39:31.000 --> 39:33.000] 对于动态的语言来说
[39:33.000 --> 39:35.000] 可能还好
[39:35.000 --> 39:37.000] 因为你可以根据RESP3返回的结论
[39:37.000 --> 39:39.000] 自动的去转换成
[39:39.000 --> 39:41.000] dict或者list
[39:41.000 --> 39:43.000] 但是对于静态的语言
[39:43.000 --> 39:45.000] 可能就有点麻烦了
[39:45.000 --> 39:47.000] 因为一个函数返回的数据类型
[39:47.000 --> 39:49.000] 可能是各种各样的
[39:51.000 --> 39:53.000] 所以可能先出了命令
[39:53.000 --> 39:55.000] 这些还是要去实现
[39:57.000 --> 39:59.000] RESP3
[39:59.000 --> 40:01.000] 我还是没太理解
[40:01.000 --> 40:03.000] 你能听懂吗?
[40:03.000 --> 40:05.000] 它是一个Redis这边的东西还是一个
[40:05.000 --> 40:07.000] 对,它是一个
[40:07.000 --> 40:09.000] TCP之上的协议
[40:09.000 --> 40:11.000] 比如说你的应用去连接Maseko
[40:11.000 --> 40:13.000] 或者是你的应用去连接Postgres
[40:13.000 --> 40:15.000] 它都是基于TCP连接的
[40:15.000 --> 40:17.000] 然后它有一个Maseko的协议
[40:17.000 --> 40:19.000] 或者是Postgres的协议
[40:19.000 --> 40:21.000] 然后比如说
[40:21.000 --> 40:23.000] TiDB是兼容Maseko的
[40:23.000 --> 40:25.000] 所以
[40:25.000 --> 40:27.000] 你用一个Maseko的客户端
[40:27.000 --> 40:29.000] 可以去连接TiDB
[40:29.000 --> 40:31.000] 因为你通过TCP连接之后
[40:31.000 --> 40:33.000] 你们都是用Maseko的
[40:33.000 --> 40:35.000] 那个协议来进行通讯
[40:35.000 --> 40:37.000] 对吧?
[40:37.000 --> 40:39.000] Redis呢,它有一个Redis自己的协议
[40:39.000 --> 40:41.000] 也是建立在TCP之上的
[40:41.000 --> 40:43.000] 它是
[40:43.000 --> 40:45.000] 我给你举个例子
[40:45.000 --> 40:47.000] 比如说你建立TCP连接之后
[40:47.000 --> 40:49.000] 那你给Redis发送数据
[40:49.000 --> 40:51.000] 第一个先发个星
[40:51.000 --> 40:53.000] 然后后面跟个3
[40:53.000 --> 40:55.000] 就表示后面有三个参数
[40:55.000 --> 40:57.000] 然后再发个
[40:57.000 --> 40:59.000] 具体协议我忘记细节了
[40:59.000 --> 41:01.000] 就比如再发个加号3
[41:01.000 --> 41:03.000] 就表示第一个参数是三个长度
[41:03.000 --> 41:05.000] 然后第二个
[41:05.000 --> 41:07.000] 你再发个加2
[41:07.000 --> 41:09.000] 就表示第二个参数有两个长度
[41:09.000 --> 41:11.000] 你再发个加5
[41:11.000 --> 41:13.000] 后面再跟5个长度
[41:13.000 --> 41:15.000] 然后解析完了
[41:15.000 --> 41:17.000] 这个Redis server就认为你的请求发来了
[41:17.000 --> 41:19.000] 然后它开始处理你的请求
[41:19.000 --> 41:21.000] 但你实现这个
[41:21.000 --> 41:23.000] 相当于你原来是用
[41:23.000 --> 41:25.000] RESP2这套协议
[41:25.000 --> 41:27.000] 跟Redis通讯
[41:27.000 --> 41:29.000] 然后
[41:29.000 --> 41:31.000] 但是它现在拒绝3了
[41:31.000 --> 41:33.000] 就是说你要不要migrate到3
[41:33.000 --> 41:35.000] 对对不是migrate
[41:35.000 --> 41:37.000] 是要不要兼容
[41:37.000 --> 41:39.000] 它有一个命令
[41:39.000 --> 41:41.000] 因为Redis 6
[41:41.000 --> 41:43.000] 一开始就让
[41:43.000 --> 41:45.000] Redis 6只支持RESP
[41:45.000 --> 41:47.000] 这样的话
[41:47.000 --> 41:49.000] 你前一到Redis 6
[41:49.000 --> 41:51.000] 所有的应用逻辑都要改
[41:51.000 --> 41:53.000] SDK要改
[41:53.000 --> 41:55.000] 应用逻辑肯定也要改
[41:55.000 --> 41:57.000] 因为你调用的SDK就不一样
[41:57.000 --> 41:59.000] 但是
[41:59.000 --> 42:01.000] 社区的版本太强烈了
[42:01.000 --> 42:03.000] 后来它就没改
[42:03.000 --> 42:05.000] 这个东西不可能改了
[42:05.000 --> 42:07.000] 对吧
[42:07.000 --> 42:09.000] 但我感觉它肯定是
[42:09.000 --> 42:11.000] 有意向之后都弄成3的
[42:11.000 --> 42:13.000] 按你的说法
[42:13.000 --> 42:15.000] 是的
[42:15.000 --> 42:17.000] 因为RESP3
[42:17.000 --> 42:19.000] 支持的类型更加丰富
[42:19.000 --> 42:21.000] 就是
[42:21.000 --> 42:23.000] 还有其他的一些好处
[42:23.000 --> 42:25.000] 它有一个RESP3的那个
[42:25.000 --> 42:27.000] Git repo
[42:27.000 --> 42:29.000] 我再看一下
[42:29.000 --> 42:31.000] 我现在记不起来更多详细的
[42:31.000 --> 42:33.000] 你想支持以前的
[42:33.000 --> 42:35.000] Redis的老版本的话
[42:35.000 --> 42:37.000] 肯定还是没有办法
[42:37.000 --> 42:39.000] 就只用RESP3
[42:39.000 --> 42:41.000] 对
[42:41.000 --> 42:43.000] 是
[42:43.000 --> 42:45.000] 所以现在的情况就是
[42:45.000 --> 42:47.000] 客户端去连接
[42:47.000 --> 42:49.000] Redis server还是用的
[42:49.000 --> 42:51.000] RESP2来连接的
[42:51.000 --> 42:53.000] 但是客户端在建立连接之后
[42:53.000 --> 42:55.000] 可以发一个命令叫Hello3
[42:55.000 --> 42:57.000] 然后Redis server就开始
[42:57.000 --> 42:59.000] 切换成用RESP3
[42:59.000 --> 43:01.000] 给你通讯
[43:01.000 --> 43:03.000] 这样的话就比如说我可以再自己实现一个
[43:03.000 --> 43:05.000] Redis type然后我只支持RESP3
[43:05.000 --> 43:07.000] 我每次建立连接
[43:07.000 --> 43:09.000] 发生的第一个命令就是Hello3
[43:09.000 --> 43:11.000] 然后我们就可以
[43:11.000 --> 43:13.000] 开始用RESP3
[43:13.000 --> 43:15.000] 进行通讯了
[43:15.000 --> 43:17.000] 后来我想了一下这个事情我就回到
[43:17.000 --> 43:19.000] 那个Redis我觉得这个
[43:19.000 --> 43:21.000] 就没有什么必要因为我那个就是
[43:21.000 --> 43:23.000] 个客户端命令嘛
[43:23.000 --> 43:25.000] 它不需要去命令看到那个回应
[43:25.000 --> 43:27.000] 它不需要去关心
[43:27.000 --> 43:29.000] 后面使用的RESP2
[43:29.000 --> 43:31.000] 还是RESP3
[43:31.000 --> 43:33.000] 然后RESP3带来的好处就是
[43:33.000 --> 43:35.000] 它现在的命令
[43:35.000 --> 43:37.000] 我的客户端不需要做任何
[43:37.000 --> 43:39.000] 更改就可以赶直的嘛
[43:39.000 --> 43:41.000] 但是对于Redis来说
[43:41.000 --> 43:43.000] 你本来先出了一个命令
[43:43.000 --> 43:45.000] 我因为要给你做自动补全
[43:45.000 --> 43:47.000] 要给你就是看要不要
[43:47.000 --> 43:49.000] 解析它的response
[43:49.000 --> 43:51.000] 我这些事情肯定要做的
[43:51.000 --> 43:53.000] 所以升级到RESP3对我来说
[43:53.000 --> 43:55.000] 好处不是很大
[43:55.000 --> 43:57.000] 但是工作量会特别特别多
[43:57.000 --> 43:59.000] 对,我感觉
[43:59.000 --> 44:01.000] 好像没有什么
[44:01.000 --> 44:03.000] 实质的impact在应付
[44:03.000 --> 44:05.000] 对,所以除了这一点的话
[44:05.000 --> 44:07.000] 其他的
[44:07.000 --> 44:09.000] Redis6的
[44:09.000 --> 44:11.000] 那个特性都是支持
[44:11.000 --> 44:13.000] 我看你现在有
[44:13.000 --> 44:15.000] 1124个
[44:15.000 --> 44:17.000] star
[44:17.000 --> 44:19.000] 还挺多的
[44:19.000 --> 44:21.000] 算是在稳固增长吧
[44:21.000 --> 44:23.000] 超过1000之后
[44:23.000 --> 44:25.000] 基本上每天都有几个
[44:25.000 --> 44:27.000] 运营上我感觉不用太管了
[44:27.000 --> 44:29.000] 但是我感觉让我碰到的还是
[44:29.000 --> 44:31.000] 移除太少了
[44:35.000 --> 44:37.000] 看起来好像没有人
[44:37.000 --> 44:39.000] 在用
[44:39.000 --> 44:41.000] 这个时候你应该去找
[44:41.000 --> 44:43.000] 你应该找肉姐聊一下
[44:43.000 --> 44:45.000] 怎么运营项目
[44:45.000 --> 44:47.000] 上次不是聊了吗
[44:47.000 --> 44:49.000] 不知道有EKstar
[44:49.000 --> 44:51.000] 到底有多少人在用
[44:51.000 --> 44:53.000] 因为看那个下载量
[44:53.000 --> 44:55.000] 大部分人可能都不会在
[44:55.000 --> 44:57.000] Pipeline上下东西
[44:57.000 --> 44:59.000] 可能从Mirror上下东西
[44:59.000 --> 45:01.000] 然后这个下载量非常难统计
[45:01.000 --> 45:03.000] 这种客户软件
[45:03.000 --> 45:05.000] 本来也不好统计
[45:05.000 --> 45:07.000] 除非你想连到服务器
[45:07.000 --> 45:09.000] 但那样就会被很多人认为
[45:09.000 --> 45:11.000] 就是受体用户数据了
[45:11.000 --> 45:13.000] 对,这个是不可能的
[45:13.000 --> 45:15.000] 你很在意有多少人用这件事情
[45:15.000 --> 45:17.000] 是吗
[45:17.000 --> 45:19.000] 是的,因为用的人多了
[45:19.000 --> 45:21.000] 可能做的事情更有意义
[45:21.000 --> 45:23.000] 我突然发现我们好像忽略小白很久了
[45:23.000 --> 45:25.000] 还有LiqJF一直没有说你到底在干什么
[45:25.000 --> 45:27.000] 对,那我聊一下我这边
[45:27.000 --> 45:29.000] 其实我刚才看到了
[45:29.000 --> 45:31.000] 就是我的那个
[45:31.000 --> 45:33.000] repo PDR
[45:33.000 --> 45:35.000] PDRR上面的repo
[45:35.000 --> 45:37.000] 他给我发了一个
[45:37.000 --> 45:39.000] Insure the Future
[45:39.000 --> 45:41.000] 他说我应该在
[45:41.000 --> 45:43.000] 发了一个那个
[45:43.000 --> 45:45.000] Insure the Future of Your Work
[45:45.000 --> 45:47.000] 就是说你现在这个项目只有你一个
[45:47.000 --> 45:49.000] Maintainer
[45:49.000 --> 45:51.000] 然后要
[45:51.000 --> 45:53.000] invite一个
[45:53.000 --> 45:55.000] 后记者,怕我万一挂了
[45:55.000 --> 45:57.000] 就没人维护
[45:59.000 --> 46:01.000] 感觉Github
[46:01.000 --> 46:03.000] 最近就是有很多这种
[46:03.000 --> 46:05.000] 动作
[46:05.000 --> 46:07.000] 包括那个北极
[46:07.000 --> 46:09.000] 北极仓库
[46:09.000 --> 46:11.000] 大家都在晒
[46:11.000 --> 46:13.000] 感觉
[46:13.000 --> 46:15.000] 就基本上所有人都有
[46:15.000 --> 46:17.000] 但是
[46:17.000 --> 46:19.000] 他那个
[46:19.000 --> 46:21.000] 他那个比较不好的一点就是
[46:21.000 --> 46:23.000] 他这个东西
[46:23.000 --> 46:25.000] 对,没有一个页面
[46:25.000 --> 46:27.000] 给你查对吧
[46:27.000 --> 46:29.000] 对,查不了
[46:29.000 --> 46:31.000] 我觉得他应该
[46:31.000 --> 46:33.000] 就是在每一个,就有两种方法
[46:33.000 --> 46:35.000] 一个方法是有一个页面
[46:35.000 --> 46:37.000] 列出来所有的放到北极的仓库
[46:37.000 --> 46:39.000] 另外一个就是你在每一个仓库里面
[46:39.000 --> 46:41.000] 加一个
[46:41.000 --> 46:43.000] Tag或者一个什么
[46:43.000 --> 46:45.000] 显示这个项目已经是被存在北极
[46:45.000 --> 46:47.000] 对对对
[46:47.000 --> 46:49.000] 而且他这个选的
[46:49.000 --> 46:51.000] 选仓库的方法透明吗
[46:51.000 --> 46:53.000] 就是说比如说超过多少
[46:53.000 --> 46:55.000] Stars的我们就
[46:55.000 --> 46:57.000] 怎么选呢
[46:57.000 --> 46:59.000] 对,他页面上有
[46:59.000 --> 47:01.000] 他的Stars数我忘了
[47:01.000 --> 47:03.000] 好像是200多
[47:03.000 --> 47:05.000] 还是多少,反正有一个就是有一条
[47:05.000 --> 47:07.000] 线然后他说是
[47:07.000 --> 47:09.000] 在五个月,好像五个月内
[47:09.000 --> 47:11.000] 有活跃
[47:11.000 --> 47:13.000] 应该是有移除或者commit吧
[47:13.000 --> 47:15.000] 并且Stars超过多少就会
[47:15.000 --> 47:17.000] 好了
[47:17.000 --> 47:19.000] 那二月份好像
[47:19.000 --> 47:21.000] 可能还不够
[47:21.000 --> 47:23.000] 我感觉他这个应该也不止放一批吧
[47:23.000 --> 47:25.000] 应该之后还有机会的
[47:25.000 --> 47:27.000] 也还好,这样的话可以放一个
[47:27.000 --> 47:29.000] 更成熟的版本
[47:29.000 --> 47:31.000] 说说那个节目,我现在都还没有听到
[47:31.000 --> 47:33.000] 你现在在公司里这段时间
[47:33.000 --> 47:35.000] 除了做监控工具还在做什么
[47:35.000 --> 47:37.000] 在公司没有什么
[47:37.000 --> 47:39.000] 嗯
[47:39.000 --> 47:41.000] 就是在
[47:41.000 --> 47:43.000] 公司的活不是
[47:43.000 --> 47:45.000] 特别的
[47:45.000 --> 47:47.000] 不是特别有意思吧,没有什么特别
[47:47.000 --> 47:49.000] 可说的,还是讲讲cyberbrain吧
[47:49.000 --> 47:51.000] 嗯,就
[47:51.000 --> 47:53.000] 最近cyberbrain还是有
[47:53.000 --> 47:55.000] 做了蛮多
[47:55.000 --> 47:57.000] 东西的吧,嗯
[47:57.000 --> 47:59.000] 虽然离正式发布还有很大的距离
[47:59.000 --> 48:01.000] 但是我
[48:01.000 --> 48:03.000] 最近把
[48:03.000 --> 48:05.000] 就是这个整套的流程
[48:05.000 --> 48:07.000] 都想清楚了
[48:07.000 --> 48:09.000] 嗯
[48:09.000 --> 48:11.000] 就这里就剧透一下吧
[48:11.000 --> 48:13.000] 就是说最后的
[48:13.000 --> 48:15.000] 就是首先有很多听众
[48:15.000 --> 48:17.000] 肯定不知道cyberbrain是个什么东西
[48:17.000 --> 48:19.000] cyberbrain它就是一个
[48:19.000 --> 48:21.000] 简单来说它就是一个把
[48:21.000 --> 48:23.000] 你的debug过程
[48:23.000 --> 48:25.000] 自动化的这样一个工具
[48:25.000 --> 48:27.000] 就是比如说你传统上
[48:27.000 --> 48:29.000] 要怎么debug你肯定要设置一些
[48:29.000 --> 48:31.000] 断点的吧,你肯定要设置断点
[48:31.000 --> 48:33.000] 然后就是单步往下走
[48:33.000 --> 48:35.000] 然后就是去看那个每个函数
[48:35.000 --> 48:37.000] 是怎么调用的,然后你们的
[48:37.000 --> 48:39.000] 一些变量是怎么变化的,但是
[48:39.000 --> 48:41.000] cyberbrain的话就是
[48:41.000 --> 48:43.000] 就是一个很自然的想法
[48:43.000 --> 48:45.000] 就是说你既然
[48:45.000 --> 48:47.000] 既然你的解释器
[48:47.000 --> 48:49.000] 或者说你的这个
[48:49.000 --> 48:51.000] 程序的runtime它已经
[48:51.000 --> 48:53.000] 有所有的这些信息了
[48:53.000 --> 48:55.000] 就是它知道你的函数是怎么调用的
[48:55.000 --> 48:57.000] 它知道每一个时期
[48:57.000 --> 48:59.000] 你的每个变量的值是什么
[48:59.000 --> 49:01.000] 那为什么你还要去手动的再去
[49:01.000 --> 49:03.000] 把这些步骤给重现一遍呢
[49:03.000 --> 49:05.000] 就让它记下来
[49:05.000 --> 49:07.000] 然后可视化出来不就行了吗
[49:07.000 --> 49:09.000] 所以cyberbrain
[49:09.000 --> 49:11.000] 差不多就是做的这样一件事情
[49:11.000 --> 49:13.000] 那我
[49:13.000 --> 49:15.000] 之前反正
[49:15.000 --> 49:17.000] 今年上半年主要是
[49:17.000 --> 49:19.000] 在搞
[49:19.000 --> 49:21.000] 就是代码追踪这部分
[49:21.000 --> 49:23.000] 就相当于
[49:23.000 --> 49:25.000] 就相当于
[49:25.000 --> 49:27.000] 能够让cyberbrain
[49:27.000 --> 49:29.000] 知道你的代码
[49:29.000 --> 49:31.000] 在运行的过程中发生了什么
[49:31.000 --> 49:33.000] 然后最近一段时间是在弄
[49:33.000 --> 49:35.000] 就是前端可视化
[49:35.000 --> 49:37.000] 因为你有这些数据了
[49:37.000 --> 49:39.000] 你肯定要用某种方式
[49:39.000 --> 49:41.000] 把它展示出来
[49:41.000 --> 49:43.000] 所以最后我决定的其实是在
[49:43.000 --> 49:45.000] 把这套可视化做在VS Code里
[49:45.000 --> 49:47.000] 就是因为
[49:47.000 --> 49:49.000] 我发现现在所有的东西
[49:49.000 --> 49:51.000] 都在往VS Code迁移
[49:51.000 --> 49:53.000] 就那个什么座点IO嘛
[49:53.000 --> 49:55.000] 他们也搞了一个
[49:55.000 --> 49:57.000] 直接在VS Code里面
[49:57.000 --> 49:59.000] 你就可以画流程图
[49:59.000 --> 50:01.000] 然后就是
[50:01.000 --> 50:03.000] 对
[50:03.000 --> 50:05.000] 就是
[50:05.000 --> 50:07.000] 而且VS Code不是还有网页版吗
[50:07.000 --> 50:09.000] 它有网页版吗
[50:11.000 --> 50:13.000] 有那个是VS Studio Codespace
[50:17.000 --> 50:19.000] 对反正它有网页版
[50:19.000 --> 50:21.000] 还有一个
[50:21.000 --> 50:23.000] 就跟VS Code长得差不多的
[50:23.000 --> 50:25.000] 那个叫C
[50:25.000 --> 50:27.000] TSIA
[50:27.000 --> 50:29.000] 对
[50:29.000 --> 50:31.000] 然后就我感觉
[50:31.000 --> 50:33.000] 就是说
[50:33.000 --> 50:35.000] VS Code这套东西
[50:35.000 --> 50:37.000] 好像基本要统治世界了
[50:37.000 --> 50:39.000] 所以我就觉得
[50:39.000 --> 50:41.000] 做进VS Code里面可能还是
[50:41.000 --> 50:43.000] 更加的
[50:43.000 --> 50:45.000] 能有更多用户吧
[50:45.000 --> 50:47.000] 并且它毕竟是Electron
[50:47.000 --> 50:49.000] 写Web也
[50:49.000 --> 50:51.000] 资料也比较多
[50:51.000 --> 50:53.000] 然后Web上面可拆化的库也比较多
[50:53.000 --> 50:55.000] 然后所以大概的意思就是说
[50:55.000 --> 50:57.000] 它
[50:57.000 --> 50:59.000] 整体是这么工作
[50:59.000 --> 51:01.000] 就是说你先跑一个程序
[51:01.000 --> 51:03.000] 然后你调用Cyber Brain这个库
[51:03.000 --> 51:05.000] 然后它会起一个服务器
[51:05.000 --> 51:07.000] 然后这个它会起一个Server
[51:07.000 --> 51:09.000] 然后这个Server的话
[51:09.000 --> 51:11.000] 然后VS Code这边有一个插件
[51:11.000 --> 51:13.000] 这个插件会跟
[51:13.000 --> 51:15.000] Cyber Brain起的Server来通信
[51:15.000 --> 51:17.000] 然后拿到你程序运行的这些
[51:17.000 --> 51:19.000] 运行时的这些信息
[51:19.000 --> 51:21.000] 包括就是每一个时刻
[51:21.000 --> 51:23.000] 你的变量是什么呀
[51:23.000 --> 51:25.000] 变量值是什么呀
[51:25.000 --> 51:27.000] 然后你的函数是怎么调用的呀
[51:27.000 --> 51:29.000] 然后用这个VS Code的插件
[51:29.000 --> 51:31.000] 在VS Code里面
[51:31.000 --> 51:33.000] 把它这套代码的变化情况
[51:33.000 --> 51:35.000] 给可视化出来
[51:35.000 --> 51:37.000] 对,差不多它的流程就是这样
[51:37.000 --> 51:39.000] 然后我最近也是
[51:39.000 --> 51:41.000] 就是在学习VS Code的插件要怎么做嘛
[51:41.000 --> 51:43.000] 然后
[51:43.000 --> 51:45.000] 就整套技术站要怎么搭
[51:45.000 --> 51:47.000] 反正最后通信是决定用GRPC来做了
[51:47.000 --> 51:49.000] 也学了一下GRPC
[51:49.000 --> 51:51.000] 然后
[51:51.000 --> 51:53.000] 当然前端可视化要用什么
[51:53.000 --> 51:55.000] 做这个还没决定
[51:55.000 --> 51:57.000] 就之后再说
[51:59.000 --> 52:01.000] 你GRPC有点太重了吧
[52:01.000 --> 52:03.000] 但是你
[52:03.000 --> 52:05.000] 还有什么别的选择呢,没有什么特别好选择
[52:05.000 --> 52:07.000] 好吧,好像也是
[52:07.000 --> 52:09.000] 就你又想
[52:09.000 --> 52:11.000] 你又想有type
[52:11.000 --> 52:13.000] 你又想通信对吧
[52:13.000 --> 52:15.000] 你又想双向通信
[52:15.000 --> 52:17.000] 关键是
[52:17.000 --> 52:19.000] 其实我觉得你这个的话
[52:19.000 --> 52:21.000] 我觉得你这个后面可以考虑一下
[52:21.000 --> 52:23.000] 做到VM里面去
[52:23.000 --> 52:25.000] 做到VM里
[52:25.000 --> 52:27.000] 那太难了
[52:27.000 --> 52:29.000] 那这个不是
[52:31.000 --> 52:33.000] 对,因为其实
[52:33.000 --> 52:35.000] 像,对,因为其实
[52:35.000 --> 52:37.000] 后面你这个我感觉可以
[52:37.000 --> 52:39.000] 往一个方向是
[52:39.000 --> 52:43.000] 你可以做一个attach的工具
[52:43.000 --> 52:45.000] 对,然后去分析
[52:45.000 --> 52:47.000] 它具体里面的东西
[52:47.000 --> 52:49.000] 因为现在毕竟Python
[52:49.000 --> 52:51.000] 它的attach的工具太难用了
[52:51.000 --> 52:53.000] 对,attach这部分
[52:53.000 --> 52:55.000] 我还没太研究过
[52:55.000 --> 52:57.000] 我也不太确定可不可行吧
[52:57.000 --> 52:59.000] 对,也许可行
[52:59.000 --> 53:01.000] 我觉得就是加了
[53:01.000 --> 53:03.000] 不是Python不让它暴露的信息还是太少
[53:03.000 --> 53:07.000] 用翔哥的话说就是暴露的不成体系
[53:07.000 --> 53:09.000] 缺乏统一规划
[53:09.000 --> 53:11.000] 是的
[53:11.000 --> 53:13.000] 对,因为像比如说
[53:13.000 --> 53:15.000] 我这段时间不是在Java
[53:15.000 --> 53:17.000] 我先在我这边
[53:17.000 --> 53:19.000] 然后它的JVM暴露的信息相当多
[53:19.000 --> 53:21.000] 然后你基本可以在无侵入的情况下
[53:21.000 --> 53:23.000] 去分析里面
[53:23.000 --> 53:25.000] 还说具体的调用战
[53:25.000 --> 53:27.000] 然后去
[53:27.000 --> 53:29.000] 就是说你attach东西进去
[53:29.000 --> 53:31.000] 然后你就可以去做很多工具
[53:31.000 --> 53:33.000] 然后你就可以去做很多关于APM的操作
[53:35.000 --> 53:37.000] 但你Java也没有人做这样一套东西
[53:37.000 --> 53:39.000] 就是自动化debug的东西
[53:39.000 --> 53:41.000] 还是依赖于你人手工去debug
[53:47.000 --> 53:49.000] 对,但是要做的话
[53:49.000 --> 53:51.000] 你可以尝试先在Java上
[53:51.000 --> 53:53.000] 把你移植到Java上
[53:53.000 --> 53:55.000] 然后成为Java的Cyberbrain
[53:55.000 --> 53:57.000] 我很怀疑能不能在Java上做到
[53:57.000 --> 53:59.000] 因为我这部分
[53:59.000 --> 54:01.000] 其实是
[54:01.000 --> 54:03.000] 就可能有人知道
[54:03.000 --> 54:05.000] 我去年不是在PyCon上
[54:05.000 --> 54:07.000] 演示过一版Cyberbrain
[54:07.000 --> 54:09.000] 但那版用的思路
[54:09.000 --> 54:11.000] 已经完全我现在抛弃掉了
[54:11.000 --> 54:13.000] 因为它
[54:13.000 --> 54:15.000] 简单来说就是没有办法
[54:15.000 --> 54:17.000] 继续做下去了
[54:17.000 --> 54:19.000] 我现在用的思路实际上是
[54:19.000 --> 54:21.000] 追踪了Python的字节码
[54:21.000 --> 54:23.000] 就是我会对于
[54:23.000 --> 54:25.000] 分析每个字节码
[54:25.000 --> 54:27.000] 它是怎么对着
[54:27.000 --> 54:29.000] 程序产生的影响
[54:29.000 --> 54:31.000] 然后在字节码这个级别来分析
[54:31.000 --> 54:33.000] 才能做到说去
[54:33.000 --> 54:35.000] 追踪变量的变化
[54:35.000 --> 54:37.000] 我怀疑这VM
[54:37.000 --> 54:39.000] 我比较怀疑有没有这种
[54:39.000 --> 54:41.000] Low Level的
[54:41.000 --> 54:43.000] Java是可以的呀
[54:43.000 --> 54:45.000] 你甚至可以去修改字节码
[54:45.000 --> 54:47.000] 但是你能追踪字节码吗
[54:47.000 --> 54:49.000] 修改字节码很简单
[54:49.000 --> 54:51.000] 就是你在追踪的话
[54:51.000 --> 54:53.000] 你追踪是记录它的相关的调用信息吗
[54:53.000 --> 54:55.000] 对,你追踪的话
[54:55.000 --> 54:57.000] 你记录它的相关的调用信息吗
[54:57.000 --> 54:59.000] 不是,就比如说
[54:59.000 --> 55:01.000] 我A加B
[55:01.000 --> 55:03.000] 你要先漏的A加A和B
[55:03.000 --> 55:05.000] 这两个变量,比如说LoadConst
[55:05.000 --> 55:07.000] 或者LoadName之类的
[55:07.000 --> 55:09.000] 然后我就要在执行完
[55:09.000 --> 55:11.000] LoadName,我就知道它执行了一个
[55:11.000 --> 55:13.000] LoadName
[55:13.000 --> 55:15.000] 就是要达到这种程度才行
[55:15.000 --> 55:17.000] 应该是可以的
[55:17.000 --> 55:19.000] 应该是可以的
[55:19.000 --> 55:21.000] 对,应该是
[55:21.000 --> 55:23.000] 因为那个
[55:23.000 --> 55:25.000] 像那个第三方的JVM
[55:25.000 --> 55:27.000] 它的一些trace工具的话
[55:27.000 --> 55:29.000] 实际上就是需要去分析
[55:29.000 --> 55:31.000] 实际上就是需要去分析
[55:31.000 --> 55:33.000] 就比如说现在可以做到什么程度呢
[55:33.000 --> 55:35.000] 就说我直接首先
[55:35.000 --> 55:37.000] hook你的一个
[55:37.000 --> 55:39.000] 入口嘛
[55:39.000 --> 55:41.000] 然后你一个起球来的时候
[55:41.000 --> 55:43.000] 我hook你的一个入口
[55:43.000 --> 55:45.000] 然后加入一个标识
[55:45.000 --> 55:47.000] 那么我会记录你在这个里面的标识
[55:47.000 --> 55:49.000] 里面的就是全部的
[55:49.000 --> 55:51.000] 调用战信息,包括每一个函数
[55:51.000 --> 55:53.000] 它用了多久时间
[55:53.000 --> 55:55.000] 就是请求级别的,调用级别的
[55:55.000 --> 55:57.000] 然后每一个函数它的调用战是什么
[55:57.000 --> 55:59.000] 然后它去触发了什么外部依赖
[55:59.000 --> 56:01.000] 然后它那个
[56:01.000 --> 56:05.000] 每一个函数的调用时间是多久
[56:05.000 --> 56:07.000] 这种都是可以做到的
[56:07.000 --> 56:09.000] 就也是需要去做自己的
[56:09.000 --> 56:11.000] 对
[56:11.000 --> 56:13.000] 这个肯定是可以做到
[56:13.000 --> 56:15.000] 但这个级别不够低
[56:15.000 --> 56:17.000] 这个还是太high level了
[56:17.000 --> 56:19.000] 就是说Python在
[56:19.000 --> 56:21.000] 3.6以前它这些也都是可以做到的
[56:21.000 --> 56:23.000] 就是函数调用啊
[56:23.000 --> 56:25.000] 就函数调用的tracking
[56:25.000 --> 56:27.000] 这个很简单,很多人也
[56:27.000 --> 56:29.000] 就很多工具有依赖这个信息的
[56:29.000 --> 56:31.000] 但是自解码这个级别的
[56:31.000 --> 56:33.000] 调试信息
[56:33.000 --> 56:35.000] 它是3.7才加进去
[56:35.000 --> 56:37.000] 因为主要是
[56:37.000 --> 56:39.000] 你要是单独去做
[56:39.000 --> 56:41.000] 你说你要去单独分析函数的信息
[56:41.000 --> 56:43.000] 那也没问题,但是你要去
[56:43.000 --> 56:45.000] 追踪单个execution过程
[56:45.000 --> 56:47.000] 就是非侵入的情况下
[56:47.000 --> 56:49.000] 单独执行过程的
[56:49.000 --> 56:51.000] 就是说具体细化到
[56:51.000 --> 56:53.000] 每一个执行过程的函数信息
[56:53.000 --> 56:55.000] 我觉得Python系统
[56:55.000 --> 56:57.000] 好像还是没这方面的能力吧
[56:57.000 --> 56:59.000] 你说每一个函
[56:59.000 --> 57:03.000] 你说函数调用还是说
[57:03.000 --> 57:05.000] 每一个执行函数
[57:05.000 --> 57:07.000] 就是比如说
[57:07.000 --> 57:09.000] 我flask我起了一个接口
[57:09.000 --> 57:11.000] 对吧
[57:11.000 --> 57:13.000] 我起了一个接口
[57:13.000 --> 57:15.000] 那么我要去追踪我从接口
[57:15.000 --> 57:17.000] 这个请求进来
[57:17.000 --> 57:19.000] 到这个请求出去
[57:19.000 --> 57:21.000] 这个过程之中每一个函数的
[57:21.000 --> 57:23.000] 调用信息调用站
[57:23.000 --> 57:25.000] 然后包括涉及到的外部依赖
[57:25.000 --> 57:27.000] 如果你要以请求为单位的话
[57:27.000 --> 57:29.000] 它可能没有内置的这种信息
[57:29.000 --> 57:31.000] 就你没有办法
[57:31.000 --> 57:33.000] 对
[57:33.000 --> 57:35.000] 然后的话Java这方面是可以做到
[57:35.000 --> 57:37.000] 对可能
[57:37.000 --> 57:39.000] 我不知道Python里
[57:39.000 --> 57:41.000] 有没有一些第三方的东西
[57:41.000 --> 57:43.000] 但是默认肯定是没有
[57:43.000 --> 57:45.000] 就它只能告诉你发生了什么
[57:45.000 --> 57:47.000] 它不能把你这个请求
[57:47.000 --> 57:49.000] 只提出来跟它相关的部分
[57:49.000 --> 57:51.000] 对
[57:51.000 --> 57:53.000] 然后的话
[57:53.000 --> 57:55.000] 这是之前我在调试的时候
[57:55.000 --> 57:57.000] 我也遇到比较蛋疼的问题
[57:57.000 --> 57:59.000] 但其实我觉得
[58:01.000 --> 58:03.000] 我在想如果用CyberGrey的话
[58:03.000 --> 58:05.000] 这种能不能做
[58:05.000 --> 58:07.000] 感觉也
[58:07.000 --> 58:09.000] 感觉其实还
[58:09.000 --> 58:11.000] 不是特别适合
[58:11.000 --> 58:13.000] 这种还真不好做
[58:13.000 --> 58:15.000] 因为你的请求没有办法
[58:15.000 --> 58:17.000] 就是CyberGrey它是基于
[58:17.000 --> 58:19.000] 基于你的
[58:19.000 --> 58:21.000] 变量名或者说identifier来做
[58:21.000 --> 58:23.000] 就比如说你有一个A
[58:23.000 --> 58:25.000] 然后我能去追踪
[58:25.000 --> 58:27.000] A它是怎么变化
[58:27.000 --> 58:29.000] 但是你很多请求的话
[58:29.000 --> 58:31.000] 它是反复调用一个函数很多次
[58:31.000 --> 58:33.000] 你的request handler
[58:33.000 --> 58:35.000] 这种就
[58:35.000 --> 58:37.000] 至少不是很适合CyberGrey的场景
[58:37.000 --> 58:39.000] 反正
[58:39.000 --> 58:41.000] 但是你在一次请求里
[58:41.000 --> 58:43.000] 是可以
[58:43.000 --> 58:45.000] 就说你如果只是
[58:45.000 --> 58:47.000] 嗯
[58:47.000 --> 58:49.000] 这可能还得想一想
[58:49.000 --> 58:51.000] 其实你提的这个还是一个蛮有意思的场景
[58:51.000 --> 58:53.000] 对我也可以思考一下
[58:53.000 --> 58:55.000] 对而且核心的点是在于说
[58:55.000 --> 58:57.000] 这还是非侵入的
[58:57.000 --> 58:59.000] 非侵入
[58:59.000 --> 59:01.000] 目前至少在目前的思路里
[59:01.000 --> 59:03.000] 是没有这样做
[59:03.000 --> 59:05.000] 之后看能不能实现
[59:05.000 --> 59:07.000] 对就比如说我挂一个agent
[59:07.000 --> 59:09.000] 然后你的CyberBrain
[59:09.000 --> 59:11.000] 可以把相关的信息传出来
[59:11.000 --> 59:13.000] 传出来之后挂一个可视化的前端什么的都可以
[59:13.000 --> 59:15.000] 对
[59:15.000 --> 59:17.000] 现在还是你得改代码
[59:17.000 --> 59:19.000] 之后再看
[59:19.000 --> 59:21.000] 加油加油看好你
[59:21.000 --> 59:23.000] 10k star预定
[59:23.000 --> 59:25.000] 10k应该到不了
[59:25.000 --> 59:27.000] 我觉得
[59:27.000 --> 59:29.000] 反正我估计
[59:29.000 --> 59:31.000] 如果最后能做到
[59:31.000 --> 59:33.000] 我想要的效果
[59:33.000 --> 59:35.000] 5k应该是可以的
[59:35.000 --> 59:37.000] 反正我觉得
[59:37.000 --> 59:39.000] 做工作
[59:39.000 --> 59:41.000] 我最近超不想工作
[59:41.000 --> 59:43.000] 给你们讲吧我最近一个星期50行代码都写不了
[59:43.000 --> 59:45.000] 差不多
[59:45.000 --> 59:47.000] 对
[59:47.000 --> 59:49.000] 然后我现在开会
[59:49.000 --> 59:51.000] 开会写文档
[59:51.000 --> 59:53.000] 然后去跟人私逼
[59:53.000 --> 59:55.000] 然后做客户支持
[59:55.000 --> 59:57.000] 说实话我刚才为啥笑称
[59:57.000 --> 59:59.000] 我是高级外包就是这个原因
[59:59.000 --> 01:00:01.000] 反正我一周写的估计
[01:00:01.000 --> 01:00:03.000] 也多不了多少
[01:00:03.000 --> 01:00:05.000] 而且说实话
[01:00:05.000 --> 01:00:07.000] 我觉得现在陷入一个困局
[01:00:07.000 --> 01:00:09.000] 就是做
[01:00:09.000 --> 01:00:11.000] 做英发做的有点累了
[01:00:11.000 --> 01:00:13.000] 这不就是一个围城吗
[01:00:13.000 --> 01:00:15.000] 做业务的过程是说
[01:00:15.000 --> 01:00:17.000] 做业务没前途然后我要做英发
[01:00:19.000 --> 01:00:21.000] 你们做英发又抱怨
[01:00:21.000 --> 01:00:23.000] 做英发才是真正的
[01:00:23.000 --> 01:00:25.000] 关键什么叫有前途
[01:00:25.000 --> 01:00:27.000] 我们讨论一下这个问题
[01:00:27.000 --> 01:00:29.000] 什么叫有前途
[01:00:29.000 --> 01:00:31.000] 我觉得有前途很简单
[01:00:31.000 --> 01:00:33.000] 就是说是你跳出去的时候容易跳
[01:00:33.000 --> 01:00:35.000] 然后你的选择面多
[01:00:35.000 --> 01:00:37.000] 那做业务的就更那个了
[01:00:37.000 --> 01:00:39.000] 做业务的根本就没什么选择面
[01:00:39.000 --> 01:00:41.000] 你做英发的更没选择面啊
[01:00:41.000 --> 01:00:43.000] 你做英发的
[01:00:43.000 --> 01:00:45.000] 你有英发需求的
[01:00:45.000 --> 01:00:47.000] 基本上是中大型公司
[01:00:47.000 --> 01:00:49.000] 但是如果说你要是去了一个大型公司的话
[01:00:49.000 --> 01:00:51.000] 你跳出去根本没有
[01:00:51.000 --> 01:00:53.000] 能接的少啊
[01:00:53.000 --> 01:00:55.000] 你的选择面就基本上是在那几家公司
[01:00:55.000 --> 01:00:57.000] 然后你做英发的
[01:00:57.000 --> 01:00:59.000] 你的选择面就基本上是在那几家公司
[01:00:59.000 --> 01:01:01.000] 来来回回来来回回反复横跳
[01:01:03.000 --> 01:01:05.000] 每一个公司
[01:01:05.000 --> 01:01:07.000] 但每一个公司都需要做业务的
[01:01:07.000 --> 01:01:09.000] 而且
[01:01:09.000 --> 01:01:11.000] 而且你做了很多
[01:01:11.000 --> 01:01:13.000] 但是你要考虑
[01:01:13.000 --> 01:01:15.000] 业务内容
[01:01:15.000 --> 01:01:17.000] 就是你不可能说
[01:01:17.000 --> 01:01:19.000] 像我现在做的是房车业务
[01:01:19.000 --> 01:01:21.000] 不可能说有一个要做其他方面业务的人
[01:01:21.000 --> 01:01:23.000] 突然把我挖过去
[01:01:23.000 --> 01:01:25.000] 因为我完全没有那方面行业的背景
[01:01:25.000 --> 01:01:27.000] 我感觉做业务的话
[01:01:27.000 --> 01:01:29.000] 比较吃行业背景
[01:01:29.000 --> 01:01:31.000] 也是
[01:01:31.000 --> 01:01:33.000] 是的
[01:01:33.000 --> 01:01:35.000] 特别是金融这一块的也是
[01:01:35.000 --> 01:01:37.000] 还有很多做企业内部的ERP的
[01:01:37.000 --> 01:01:39.000] 之类的
[01:01:39.000 --> 01:01:41.000] 然后那个都是吃具体的
[01:01:41.000 --> 01:01:43.000] 就我感觉
[01:01:43.000 --> 01:01:45.000] 唯一大家公认都有前途的
[01:01:45.000 --> 01:01:47.000] 就是做一个正在风口上的业务
[01:01:47.000 --> 01:01:49.000] 比如说几年前的直播
[01:01:49.000 --> 01:01:51.000] 或者说区块链之类的
[01:01:51.000 --> 01:01:53.000] 这种大家公认肯定很有前途
[01:01:53.000 --> 01:01:55.000] 我觉得
[01:01:55.000 --> 01:01:57.000] 可以
[01:01:57.000 --> 01:01:59.000] 我其实是比较想转做那种数据分析
[01:01:59.000 --> 01:02:01.000] Data scientist
[01:02:01.000 --> 01:02:03.000] 对对
[01:02:03.000 --> 01:02:05.000] 类似这种
[01:02:05.000 --> 01:02:07.000] 这种的话就是跟业务的
[01:02:07.000 --> 01:02:09.000] 相关性不是说特别大
[01:02:09.000 --> 01:02:11.000] 可能也是需要了解
[01:02:11.000 --> 01:02:13.000] 但是没有那么大
[01:02:13.000 --> 01:02:15.000] 怎么说呢你要说跟业务相关性
[01:02:15.000 --> 01:02:17.000] 我觉得就我现在做的东西
[01:02:17.000 --> 01:02:19.000] 跟业务真的没有关系
[01:02:19.000 --> 01:02:21.000] 但它真的没有什么普及性
[01:02:21.000 --> 01:02:23.000] 有一个组要去
[01:02:23.000 --> 01:02:25.000] 要去跑一些integration test
[01:02:25.000 --> 01:02:27.000] 然后我们要给它架设这套东西
[01:02:27.000 --> 01:02:29.000] 那真的是跟业务一点关系都没有
[01:02:29.000 --> 01:02:31.000] 但是你能说它很普适吗
[01:02:31.000 --> 01:02:33.000] 我觉得一点都不普适
[01:02:33.000 --> 01:02:35.000] 对对
[01:02:35.000 --> 01:02:37.000] 也不能只看业务相关
[01:02:37.000 --> 01:02:39.000] 反正我觉得
[01:02:39.000 --> 01:02:41.000] 围城吧
[01:02:41.000 --> 01:02:43.000] 而且说实话这两年
[01:02:43.000 --> 01:02:45.000] Cloud native这些概念炒的火
[01:02:45.000 --> 01:02:47.000] 我觉得真的是有些时候觉得特别好玩
[01:02:47.000 --> 01:02:49.000] 那这说明
[01:02:49.000 --> 01:02:51.000] 你在风口上你就不要抱怨了
[01:02:51.000 --> 01:02:53.000] 没有
[01:02:53.000 --> 01:02:55.000] 其实我始终觉得
[01:02:55.000 --> 01:02:57.000] 像这些炒的概念始终是搭场的toy
[01:02:57.000 --> 01:02:59.000] 没关系啊
[01:02:59.000 --> 01:03:01.000] 别人认就行
[01:03:01.000 --> 01:03:03.000] 对我真的不觉得
[01:03:03.000 --> 01:03:05.000] 这个是风口
[01:03:05.000 --> 01:03:07.000] 别别别别别别别别
[01:03:07.000 --> 01:03:09.000] 我觉得
[01:03:09.000 --> 01:03:11.000] 我觉得我还是
[01:03:11.000 --> 01:03:13.000] 怎么说
[01:03:13.000 --> 01:03:15.000] 我觉得我出去
[01:03:15.000 --> 01:03:17.000] 我觉得现在
[01:03:17.000 --> 01:03:19.000] 就还是那句话
[01:03:19.000 --> 01:03:21.000] 围城吧
[01:03:21.000 --> 01:03:23.000] 反正就觉得很多东西
[01:03:23.000 --> 01:03:25.000] 特别是做内部的
[01:03:25.000 --> 01:03:27.000] 很多东西
[01:03:27.000 --> 01:03:29.000] 做公务员的
[01:03:29.000 --> 01:03:31.000] 可能是做公务员的通病吧
[01:03:31.000 --> 01:03:33.000] 对然后可能就是说
[01:03:33.000 --> 01:03:35.000] 你出去之后
[01:03:35.000 --> 01:03:37.000] 大家觉得
[01:03:37.000 --> 01:03:39.000] 怎么说我想想
[01:03:39.000 --> 01:03:41.000] 就去各种内部的东西
[01:03:41.000 --> 01:03:43.000] 做客户支持
[01:03:43.000 --> 01:03:45.000] 还有各种各样的CPU
[01:03:45.000 --> 01:03:47.000] 这种类似的感觉
[01:03:47.000 --> 01:03:49.000] 就是我们现在其实
[01:03:49.000 --> 01:03:51.000] 我们自炒你猜叫什么
[01:03:51.000 --> 01:03:53.000] 高级外包吗
[01:03:53.000 --> 01:03:55.000] 不是除了高级外包你猜
[01:03:55.000 --> 01:03:57.000] 不知道
[01:03:57.000 --> 01:03:59.000] 叫做高级客服工程师
[01:03:59.000 --> 01:04:01.000] 天真一片
[01:04:01.000 --> 01:04:03.000] 所以你们是2B业务比较多吗
[01:04:03.000 --> 01:04:05.000] 对啊
[01:04:05.000 --> 01:04:07.000] 我们这些产品2C没用啊
[01:04:07.000 --> 01:04:09.000] OKOK那怪不得
[01:04:09.000 --> 01:04:11.000] 对我们这些
[01:04:11.000 --> 01:04:13.000] 对我
[01:04:13.000 --> 01:04:15.000] 那说云产品呢你说不管是容器
[01:04:15.000 --> 01:04:17.000] 还是ECS或是其他的
[01:04:17.000 --> 01:04:19.000] 你ECS可能还好
[01:04:19.000 --> 01:04:21.000] 有些个人用户拿来建个网站
[01:04:21.000 --> 01:04:23.000] 但是你比如说像大一点的
[01:04:23.000 --> 01:04:25.000] 像容器像全联路
[01:04:25.000 --> 01:04:27.000] 那个OpenTracing
[01:04:27.000 --> 01:04:29.000] 或者是像各种DB
[01:04:29.000 --> 01:04:31.000] 然后再比如说像之前
[01:04:31.000 --> 01:04:33.000] 阿力PR很火的
[01:04:33.000 --> 01:04:35.000] 那个什么
[01:04:35.000 --> 01:04:37.000] 什么DB来着OceanDB
[01:04:37.000 --> 01:04:39.000] 你想这些东西哪些是2C能玩得起的
[01:04:39.000 --> 01:04:41.000] 就我之前
[01:04:41.000 --> 01:04:43.000] 我还听到过这样一种说法
[01:04:43.000 --> 01:04:45.000] 就是说2C的业务
[01:04:45.000 --> 01:04:47.000] 你作为一个工程师
[01:04:47.000 --> 01:04:49.000] 你就随时被踢掉
[01:04:49.000 --> 01:04:51.000] 都没有问题
[01:04:51.000 --> 01:04:53.000] 马上就有人顶上
[01:04:53.000 --> 01:04:55.000] 那你2B的话你可以跟客户建立良好的关系
[01:04:55.000 --> 01:04:57.000] 在客户那里露脸
[01:04:57.000 --> 01:04:59.000] 然后你就有一帮客户跟着你了
[01:04:59.000 --> 01:05:01.000] 实际上并不是
[01:05:01.000 --> 01:05:03.000] 至少在云这边不会是
[01:05:03.000 --> 01:05:05.000] 因为说实话我们研发是不会直接冲在客户前面的
[01:05:05.000 --> 01:05:07.000] 但是实际上也是要成为大姨的
[01:05:07.000 --> 01:05:09.000] 啊OK
[01:05:09.000 --> 01:05:11.000] 对冲在最前面的我们是有专门的职位
[01:05:11.000 --> 01:05:13.000] 叫做TAM
[01:05:13.000 --> 01:05:15.000] 或者是叫做PDSA
[01:05:15.000 --> 01:05:17.000] TAM的话就是偏交付那边的
[01:05:17.000 --> 01:05:19.000] PDSA就是解决方案架构师
[01:05:19.000 --> 01:05:21.000] 就是说你客户要上云
[01:05:21.000 --> 01:05:23.000] 我去给设计一套整套的方案上来
[01:05:23.000 --> 01:05:25.000] 哦对
[01:05:25.000 --> 01:05:27.000] 架构师好像还挺吃香的
[01:05:27.000 --> 01:05:29.000] 架构师他其实像阿力迎这边
[01:05:29.000 --> 01:05:31.000] 有售前售中售后吧
[01:05:31.000 --> 01:05:33.000] 都有
[01:05:33.000 --> 01:05:35.000] 售前还有
[01:05:35.000 --> 01:05:37.000] 每个售后售前售中都有架构师
[01:05:37.000 --> 01:05:39.000] 对就是说你整个
[01:05:39.000 --> 01:05:41.000] 因为我们是一project嘛
[01:05:41.000 --> 01:05:43.000] 就是整个大的项目
[01:05:43.000 --> 01:05:45.000] 你一个企业就是你要上云
[01:05:45.000 --> 01:05:51.000] 那么我们最开始会有PDSA去解决你整个产品线中的问题
[01:05:51.000 --> 01:05:53.000] 然后中期然后你决定要上云
[01:05:53.000 --> 01:05:55.000] 中期的话
[01:05:55.000 --> 01:05:57.000] 那么你的SA就架构师
[01:05:57.000 --> 01:05:59.000] 就去针对具体项目中的细节
[01:05:59.000 --> 01:06:01.000] 还有就是说是TAM去落地
[01:06:01.000 --> 01:06:03.000] 这一系列都会推动
[01:06:03.000 --> 01:06:05.000] 因为其实我
[01:06:05.000 --> 01:06:07.000] 因为其实我还是比较难想象
[01:06:07.000 --> 01:06:09.000] 就是
[01:06:09.000 --> 01:06:11.000] 就是你们
[01:06:11.000 --> 01:06:13.000] 有好几个架构师
[01:06:13.000 --> 01:06:15.000] 要怎么分工这种情况
[01:06:15.000 --> 01:06:17.000] 但一般情况下一个大的项目是一个嘛
[01:06:17.000 --> 01:06:19.000] 对我觉得
[01:06:19.000 --> 01:06:21.000] 其实这个事情也挺有意思
[01:06:21.000 --> 01:06:23.000] 就因为在Google里好像
[01:06:23.000 --> 01:06:25.000] 我没有听到谁是架构师这种说法
[01:06:25.000 --> 01:06:29.000] 就其实JFDIN也没有人说他就是架构师
[01:06:29.000 --> 01:06:31.000] 他就是JFDIN
[01:06:31.000 --> 01:06:33.000] 就
[01:06:33.000 --> 01:06:35.000] 对所以这个差异还挺有意思
[01:06:35.000 --> 01:06:37.000] 你们觉得是为什么
[01:06:37.000 --> 01:06:39.000] 这样子
[01:06:39.000 --> 01:06:41.000] 说实话我也不太清楚
[01:06:41.000 --> 01:06:43.000] 我感觉国内更需要这种东西
[01:06:43.000 --> 01:06:45.000] 为什么呢
[01:06:45.000 --> 01:06:47.000] 就我不太清楚
[01:06:47.000 --> 01:06:49.000] 我就感觉
[01:06:49.000 --> 01:06:51.000] 我老师给我带来的一种感觉
[01:06:51.000 --> 01:06:53.000] 就是他好像他有一个什么需求
[01:06:53.000 --> 01:06:55.000] 他不会自己去
[01:06:55.000 --> 01:06:57.000] 他不会自己去去去看
[01:06:57.000 --> 01:06:59.000] 就是需要什么东西
[01:06:59.000 --> 01:07:01.000] 他会去让我去问别人
[01:07:01.000 --> 01:07:03.000] 就是比方说这个
[01:07:03.000 --> 01:07:05.000] 当时买服务器吧
[01:07:05.000 --> 01:07:07.000] 他不会说让我去调研一下
[01:07:07.000 --> 01:07:09.000] 就是这个服务器是什么样的
[01:07:09.000 --> 01:07:11.000] 他会直接让我说就是你去
[01:07:11.000 --> 01:07:13.000] 阿里云那边去咨询一下
[01:07:13.000 --> 01:07:15.000] 你去华为云那边去咨询一下
[01:07:15.000 --> 01:07:17.000] 他会这样跟我说
[01:07:17.000 --> 01:07:19.000] 所以说就导致可能
[01:07:19.000 --> 01:07:21.000] 就是我就是这些云厂的话
[01:07:21.000 --> 01:07:23.000] 他可能被迫就需要一些
[01:07:23.000 --> 01:07:25.000] 这种
[01:07:25.000 --> 01:07:27.000] 授权授后所谓的
[01:07:27.000 --> 01:07:29.000] 就是这种不同不同那个时间段的
[01:07:29.000 --> 01:07:31.000] 这种架构师
[01:07:31.000 --> 01:07:33.000] 来负责对接我们这种
[01:07:35.000 --> 01:07:37.000] 我是这种感觉
[01:07:37.000 --> 01:07:39.000] 架构师不太会直接跟你对接吧
[01:07:39.000 --> 01:07:41.000] 这个
[01:07:43.000 --> 01:07:45.000] 但是他会叫
[01:07:45.000 --> 01:07:47.000] 他会起这么一个名字你知道吗
[01:07:47.000 --> 01:07:49.000] 就是你可以去阿里云那边去
[01:07:49.000 --> 01:07:51.000] 所以你就感觉跟你对接的人
[01:07:51.000 --> 01:07:53.000] 是一个比较高level的人
[01:07:53.000 --> 01:07:55.000] 然后你就更安心了
[01:07:55.000 --> 01:07:57.000] 呵呵呵
[01:07:57.000 --> 01:07:59.000] 对对对
[01:07:59.000 --> 01:08:01.000] 其实我们老师
[01:08:01.000 --> 01:08:03.000] 应该也是这么想的
[01:08:03.000 --> 01:08:05.000] 就是他们会感觉这样的话可能会
[01:08:05.000 --> 01:08:07.000] 专业一点吧我不太懂
[01:08:07.000 --> 01:08:09.000] 但是我其实觉得没什么意义
[01:08:09.000 --> 01:08:11.000] 反正我觉得
[01:08:11.000 --> 01:08:13.000] 怎么说吧我觉得就
[01:08:13.000 --> 01:08:15.000] 反正我觉得
[01:08:15.000 --> 01:08:17.000] 做2B这块的话
[01:08:17.000 --> 01:08:19.000] 有挑战
[01:08:19.000 --> 01:08:21.000] 挑战是有挑战但是说实话
[01:08:21.000 --> 01:08:23.000] 具体的
[01:08:23.000 --> 01:08:25.000] 具体的
[01:08:25.000 --> 01:08:27.000] 就是破事
[01:08:27.000 --> 01:08:29.000] 也特别多
[01:08:29.000 --> 01:08:31.000] 不过我还挺
[01:08:31.000 --> 01:08:33.000] 倾向于去做一些2B的
[01:08:33.000 --> 01:08:35.000] 一些东西
[01:08:35.000 --> 01:08:37.000] 我之前是关注的友赞
[01:08:37.000 --> 01:08:39.000] 我感觉他们整个那种
[01:08:39.000 --> 01:08:41.000] 做的还挺好的
[01:08:41.000 --> 01:08:43.000] 友赞不是黑料很多吗
[01:08:43.000 --> 01:08:45.000] 那个著名996企业
[01:08:45.000 --> 01:08:47.000] 然后
[01:08:47.000 --> 01:08:49.000] 黑不黑的
[01:08:49.000 --> 01:08:51.000] 但是他们的一些
[01:08:51.000 --> 01:08:53.000] 规范什么的
[01:08:53.000 --> 01:08:55.000] 感觉还挺
[01:08:55.000 --> 01:08:57.000] 是指什么方面的规范
[01:08:57.000 --> 01:08:59.000] 就是怎么写代码方面的
[01:08:59.000 --> 01:09:01.000] 不是最近友赞那个CEO
[01:09:01.000 --> 01:09:03.000] 就是说什么把他们的设计部门
[01:09:03.000 --> 01:09:05.000] 改名叫什么玩意
[01:09:05.000 --> 01:09:07.000] 改名审美缺失部
[01:09:07.000 --> 01:09:09.000] 呵呵
[01:09:09.000 --> 01:09:11.000] 挺搞笑的
[01:09:11.000 --> 01:09:13.000] 对我觉得
[01:09:13.000 --> 01:09:15.000] 说实话我觉得这种事
[01:09:15.000 --> 01:09:17.000] 有一点点
[01:09:17.000 --> 01:09:21.000] 就我觉得有一点头疼
[01:09:21.000 --> 01:09:23.000] 一头脚疼一脚的感觉吧
[01:09:23.000 --> 01:09:25.000] 但我觉得
[01:09:25.000 --> 01:09:27.000] 你像2B的话
[01:09:27.000 --> 01:09:29.000] 一般都是针对某一个企业
[01:09:29.000 --> 01:09:31.000] 或者某一类企业
[01:09:31.000 --> 01:09:33.000] 但是2C的话
[01:09:33.000 --> 01:09:35.000] 就有点摸不着头脑
[01:09:35.000 --> 01:09:37.000] 就是你要去考虑你的用户群
[01:09:37.000 --> 01:09:39.000] 然后你还要去
[01:09:39.000 --> 01:09:41.000] 做一些调整之类的
[01:09:41.000 --> 01:09:43.000] 我感觉那个事更多
[01:09:43.000 --> 01:09:45.000] 其实我觉得2B事情更多
[01:09:45.000 --> 01:09:49.000] 对2B的东西会更明确一点
[01:09:49.000 --> 01:09:51.000] 说实话我也觉得
[01:09:51.000 --> 01:09:53.000] 我也觉得有这种事情
[01:09:53.000 --> 01:09:55.000] 但是
[01:09:55.000 --> 01:09:57.000] 其实真不一定
[01:09:57.000 --> 01:09:59.000] 2B的事情很多
[01:09:59.000 --> 01:10:01.000] 2B的事情非常多
[01:10:01.000 --> 01:10:03.000] 因为说实话
[01:10:03.000 --> 01:10:05.000] 就说
[01:10:05.000 --> 01:10:07.000] 2B的话
[01:10:07.000 --> 01:10:09.000] 最主要是你每一个
[01:10:09.000 --> 01:10:11.000] 就说特别像我们做云产品的
[01:10:11.000 --> 01:10:13.000] 问题就在于说
[01:10:13.000 --> 01:10:15.000] 你具体的
[01:10:15.000 --> 01:10:17.000] 我想怎么说
[01:10:17.000 --> 01:10:19.000] 就是
[01:10:19.000 --> 01:10:21.000] 你每一个东西
[01:10:21.000 --> 01:10:23.000] 你各个企业的东西
[01:10:23.000 --> 01:10:25.000] 你各个企业
[01:10:25.000 --> 01:10:27.000] 他们之间的
[01:10:27.000 --> 01:10:29.000] 场景
[01:10:29.000 --> 01:10:31.000] 结构或者其他东西
[01:10:31.000 --> 01:10:33.000] 都是不一样的
[01:10:33.000 --> 01:10:35.000] 但是你最开始的时候
[01:10:35.000 --> 01:10:37.000] 你肯定不是说我去给你
[01:10:37.000 --> 01:10:39.000] 做每个企业做定制
[01:10:39.000 --> 01:10:41.000] 你肯定是说我先推出一个
[01:10:41.000 --> 01:10:43.000] 新的原本来做
[01:10:43.000 --> 01:10:45.000] 那么你这种情况下
[01:10:45.000 --> 01:10:47.000] 你去2B的时候
[01:10:47.000 --> 01:10:49.000] 你就基本上不可避免的
[01:10:49.000 --> 01:10:51.000] 就是说你要去针对不同的客户做调整
[01:10:51.000 --> 01:10:53.000] 乃至于说你要去
[01:10:53.000 --> 01:10:55.000] 针对于不同的客户进行
[01:10:55.000 --> 01:10:57.000] on call
[01:10:57.000 --> 01:10:59.000] 保护之类的
[01:10:59.000 --> 01:11:01.000] 对
[01:11:01.000 --> 01:11:03.000] 我感觉我们
[01:11:03.000 --> 01:11:05.000] 我现在做的就有点类似于2B
[01:11:05.000 --> 01:11:07.000] 然后只是说客户是Google里面的其他组
[01:11:07.000 --> 01:11:09.000] 就
[01:11:09.000 --> 01:11:11.000] Google组真的有很多奇奇怪怪的需求
[01:11:11.000 --> 01:11:13.000] 然后但是
[01:11:13.000 --> 01:11:15.000] 2C的话你就抓住主要的部分就行了
[01:11:15.000 --> 01:11:17.000] 比如说你70%的用户
[01:11:17.000 --> 01:11:19.000] 他都喜欢你的app是长这样的
[01:11:19.000 --> 01:11:21.000] 那另外30%不喜欢
[01:11:21.000 --> 01:11:23.000] 那也无所谓的吧
[01:11:23.000 --> 01:11:25.000] 你把主要的部分抓住就行
[01:11:25.000 --> 01:11:27.000] 对
[01:11:27.000 --> 01:11:29.000] 反正就是主要是2B的话
[01:11:29.000 --> 01:11:31.000] 2B就很多东西
[01:11:31.000 --> 01:11:33.000] 很多东西你就是需要去
[01:11:33.000 --> 01:11:35.000] 往往的去做包括乃至于说
[01:11:35.000 --> 01:11:37.000] 你大客户来了
[01:11:37.000 --> 01:11:39.000] 要做重点
[01:11:39.000 --> 01:11:41.000] 就是要做促销了
[01:11:41.000 --> 01:11:43.000] 你说你是去保不保呢
[01:11:43.000 --> 01:11:45.000] 对吧
[01:11:45.000 --> 01:11:47.000] 你是去不去中保呢
[01:11:47.000 --> 01:11:49.000] 这种东西都是很现实的问题
[01:11:49.000 --> 01:11:51.000] 好吧那我们今天闲聊
[01:11:51.000 --> 01:11:53.000] 差不多就到这里
[01:11:53.000 --> 01:11:55.000] 然后大家看看有什么推荐的东西
[01:11:55.000 --> 01:11:57.000] 那信涛你有什么要推荐的
[01:11:57.000 --> 01:11:59.000] 要不你先说
[01:11:59.000 --> 01:12:01.000] 推荐的东西
[01:12:01.000 --> 01:12:03.000] 我推荐一个
[01:12:03.000 --> 01:12:05.000] 冰抗的吧
[01:12:05.000 --> 01:12:07.000] 就是复式记账的软件
[01:12:07.000 --> 01:12:09.000] 最近在用那个
[01:12:09.000 --> 01:12:11.000] 然后还是用python写的
[01:12:11.000 --> 01:12:13.000] 我可以简单介绍一下
[01:12:13.000 --> 01:12:15.000] 那个复式的记账
[01:12:15.000 --> 01:12:17.000] 就是一般我们用记账软件
[01:12:17.000 --> 01:12:19.000] 不都是
[01:12:19.000 --> 01:12:21.000] 今天花了多少钱
[01:12:21.000 --> 01:12:23.000] 昨天花了多少钱
[01:12:23.000 --> 01:12:25.000] 但这个账你回头来看的话
[01:12:25.000 --> 01:12:27.000] 可能意义不是很大
[01:12:27.000 --> 01:12:29.000] 复式记账就是说
[01:12:29.000 --> 01:12:31.000] 你所有的账加起来都是平的
[01:12:31.000 --> 01:12:33.000] 就是
[01:12:33.000 --> 01:12:35.000] 会计里面的一个
[01:12:35.000 --> 01:12:37.000] 基本的原理
[01:12:37.000 --> 01:12:39.000] 所有的账加起来都是平的
[01:12:39.000 --> 01:12:41.000] 比如说你今天
[01:12:41.000 --> 01:12:43.000] 吃饭花了20块钱
[01:12:43.000 --> 01:12:45.000] 那你又可以开一个
[01:12:45.000 --> 01:12:47.000] expense
[01:12:47.000 --> 01:12:49.000] 那个类目下面的
[01:12:49.000 --> 01:12:51.000] 吃饭付的
[01:12:51.000 --> 01:12:53.000] 然后记一个减20
[01:12:53.000 --> 01:12:55.000] 然后银行卡里
[01:12:55.000 --> 01:12:57.000] 吃饭是加20
[01:12:57.000 --> 01:12:59.000] 然后银行卡减20
[01:12:59.000 --> 01:13:01.000] 这样的话你的输出
[01:13:01.000 --> 01:13:03.000] 银行卡跟吃饭
[01:13:03.000 --> 01:13:05.000] 加起来就是零
[01:13:05.000 --> 01:13:07.000] 就是平的
[01:13:07.000 --> 01:13:09.000] 然后比如说你工资收入
[01:13:09.000 --> 01:13:11.000] 你可以就是加一个income
[01:13:11.000 --> 01:13:13.000] 那个类目
[01:13:13.000 --> 01:13:15.000] 然后你的银行卡加一万
[01:13:15.000 --> 01:13:17.000] 这样的话收入
[01:13:17.000 --> 01:13:19.000] 加起来也是平的
[01:13:19.000 --> 01:13:21.000] 这样有一个好处就是
[01:13:21.000 --> 01:13:23.000] 你如果要看
[01:13:23.000 --> 01:13:25.000] 你吃饭一共花了多少钱
[01:13:25.000 --> 01:13:27.000] 你可以把这个支出
[01:13:27.000 --> 01:13:29.000] 所有的这个类目加起来看一下
[01:13:29.000 --> 01:13:31.000] 然后对账的话
[01:13:31.000 --> 01:13:33.000] 你只要每个月
[01:13:33.000 --> 01:13:35.000] 看一下
[01:13:35.000 --> 01:13:37.000] 你那个账门里面
[01:13:37.000 --> 01:13:39.000] 余额跟你实际卡里面
[01:13:39.000 --> 01:13:41.000] 的余额是不是能对起来
[01:13:41.000 --> 01:13:43.000] 就可以了
[01:13:43.000 --> 01:13:45.000] 因为你每一笔支出跟收入
[01:13:45.000 --> 01:13:47.000] 都是持平的
[01:13:47.000 --> 01:13:49.000] 这样的话肯定金额上会对起来
[01:13:51.000 --> 01:13:53.000] 然后它是
[01:13:53.000 --> 01:13:55.000] 这个软件工作的方式是一个纯文本
[01:13:55.000 --> 01:13:57.000] 就是你可以用Win编辑这个文本
[01:13:57.000 --> 01:13:59.000] 或者用其他的
[01:13:59.000 --> 01:14:01.000] 就是你一直记按照它的格式
[01:14:01.000 --> 01:14:03.000] 一笔一笔的记
[01:14:03.000 --> 01:14:05.000] 然后它官方有一个
[01:14:05.000 --> 01:14:07.000] web界面的客户端叫Fava
[01:14:07.000 --> 01:14:09.000] 然后就是你Fava后面
[01:14:09.000 --> 01:14:11.000] 跟一个文件每次就给你打一个界面
[01:14:11.000 --> 01:14:13.000] 你可以在页面上看一些统计数据
[01:14:13.000 --> 01:14:15.000] 也可以用界面来记账
[01:14:15.000 --> 01:14:17.000] 基于纯文本就有一个好处就是
[01:14:17.000 --> 01:14:19.000] 你每个月可以把
[01:14:19.000 --> 01:14:21.000] 信用卡的账单下载下来
[01:14:21.000 --> 01:14:23.000] 然后写一个脚本把它转换成
[01:14:23.000 --> 01:14:25.000] 这个Bing account
[01:14:25.000 --> 01:14:27.000] 然后你就可以直接导进去就可以了
[01:14:27.000 --> 01:14:29.000] 非常的方便
[01:14:29.000 --> 01:14:31.000] 你可以尝试一下
[01:14:31.000 --> 01:14:33.000] 然后这个东西我觉得最大的好处就是
[01:14:33.000 --> 01:14:35.000] 它特别的麻烦
[01:14:35.000 --> 01:14:37.000] 然后有时候你想花一笔钱买一杯咖啡
[01:14:37.000 --> 01:14:39.000] 还要记就算了
[01:14:39.000 --> 01:14:41.000] 就不想花了
[01:14:41.000 --> 01:14:43.000] 我觉得这是个很现实的问题
[01:14:43.000 --> 01:14:45.000] 我觉得记账不在于我用什么工具
[01:14:45.000 --> 01:14:47.000] 而是在于我真的不想记啊
[01:14:47.000 --> 01:14:49.000] 是啊
[01:14:49.000 --> 01:14:51.000] 对
[01:14:51.000 --> 01:14:53.000] 如果用信用卡的话
[01:14:53.000 --> 01:14:55.000] 还好
[01:14:55.000 --> 01:14:57.000] 用信用卡的话直接导进去
[01:14:57.000 --> 01:14:59.000] 然后公司的那个
[01:14:59.000 --> 01:15:01.000] 就是
[01:15:01.000 --> 01:15:03.000] 公司的那个工资发的一般都比较复杂嘛
[01:15:03.000 --> 01:15:05.000] 因为除了到手工资
[01:15:05.000 --> 01:15:07.000] 还有无限一金
[01:15:07.000 --> 01:15:09.000] 还有你的个人所得税
[01:15:09.000 --> 01:15:11.000] 然后你就可以建立六个账户
[01:15:11.000 --> 01:15:13.000] 一个就是公司的账户
[01:15:13.000 --> 01:15:15.000] 一个是你的账户
[01:15:15.000 --> 01:15:17.000] 然后是公积金账户
[01:15:17.000 --> 01:15:19.000] 养老金账户
[01:15:19.000 --> 01:15:21.000] 跟税务账户
[01:15:21.000 --> 01:15:23.000] 然后可以直接到其他账户里
[01:15:23.000 --> 01:15:25.000] 就是有公司给你交的税
[01:15:25.000 --> 01:15:27.000] 跟你自己交的那个
[01:15:27.000 --> 01:15:29.000] 住房工金之类的
[01:15:29.000 --> 01:15:31.000] 这样的话你每年就可以看到你
[01:15:31.000 --> 01:15:33.000] 交了多少养老金
[01:15:33.000 --> 01:15:35.000] 交了多少公积金
[01:15:35.000 --> 01:15:37.000] 然后你账户里的钱都是平的
[01:15:37.000 --> 01:15:39.000] 你可以拿你交的所有的公积金的钱
[01:15:39.000 --> 01:15:41.000] 跟你的公积金账户对一下
[01:15:41.000 --> 01:15:43.000] 应该是可以对起来
[01:15:43.000 --> 01:15:45.000] 然后假如说
[01:15:45.000 --> 01:15:47.000] 公司一般都比较固定嘛
[01:15:47.000 --> 01:15:49.000] 就是很多日常的记账
[01:15:49.000 --> 01:15:51.000] 就是比如说你把那个比例都算好
[01:15:51.000 --> 01:15:53.000] 你只要把到手的工资输进去
[01:15:53.000 --> 01:15:57.000] 然后自动的把其他的金额都算好就可以了
[01:15:57.000 --> 01:15:59.000] 感觉有点
[01:15:59.000 --> 01:16:01.000] 感觉就是在美国这边需要的是
[01:16:01.000 --> 01:16:03.000] 报税的软件
[01:16:03.000 --> 01:16:05.000] 就
[01:16:05.000 --> 01:16:07.000] 有点像
[01:16:07.000 --> 01:16:09.000] 听你的描述
[01:16:09.000 --> 01:16:11.000] 是的
[01:16:11.000 --> 01:16:13.000] 在官方的账户
[01:16:13.000 --> 01:16:15.000] Github账号下面有
[01:16:15.000 --> 01:16:17.000] 两个比较重要的
[01:16:17.000 --> 01:16:19.000] 账户
[01:16:19.000 --> 01:16:21.000] 一个是BinContent
[01:16:21.000 --> 01:16:23.000] 一个是Web界面的发了
[01:16:23.000 --> 01:16:25.000] 然后另一个就是Plugin的账户
[01:16:25.000 --> 01:16:27.000] Plugin里面基本都是一些
[01:16:27.000 --> 01:16:29.000] 帮你自动计算税的一些
[01:16:29.000 --> 01:16:31.000] 我感觉都是美国那边需要的
[01:16:31.000 --> 01:16:33.000] 美国报税可麻烦了
[01:16:33.000 --> 01:16:35.000] 我第一年都没有自己搞
[01:16:35.000 --> 01:16:37.000] 还好公司第一年是有
[01:16:37.000 --> 01:16:39.000] 有律师帮你搞
[01:16:39.000 --> 01:16:41.000] 然后最后给我的那个
[01:16:41.000 --> 01:16:43.000] 文件我操好厚一沓
[01:16:43.000 --> 01:16:45.000] 美国是自己申报税对吧
[01:16:45.000 --> 01:16:47.000] 对啊
[01:16:47.000 --> 01:16:49.000] 你要填税单
[01:16:49.000 --> 01:16:51.000] 然后给税务局寄过去
[01:16:51.000 --> 01:16:53.000] 对
[01:16:53.000 --> 01:16:55.000] 我感觉就是国内不是
[01:16:55.000 --> 01:16:57.000] 是用那个App吗
[01:16:57.000 --> 01:16:59.000] 那个还挺好的
[01:16:59.000 --> 01:17:01.000] 那个是国内是你基本上
[01:17:01.000 --> 01:17:03.000] 自己就会
[01:17:03.000 --> 01:17:05.000] 它是统一帮你寄
[01:17:05.000 --> 01:17:07.000] 然后你的那个
[01:17:07.000 --> 01:17:09.000] 对基本上你每年打开一次
[01:17:09.000 --> 01:17:11.000] 看一下你金额对不对就可以
[01:17:11.000 --> 01:17:13.000] 一般都没什么问题
[01:17:13.000 --> 01:17:15.000] 除非
[01:17:15.000 --> 01:17:17.000] 对
[01:17:17.000 --> 01:17:19.000] 对
[01:17:19.000 --> 01:17:21.000] 然后你有什么
[01:17:21.000 --> 01:17:23.000] 比如说你租房或者
[01:17:23.000 --> 01:17:25.000] 买房子或者
[01:17:25.000 --> 01:17:27.000] 有善养老人什么的
[01:17:27.000 --> 01:17:29.000] 都可以减一部分税
[01:17:29.000 --> 01:17:31.000] 所以从减税
[01:17:31.000 --> 01:17:33.000] 这方面看国家是希望你
[01:17:33.000 --> 01:17:35.000] 买房子生孩子
[01:17:35.000 --> 01:17:37.000] 我推荐一个
[01:17:37.000 --> 01:17:39.000] 微软新出的东西
[01:17:39.000 --> 01:17:41.000] 然后Posimo
[01:17:41.000 --> 01:17:43.000] 应该是Posimonitor
[01:17:43.000 --> 01:17:45.000] 的意思
[01:17:45.000 --> 01:17:47.000] 它其实是S-Trace的一个升级
[01:17:47.000 --> 01:17:49.000] 就是说是一个更好的升级版
[01:17:49.000 --> 01:17:51.000] 然后本体思路
[01:17:51.000 --> 01:17:53.000] 还是基于EPF来做的
[01:17:53.000 --> 01:17:55.000] 但是它的那个中单和交互
[01:17:55.000 --> 01:17:57.000] 更为友好而且功能可能还会更强大一些
[01:17:57.000 --> 01:17:59.000] 但是这是新出的东西
[01:17:59.000 --> 01:18:01.000] 我自己看了下感觉还不错
[01:18:01.000 --> 01:18:03.000] 现在微软都开始做
[01:18:03.000 --> 01:18:05.000] Linux密合的Trace了吗
[01:18:05.000 --> 01:18:07.000] Windows是一个
[01:18:07.000 --> 01:18:09.000] Linux distribution
[01:18:09.000 --> 01:18:11.000] 对我觉得
[01:18:11.000 --> 01:18:13.000] 是这样的
[01:18:13.000 --> 01:18:15.000] 微软现在是最大的Linux
[01:18:15.000 --> 01:18:17.000] 小白你刚才是要
[01:18:17.000 --> 01:18:19.000] 也要说对吧
[01:18:19.000 --> 01:18:21.000] 对因为我
[01:18:21.000 --> 01:18:23.000] 最近在帮一个翻译组
[01:18:23.000 --> 01:18:25.000] download的视频
[01:18:25.000 --> 01:18:27.000] 刚好用到了一个
[01:18:27.000 --> 01:18:29.000] 就是我是download的
[01:18:29.000 --> 01:18:31.000] YouTube视频嘛然后
[01:18:31.000 --> 01:18:33.000] 之前试过很多工具
[01:18:33.000 --> 01:18:35.000] 也有那种网页下载
[01:18:35.000 --> 01:18:37.000] 但是都太慢了
[01:18:37.000 --> 01:18:39.000] 所以我就在网上找了一个工具行
[01:18:39.000 --> 01:18:41.000] 命令行的那种工具
[01:18:41.000 --> 01:18:43.000] 叫YouTube-DL
[01:18:43.000 --> 01:18:45.000] 就是YouTube-download
[01:18:45.000 --> 01:18:47.000] 它缩写成DL
[01:18:47.000 --> 01:18:49.000] 对我看了下正好它是用
[01:18:49.000 --> 01:18:51.000] Python写的
[01:18:51.000 --> 01:18:53.000] 对这个我用了蛮久
[01:18:53.000 --> 01:18:55.000] 对
[01:18:55.000 --> 01:18:57.000] 还有一个叫
[01:18:57.000 --> 01:18:59.000] You get
[01:18:59.000 --> 01:19:01.000] while you get
[01:19:01.000 --> 01:19:03.000] 差不多
[01:19:03.000 --> 01:19:05.000] 我也用了蛮久
[01:19:05.000 --> 01:19:07.000] 你们用这个测网速
[01:19:07.000 --> 01:19:09.000] YouTube-DL是不是
[01:19:09.000 --> 01:19:11.000] 以语文为活的
[01:19:11.000 --> 01:19:13.000] 啊是吗
[01:19:13.000 --> 01:19:15.000] 没有吧
[01:19:15.000 --> 01:19:17.000] 行
[01:19:17.000 --> 01:19:19.000] 那我们今天节目就
[01:19:19.000 --> 01:19:21.000] 差不多这样
[01:19:21.000 --> 01:19:23.000] 然后就
[01:19:23.000 --> 01:19:25.000] 想不到有什么结束语啊
[01:19:25.000 --> 01:19:27.000] 然后就祝大家身体健康
[01:19:27.000 --> 01:19:29.000] 然后
[01:19:29.000 --> 01:19:31.000] 就是
[01:19:31.000 --> 01:19:33.000] 对好
[01:19:33.000 --> 01:19:35.000] 那就这样
[01:19:35.000 --> 01:19:37.000] 大家拜拜
[01:19:37.000 --> 01:20:03.000] 拜拜
[01:20:07.000 --> 01:20:13.000] 我们下期再见
